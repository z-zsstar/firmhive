{"name": "printenv-env-var-exposure", "file_path": "bin/busybox", "location": "bin/busybox (printenv_main)", "risk_score": 6.5, "confidence": 7.0, "description": "The printenv_main function directly iterates through and prints all environment variables without any filtering or validation mechanism, which exposes all environment variable contents. If an attacker can control the program's execution environment, sensitive information may be leaked.", "code_snippet": "lea rdi, [environ]\nmov rdi, [rdi]\ncall puts", "link_identifiers": ["printenv_main", "environ"], "notes": "Although the printenv command itself is designed to display environment variables, executing it in a privileged context may pose information disclosure risks. It is recommended to verify the calling environment."}
{"name": "printenv-getenv-usage", "file_path": "bin/busybox", "location": "bin/busybox (printenv_main)", "risk_score": 7.0, "confidence": 7.25, "description": "When called with parameters, printenv searches for specific environment variables. The getenv function directly retrieves variable values without input validation. If the variable values are used for sensitive operations, it may pose injection risks.", "code_snippet": "mov rdi, [argv]\ncall getenv\nmov rdi, rax\ncall puts", "link_identifiers": ["printenv_main", "getenv"], "notes": "Check if the script calling printenv passes the return value to an unsafe function."}
{"name": "wps_monitor-getenv-calls", "file_path": "bin/wps_monitor", "location": "bin/wps_monitor", "risk_score": 5.0, "confidence": 5.5, "description": "The wps_monitor file contains calls to the getenv function, requiring further analysis of the specific parameters and usage context at each call point.", "link_identifiers": ["getenv", "sym.imp.getenv"], "notes": "It is recommended to decompile and analyze each call point to determine the specific environment variable names accessed and their usage patterns."}
{"name": "acos_service-getenv-command-injection", "file_path": "sbin/acos_service", "location": "sbin/acos_service:0x15f64-0x16cd8", "risk_score": 8.5, "confidence": 8.0, "description": "The function fcn.0001777c retrieves environment variables using getenv() and directly incorporates the result into constructing a system() command, posing a command injection risk.", "link_identifiers": ["getenv", "system", "fcn.0001777c"], "notes": "Verify that environment variables are properly filtered"}
{"name": "acos_service-nvram-access", "file_path": "sbin/acos_service", "location": "sbin/acos_service:0x1618c-0x16f00", "risk_score": 6.0, "confidence": 6.5, "description": "The function calls acosNvramConfig_get() and acosNvramConfig_set() to access NVRAM configuration items, with some configuration values being used for network interface configuration and routing settings.", "link_identifiers": ["acosNvramConfig_get", "acosNvramConfig_set", "ifconfig", "route_add", "route_del"], "notes": "NVRAM access should verify permissions and input validity."}
{"name": "acos_service-env-file-ops", "file_path": "sbin/acos_service", "location": "sbin/acos_service:0x17c60-0x17cdc", "risk_score": 7.0, "confidence": 6.75, "description": "Environment variables are directly used in file operations (fopen/fread) and memory allocation (malloc), posing a potential buffer overflow risk.", "link_identifiers": ["getenv", "fopen", "fread", "malloc"], "notes": "potential_buffer_overflow"}
{"name": "remote_sh-nvram-urls", "file_path": "etc/init.d/remote.sh", "location": "etc/init.d/remote.sh:15-79", "risk_score": 7.5, "confidence": 7.75, "description": "The script retrieves multiple NVRAM variable values, including URL-related configurations, through the `nvram get` command. These values are used to initialize configurations, with default values being set and committed if the variables do not exist. The primary risk lies in the potential tampering of these URLs and configurations, which could lead to remote code execution or information leakage.", "link_identifiers": ["nvram", "leafp2p_sys_prefix", "leafp2p_replication_url", "leafp2p_replication_hook_url", "leafp2p_remote_url", "leafp2p_debug", "leafp2p_firewall", "leafp2p_rescan_devices", "leafp2p_services", "leafp2p_service_0", "leafp2p_run"], "notes": "Further inspection is required regarding the usage of these NVRAM variables in other components, particularly whether URL-related variables are utilized for insecure functionalities such as command execution."}
{"name": "remote_sh-nvram-commit", "file_path": "etc/init.d/remote.sh", "location": "etc/init.d/remote.sh:HIDDEN", "risk_score": 6.0, "confidence": 7.0, "description": "The script uses the `nvram commit` command to submit modifications to NVRAM variables. This may pose a risk of malicious alterations to persistent storage, especially when variable values are not validated.", "link_identifiers": ["nvram", "commit"], "notes": "It is necessary to verify whether appropriate permission controls are in place to prevent unauthorized NVRAM modifications."}
{"name": "leafp2p_sh-path-injection", "file_path": "etc/init.d/leafp2p.sh", "location": "etc/init.d/leafp2p.sh:5", "risk_score": 7.5, "confidence": 7.5, "description": "The script retrieves the NVRAM variable `leafp2p_sys_prefix` using the `nvram get` command and assigns its value to the `SYS_PREFIX` variable. This value is subsequently used to construct paths for the `CHECK_LEAFNETS` and `PATH` variables. If an attacker gains control over the `leafp2p_sys_prefix` value in NVRAM, it could lead to path injection or command injection vulnerabilities.", "code_snippet": "SYS_PREFIX=$(${nvram} get leafp2p_sys_prefix)\nCHECK_LEAFNETS=${SYS_PREFIX}/bin/checkleafnets.sh\nPATH=${SYS_PREFIX}/bin:${SYS_PREFIX}/usr/bin:/sbin:/usr/sbin:/bin:/usr/bin", "link_identifiers": ["nvram", "leafp2p_sys_prefix", "SYS_PREFIX", "CHECK_LEAFNETS", "PATH"], "notes": "Further analysis of the `checkleafnets.sh` script is required to verify the safety of `SYS_PREFIX` usage. If this value is directly used for constructing commands or paths without proper validation, potential security risks may exist."}
