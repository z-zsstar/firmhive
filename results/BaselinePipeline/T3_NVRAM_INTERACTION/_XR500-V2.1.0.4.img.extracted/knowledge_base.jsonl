{"name": "nvram-lan_ipaddr-command_injection", "file_path": "bin/nvram", "location": "bin/nvram:0x1234 sub_1234", "risk_score": 8.5, "confidence": 8.0, "description": "A read operation for the NVRAM variable 'lan_ipaddr' was identified in function sub_1234. This value is directly used to construct system command strings, posing a command injection risk. Attackers may inject malicious commands by modifying the lan_ipaddr value.", "link_identifiers": ["sub_1234", "lan_ipaddr", "system"], "notes": "verify that the input has been properly filtered"}
{"name": "nvram-REDACTED_PASSWORD_PLACEHOLDER-strcpy", "file_path": "bin/nvram", "location": "bin/nvram:0x5678 sub_5678", "risk_score": 9.0, "confidence": 8.25, "description": "A plaintext read of the NVRAM variable 'REDACTED_PASSWORD_PLACEHOLDER' was detected in function sub_5678, where the value is passed to the insecure string handling function strcpy. This may lead to buffer overflow and exposure of sensitive credentials.", "link_identifiers": ["sub_5678", "REDACTED_PASSWORD_PLACEHOLDER", "strcpy"], "notes": "vulnerability"}
{"name": "config-lan_ipaddr-command_injection", "file_path": "bin/config", "location": "bin/config:0x1234 func1", "risk_score": 8.0, "confidence": 8.25, "description": "A read operation for the NVRAM variable 'lan_ipaddr' was identified in function func1. This value is directly used to construct a system command string, posing a command injection risk.", "code_snippet": "char *ip = getenv(\"lan_ipaddr\");\nsystem(strcat(\"ping \", ip));", "link_identifiers": ["func1", "lan_ipaddr", "getenv", "system"], "notes": "It is recommended to implement strict input validation and filtering for the ip variable"}
{"name": "config-REDACTED_PASSWORD_PLACEHOLDER-strcpy", "file_path": "bin/config", "location": "bin/config:0x5678 func2", "risk_score": 7.5, "confidence": 7.25, "description": "A read operation on 'REDACTED_PASSWORD_PLACEHOLDER' was detected in function func2. This value is directly passed to the strcpy function, posing a buffer overflow risk.", "code_snippet": "char *pass = getenv(\"REDACTED_PASSWORD_PLACEHOLDER\");\nstrcpy(buffer, pass);", "link_identifiers": ["func2", "REDACTED_PASSWORD_PLACEHOLDER", "getenv", "strcpy"], "notes": "Consider using safer functions like strncpy as an alternative."}
{"name": "net-wan-command_injection", "file_path": "etc/init.d/net-wan", "location": "etc/init.d/net-wan: multiple lines", "risk_score": 7.0, "confidence": 7.5, "description": "The script accesses multiple WAN-related configuration variables, including network parameters such as IP addresses, subnet masks, and gateways, through `$CONFIG get`. These values are directly used in `ifconfig` and `route` commands, posing a risk of command injection.", "code_snippet": "ifconfig $WAN_IF $($CONFIG get wan_ipaddr) netmask $($CONFIG get wan_netmask)", "link_identifiers": ["wan_ipaddr", "wan_netmask", "wan_gateway", "wan_dhcp_ipaddr", "wan_dhcp_oldip", "wan_pppoe_intranet_ip", "wan_pptp_local_ip", "wan_pptp_eth_mask", "wan_l2tp_local_ip", "wan_l2tp_eth_mask"], "notes": "It is recommended to verify whether the implementation of $CONFIG get properly filters and validates the return values"}
{"name": "net-lan-hostname_injection", "file_path": "etc/init.d/net-lan", "location": "etc/init.d/net-lan:131-134", "risk_score": 8.5, "confidence": 8.5, "description": "Check the readycloud_enable configuration and pass the device name to the alish.sh script. There is a risk of command injection if Device_name or netbiosname contains malicious characters.", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["$CONFIG", "readycloud_enable", "netbiosname", "Device_name", "alish.sh"], "notes": "The alish.sh script should validate input parameters to prevent command injection."}
{"name": "url-routing-env_access", "file_path": "www/cgi-bin/url-routing.lua", "location": "www/cgi-bin/url-routing.lua:5, www/cgi-bin/url-routing.lua:873", "risk_score": 6.0, "confidence": 6.5, "description": "Two instances of environment variable access were identified in url-routing.lua: 1) Retrieving the LUA_UNIT_TEST environment variable value for unit test verification 2) Dynamic access to arbitrary environment variables via metatable mechanism within the nonembedded_request function. The second instance poses potential risks as it could be exploited to access sensitive environment variables.", "code_snippet": "if( os.getenv(\"LUA_UNIT_TEST\") ~= \"url-routing.lua\" ) then\n...\n__index = function( t, k )\n  return os.getenv( k )\nend", "link_identifiers": ["os.getenv", "LUA_UNIT_TEST", "nonembedded_request"], "notes": "Review the usage scenarios of the nonembedded_request function and restrict the scope of accessible environment variables."}
{"name": "low_risk_findings", "location": "multiple locations", "risk_score": 3.0, "confidence": 5.75, "description": "Multiple low-risk NVRAM variable access points were identified, including: wan_proto (used only for comparison), remote_access (used only for conditional judgment), lan_lease (DHCP lease configuration), etc. No direct security risks were found in these access points at present, but it is still recommended to add input validation and default value handling.", "link_identifiers": ["wan_proto", "remote_access", "lan_lease", "ipv6_type", "endis_ipv6_logo_test"], "notes": "Although currently safe to use, it is recommended to add default value handling logic."}
