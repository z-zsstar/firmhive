{"name": "nvram-strcpy-buffer-overflow", "file_path": "bin/nvram", "location": "[SECRET_VALUE]", "risk_score": 8.5, "confidence": 7.75, "description": "An unvalidated strcpy usage was found in the config_set function of bin/nvram, which may lead to stack buffer overflow when processing user-supplied configuration values. Attackers can exploit this vulnerability by providing overly long strings, potentially enabling arbitrary code execution. The vulnerability resides in the critical path handling name=value format input, directly exposed to external input.", "code_snippet": "[SECRET_VALUE]", "link_identifiers": ["strcpy", "config_set", "fcn.000086d0", "name=value"], "notes": "Verify the stack buffer size and actual input limits. This vulnerability may be triggered through web interfaces or network services."}
{"name": "uhttpd-command-injection", "file_path": "usr/sbin/uhttpd", "location": "usr/sbin/uhttpd:0x0000eff0", "risk_score": 9.0, "confidence": 8.75, "description": "A command injection vulnerability was identified in the uh_cgi_[SECRET_VALUE]_check function of usr/sbin/uhttpd, where popen is used to execute external commands. Attackers could potentially inject malicious commands by manipulating input parameters. This vulnerability resides in the critical [SECRET_VALUE]entication path, potentially allowing [SECRET_VALUE]entication bypass or arbitrary system command execution.", "link_identifiers": ["uh_cgi_[SECRET_VALUE]_check", "popen", "snprintf", "[SECRET_VALUE]entication"], "notes": "Check the input filtering and escaping mechanisms. This vulnerability can be triggered through the web interface."}
{"name": "proccgi-heap-overflow", "file_path": "www/cgi-bin/proccgi", "location": "www/cgi-bin/proccgi:0x87f0 fcn.000087c8", "risk_score": 9.0, "confidence": 8.25, "description": "A critical heap buffer overflow vulnerability was discovered in www/cgi-bin/proccgi. The function fcn.000087c8 calculates input length using strlen but only allocates a buffer of length+1 bytes, then directly copies using strcpy. Attackers can exploit this vulnerability by injecting overly long strings through environment variables or CGI parameters.", "code_snippet": "0x000087d8      a3ffffeb       bl sym.imp.strlen\n0x000087dc      010080e2       add r0, r0, 1\n0x000087e0      80ffffeb       bl sym.imp.malloc\n0x000087ec      0510a0e1       mov r1, r5\n0x000087f0      76ffffeb       bl sym.imp.strcpy", "link_identifiers": ["sym.imp.strcpy", "fcn.000087c8", "sym.imp.getenv", "sym.imp.malloc"], "notes": "Verify which input parameters are passed to the function and whether mitigation measures (such as ASLR) exist."}
{"name": "[SECRET_VALUE]", "file_path": "etc/init.d/telnet", "location": "etc/init.d/telnet:6", "risk_score": 8.0, "confidence": 7.75, "description": "The /etc/init.d/telnet service startup depends on the 'factory_mode' configuration, which directly listens on the br0 interface in factory mode. If an attacker can spoof factory mode (e.g., via NVRAM injection), they could activate the insecure telnet service. Combined with NVRAM injection vulnerabilities, this could form a complete attack chain.", "link_identifiers": ["factory_mode", "utelnetd", "telnetenable", "/bin/config get"], "notes": "Check if the implementation of /config/get has vulnerabilities such as command injection."}
{"name": "uhttpd-path-traversal", "file_path": "usr/sbin/uhttpd", "location": "usr/sbin/uhttpd:0x0000dad0", "risk_score": 7.0, "confidence": 7.25, "description": "The uh_path_lookup function in uHTTPd is vulnerable to path traversal attacks, where attackers could potentially access sensitive system files by crafting specially designed URLs. This vulnerability stems from insecure usage of realpath, which may lead to exposure of confidential information such as configuration files or [SECRET_VALUE]s.", "link_identifiers": ["uh_path_lookup", "realpath", "DOCUMENT_ROOT"], "notes": "Path normalization needs to be validated. This vulnerability can be triggered through the web interface."}
{"name": "dns-hijack-via-config", "file_path": "etc/init.d/dnsmasq", "location": "etc/init.d/dnsmasq:5-10,60-61", "risk_score": 8.5, "confidence": 6.75, "description": "dnsmasq has a DNS hijacking feature upon startup. When the configuration item 'dns_hijack'=1 is set, it sends a SIGUSR1 signal to force dnsmasq to reload its configuration. Combined with a configuration injection vulnerability, attackers could potentially exploit this functionality to conduct DNS cache poisoning attacks.", "code_snippet": "set_hijack() {\n\tsleep 2\n\tkillall -SIGUSR1 dnsmasq\n\tsleep 1\n\tkillall -SIGUSR1 dnsmasq\n}", "link_identifiers": ["set_hijack", "dns_hijack", "killall -SIGUSR1 dnsmasq"], "notes": "Check the configuration method of the dns_hijacking setting to confirm whether it can be modified through the network interface."}
{"name": "weak-wireless-config", "file_path": "etc/config/wireless", "location": "etc/config/wireless:3-5, 11-13", "risk_score": 9.0, "confidence": 5.75, "description": "The wireless network configuration is disabled by default, but the settings indicate that if enabled, it would use an OpenWrt SSID with no encryption (encryption none). If activated, this would allow any device to connect to the internal network, creating a serious risk of network boundary breach.", "link_identifiers": ["wireless", "wifi-device", "disabled", "ssid", "encryption"], "notes": "If wireless is enabled without encryption configured, it will allow any device to connect to the network. The actual status of the wireless interface needs to be checked."}
{"name": "uhttpd-interpreter-injection", "file_path": "etc/init.d/uhttpd", "location": "etc/init.d/uhttpd:50-52", "risk_score": 6.5, "confidence": 5.5, "description": "The interpreter parameter in the uhttpd startup script is directly passed to uhttpd, potentially allowing the execution of arbitrary interpreters. Since the interpreter parameter originates from UCI configuration, malicious values injected into the configuration could lead to command execution. When combined with configuration injection vulnerabilities, this could form a complete attack chain.", "code_snippet": "config_get interpreter \"$cfg\" interpreter\nfor path in $interpreter; do\n\tappend UHTTPD_ARGS \"-i $path\"\ndone", "link_identifiers": ["interpreter", "append UHTTPD_ARGS", "-i $path"], "notes": "Verify the source and filtering mechanism of the interpreter parameter."}
