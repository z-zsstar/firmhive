{"name": "env_get-minidlna-0xce50", "location": "usr/bin/minidlna:0xbf80 fcn.0000be2c", "risk_score": 5.0, "confidence": 7.0, "description": "In function fcn.0000be2c, the environment variable value is obtained via getenv. The variable name is stored in the memory pointed to by address *0xce50. The retrieved value is used to construct a string, which may pose an information disclosure risk.", "link_identifiers": ["getenv", "*0xce50", "fcn.0000be2c"], "notes": "Further confirmation is required for the specific environment variable name pointed to by *0xce50."}
{"name": "env_get-minidlna-0x21a74-1", "location": "usr/bin/minidlna:0x21428 fcn.00020f10", "risk_score": 6.0, "confidence": 6.5, "description": "In function fcn.00020f10, the environment variable value is obtained via getenv. The variable name is stored in the memory pointed to by address *0x21a74. The retrieved value is used to configure network-related parameters, and malicious tampering could lead to abnormal service configuration.", "link_identifiers": ["getenv", "*0x21a74", "fcn.00020f10"], "notes": "env_get"}
{"name": "env_get-minidlna-0x21a74-2", "location": "usr/bin/minidlna:0x21438 fcn.00020f10", "risk_score": 6.0, "confidence": 6.5, "description": "In function fcn.00020f10, the second call to getenv retrieves an environment variable value. The variable name is also stored in the memory pointed to by address *0x21a74. The obtained value is used for fallback configuration, presenting the same risks as the first call.", "link_identifiers": ["getenv", "*0x21a74", "fcn.00020f10"], "notes": "Same environment variable as the first call, risk accumulates"}
{"name": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 8.5, "confidence": 8.0, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["[REDACTED_PASSWORD]", "[REDACTED_PASSWORD]", "getenv"], "notes": "Check the security of environment variable settings"}
{"name": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 7.0, "confidence": 7.25, "description": "In the function load_config, the configuration file path is obtained via getenv(PASSWD_CONFIG_PATH). This path is directly used for file operations without validation, potentially leading to directory traversal attacks.", "link_identifiers": ["load_config", "PASSWD_CONFIG_PATH", "getenv", "fopen"], "notes": "env_get"}
{"name": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 4.0, "confidence": 7.0, "description": "In the function log_activity, the REDACTED_PASSWORD_PLACEHOLDER is obtained using getenv(USER) for logging purposes. Although it is only used for logging, it could still potentially be exploited for log forgery attacks.", "link_identifiers": ["log_activity", "USER", "getenv", "printf"], "notes": "env_get"}
{"name": "env_get-busybox-HTTP_PROXY", "location": "busybox (shared networking functions)", "risk_score": 7.5, "confidence": 7.25, "description": "env_get", "link_identifiers": ["HTTP_PROXY", "HTTPS_PROXY"], "notes": "env_get"}
{"name": "env_get-busybox-HOME", "location": "busybox (shared functions)", "risk_score": 5.0, "confidence": 7.0, "description": "env_get", "link_identifiers": ["HOME"], "notes": "env_get"}
{"name": "env_get-busybox-SSL_CERT", "location": "busybox (shared SSL functions)", "risk_score": 4.0, "confidence": 5.0, "description": "env_get", "link_identifiers": ["SSL_CERT_DIR", "SSL_CERT_FILE"], "notes": "env_get"}
{"name": "negative_finding-init_scripts", "location": "/etc/init.d/*", "risk_score": 0.0, "confidence": 3.75, "description": "In all script files under the /etc/init.d directory, no direct evidence was found of using environment variable access functions such as getenv, nvram_get/set. Possible reasons include: 1) Environment variable access is hidden in binary files 2) Other configuration systems are used 3) These startup scripts are not responsible for environment variable handling.", "link_identifiers": ["init_scripts", "negative_finding"], "notes": "It is recommended to extend the analysis scope to the following locations: 1) Administrative programs under /usr/sbin 2) Shared libraries in the /lib directory 3) Configuration files under /etc/config. Additionally, it is necessary to understand the specific configuration management system (NVRAM/UBUS/others) used by the target system."}
{"name": "nvram_operations-nvram_binary", "location": "usr/sbin/nvram:0x88dc", "risk_score": 7.0, "confidence": 7.25, "description": "Multiple NVRAM operation function calls were found in usr/sbin/nvram, including nvram_get, nvram_set, nvram_unset, and nvram_commit. These functions are used to read and modify configuration parameters in NVRAM. Decompilation analysis revealed that the program processes command-line arguments to perform corresponding NVRAM operations, but no apparent input validation or security safeguards were implemented.", "code_snippet": "iVar1 = sym.imp.nvram_get();\n*(iVar17 + -4) = iVar1;\nif (iVar1 != 0) {\n    ppcVar6 = ppcVar7 + 2;\n    sym.imp.puts();", "link_identifiers": ["sym.imp.nvram_get", "sym.imp.nvram_set", "sym.imp.nvram_unset", "sym.imp.nvram_commit", "REDACTED_SENSITIVE_DATA"], "notes": "Further analysis is required to examine NVRAM access in other binary files. Particular attention should be paid to instances where NVRAM values are used for system command construction or sensitive operations."}
{"name": "nvram_buffer_handling", "location": "usr/sbin/nvram:0x88dc", "risk_score": 6.5, "confidence": 6.25, "description": "The program uses strncpy and strsep functions to process NVRAM values, posing potential buffer overflow risks. A 65536-byte buffer (acStack_1002c) is allocated for NVRAM data processing, but lacks strict length verification.", "code_snippet": "iVar1 = iVar17 + -0x10000 + -4;\n*(iVar17 + -4) = iVar1;\nsym.imp.strncpy(iVar1,pcVar13,0x10000);", "link_identifiers": ["strncpy", "strsep", "acStack_1002c", "REDACTED_SENSITIVE_DATA"], "notes": "Recommend checking all code paths that use NVRAM values to ensure proper boundary checks are implemented."}
{"name": "libnvram-unsafe_operations", "location": "lib/libnvram.so", "risk_score": 8.5, "confidence": 4.5, "description": "Multiple NVRAM operation functions were discovered in libnvram.so, including nvram_get, nvram_set, etc. These functions directly interact with the /dev/nvram device and present the following security issues: 1) The nvram_get function uses unsafe strcpy to copy variable names; 2) The nvram_set function uses sprintf to construct command strings, potentially leading to format string vulnerabilities; 3) Insufficient buffer size checks (only verifying if it's smaller than 0x65). Attackers may exploit carefully crafted NVRAM variable names or values to execute buffer overflow attacks.", "link_identifiers": ["nvram_get", "nvram_set", "strcpy", "sprintf", "/dev/nvram"], "notes": "It is recommended to inspect all code paths that call these functions to ensure thorough input validation. Consider using safer alternatives such as strncpy."}
{"name": "libnvram-cleartext_handling", "location": "lib/libnvram.so", "risk_score": 7.0, "confidence": 4.25, "description": "The NVRAM variables were found to be processed in plaintext in memory without encryption protection. In the nvram_get and nvram_set functions, both variable names and values are transmitted and stored in plaintext, potentially exposing sensitive information.", "link_identifiers": ["nvram_getall", "read", "write"], "notes": "It is recommended to encrypt sensitive NVRAM variables."}
{"name": "libnvram-error_handling", "location": "lib/libnvram.so", "risk_score": 6.5, "confidence": 4.0, "description": "Discovered that NVRAM operations lack a robust error handling mechanism. When ioctl operations fail, it merely calls perror without any recovery or cleanup mechanisms, potentially leaving the system in an inconsistent state.", "link_identifiers": ["ioctl", "perror"], "notes": "nvram_library"}
{"name": "negative_finding-etc_config", "location": "/etc/config/*", "risk_score": 0.0, "confidence": 4.5, "description": "A comprehensive analysis of all files in the etc/config directory revealed no instances of NVRAM access or environment variable usage. All files contain static configuration data, specifically including: device paths, version information, hardware identifiers, and other static strings.", "link_identifiers": ["buildver", "hwver", "static_config"], "notes": "All examined files are static configuration files and do not involve interaction with dynamic environment variables. No further analysis of NVRAM access is required for these files."}
