{"name": "nvram-default-read", "location": "usr/sbin/nvram:0x8c14", "risk_score": 6.5, "confidence": 6.5, "description": "The read operation of the NVRAM variable 'default' was detected through the nvram_get function call. The variable value is directly used in subsequent processing, posing a risk of malicious tampering.", "code_snippet": "", "link_identifiers": ["nvram_get", "default"], "notes": "nvram_get"}
{"name": "nvram-getall-leak", "location": "usr/sbin/nvram:0x899c", "risk_score": 8.0, "confidence": 8.0, "description": "The discovery of the NVRAM batch operation function nvram_getall being called may lead to the leakage of all NVRAM variable values. The return value is directly output to standard output, posing an information disclosure risk.", "code_snippet": "", "link_identifiers": ["nvram_getall", "puts"], "notes": "nvram_get"}
{"name": "nvram-set-overflow", "location": "usr/sbin/nvram:0x8904", "risk_score": 7.5, "confidence": 6.5, "description": "Detected NVRAM variable setting operation implemented through strncpy and nvram_set combination. Potential buffer overflow risk exists (fixed 0x20000 buffer size).", "code_snippet": "", "link_identifiers": ["strncpy", "nvram_set", "0x20000"], "notes": "nvram_set"}
{"name": "nvram-unset-permission", "location": "usr/sbin/nvram:0x892c", "risk_score": 5.0, "confidence": 5.0, "description": "Detected NVRAM variable deletion operation, implemented via nvram_unset. Insufficient permission checks.", "code_snippet": "", "link_identifiers": ["nvram_unset"], "notes": "nvram_set may cause service configurations to be accidentally deleted"}
{"name": "nvram-commit-atomicity", "location": "usr/sbin/nvram:HIDDEN", "risk_score": 6.0, "confidence": 6.0, "description": "The NVRAM commit operation (nvram_commit) is found to be called in multiple conditional branches without atomicity protection.", "code_snippet": "", "link_identifiers": ["nvram_commit"], "notes": "may cause configuration inconsistency"}
{"name": "httpd-getenv-command-injection", "location": "usr/sbin/httpd:0x35af0", "risk_score": 7.5, "confidence": 7.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "", "link_identifiers": ["getenv", "system", "REDACTED_SENSITIVE_DATA"], "notes": "Further verification is needed to confirm the trustworthiness of the environment variable value source."}
{"name": "httpd-setenv-validation", "location": "usr/sbin/httpd:0x35b30", "risk_score": 6.0, "confidence": 6.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "", "link_identifiers": ["setenv", "REDACTED_SENSITIVE_DATA"], "notes": "env_set"}
{"name": "httpd-env-hardcoded", "location": "usr/sbin/httpd:HIDDEN", "risk_score": 4.0, "confidence": 6.0, "description": "env_get", "code_snippet": "", "link_identifiers": ["0x35ff0", "0x35ffc", "0x36004", "0x3600c"], "notes": "env_get"}
{"name": "rc-main-getenv", "location": "sbin/rc:0x10a90", "risk_score": 3.0, "confidence": 3.5, "description": "The function getenv is called in the main function (0x10a90), but no specific environment variable name was retrieved. Further decompilation analysis of the parameters is required.", "code_snippet": "", "link_identifiers": ["main", "getenv"], "notes": "env_get"}
{"name": "rc-fcn11094-getenv", "location": "sbin/rc:0x11180", "risk_score": 4.0, "confidence": 4.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "", "link_identifiers": ["REDACTED_SENSITIVE_DATA", "getenv"]}
{"name": "rc-fcn15300-getenv", "location": "sbin/rc:0x15320-0x15330", "risk_score": 5.0, "confidence": 5.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "", "link_identifiers": ["REDACTED_SENSITIVE_DATA", "getenv"]}
{"name": "rc-fcn16e14-getenv", "location": "sbin/rc:0x16e20-0x16e7c", "risk_score": 6.0, "confidence": 6.0, "description": "In fcn.00016e14 (0x16e20-0x16e7c), getenv is frequently called, likely processing multiple environment variables.", "code_snippet": "", "link_identifiers": ["fcn.00016e14", "getenv"], "notes": "Pay special attention to this function, as it may involve access to sensitive variables."}
{"name": "rc-fcn1a084-getenv", "location": "sbin/rc:0x1a110-0x1a210", "risk_score": 5.0, "confidence": 5.0, "description": "In fcn.0001a084 (0x1a110-0x1a210), getenv is called multiple times, likely for service startup configuration.", "code_snippet": "", "link_identifiers": ["fcn.0001a084", "getenv"]}
{"name": "rc-unnamed-getenv", "location": "sbin/rc:0x1a560-0x1c920", "risk_score": 4.0, "confidence": 4.0, "description": "The getenv function is called within multiple unnamed functions (0x1a560-0x1c920), indicating widespread use of environment variables.", "code_snippet": "", "link_identifiers": ["getenv"], "notes": "Further analysis is required on the specific parameters and usage patterns of these call points."}
{"name": "init.d-no-nvram-env-access", "location": "etc/init.d/", "risk_score": 0.0, "confidence": 4.75, "description": "A comprehensive analysis of the files afpd, leafp2p.sh, and remote.sh in the /etc/init.d directory revealed no instances of NVRAM access or environment variable (getenv) operations.", "code_snippet": "", "link_identifiers": [], "notes": "It is recommended to check binaries in other directories such as /bin, /usr/bin, or /lib, as they may contain NVRAM-related operations."}
{"name": "fbwifi-create_conn-proxy-env", "location": "bin/fbwifi:0x39bc0-0x3a9c8", "risk_score": 6.5, "confidence": 6.5, "description": "Multiple calls to curl_getenv were found in the create_conn function for retrieving proxy-related environment variables. These calls are likely used to configure network connection parameters and may be vulnerable to malicious environment variable injection.", "code_snippet": "", "link_identifiers": ["curl_getenv", "create_conn", "proxy"], "notes": "Verify that the environment variable values are properly filtered"}
{"name": "fbwifi-Curl_parsenetrc-home-env", "location": "bin/fbwifi:0x42dfc", "risk_score": 5.0, "confidence": 5.75, "description": "In the Curl_parsenetrc function, a call to getenv is found to retrieve the user's home directory path. If the return value is not validated, it may lead to a path traversal vulnerability.", "code_snippet": "", "link_identifiers": ["getenv", "Curl_parsenetrc", "HOME"], "notes": "Check if the path concatenation operation is safe"}
{"name": "fbwifi-proxy-env-vars", "location": "bin/fbwifi:0x39c38-0x39c44", "risk_score": 7.0, "confidence": 7.5, "description": "The text identifies multiple HTTP proxy-related environment variable read operations, including http_proxy, https_proxy, etc. These values may be used to construct network requests, posing a command injection risk.", "code_snippet": "", "link_identifiers": ["http_proxy", "https_proxy", "all_proxy", "no_proxy"], "notes": "Pay special attention to the parsing and processing logic of proxy URLs"}
{"name": "fbwifi-curl_home-env", "location": "bin/fbwifi:0x42e94", "risk_score": 6.0, "confidence": 6.5, "description": "Detection of reading the CURL_HOME environment variable for locating configuration files. If this value is maliciously set, it may lead to configuration file substitution or sensitive information leakage.", "code_snippet": "", "link_identifiers": ["CURL_HOME", "curl_getenv"], "notes": "verify the permission settings of the configuration file"}
