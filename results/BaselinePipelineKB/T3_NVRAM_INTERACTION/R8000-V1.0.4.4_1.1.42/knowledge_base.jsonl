{"name": "env_access-busybox-printenv", "location": "bin/busybox:sym.printenv_main", "risk_score": 3.0, "confidence": 7.0, "description": "The `printenv` command retrieves all environment variables by directly accessing the `environ` global variable and outputs them to standard output using `puts/printf`. While this is not inherently a security vulnerability, it may expose sensitive environment variable information. It is recommended to restrict access to the `printenv` command to prevent leakage of sensitive environment variable data.", "code_snippet": "", "link_identifiers": ["environ", "printenv_main", "puts", "printf"], "notes": "It is recommended to restrict access to the printenv command to prevent the leakage of sensitive environment variable information."}
{"name": "env_get-busybox-POSIXLY_CORRECT", "location": "bin/busybox:0x140bc", "risk_score": 2.0, "confidence": 5.25, "description": "At offset 0x140bc in bin/busybox, it checks the POSIXLY_CORRECT environment variable. No obvious security risks were identified, as the call site includes validation checks on the return value.", "code_snippet": "", "link_identifiers": ["sym.imp.getenv", "POSIXLY_CORRECT", "strcmp"], "notes": "env_get"}
{"name": "env_get-busybox-unknown_config", "location": "bin/busybox:0x16324", "risk_score": 2.0, "confidence": 4.5, "description": "In bin/busybox at address 0x16324, checks an environment variable related to configuration (possibly comparing with 'none' value). No obvious security risks found, with call sites including validity checks on the return value.", "code_snippet": "", "link_identifiers": ["sym.imp.getenv", "strcmp", "none"], "notes": "env_get"}
{"name": "env_get-busybox-generic_0x16d44", "location": "bin/busybox:0x16d44", "risk_score": 2.0, "confidence": 4.0, "description": "In bin/busybox at address 0x16d44, the getenv call currently cannot determine the specific variable name being accessed. Further analysis is required.", "code_snippet": "", "link_identifiers": ["sym.imp.getenv"], "notes": "env_get"}
{"name": "env_get-busybox-generic_0x243e4", "location": "bin/busybox:0x243e4", "risk_score": 2.0, "confidence": 4.0, "description": "The getenv call at position 0x243e4 in bin/busybox currently cannot determine the specific variable name being accessed. Further analysis is required.", "code_snippet": "", "link_identifiers": ["sym.imp.getenv"], "notes": "env_get"}
{"name": "nvram_script-leafp2p_configs", "location": "etc/init.d/remote.sh:24-81", "risk_score": 6.0, "confidence": 7.25, "description": "The script accesses and modifies NVRAM variables through the ${nvram} get/set commands, primarily used to configure various parameters of the leafp2p service. When a variable is unset, the script sets default values and commits them to NVRAM. Potential risks include: 1) Sensitive information in NVRAM may be leaked; 2) If an attacker gains control over NVRAM values, it may affect service behavior.", "code_snippet": "", "link_identifiers": ["nvram", "leafp2p_sys_prefix", "leafp2p_replication_url", "leafp2p_replication_hook_url", "leafp2p_remote_url", "leafp2p_debug", "leafp2p_firewall", "leafp2p_rescan_devices", "leafp2p_services", "leafp2p_service_0", "leafp2p_run"], "notes": "It is necessary to check whether these NVRAM variables can be accessed or modified through other insecure means. Particularly for URL configuration items such as leafp2p_remote_url, if tampered with, they may cause the service to connect to malicious servers."}
{"name": "nvram_script-frequent_commit", "location": "etc/init.d/remote.sh:27,33,39,45,51,57,63,69,75,81", "risk_score": 3.0, "confidence": 7.5, "description": "The script frequently uses the `${nvram} commit` command to submit modifications to NVRAM. This may lead to frequent NVRAM writes, which in extreme cases could impact the lifespan of the flash memory.", "code_snippet": "", "link_identifiers": ["nvram", "commit"], "notes": "Optimize script logic to minimize unnecessary NVRAM commit operations."}
{"name": "nvram_script-leafp2p_path_injection", "location": "etc/init.d/leafp2p.sh:5", "risk_score": 7.5, "confidence": 7.5, "description": "The script retrieves the NVRAM variable value of 'leafp2p_sys_prefix' using the `/usr/sbin/nvram get` command and assigns it to the SYS_PREFIX variable. This value is subsequently used to construct the paths for the CHECK_LEAFNETS and PATH variables. If an attacker can control this value in NVRAM, it may lead to path injection or command injection vulnerabilities.", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["nvram", "leafp2p_sys_prefix", "SYS_PREFIX", "CHECK_LEAFNETS", "PATH"], "notes": "It is recommended to verify the source and restrictions of NVRAM values to ensure they cannot be modified by unauthorized users. Additionally, path normalization should be considered."}
{"name": "env_modification-unsafe_path", "location": "etc/init.d/leafp2p.sh:7", "risk_score": 6.0, "confidence": 6.5, "description": "The PATH environment variable has been modified to include paths retrieved from NVRAM. If the NVRAM values are tampered with, it may lead to the execution of malicious programs.", "code_snippet": "PATH=${SYS_PREFIX}/bin:${SYS_PREFIX}/usr/bin:/sbin:/usr/sbin:/bin:/usr/bin", "link_identifiers": ["PATH", "SYS_PREFIX"], "notes": "It is recommended to fix the PATH value or strictly validate the NVRAM source."}
{"name": "binary-nvram_get-unsafe_output", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 5.0, "confidence": 7.0, "description": "Found NVRAM variable access through nvram_get() at 0x8878. The variable name is dynamically determined through string comparison operations. The retrieved value is directly passed to puts() for output without proper sanitization, which could lead to information disclosure if malicious values are stored in NVRAM.", "code_snippet": "", "link_identifiers": ["nvram_get", "puts", "strcmp"], "notes": "nvram_get"}
{"name": "binary-nvram_set-buffer_overflow", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 7.0, "confidence": 7.25, "description": "Found NVRAM variable setting through nvram_set() with a strncpy of 0x10000 bytes, which could lead to buffer overflow if not properly bounded. The values are taken from command line arguments and processed through strsep() before being committed to NVRAM.", "code_snippet": "", "link_identifiers": ["nvram_set", "strncpy", "strsep"], "notes": "nvram_set"}
{"name": "binary-nvram_getall-format_string", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 6.5, "confidence": 6.5, "description": "A batch NVRAM operation was discovered through nvram_getall(). The entire NVRAM space is read into a buffer, with some values being passed to fprintf(). If the NVRAM contains malicious format specifiers, it could potentially lead to a format string vulnerability.", "code_snippet": "", "link_identifiers": ["nvram_getall", "fprintf", "memset"], "notes": "nvram_get"}
{"name": "binary-strcat-buffer_overflow", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 8.0, "confidence": 8.25, "description": "nvram_get", "code_snippet": "", "link_identifiers": ["strcat", "nvram_get", "memcpy"], "notes": "nvram_get"}
{"name": "libnvram-strcpy_overflow", "location": "usr/lib/libnvram.so:0x00005cf8", "risk_score": 8.0, "confidence": 8.25, "description": "The sym.nvram_get function was found to directly use strcpy for copying NVRAM variable values, which may lead to a buffer overflow vulnerability. After reading data from the /dev/nvram device, this function copies the data directly to the target buffer without performing length checks.", "code_snippet": "0x00005cf0      0810a0e1       mov r1, r8\n0x00005cf4      0500a0e1       mov r0, r5\n0x00005cf8      0bffffeb       bl loc.imp.strcpy", "link_identifiers": ["nvram_get", "strcpy", "/dev/nvram"], "notes": "Attackers may trigger a buffer overflow by setting excessively long NVRAM variable values."}
{"name": "libnvram-strncpy_termination", "location": "usr/lib/libnvram.so:0x000064c0", "risk_score": 6.5, "confidence": 7.25, "description": "In the sym.acosNvramConfig_read function, strncpy is used to copy NVRAM variable values. Although the length is restricted, the string terminator is not properly handled.", "code_snippet": "0x000064b8      0400a0e1       mov r0, r4\n0x000064bc      0720a0e1       mov r2, r7\n0x000064c0      4ffdffeb       bl loc.imp.strncpy", "link_identifiers": ["acosNvramConfig_read", "strncpy", "nvram_get"], "notes": "nvram_get may result in improperly terminated strings, causing subsequent processing issues"}
{"name": "libnvram-nvram_set_validation", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 7.0, "confidence": 7.5, "description": "Direct writing to NVRAM variables was found in the sym.nvram_set function without adequate validation of the input values.", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["nvram_set", "nvram_commit"], "notes": "May result in malicious values being written to NVRAM, affecting system stability"}
{"name": "libnvram-direct_io_access", "location": "usr/lib/libnvram.so:HIDDEN", "risk_score": 8.5, "confidence": 8.5, "description": "Direct access to the /dev/nvram device was found in multiple functions, utilizing low-level I/O operations without necessary security controls.", "link_identifiers": ["/dev/nvram", "read", "write", "open"], "notes": "It is recommended to add access control and input validation."}
{"name": "libnvram-commit_check", "location": "usr/lib/libnvram.so:0x0000669c", "risk_score": 6.0, "confidence": 6.25, "description": "In the sym.acosNvramConfig_write function, it was found that the NVRAM commit operation (nvram_commit) does not check the return value, which may result in write failures while the program continues execution.", "code_snippet": "0x0000669c      e7fcffeb       bl rsym.nvram_commit\n0x000066a0      000050e3       cmp r0, 0", "link_identifiers": ["acosNvramConfig_write", "nvram_commit"], "notes": "nvram_set"}
