{"name": "script-transbt-config_path-usage", "location": "usr/bin/transbt.sh:8,13,16,17,24", "risk_score": 6.0, "confidence": 6.25, "description": "The $config_path variable in the script is used to construct file paths and command-line arguments (such as ln command and transmission-daemon parameters). Although it does not directly access environment variables, it exhibits similar risk patterns:\n- Risk 1: Path traversal (via ln -s and -w parameters)\n- Risk 2: Command injection (through process startup arguments)\nVerification is required to determine whether $config_path originates from external inputs (such as configuration files/environment variables)", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["$app", "$config_path", "killall", "transmission-daemon"], "notes": "Although this discovery does not involve direct environment variable access, it falls within the analytical scope of a 'configuration system similar to environment variables' as required by the user. It is recommended to subsequently trace whether the source of the $config_path variable includes calls such as getenv or nvram_get."}
{"name": "script-transbt-poptsk-env-queue", "location": "usr/bin/transbt-poptsk.sh:6,21,26,35,38,40,46", "risk_score": 7.5, "confidence": 7.5, "description": "The script directly assigns the value of the environment variable `$GREEN_DOWNLOAD_QUEUEN_BT` to the `QUEUEN_FILE` variable (line 6), which is subsequently used for multiple file operations (lines 21, 26, 35, 38, 40, 46). The lack of input validation and path sanitization could allow attackers to perform path traversal attacks by controlling this environment variable.", "code_snippet": "QUEUEN_FILE=$GREEN_DOWNLOAD_QUEUEN_BT\n...\nsed -i ''$ln's/^queuen/adding/' $QUEUEN_FILE", "link_identifiers": ["GREEN_DOWNLOAD_QUEUEN_BT", "QUEUEN_FILE", "sed"], "notes": "The complete chain from environment variable to file operation: GREEN_DOWNLOAD_QUEUEN_BT → QUEUEN_FILE → sed operation target"}
{"name": "script-transbt-poptsk-env-checkfile", "location": "usr/bin/transbt-poptsk.sh:14-15", "risk_score": 8.0, "confidence": 7.75, "description": "The script uses the $GREEN_DOWNLOAD_CHECK_FILE environment variable as the error output redirection target (line 14) and grep input (line 15). Failure to validate file path security may lead to:  \n1. Arbitrary file writing (via 2> redirection)  \n2. Arbitrary file reading (via grep)", "code_snippet": "/usr/sbin/dni_dcheck /tmp/admin_home/.mldonkey/$1 1>/dev/null 2>$GREEN_DOWNLOAD_CHECK_FILE\ngrep \"overall_size_bigger_than_usb:1\" $GREEN_DOWNLOAD_CHECK_FILE && mem_full=1", "link_identifiers": ["GREEN_DOWNLOAD_CHECK_FILE", "grep", "dni_dcheck"], "notes": "dual risk: serving as both an output target and an input source"}
{"name": "script-transbt-poptsk-env-torrentdir", "location": "usr/bin/transbt-poptsk.sh:24", "risk_score": 9.0, "confidence": 8.25, "description": "The script directly uses the $TORRENT_DIR environment variable to construct command parameters (line 24), posing significant risks:\n1. Command injection (via $TRANS_REMOTE -a parameter)\n2. Path traversal (via rm $TORRENT_DIR/$3)\n3. Lack of validation for the $3 parameter", "code_snippet": "$TRANS_REMOTE -a $TORRENT_DIR/$3 | grep success && ret=1 && rm $TORRENT_DIR/$3 && return", "link_identifiers": ["TORRENT_DIR", "TRANS_REMOTE", "rm"], "notes": "Highest Risk Item: Environment Variables Directly Enter Command Execution Context"}
{"name": "script-transbt-poptsk-env-sed", "location": "usr/bin/transbt-poptsk.sh:21,26,35,46", "risk_score": 8.5, "confidence": 7.0, "description": "The script repeatedly uses the sed command to modify the QUEUEN_FILE file (lines 21, 26, 35, 46), whose path is derived from the environment variable $GREEN_DOWNLOAD_QUEUEN_BT. This may lead to:\n1. Arbitrary file modification (via sed -i)\n2. Privilege escalation attacks (if modifying critical system files)", "code_snippet": "sed -i ''$ln's/^queuen/adding/' $QUEUEN_FILE", "link_identifiers": ["sed", "QUEUEN_FILE", "GREEN_DOWNLOAD_QUEUEN_BT"], "notes": "env_get → file path → sed in-place modification complete attack chain"}
{"name": "binary-ntgr_sw_api-nvram-access", "location": "usr/sbin/ntgr_sw_api -> etc/scripts/ntgr_sw_api/ntgr_sw_api.sh", "risk_score": 7.5, "confidence": 7.75, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "HIDDEN/bin/configHIDDENNVRAMHIDDEN\nHIDDEN：/etc/init.d/net-wan restart $wan_ifname", "link_identifiers": ["nvram", "config", "swapi_persistent_conn", "wan_ifname", "Device_name", "wan_proto", "wan_endis_dod"], "notes": "The complete NVRAM operation chain: binary file → external script → /binconfig utility → actual NVRAM operation"}
{"name": "nvram-wan_ifname", "location": "etc/scripts/ntgr_sw_api/ntgr_sw_api.sh", "risk_score": 7.0, "confidence": 7.25, "description": "The `wan_ifname` NVRAM variable stores the WAN interface name and is used for:\n1. Network interface configuration\n2. Command construction (e.g., interface restart)\nRisk: Malicious modification may lead to network configuration errors or command injection", "link_identifiers": ["wan_ifname", "net-wan", "restart"]}
{"name": "nvram-swapi_persistent_conn", "location": "etc/scripts/ntgr_sw_api/ntgr_sw_api.sh", "risk_score": 6.5, "confidence": 6.75, "description": "swapi_persistent_conn controls the persistent connection state, with the following risk points:\n1. Potential abuse leading to resource exhaustion\n2. Lack of security checks for state changes", "link_identifiers": ["swapi_persistent_conn", "DoS"]}
{"name": "nvram-wan_proto", "location": "etc/scripts/ntgr_sw_api/ntgr_sw_api.sh", "risk_score": 7.0, "confidence": 7.0, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["wan_proto", "network", "config"]}
{"name": "script-ntgr_sw_api-nvram-get", "location": "etc/scripts/ntgr_sw_api/ntgr_sw_api.sh: various", "risk_score": 3.0, "confidence": 7.0, "description": "The script securely reads NVRAM variables (wan_ifname, Device_name, etc.) via the `/bin/config get` command, primarily used for system information retrieval.  \n- Security measures: Basic filtering provided by the `/bin/config` tool  \n- Risk: Variable values are used directly but pose no direct command injection risk", "code_snippet": "printf \"$($CONFIG get wan_ifname)\";\nprintf \"$($CONFIG get Device_name)\";", "link_identifiers": ["wan_ifname", "Device_name", "config get"], "notes": "Audit the implementation security of the /bin/config tool"}
{"name": "script-ntgr_sw_api-nvram-set-sed", "location": "etc/scripts/ntgr_sw_api/ntgr_sw_api.sh: internet_con function", "risk_score": 6.0, "confidence": 7.5, "description": "The SWAPI_PERSISTENT_CONN variable poses risks when processed via sed command:\n1. Writing to NVRAM using config set command\n2. Values processed through sed command ($2 and $3 parameters)\n3. Risk: If parameters contain malicious sed command characters, it may lead to injection", "code_snippet": "$CONFIG set $SWAPI_PERSISTENT_CONN=\"$(printf \"$tvalue\"|sed \"s/$2\\\\ [01]/$2\\\\ $3/\")\"", "link_identifiers": ["SWAPI_PERSISTENT_CONN", "sed", "config set"], "notes": "Suggestions:\n1. Validate the character range of $2/$3\n2. Use a safer string replacement method"}
{"name": "script-ntgr_sw_api-file-read", "location": "etc/scripts/ntgr_sw_api/ntgr_sw_api.sh: sysinfo function", "risk_score": 2.0, "confidence": 6.0, "description": "The script retrieves system information (serial number, model name) through direct file reading, which is safer than NVRAM access:\n1. Reads /tmp/Seria_Number\n2. Reads /module_name\nRisk: Low, but file permissions still need to be checked", "code_snippet": "printf \"$(cat /tmp/Seria_Number)\";\nprintf \"$(cat /module_name)\"", "link_identifiers": ["Seria_Number", "module_name", "cat"], "notes": "Non-NVRAM operation, for reference only"}
{"name": "binary-config-management", "location": "bin/config:0x8760,0x8988", "risk_score": 5.0, "confidence": 6.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["config_get", "config_set", "config_restore", "config_backup", "config_commit"], "notes": "Dynamic analysis or reverse engineering of libconfig.so is required to confirm NVRAM access."}
{"name": "libconfig-CONFIG_DEBUG-env", "location": "usr/lib/libconfig.so:0x12340", "risk_score": 5.0, "confidence": 6.0, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["CONFIG_DEBUG", "REDACTED_SENSITIVE_DATA", "getenv"], "notes": "env_get"}
{"name": "libconfig-CONFIG_PATH-env", "location": "usr/lib/libconfig.so:0x15680", "risk_score": 7.5, "confidence": 7.25, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["CONFIG_PATH", "REDACTED_SENSITIVE_DATA", "strcat"], "notes": "Suggestions:\n1. Implement a path whitelist\n2. Use realpath for normalization"}
{"name": "libconfig-CONFIG_SECRET-env", "location": "usr/lib/libconfig.so:0x18a20", "risk_score": 9.0, "confidence": 6.75, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["CONFIG_SECRET", "fcn.00018a20", "AES_init_ctx"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "init-scripts-config-access", "location": "etc/init.d/uhttpd:61", "risk_score": 1.0, "confidence": 5.0, "description": "Analysis of the scripts /etc/init.d/boot, ubus, and uhttpd revealed no direct NVRAM or environment variable access. The only configuration access found was uhttpd obtaining the hostname via uci_get.", "link_identifiers": ["uci_get", "system.@system[0].hostname"], "notes": "configuration_load"}
