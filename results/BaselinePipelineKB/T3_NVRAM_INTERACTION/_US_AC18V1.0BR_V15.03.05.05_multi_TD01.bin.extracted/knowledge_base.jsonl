{"name": "nvram-get-0x8748", "location": "bin/nvram:0x8748 fcn.000086fc", "risk_score": 6.5, "confidence": 6.5, "description": "The nvram_get function is called at address 0x8748 to retrieve the NVRAM variable value. This call occurs after a string comparison operation and is likely used to obtain specific configuration parameters. Due to the absence of obvious input validation, security vulnerabilities may arise if the variable value is maliciously altered.", "link_identifiers": ["nvram_get", "0x8748", "strcmp"], "notes": "Further analysis of the call chain is required to determine the specific variable name being retrieved"}
{"name": "nvram-set-0x87c8", "location": "bin/nvram:0x87c8 fcn.000086fc", "risk_score": 7.5, "confidence": 7.25, "description": "The nvram_set function is called at address 0x87c8 to set NVRAM variables. This operation involves string copying (strncpy) and separation (strsep) operations, potentially used for configuring multiple parameters. The lack of strict input validation may lead to command injection or buffer overflow vulnerabilities.", "link_identifiers": ["nvram_set", "0x87c8", "strncpy", "strsep"], "notes": "nvram_set"}
{"name": "nvram-unset-0x8808", "location": "bin/nvram:0x8808 fcn.000086fc", "risk_score": 5.0, "confidence": 5.5, "description": "Call the nvram_unset function at address 0x8808 to delete the NVRAM variable. This operation is based on user-provided parameters and may result in accidental deletion of critical configurations.", "link_identifiers": ["nvram_unset", "0x8808"], "notes": "Verify if there is sufficient permission check before the call"}
{"name": "nvram-commit-fcn.000086fc", "location": "bin/nvram:fcn.000086fc", "risk_score": 4.0, "confidence": 5.25, "description": "The function also includes a call to nvram_commit for submitting NVRAM changes. This operation lacks explicit error handling, potentially leading to configuration inconsistencies.", "link_identifiers": ["nvram_commit"], "notes": "It is recommended to add transaction processing and error recovery mechanisms."}
{"name": "bcm_nvram_get-fcn.0003ca5c", "location": "bin/httpd:0x3cbf4 fcn.0003ca5c", "risk_score": 8.5, "confidence": 8.0, "description": "The function fcn.0003ca5c calls bcm_nvram_get to retrieve NVRAM variables, where the variable names are constructed through formatted strings, posing a potential formatted string vulnerability risk. The retrieved values are subsequently used for system command execution, which may lead to command injection.", "link_identifiers": ["bcm_nvram_get", "doSystemCmd", "sprintf"], "notes": "Verify whether the formatted string is user-controlled"}
{"name": "bcm_nvram_set-wifi_config", "location": "bin/httpd:0x67078 sym.form_fast_setting_wifi_set", "risk_score": 7.0, "confidence": 7.0, "description": "The function sym.form_fast_setting_wifi_set makes multiple calls to bcm_nvram_set to configure WiFi-related settings, including sensitive parameters such as 'wl0_country_code'. These values are written directly to NVRAM without validation, potentially allowing configurations to be tampered with.", "link_identifiers": ["bcm_nvram_set", "wl0_country_code", "form_fast_setting_wifi_set"], "notes": "Check if there is sufficient permission control"}
{"name": "bcm_nvram_get-wifi_power", "location": "bin/httpd:0x69bc0 sym.REDACTED_SECRET_KEY_PLACEHOLDER", "risk_score": 7.5, "confidence": 7.5, "description": "In the function sym.REDACTED_SECRET_KEY_PLACEHOLDER, WiFi power settings such as 'wl0_country' are obtained through bcm_nvram_get and used for critical configurations. The lack of input validation may lead to illegal power settings.", "link_identifiers": ["bcm_nvram_get", "wl0_country", "REDACTED_SECRET_KEY_PLACEHOLDER"], "notes": "Verify the power value range check"}
{"name": "envram_get_value-fcn.00067a0c", "location": "bin/httpd:0x67a30 fcn.00067a0c", "risk_score": 8.0, "confidence": 6.75, "description": "The function fcn.00067a0c retrieves environment variable values using envram_get_value but fails to verify the return value length, potentially leading to buffer overflow.", "link_identifiers": ["envram_get_value", "fcn.00067a0c"], "notes": "env_get"}
{"name": "bcm_nvram_set-pptpd", "location": "bin/httpd:0xb6f3c sym.REDACTED_SECRET_KEY_PLACEHOLDER", "risk_score": 7.0, "confidence": 6.75, "description": "The function sym.REDACTED_SECRET_KEY_PLACEHOLDER configures PPTP server settings, including parameters such as 'pptpd_enable', via bcm_nvram_set. These configurations could potentially be used to enable unauthorized VPN services.", "link_identifiers": ["bcm_nvram_set", "pptpd_enable", "REDACTED_SECRET_KEY_PLACEHOLDER"], "notes": "Check if there is an authentication mechanism protecting these settings."}
{"name": "envram_set_value-fcn.00067ae8", "location": "bin/httpd:0x67b24 fcn.00067ae8", "risk_score": 8.0, "confidence": 6.75, "description": "The function fcn.00067ae8 uses envram_set_value to set environment variables, but first logs the operation via printf, introducing a potential format string vulnerability.", "link_identifiers": ["envram_set_value", "printf", "fcn.00067ae8"], "notes": "Need to verify if the parameters of printf are user-controlled"}
{"name": "wireless_repeat_config", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 8.5, "confidence": 8.25, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["bcm_nvram_set", "bcm_nvram_get", "wl0.1_ssid", "REDACTED_SENSITIVE_DATA"], "notes": "Verify the security boundaries of wireless configuration"}
{"name": "bcm_nvram_set-pptp_client", "location": "bin/httpd:0xb977c sym.REDACTED_SECRET_KEY_PLACEHOLDER", "risk_score": 7.5, "confidence": 7.0, "description": "The function sym.REDACTED_SECRET_KEY_PLACEHOLDER configures PPTP client settings via bcm_nvram_set, including parameters such as 'pptp_client_enable'. These configurations could potentially be used to establish unauthorized VPN connections.", "link_identifiers": ["bcm_nvram_set", "pptp_client_enable", "REDACTED_SECRET_KEY_PLACEHOLDER"], "notes": "Check the authentication mechanism of the VPN connection"}
{"name": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 5.0, "confidence": 5.5, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["REDACTED_SENSITIVE_DATA", "envram_get", "strcmp"], "notes": "Further analysis of the data at 0x8790 and 0x8794 is required to determine the specific NVRAM variable name."}
{"name": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 6.0, "confidence": 6.0, "description": "Calls to envram_set are found within the same function. When the first parameter equals 3 and passes a specific strcmp check, envram_set is invoked to set an NVRAM variable. Again, specific variable name information is lacking.", "link_identifiers": ["REDACTED_SENSITIVE_DATA", "envram_set", "strcmp"], "notes": "envram_set"}
{"name": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 4.0, "confidence": 5.5, "description": "Detected a call to envram_show, used to display NVRAM content. Called when the first parameter equals 2 and passes the strcmp check.", "link_identifiers": ["REDACTED_SENSITIVE_DATA", "envram_show", "strcmp"], "notes": "Potential leakage of sensitive NVRAM configuration information"}
{"name": "etc_ro-config-analysis", "location": "etc_ro/", "risk_score": 0.0, "confidence": 4.5, "description": "Analysis of all configuration files and scripts in the etc_ro directory has been completed. No access to NVRAM or environment variables (getenv) was found in the examined files (wds.sh, vsftpd.conf, smb.conf, rcS, minidlna.conf).", "link_identifiers": [], "notes": "It is recommended to further analyze binary files in other directories (such as bin, sbin), as these files are more likely to contain access to environment variables. The etc directory is a symbolic link and cannot be directly accessed, potentially requiring alternative analysis methods."}
{"name": "arp-getenv-calls", "location": "sbin/arp (HIDDEN)", "risk_score": 5.0, "confidence": 5.5, "description": "21 calls to getenv were found in sbin/arp, distributed across multiple functions and address locations. Due to incomplete decompilation results, the specific environment variable names being accessed could not be determined. These calls are likely used to retrieve environment variables related to network configuration.", "link_identifiers": ["sym.imp.getenv", "fcn.0000d144", "fcn.0002f830", "fcn.0004d3f0", "fcn.0004f1a8", "REDACTED_SENSITIVE_DATA"], "notes": "Further decompilation or dynamic analysis is required to determine the specific environment variable names and usage patterns."}
{"name": "busybox-terminal-env", "location": "bin/busybox:0xd15c (fcn.0000d144)", "risk_score": 2.0, "confidence": 6.0, "description": "Access to terminal environment variables 'LINES' and 'COLUMNS' was detected in busybox. These variables are retrieved via getenv() and may be used to control terminal display formatting. The access occurs in function fcn.0000d45c, indirectly called through fcn.0000d144.", "code_snippet": "iVar1 = sym.imp.getenv(param_3);", "link_identifiers": ["getenv", "LINES", "COLUMNS", "fcn.0000d144", "fcn.0000d45c"], "notes": "These environment variables are typically used to control terminal display and pose low risks. However, if an attacker can manipulate these variables, they may affect the display behavior of certain terminal-related functions."}
{"name": "nginx-env-access", "location": "usr/bin/nginx:0xb07c fcn.0000a8d8", "risk_score": 4.0, "confidence": 7.25, "description": "The access to the 'NGINX' environment variable was detected in the nginx binary file (usr/bin/nginx). This access occurs at address 0xb07c within function fcn.0000a8d8. The environment variable value is used for socket configuration, and an error message will be printed if the variable value format is incorrect. Potential risks include: 1) The environment variable could be set by malicious users; 2) If the value is used for sensitive operations or command construction, it may lead to security issues. However, the current code indicates it is only used for socket configuration, presenting relatively low risk.", "code_snippet": "ldr r0, aav.0x000776dc ; [0x776dc:4]=0x4e49474e ; \"NGINX\" ; const char *name\nbl sym.imp.getenv ; char *getenv(const char *name)", "link_identifiers": ["getenv", "NGINX", "fcn.0000a8d8", "0xb07c", "socket"], "notes": "It is recommended to further analyze how nginx utilizes this environment variable value, particularly checking for potential command injection or other insecure operations."}
{"name": "libnvram-core-functions", "location": "lib/libnvram.so", "risk_score": 7.5, "confidence": 7.5, "description": "The core NVRAM operation functions, including nvram_get, nvram_set, nvram_unset, and nvram_commit, were discovered in libnvram.so. These functions operate through the /dev/nvram device.", "link_identifiers": ["nvram_get", "nvram_set", "nvram_unset", "nvram_commit", "/dev/nvram"], "notes": "These are basic NVRAM operation functions, and the upper-level code calling these functions needs to be checked."}
{"name": "libshared-advanced-functions", "location": "lib/libshared.so", "risk_score": 6.0, "confidence": 6.5, "description": "Advanced NVRAM operation functions, including nvram_default_get and nvram_restore_var, were discovered in libshared.so. These functions may be used for handling default values and restoring configurations.", "link_identifiers": ["nvram_default_get", "nvram_restore_var", "nvram_validate_all"], "notes": "These functions may contain business logic and require further analysis of their implementation."}
{"name": "libcommon-broadcom-functions", "location": "lib/libcommon.so", "risk_score": 6.5, "confidence": 7.0, "description": "The Broadcom-specific NVRAM functions bcm_nvram_set and bcm_nvram_commit were discovered in libcommon.so.", "link_identifiers": ["bcm_nvram_set", "bcm_nvram_commit"], "notes": "These may be vendor-specific NVRAM implementations"}
{"name": "no-direct-risk-found", "location": "N/A", "risk_score": 5.0, "confidence": 5.5, "description": "No obvious security risks were identified during the analysis, such as unvalidated inputs being directly used for command execution. However, further analysis is required to examine how upper-layer applications invoke these functions.", "link_identifiers": [], "notes": "Analyze the application code to confirm the usage of NVRAM variables."}
