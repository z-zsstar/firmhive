{"name": "web-[SECRET_VALUE]-login_authorization_cookie", "file_path": "web/frame/login.htm", "location": "web/frame/login.htm", "risk_score": 5.0, "confidence": 7.5, "description": "[SECRET_VALUE]", "code_snippet": "[SECRET_VALUE]", "link_identifiers": ["[SECRET_VALUE]", "PCSubWin", "Base64Encoding", "[SECRET_VALUE]orization", "document.cookie"], "notes": "[SECRET_VALUE]"}
{"name": "[SECRET_VALUE]", "file_path": "[SECRET_VALUE]", "location": "[SECRET_VALUE].htm", "risk_score": 5.0, "confidence": 8.0, "description": "[SECRET_VALUE]", "code_snippet": "[SECRET_VALUE]", "link_identifiers": ["PCSubWin", "Base64Encoding", "REDACTED_[SECRET_VALUE]_PLACEHOLDER", "REDACTED_[SECRET_VALUE]_PLACEHOLDER", "[SECRET_VALUE]orization"], "notes": "Further analysis of the backend processing logic is required to determine whether user input is being passed to hazardous functions. It is recommended to shift the analytical focus to backend processing files, such as CGI scripts or binary files."}
{"name": "[SECRET_VALUE]", "file_path": "web/frame/set[SECRET_VALUE].htm", "location": "web/frame/set[SECRET_VALUE].htm", "risk_score": 6.0, "confidence": 7.5, "description": "[SECRET_VALUE]", "code_snippet": "function doSetPassword() {\n    var xmlHttpObj;\n    xmlHttpObj = getHttpObject(function() {\n        if (xmlHttpObj.status == 200) {\n            window.location.reload();\n        } else\n            return;\n    });\n    var prePwd = [SECRET_VALUE](Base64Encoding($(\"newPwd\").value));\n    xmlHttpObj.open(\"POST\", \"http://\" + window.location.hostname + \"/cgi/setPwd?[SECRET_VALUE]=\" + prePwd, true);\n    xmlHttpObj.send(null);\n}", "link_identifiers": ["new[SECRET_VALUE]", "confirm", "doSet[SECRET_VALUE]", "PCSubWin", "Base64Encoding", "/cgi/set[SECRET_VALUE]", "[SECRET_VALUE]"], "notes": "Further analysis of the '/cgi/set[SECRET_VALUE]' CGI script is required to confirm the existence of security risks such as command injection. It is recommended to verify whether the server-side performs proper validation and processing of [SECRET_VALUE]s."}
{"name": "web-component-bot.htm-info", "file_path": "web/frame/bot.htm", "location": "web/frame/bot.htm", "risk_score": 1.0, "confidence": 4.5, "description": "The file 'web/frame/bot.htm' is an HTML file primarily used to display hardware and software version information of the device. Analysis did not reveal direct handling of HTTP requests or calls to dangerous functions. The methods `$.act` and `$.exe` used in the file may involve backend processing, but the current file does not provide sufficient context to determine their security. It is recommended to further analyze other web components in the firmware, particularly implementations related to `$.act` and `$.exe`.", "link_identifiers": ["$.act", "$.exe", "bot.htm", "devInfo", "softwareVersion", "hardwareVersion"], "notes": "It is recommended to further analyze other web components in the firmware, particularly the implementations related to `$.act` and `$.exe`, to determine whether security risks exist."}
{"name": "web-component-menu.cgi-reference", "file_path": "web/frame/menu.htm", "location": "web/frame/menu.htm", "risk_score": 6.0, "confidence": 6.0, "description": "Multiple referenced HTML pages and a critical CGI script './frame/menu.cgi' were found in the 'web/frame/menu.htm' file. These references indicate that 'menu.cgi' may be the dynamic component handling HTTP requests, while the other HTML pages might contain user input points. It is recommended to further analyze the 'menu.cgi' script to determine whether external HTTP inputs are being passed to hazardous functions.", "link_identifiers": ["menu.cgi", "networkMap.htm", "wanBasic.htm", "wirelessBasic.htm", "voice_basic.htm", "usbManage.htm", "parentCtrl.htm", "iptv.htm", "status.htm", "sysMode.htm", "ethWan.htm", "wan.htm", "dhcp.htm", "group.htm", "dslcfg.htm", "ddns.htm", "route.htm", "ipsec.htm", "ipv6Tunnel.htm", "[SECRET_VALUE].htm", "wps.htm", "macFilter.htm", "[SECRET_VALUE].htm", "wirelessStat.htm", "wirelessAdv.htm", "[SECRET_VALUE].htm", "voice_advance.htm", "voice_telebook.htm", "voice_telephony.htm", "voice_calllog.htm", "voice_electionRule.htm", "voice_callblocks.htm", "voice_callforward.htm", "voice_callthrough.htm", "voice_dectadv.htm", "voice_usbmail.htm", "alg.htm", "virtualServer.htm", "portTrigger.htm", "dmz.htm", "upnp.htm", "diskSettings.htm", "folderSharing.htm", "printSrv.htm", "usb3g.htm", "parentCtrl.htm", "trafficCtrl.htm", "accessControl.htm", "arpBind.htm", "time.htm", "diagnostic.htm", "softup.htm", "backNRestore.htm", "manageCtrl.htm", "log.htm", "cwmp.htm", "snmp.htm", "stat.htm"], "notes": "It is recommended to further analyze the 'menu.cgi' script and other referenced HTML pages, especially those that may contain user input forms."}
{"name": "[SECRET_VALUE]", "file_path": "web/frame/top.htm", "location": "top.htm", "risk_score": 0.0, "confidence": 6.0, "description": "In the 'top.htm' file, a backend handler named 'menu.cgi' is invoked via `$.cgi('./frame/menu.cgi')`. This indicates that 'menu.cgi' may be a critical component for processing HTTP requests, though its implementation cannot be directly verified due to environmental constraints. It is recommended to further analyze the 'menu.cgi' file in an environment with access to the 'frame' directory, examining how it processes HTTP request parameters, particularly whether parameters are passed to hazardous functions.", "link_identifiers": ["$.cgi", "menu.cgi", "frame/menu.cgi"], "notes": "It is recommended to continue analyzing the 'menu.cgi' file in an environment with access to the 'frame' directory, examining how it processes HTTP request parameters, particularly checking whether parameters are passed to dangerous functions."}
{"name": "menu-cgi-html-references", "file_path": "web/frame/top.htm", "location": "web/frame/menu.htm", "risk_score": 6.0, "confidence": 6.5, "description": "Comprehensive analysis reveals that 'menu.cgi' is referenced by multiple HTML files, including 'top.htm' and 'menu.htm'. 'menu.htm' lists numerous pages that may contain user input (such as 'wanBasic.htm', 'wirelessBasic.htm', etc.), and these pages likely process user-submitted data through 'menu.cgi'. This indicates that 'menu.cgi' may serve as the core processing component of the web interface, responsible for handling HTTP requests from multiple pages.", "link_identifiers": ["menu.cgi", "wanBasic.htm", "wirelessBasic.htm", "voice_basic.htm", "usbManage.htm", "parentCtrl.htm", "iptv.htm", "status.htm", "sysMode.htm", "ethWan.htm", "wan.htm", "dhcp.htm", "group.htm", "dslcfg.htm", "ddns.htm", "route.htm", "ipsec.htm", "ipv6Tunnel.htm", "[SECRET_VALUE].htm", "wps.htm", "macFilter.htm", "[SECRET_VALUE].htm", "wirelessStat.htm", "wirelessAdv.htm", "[SECRET_VALUE].htm", "voice_advance.htm", "voice_telebook.htm", "voice_telephony.htm", "voice_calllog.htm", "voice_electionRule.htm", "voice_callblocks.htm", "voice_callforward.htm", "voice_callthrough.htm", "voice_dectadv.htm", "voice_usbmail.htm", "alg.htm", "virtualServer.htm", "portTrigger.htm", "dmz.htm", "upnp.htm", "diskSettings.htm", "folderSharing.htm", "printSrv.htm", "usb3g.htm", "parentCtrl.htm", "trafficCtrl.htm", "accessControl.htm", "arpBind.htm", "time.htm", "diagnostic.htm", "softup.htm", "backNRestore.htm", "manageCtrl.htm", "log.htm", "cwmp.htm", "snmp.htm", "stat.htm"], "notes": "Priority should be given to analyzing the 'menu.cgi' script while examining form elements in the listed HTML pages to determine how user input is passed to 'menu.cgi'. Particular attention should be paid to network configuration, wireless settings, USB management, and other pages that may involve sensitive operations."}
{"name": "system-init-rcS-webconfig", "file_path": "etc/init.d/rcS", "location": "rcS", "risk_score": 1.0, "confidence": 4.5, "description": "No configuration information related to web services or paths to CGI scripts was found in the rcS file. The file content primarily involves system initialization, network configuration, and hardware driver loading. This finding helps narrow down the search scope for web service configuration.", "link_identifiers": ["rcS", "system_init"], "notes": "It is recommended to check other system startup scripts or configuration files, such as those in the '/etc/inittab' or '/etc/init.d/' directories, to locate web service-related configuration information."}
{"name": "[SECRET_VALUE]", "file_path": "sbin/hotplug_firm", "location": "sbin/hotplug_firm", "risk_score": 0.0, "confidence": 5.0, "description": "The file 'sbin/hotplug_firm' is a shell script that handles system hotplug events and is unrelated to web service components. No strings or function calls related to HTTP request processing were found, nor were there any direct calls to dangerous functions. This file does not contain the vulnerability we are searching for.", "link_identifiers": ["hotplug", "hotplug.d", ".hotplug"], "notes": "Consider shifting the focus of analysis to other directories more likely related to web services, such as '/www' or '/cgi-bin', to locate programs handling HTTP requests and identify potential vulnerabilities."}
{"name": "[SECRET_VALUE]", "file_path": "sbin/usbp", "location": "sbin/usbp:0x400d84", "risk_score": 4.0, "confidence": 5.0, "description": "In the file 'sbin/usbp', a call to the 'system' function was found, executing the command 'echo open /proc/diskstats failed! >/dev/ttyS0'. Although this command is a fixed error-handling logic and does not directly process external input, the use of the 'system' function remains a potential security risk. Further verification is required to determine if there are other code paths that call 'system' or other dangerous functions, especially those that may handle external input.", "code_snippet": "echo open /proc/diskstats failed! >/dev/ttyS0", "link_identifiers": ["system", "echo", "/proc/diskstats", "/dev/ttyS0"], "notes": "It is recommended to further analyze other parts of the file to confirm whether there are code paths that handle external input and whether there are calls to other dangerous functions."}
{"name": "[SECRET_VALUE]", "file_path": "[SECRET_VALUE]", "location": "[SECRET_VALUE]", "risk_score": 6.0, "confidence": 8.0, "description": "[SECRET_VALUE]", "code_snippet": "function clickSave(wlanObj, band) {\n  if (checkSSID(band) == false) {\n    return;\n  }\n  if (checkValue(band) == false) {\n    return;\n  }\n\n  wlSettings = saveDM(wlanObj, band);\n  setDM(wlanObj, wlSettings);\n}", "link_identifiers": ["clickSave", "saveDM", "setDM", "wpa2Personal[SECRET_VALUE]", "[SECRET_VALUE]", "wep[SECRET_VALUE]1Value", "wep[SECRET_VALUE]2Value", "wep[SECRET_VALUE]3Value", "wep[SECRET_VALUE]4Value", "[SECRET_VALUE]", "[SECRET_VALUE]"], "notes": "[SECRET_VALUE]"}
{"name": "web-frontend-folderSharing", "file_path": "[SECRET_VALUE]", "location": "[SECRET_VALUE]", "risk_score": 6.0, "confidence": 6.5, "description": "[SECRET_VALUE]", "code_snippet": "", "link_identifiers": ["$.act", "ACT_SET", "ACT_GET", "ACT_GL", "ACT_ADD", "ACT_DEL", "SMB_SERVICE", "FTP_SERVER", "DLNA_MEDIA_SERVER", "USER_ACCOUNT", "LOGICAL_VOLUME", "USB_DEVICE", "folderPath", "shareName", "REDACTED_[SECRET_VALUE]_PLACEHOLDER", "[SECRET_VALUE]", "portNumber", "[SECRET_VALUE]", "escapeStr", "transStr"], "notes": "Further analysis of the backend CGI scripts is required to confirm the actual security impact. Focus on the backend interfaces that handle $.act() calls."}
{"name": "[SECRET_VALUE]", "file_path": "web/js/lib.js", "location": "lib.js", "risk_score": 8.0, "confidence": 7.75, "description": "The file 'lib.js' contains multiple functions (tpAjax, io, cgi, exe) that handle HTTP requests and process user input without proper sanitization. These functions can execute scripts from the response text when 'bScript' is true, equivalent to 'eval' in risk. This behavior allows arbitrary script execution if the response text is malicious. The vulnerability is triggered when: 1) The response text contains malicious scripts, and 2) 'bScript' is set to true. This could lead to remote code execution or session hijacking if an attacker controls the response text (e.g., via server compromise or MITM attacks).", "code_snippet": "var [SECRET_VALUE] = function() {\n    if (xhr.readyState == 4) {\n        if (s.bScript)\n            $.script(xhr.responseText);\n        if (s.success)\n            s.success(s.bScript ? 0 : xhr.responseText);\n    }\n};", "link_identifiers": ["tpAjax", "io", "cgi", "exe", "XMLHttpRequest", "eval", "exec", "script", "responseText", "bScript"], "notes": "The functions should be modified to sanitize the response text before execution. Additionally, the use of 'bScript' should be reviewed to ensure it is only enabled when absolutely necessary and with trusted sources. Further analysis of the server-side components generating the responses is recommended to ensure they are not vulnerable to injection attacks."}
{"name": "[SECRET_VALUE]", "file_path": "[SECRET_VALUE]", "location": "virtualServer.htm", "risk_score": 2.0, "confidence": 6.0, "description": "[SECRET_VALUE]", "code_snippet": "[SECRET_VALUE]", "link_identifiers": ["initTable", "doEdit", "doEnable", "doDel", "isPort", "[SECRET_VALUE]", "[SECRET_VALUE]", "ACT_GET", "ACT_SET", "ACT_ADD", "ACT_DEL", "WAN_IP_CONN_PORTMAPPING", "WAN_PPP_CONN_PORTMAPPING", "WAN_L2TP_CONN_PORTMAPPING", "WAN_PPTP_CONN_PORTMAPPING", "FTP_SERVER"], "notes": "The user input validation in the file is relatively strict, but it is still recommended to further examine how the backend service processes these inputs to ensure there are no potential vulnerabilities."}
{"name": "web-WANConfig-$.act()", "file_path": "web/main/wanBasic.htm", "location": "web/main/wanBasic.htm", "risk_score": 7.0, "confidence": 7.75, "description": "[SECRET_VALUE]", "code_snippet": "N/A (JavaScript file)", "link_identifiers": ["$.act()", "doSave()", "WAN_PPP_CONN", "WAN_IP_CONN", "saveBtn", "usrPPPoE", "[SECRET_VALUE]PPPoE"], "notes": "Further analysis is required: 1) The specific implementation of $.act(); 2) Whether backend interfaces have command injection risks; 3) Whether input validation is sufficient. It is recommended to examine how the relevant CGI scripts or binary files handle these requests."}
{"name": "[SECRET_VALUE]", "file_path": "[SECRET_VALUE]", "location": "web/frame/top.htm", "risk_score": 0.0, "confidence": 6.0, "description": "In the 'top.htm' file, a backend handler named 'menu.cgi' is invoked via `$.cgi('./frame/menu.cgi')`. This indicates that 'menu.cgi' may be a critical component for processing HTTP requests, and its implementation needs to be analyzed to confirm whether HTTP parameters are passed to dangerous functions.", "code_snippet": "", "link_identifiers": ["$.cgi", "menu.cgi", "frame/menu.cgi"], "notes": "Further analysis of the specific implementation of the 'menu.cgi' file is required to examine how it processes HTTP request parameters, particularly whether there are cases where parameters are passed to dangerous functions."}
{"name": "[SECRET_VALUE]", "file_path": "[SECRET_VALUE]", "location": "lib.js", "risk_score": 8.0, "confidence": 7.75, "description": "The file 'lib.js' contains multiple functions (tpAjax, io, cgi, exe) that handle HTTP requests and process user input without proper sanitization. These functions can execute scripts from the response text when 'bScript' is true, equivalent to 'eval' in risk. This behavior allows arbitrary script execution if the response text is malicious. The vulnerability is triggered when: 1) The response text contains malicious scripts, and 2) 'bScript' is set to true. This could lead to remote code execution or session hijacking if an attacker controls the response text (e.g., via server compromise or MITM attacks).", "code_snippet": "var [SECRET_VALUE] = function() {\n    if (xhr.readyState == 4) {\n        if (s.bScript)\n            $.script(xhr.responseText);\n        if (s.success)\n            s.success(s.bScript ? 0 : xhr.responseText);\n    }\n};", "link_identifiers": ["tpAjax", "io", "cgi", "exe", "XMLHttpRequest", "eval", "exec", "script", "responseText", "bScript"], "notes": "The functions should be modified to sanitize the response text before execution. Additionally, the use of 'bScript' should be reviewed to ensure it is only enabled when absolutely necessary and with trusted sources. Further analysis of the server-side components generating the responses is recommended to ensure they are not vulnerable to injection attacks."}
