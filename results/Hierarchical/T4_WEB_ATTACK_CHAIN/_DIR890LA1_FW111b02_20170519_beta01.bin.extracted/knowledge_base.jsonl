{"name": "web-cgi-dangerous_functions-fcn.0000eab0", "file_path": "htdocs/cgibin", "location": "htdocs/cgibin", "risk_score": 8.5, "confidence": 7.75, "description": "Multiple security vulnerabilities were discovered in the 'htdocs/cgibin' file:\n1. The function 'fcn.0000eab0' contains multiple 'system()' calls. Although hardcoded strings are used, potential command injection risks still require vigilance.\n2. More severe security issues exist in other CGI processing functions, including:\n   - Multiple 'system()' calls using parameters potentially controllable by attackers\n   - Insecure 'sprintf()' calls that may lead to buffer overflows\n   - Environment variables obtained via 'getenv()' that could be controlled by attackers\n3. The HTTP request parameter processing logic contains potential risks of user input contamination.", "code_snippet": "", "link_identifiers": ["fcn.0000eab0", "system", "sprintf", "getenv", "strcasecmp", "atoi", "fopen", "fgets", "fclose", "dlapn.cgi", "dldongle.cgi", "dlcfg.cgi", "seama.cgi", "fwup.cgi"], "notes": "It is recommended to further verify the specific content of hardcoded strings and examine the security issues of other CGI processing functions. Special attention should be paid to how user input is obtained and passed to these dangerous functions."}
{"name": "buffer_overflow-fileaccess.cgi-0x0000a40c", "file_path": "htdocs/fileaccess.cgi", "location": "fileaccess.cgi:0x0000a40c", "risk_score": 8.0, "confidence": 7.5, "description": "A buffer overflow risk was identified in function fcn.0000a40c:\n1. The strncpy function is used to copy HTTP request parameters into a fixed-size buffer (0x40 bytes). Although there is a length check (piVar4[-2] < 0x40), the source data originates from unvalidated HTTP request parameters (*piVar4).\n2. Before the function returns, strcpy is used to copy the processed data to the target buffer (piVar4[-0x50]) without any length check.\n\nTrigger conditions:\n- An attacker can control HTTP request parameters (via query strings or HTTP headers)\n- The parameter length exceeds the size of the target buffer\n\nSecurity impact:\n- May lead to buffer overflow, potentially enabling remote code execution or service crash", "code_snippet": "strncpy(piVar4[-0x130], *piVar4, 0x40);\nstrcpy(piVar4[-0x50], piVar4[-0x130]);", "link_identifiers": ["fcn.0000a40c", "strncpy", "strcpy", "piVar4[-0x130]", "piVar4[-0x50]", "0x52a8", "0x3f", "HTTPHIDDEN"], "notes": "Further verification is required for the actual size of the target buffer and the calling context."}
{"name": "format_string-fileaccess.cgi-0x0000ac44", "file_path": "htdocs/fileaccess.cgi", "location": "fileaccess.cgi:0x0000ac44", "risk_score": 7.0, "confidence": 7.0, "description": "A formatting string vulnerability has been identified in function fcn.0000ac44:\n1. The function uses sprintf to process data from HTTP environment variables (getenv) or request handling results\n2. Format string addresses are 0x5488 | 0x30000 and 0x54b0 | 0x30000, but specific contents are unknown\n\nTrigger conditions:\n- Attacker can control HTTP request parameters\n- Format string contains user-controllable portions\n\nSecurity impact:\n- May lead to format string vulnerability, potentially enabling memory read or write operations", "code_snippet": "sprintf(puVar6, 0x5488 | 0x30000, ...);\nsprintf(puVar6, 0x54b0 | 0x30000, ...);", "link_identifiers": ["fcn.0000ac44", "sprintf", "getenv", "puVar6", "0x5488", "0x54b0", "fcn.0000a40c"], "notes": "Further parsing is required for the specific content of the formatted string."}
{"name": "web-cgi-command-injection", "file_path": "htdocs/fileaccess.cgi", "location": "fileaccess.cgi:fcn.0000d624, fileaccess.cgi:fcn.0000bc34, fileaccess.cgi:HIDDEN", "risk_score": 8.5, "confidence": 7.75, "description": "Multiple security vulnerabilities were identified in the file 'htdocs/fileaccess.cgi': 1) The function fcn.0000d624 constructs a command string using sprintf and directly passes it to the system function, with parameters sourced from the param_1 structure that may contain user-controllable input, posing a command injection risk; 2) The function fcn.0000bc34 directly invokes the system function to execute hardcoded commands; 3) Multiple instances of strcpy usage for string copying may lead to buffer overflow vulnerabilities.", "code_snippet": "HIDDENï¼ŒHIDDENsprintf+systemHIDDENstrcpyHIDDEN", "link_identifiers": ["fcn.0000d624", "system", "sprintf", "param_1", "fcn.0000bc34", "strcpy"], "notes": "Further analysis of the source of param_1 is required to confirm the degree of user control over the input and to verify the specific trigger conditions for these vulnerabilities."}
{"name": "command-injection-fcn.000175f4", "file_path": "htdocs/cgibin", "location": "fcn.000175f4:0x17a50", "risk_score": 8.5, "confidence": 7.75, "description": "A remote command injection vulnerability was discovered in function fcn.000175f4 (address 0x17a50). An attacker can inject malicious commands by controlling the environment variable *(puVar6 + -0x1c) in HTTP requests. The vulnerability constructs command strings using sprintf and executes them via system without proper input validation.", "code_snippet": "sym.imp.sprintf(0x7544 | 0x30000,0xbf50 | 0x20000,0xbf1c | 0x20000,*(puVar6 + -0x1c));\nsym.imp.system(0x7544 | 0x30000);", "link_identifiers": ["fcn.000175f4", "system", "sprintf", "getenv", "*(puVar6 + -0x1c)"], "notes": "It is recommended to identify the HTTP interface calling this function and verify the source of the environment variables."}
{"name": "potential-command-injection-fcn.00012be4", "file_path": "htdocs/cgibin", "location": "cgibin: fcn.00012be4", "risk_score": 6.0, "confidence": 6.0, "description": "A potential command injection vulnerability has been identified in function fcn.00012be4, involving the use of the CONTENT-LENGTH environment variable. Although the risk is low, it is still necessary to verify whether this variable could be passed to dangerous functions.", "link_identifiers": ["fcn.00012be4", "getenv", "CONTENT-LENGTH", "system", "sprintf"], "notes": "Further validation is required for the usage path of the CONTENT-LENGTH environment variable."}
{"name": "REDACTED_SENSITIVE_DATA", "file_path": "htdocs/cgibin", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 6.5, "confidence": 5.75, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["REDACTED_SENSITIVE_DATA", "strcpy", "REDACTED_SENSITIVE_DATA"], "notes": "Validate input length and buffer size."}
{"name": "file-access-WEBACCESS.php", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 2.0, "confidence": 5.0, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["WEBACCESS.php", "etc/services"], "notes": "Please provide a more specific file path or adjust the working directory settings to access the target file."}
{"name": "analysis-V6IN4-TUNNEL-no_http_input", "file_path": "etc/scripts/V6IN4-TUNNEL.php", "location": "V6IN4-TUNNEL.php", "risk_score": 0.0, "confidence": 4.5, "description": "No code segments directly using HTTP input parameters such as $_GET or $_POST were found in the file 'etc/scripts/V6IN4-TUNNEL.php'. This file primarily handles the creation and destruction of IPv6 tunnels, utilizing system commands like 'ip tunnel add' and 'ip link set'. However, the parameters for these commands are sourced from global variables or function parameters, rather than directly from HTTP input. Consequently, no vulnerabilities involving passing HTTP input to hazardous functions were identified.", "link_identifiers": ["add_tunnel", "del_tunnel", "tunnel_create", "tunnel_destroy", "ip tunnel add", "ip link set"], "notes": "Although no direct vulnerabilities were found, it is recommended to further inspect the sources of global variables (such as $_GLOBALS) to ensure they have not been compromised."}
{"name": "web-http-service-startup", "file_path": "etc/services/HTTP.php", "location": "etc/services/HTTP.php", "risk_score": 0.0, "confidence": 4.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "N/A", "link_identifiers": ["httpcfg.php", "phyinf.php", "httpd_conf", "fwrite", "START", "STOP"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "web-factorydefault-php-analysis", "file_path": "REDACTED_SENSITIVE_DATA", "location": "factorydefault.php", "risk_score": 0.0, "confidence": 5.0, "description": "The file 'factorydefault.php' is a POSIX shell script primarily used for handling factory default settings of routers. The script does not utilize HTTP request parameters (such as $_GET, $_POST) or dangerous functions (like system, exec, etc.). Therefore, there is no scenario in this file where HTTP request parameters are directly passed to dangerous functions.", "link_identifiers": [], "notes": "The function of this file is unrelated to HTTP request parameter processing and is primarily used for configuring the router's network rules."}
{"name": "analysis-adapter_cmd.php-no_http_input", "file_path": "etc/scripts/adapter_cmd.php", "location": "etc/scripts/adapter_cmd.php", "risk_score": 0.0, "confidence": 4.5, "description": "The file 'etc/scripts/adapter_cmd.php' is primarily used to generate shell scripts and communicate with devices via the 'chat' command. All variables originate from the internal query function query(), with no direct use of external HTTP inputs. Therefore, this file does not exhibit vulnerabilities where HTTP inputs are passed to dangerous functions in the current context.", "link_identifiers": ["query", "chat", "devname", "cmdport"], "notes": "The functionality of this script is relatively simple, primarily used for device communication and does not involve HTTP request processing. It is recommended to inspect other web service components for potential vulnerabilities."}
{"name": "function-IPV6.INET.php-cmd_msg", "file_path": "etc/scripts/IPV6.INET.php", "location": "IPV6.INET.php", "risk_score": 3.0, "confidence": 5.0, "description": "The IPV6.INET.php file contains functions `cmd()` and `msg()` for executing system commands, but no instances were found where external input is directly passed to these hazardous functions. The file is primarily used for managing IPv6 network interfaces.", "code_snippet": "function cmd($cmd) {echo $cmd.\"\\n\";}\nfunction msg($msg) {cmd(\"echo \".$msg.\" > /dev/console\");}", "link_identifiers": ["cmd", "msg", "ip -6", "system", "exec"], "notes": "Although the file contains functions for executing system commands, no instances were found where external input is directly passed to these functions. It is recommended to further analyze other web service components to identify potential vulnerabilities."}
{"name": "script-IPV6.CHILD.php-config", "file_path": "etc/scripts/IPV6.CHILD.php", "location": "etc/scripts/IPV6.CHILD.php", "risk_score": 0.0, "confidence": 4.5, "description": "The file 'etc/scripts/IPV6.CHILD.php' is a script that handles IPv6 sub-interface configuration and does not directly process HTTP requests or pass external input to dangerous functions. Its primary function is to retrieve sub-interface information through the global variable $_GLOBALS[\"CHILDIF\"] and call other PHP scripts (such as inet_child.php). No direct security issues were identified.", "code_snippet": "N/A", "link_identifiers": ["CHILDIF", "cmd", "msg", "main_entry", "dophp"], "notes": "It is recommended to further analyze other called PHP scripts (such as inet_child.php) to confirm whether there are potential security issues."}
{"name": "script-wpsled-control", "file_path": "etc/scripts/update_wpsled.php", "location": "etc/scripts/update_wpsled.php", "risk_score": 0.0, "confidence": 4.5, "description": "No direct handling of HTTP requests or passing external inputs to dangerous functions was found in the file 'etc/scripts/update_wpsled.php'. The script primarily handles WPS events to control WiFi LEDs by interacting with GPIO through 'usockc' calls. The undefined $EVENT variable requires further investigation into its source.", "code_snippet": "", "link_identifiers": ["$EVENT", "usockc", "get_wifi_bss", "is_active"], "notes": "It is recommended to further investigate the source of the $EVENT variable and the security of the 'usockc' call. Although no direct vulnerabilities exist in the current file, GPIO control may involve permission-related issues."}
{"name": "command_injection-dhcp6s_helper-ip_route", "file_path": "etc/scripts/dhcp6s_helper.php", "location": "dhcp6s_helper.php: add_route(), remove_route()", "risk_score": 8.0, "confidence": 8.0, "description": "A command injection vulnerability was discovered in the 'dhcp6s_helper.php' file. The `add_route()` and `remove_route()` functions directly pass `$_GLOBALS[\"DST\"]`, `$_GLOBALS[\"GATEWAY\"]`, and `$_GLOBALS[\"DEVNAM\"]` to the `cmd()` function to execute the `ip -6 route` command. If these global variables originate from unvalidated HTTP request parameters, attackers could potentially inject arbitrary commands by crafting malicious parameters.", "code_snippet": "cmd(\"ip -6 route add \".$_GLOBALS[\"DST\"].\" via \".$_GLOBALS[\"GATEWAY\"].\" dev \".$_GLOBALS[\"DEVNAM\"].\" table DHCP\\n\");\ncmd(\"ip -6 route del \".$_GLOBALS[\"DST\"].\" table DHCP\\n\");", "link_identifiers": ["cmd", "msg", "$_GLOBALS", "DST", "GATEWAY", "DEVNAM", "ip -6 route"], "notes": "Further verification is needed to determine whether the `$_GLOBALS` variables originate directly from HTTP request parameters. If these variables are not properly validated or escaped, they may lead to command injection attacks. It is recommended to examine the web interface that calls this script and the method of parameter transmission."}
{"name": "command_injection-IP-WAIT.php-GLOBALS_vars", "file_path": "etc/scripts/IP-WAIT.php", "location": "IP-WAIT.php: multiple locations", "risk_score": 7.0, "confidence": 7.5, "description": "The file 'IP-WAIT.php' contains a command injection vulnerability. The script executes command strings passed through the `cmd` function, with command parameters sourced from `$_GLOBALS` global variables (including `INF`, `PHYINF`, `DEVNAM`, `DNS`, and `ME`). If these global variable values originate from unvalidated HTTP inputs (such as GET/POST parameters), attackers could potentially inject arbitrary commands by crafting malicious parameters. Further analysis of the web interface calling this script is required to verify whether the `$_GLOBALS` variables originate from HTTP inputs.", "code_snippet": "function cmd($cmd) {echo $cmd.\"\\n\";}\nmain_entry(\n\t$_GLOBALS[\"INF\"],\n\t$_GLOBALS[\"PHYINF\"],\n\t$_GLOBALS[\"DEVNAM\"],\n\t$_GLOBALS[\"DNS\"],\n\t$_GLOBALS[\"ME\"]\n\t);", "link_identifiers": ["cmd", "main_entry", "$_GLOBALS", "INF", "PHYINF", "DEVNAM", "DNS", "ME"], "notes": "Further analysis is required on the web interface that calls this script to confirm whether the source of the `$_GLOBALS` variable originates from HTTP input. If confirmed to come from HTTP input, a severe command injection vulnerability exists."}
{"name": "network-ipv6-WANPORT-UP", "file_path": "etc/scripts/ipv6-WANPORT-UP.php", "location": "ipv6-WANPORT-UP.php", "risk_score": 1.0, "confidence": 4.5, "description": "The file 'ipv6-WANPORT-UP.php' is a PHP script designed to handle IPv6 DAD, primarily used for executing specific network configuration operations when the WAN port connects. Command execution within the script is performed via `echo` and `ip` commands, with all command parameters constructed through internal variables (such as `$ll_addr` and `$ll_devname`), without directly utilizing external HTTP input.", "code_snippet": "echo \"ip -6 addr del \".$ll_addr.\"/64 dev \".$ll_devname.\" \\n\";\necho \"ip -6 addr add \".$ll_addr.\"/64 dev \".$ll_devname.\" \\n\";", "link_identifiers": ["ip -6 addr del", "ip -6 addr add", "REDACTED_SENSITIVE_DATA", "echo 1 >", "xmldbc -t"], "notes": "The functionality of this script is unrelated to HTTP request handling and is primarily used for network configuration. It is recommended to continue analyzing other files that may process HTTP requests, such as CGI scripts or web interface files."}
{"name": "analysis-S22mydlink.sh-non-web-component", "file_path": "etc/init.d/S22mydlink.sh", "location": "S22mydlink.sh", "risk_score": 0.0, "confidence": 4.5, "description": "Analysis completed, but no code related to web service startup or CGI program invocation was found in the current file (S22mydlink.sh). The script's primary function involves handling mydlink partitions and device UIDs, with no involvement in web service components.", "code_snippet": "", "link_identifiers": ["MYDLINK", "domount", "mydlinkuid", "dev_uid"], "notes": "Further analysis is required for other files that may contain web service startup scripts, such as additional init.d scripts or httpd-related configuration files. It is recommended that the user provide more clues regarding the location of web service components or authorize the analysis of files in other directories."}
{"name": "web-command_injection-usbmount_helper", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 7.0, "confidence": 7.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "setattr(\"/runtime/SMART/\".$prefix.\"/status\", \"get\", \"smartctl -H /dev/\".$dev.\" | grep \\\"SMART Health Status\\\" | cut -d: -f2 | sed -e 's/ //g'\");\necho \"umount `mount | grep \".$dev.\" | cut -d' ' -f3` 2> /dev/null\\n\";\necho \"rm -rf \".$mntp.\"\\n\";", "link_identifiers": ["setattr", "fread", "$prefix", "$pid", "$dev", "$mntp", "$action"], "notes": "Further validation is required for the sources of variables such as `$prefix`, `$pid`, and `$mntp` to confirm whether these variables can be directly controlled via HTTP requests. It is recommended to inspect the web interface that invokes this script to identify potential attack surfaces."}
{"name": "web-update_wanled-echo_command", "file_path": "etc/scripts/update_wanled.php", "location": "update_wanled.php", "risk_score": 2.0, "confidence": 6.0, "description": "The file 'update_wanled.php' is a PHP script used to control the status of the WAN LED. It determines the action to be performed, such as turning the LED on/off or making it blink, through the `$EVENT` parameter. Analysis reveals that the script does not directly pass HTTP parameters to dangerous functions (e.g., `system`, `strcpy`, `sprintf`, etc.). All operations are executed by the system after `echo` outputs shell commands. The `$EVENT` parameter in the script is used for conditional checks but is not directly passed to any dangerous functions. Although the script does not directly use dangerous functions, commands output via `echo` could be subject to injection if the `$EVENT` parameter is unfiltered.", "code_snippet": "if($EVENT == \"WAN_CONNECTED\")\n{\n\techo \"wan_port_status=`psts -i 4`\\n\";\n\techo \"if [ \\\"$wan_port_status\\\" != \\\"\\\" ]; then\\n\";\n\techo \"usockc /var/gpio_ctrl INET_ON\\n\";\n\techo \"fi\\n\";\n}", "link_identifiers": ["$EVENT", "echo", "usockc", "psts"], "notes": "Although the script does not directly use dangerous functions, the commands output via `echo` could be subject to injection if the `$EVENT` parameter is unfiltered. It is recommended to further examine the context in which this script is called to ensure the security of the `$EVENT` parameter. This finding does not meet the criteria of 'directly passed to dangerous functions,' but it represents a potential risk point within the web service component."}
{"name": "command_injection-stopchild.php-uid", "file_path": "REDACTED_SENSITIVE_DATA", "location": "stopchild.php", "risk_score": 8.0, "confidence": 7.75, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "$uid = $_GLOBALS[\"CHILDUID\"];\n$ret = main_entry($uid);\ncmd(\"service INET.\".$uid.\" stop\");", "link_identifiers": ["main_entry", "$uid", "$_GLOBALS", "CHILDUID", "cmd", "service INET.$uid stop"], "notes": "Further verification is required to determine whether $_GLOBALS[\"CHILDUID\"] originates from user-controllable input (such as GET/POST parameters). If confirmed, a severe command injection vulnerability exists."}
{"name": "web-IPV4.INET.php-echo-command", "file_path": "etc/scripts/IPV4.INET.php", "location": "etc/scripts/IPV4.INET.php", "risk_score": 0.0, "confidence": 4.5, "description": "File 'etc/scripts/IPV4.INET.php' was not found to directly pass HTTP inputs (such as GET/POST parameters) to dangerous functions (e.g., `system`, `exec`, `passthru`, `shell_exec`, `eval`, etc.). Although there are instances where commands are output to the shell via `echo` (e.g., `echo \"ip addr add ...\"`), these commands are hardcoded and do not construct command strings using user input.", "link_identifiers": ["echo", "ip addr add", "ip route add", "event", "service"], "notes": "Although no direct vulnerabilities were found, it is recommended to further inspect other PHP files that may receive user input, especially interface files handling HTTP requests."}
{"name": "web-http_update_bridgeled-001", "file_path": "etc/scripts/update_bridgeled.php", "location": "etc/scripts/update_bridgeled.php", "risk_score": 4.0, "confidence": 6.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "if($EVENT == \"LED_OFF\")\n{\n\techo \"usockc /var/gpio_ctrl WIFI5_LED_OFF\\n\";\n\techo \"usockc /var/gpio_ctrl WIFI2_LED_OFF\\n\";\n}", "link_identifiers": ["$EVENT", "usockc", "phywifi.php", "update_bridgeled.php", "GPIO_control"], "notes": "network_input"}
{"name": "command_execution-wlan_set_channel-1", "file_path": "etc/scripts/wlan_get_chanlist.php", "location": "wlan_get_chanlist.php", "risk_score": 5.0, "confidence": 6.0, "description": "The file 'etc/scripts/wlan_get_chanlist.php' sets system commands (such as the `wl -i` command) via the `setattr` function. Although the current script does not directly handle HTTP parameters, the commands configured through `setattr` may be invoked by other components. If the parameters of these commands can be externally controlled (e.g., via HTTP requests), there is a potential risk of command injection.", "code_snippet": "setattr(\"/runtime/get_channel_24\", \"get\",\"wl -i \".$dev_24.\" channels | sed  -e 's/[ ^I]/,/g' | sed 's/,$//g'\")", "link_identifiers": ["setattr", "wl -i", "devname", "BAND24G-1.1", "BAND5G-1.1", "BAND5G-2.1"], "notes": "Further analysis is required to examine how other components invoke these `setattr`-configured commands to determine whether command injection vulnerabilities exist. It is recommended to analyze other scripts or binary files that call these commands, particularly components that handle HTTP requests."}
{"name": "file-ENULA.php-IPv6-ULA", "file_path": "etc/scripts/ENULA.php", "location": "etc/scripts/ENULA.php", "risk_score": 0.0, "confidence": 5.0, "description": "The file 'etc/scripts/ENULA.php' does not directly process HTTP requests. All parameters are passed via `$_GLOBALS`, and no instances of passing HTTP input to dangerous functions were found. This file is primarily used for IPv6 ULA configuration and does not involve HTTP request processing, thus no related vulnerabilities exist.", "link_identifiers": ["$_GLOBALS", "INF", "DEVNAM", "IPADDR", "PREFIX"], "notes": "The functionality of this file is unrelated to HTTP request processing. It is recommended to continue analyzing other web service components to identify potential vulnerabilities."}
{"name": "web-component-control_smart404-analysis", "file_path": "etc/scripts/control_smart404.php", "location": "control_smart404.php", "risk_score": 0.0, "confidence": 4.5, "description": "The file 'etc/scripts/control_smart404.php' does not contain code that directly processes HTTP GET/POST parameters, nor does it pass external inputs to dangerous functions (such as `system`, `strcpy`, `sprintf`, etc.). The file primarily controls different operations through the `$ACTION` parameter, with command execution output to standard output via `echo`, and no direct security risks were identified.", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["$ACTION", "INIT_SMART404", "INIT_EVENTS", "START_DHCP", "STOP_DHCP", "ENABLE", "DISABLE"], "notes": "No direct security risks were detected. It is recommended to check other files to locate the section handling HTTP requests."}
{"name": "command-execution-wfa_igd_handle-exe_ouside_cmd", "file_path": "etc/scripts/wfa_igd_handle.php", "location": "wfa_igd_handle.php", "risk_score": 8.0, "confidence": 8.0, "description": "Multiple functions in the file 'wfa_igd_handle.php' pass external input to the `exe_ouside_cmd` function, which executes external commands via `setattr` and `get`. Specific risk points include:\n1. The `exe_ouside_cmd` function directly executes the input command string, potentially leading to command injection.\n2. The `get_public_ip` function retrieves an external IP address via `urlget` and writes the result to a temporary file, posing potential path traversal or file operation risks.\n3. The `igd_prepare` and `SEND_IGD` functions construct `iptables` commands and execute them directly, which could be exploited by malicious input.\n4. The `DS_IPT` function constructs and executes `iptables` commands, potentially allowing injection of malicious parameters.\n\nThis finding is directly related to the web service component and involves the transmission path from external input to command execution.", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["exe_ouside_cmd", "cmd", "urlget", "iptables", "setattr", "get", "MODE", "ST", "EXT_IP", "EXT_PORT", "INT_PORT", "DS_PORT", "C_IP", "E_PORT", "SSL", "webaccess", "runtime"], "notes": "Further analysis of the `setattr` and `get` function implementations is required to confirm the presence of command injection vulnerabilities. It is recommended to inspect all invocations of `exe_ouside_cmd` to ensure input parameters undergo rigorous filtering. This finding is directly related to the web service component and may involve the HTTP request processing flow."}
{"name": "web-command_injection_pattern-DSLITE", "file_path": "etc/scripts/IPV4.DSLITE.php", "location": "IPV4.DSLITE.php", "risk_score": 6.0, "confidence": 6.25, "description": "A potential command injection risk pattern was identified in the IPV4.DSLITE.php file. The script uses $_GLOBALS variables (potentially sourced from HTTP parameters such as ACTION, INF, IFNAME, etc.) to construct shell commands (startcmd/stopcmd). Although these commands are not directly executed, the following security issues exist:\n\n1. Lack of apparent input validation when HTTP parameters are used to construct shell commands\n2. The constructed commands involve network configuration operations (tunnel creation, IP assignment, etc.)\n3. The ACTION parameter controls command generation (DSLITE_START/DSLITE_STOP)\n\nWhile no direct vulnerability was found in this file, this pattern could lead to command injection if:\n- The constructed commands are executed elsewhere\n- Global variables are not properly filtered before use", "code_snippet": "", "link_identifiers": ["$_GLOBALS", "ACTION", "INF", "IFNAME", "INET", "INETP", "INFPREV", "startcmd", "stopcmd", "query", "set"], "notes": "Suggested follow-up analysis:\n1. Trace the execution points of commands generated by startcmd()/stopcmd()\n2. Verify the source of global variables (HTTP requests or others)\n3. Check whether parameters are filtered before use"}
{"name": "file_operation-webaccess_map.php-fwrite", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 2.0, "confidence": 5.0, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["fwrite", "unique_partition_name", "query", "add", "del", "set"], "notes": "Although the file itself does not present any direct security issues, it is recommended to inspect other web interface files that call this file to verify how external inputs are passed to it."}
{"name": "potential-command-injection-vpnroute", "file_path": "REDACTED_SENSITIVE_DATA", "location": "vpnroute.php", "risk_score": 7.0, "confidence": 5.5, "description": "The 'vpnroute.php' script constructs shell commands using variables (`$DOMAINIP`, `$SERVER`, `$INF`, `$PATH`, `$IP`, `$MASK`, `$DEV`, `$GW`) that are embedded into shell commands via `echo`. While these variables could lead to command injection if not properly sanitized, the script does not directly process HTTP inputs (`$_GET` or `$_POST`). The source of these variables is unclear from this file alone, requiring further analysis of included files (e.g., '/htdocs/phplib/inet.php') or the calling context to determine if they can be attacker-controlled.", "code_snippet": "echo \"sed -i \\\"s/\".$DOMAINIP.\"/\".$SERVER.\"/g\\\" /etc/ppp/options.\".$INF.\"\\n\";\necho \"xmldbc -s \".$PATH.\" \".$SERVER.\"\\n\";\nif (INET_validv4network($IP, $SERVER, $MASK) == 1)\n{\n\techo \"ip route add \".$SERVER.\" dev \".$DEV.\"\\n\";\n}\nelse\n{\n\techo \"ip route add \".$SERVER.\" via \".$GW.\" dev \".$DEV.\"\\n\";\n}", "link_identifiers": ["$DOMAINIP", "$SERVER", "$INF", "$PATH", "$IP", "$MASK", "$DEV", "$GW", "INET_validv4network"], "notes": "command_execution"}
{"name": "systemic-command_injection-GLOBALS_vars", "file_path": "etc/scripts/IP-WAIT.php", "location": "multiple files", "risk_score": 9.0, "confidence": 8.25, "description": "Systemic command injection risk patterns were identified in multiple PHP scripts. Several scripts (IP-WAIT.php, dhcp6s_helper.php, stopchild.php) retrieve parameters through the $_GLOBALS superglobal variable and directly pass them to command execution functions (such as cmd() or system()). These global variables include: INF, PHYINF, DEVNAM, DNS, ME, DST, GATEWAY, CHILDUID, etc. If these global variables originate from unvalidated HTTP input, they will lead to severe command injection vulnerabilities. Recommendations: 1) Conduct comprehensive audits of all scripts using $_GLOBALS variables; 2) Verify whether the sources of these variables are controllable; 3) Implement strict input validation and command parameter escaping.", "code_snippet": "Multiple instances found:\n1. IP-WAIT.php: main_entry($_GLOBALS[\"INF\"], $_GLOBALS[\"PHYINF\"], $_GLOBALS[\"DEVNAM\"], $_GLOBALS[\"DNS\"], $_GLOBALS[\"ME\"]);\n2. dhcp6s_helper.php: cmd(\"ip -6 route add \".$_GLOBALS[\"DST\"].\" via \".$_GLOBALS[\"GATEWAY\"].\" dev \".$_GLOBALS[\"DEVNAM\"].\" table DHCP\\n\");\n3. stopchild.php: cmd(\"service INET.\".$_GLOBALS[\"CHILDUID\"].\" stop\");", "link_identifiers": ["$_GLOBALS", "cmd", "system", "INF", "PHYINF", "DEVNAM", "DNS", "ME", "DST", "GATEWAY", "CHILDUID"], "notes": "This is a systemic risk pattern involving multiple scripts and global variables. Priority should be given to investigating the source of the $_GLOBALS variable, particularly confirming whether it originates from HTTP request parameters. It is recommended to create a complete variable contamination path diagram."}
{"name": "script-CABLE-RA-WAIT-command-execution", "file_path": "etc/scripts/CABLE-RA-WAIT.php", "location": "CABLE-RA-WAIT.php", "risk_score": 3.0, "confidence": 5.5, "description": "The file 'etc/scripts/CABLE-RA-WAIT.php' is a PHP script handling IPv6 network configuration, primarily for DHCPv6 and Router Advertisement (RA) functionality. Analysis reveals that this file executes system commands such as dhcp6c and rdisc6 through a custom cmd() function. These commands receive parameters from internal variables and configuration files rather than direct user input. If higher-level calling code passes user-controllable input to these command parameters, there may be a risk of command injection. The file itself does not directly process HTTP requests and is likely a background script invoked by other web components.", "code_snippet": "", "link_identifiers": ["cmd", "dhcp6c", "rdisc6", "phpsh", "fwrite"], "notes": "It is recommended to inspect the upper-level code that invokes this script to verify whether any user input is ultimately passed into command parameters. The file itself does not directly handle HTTP requests and may be a background script called by other web components."}
{"name": "web-wps-script-command-generation", "file_path": "REDACTED_SENSITIVE_DATA", "location": "wpsevents.php", "risk_score": 3.0, "confidence": 6.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["$ACTION", "echo", "WPSPIN", "WPSPBC.PUSH", "/etc/scripts/wps.sh", "PARAM1", "PARAM2"], "notes": "Although no direct dangerous function calls were identified, parameter concatenation into shell commands (e.g., echo) may still pose potential risks. It is recommended to further review the call chain, particularly checking whether other files or scripts might invoke 'wps.sh' and pass external inputs."}
{"name": "web-component-httpcfg-external-programs", "file_path": "REDACTED_SENSITIVE_DATA", "location": "httpcfg.php", "risk_score": 0.0, "confidence": 4.5, "description": "The httpcfg.php file is an HTTP server configuration file primarily used to define server and virtual host settings, including paths for CGI scripts and external program calls. The file does not contain code that directly processes HTTP request parameters (GET/POST), nor does it pass these parameters to dangerous functions (such as system, strcpy, etc.). It mainly defines configurations for multiple servers and specifies invocation paths for external programs (e.g., /usr/sbin/phpcgi, /htdocs/fileaccess.cgi, etc.). These external programs may handle user input and require further analysis to determine potential security risks.", "code_snippet": "", "link_identifiers": ["http_server", "mydlink_shareport", "ssdp_server", "upnp_server", "stunnel_server", "webaccess_server", "External", "Control", "/usr/sbin/phpcgi", "/htdocs/fileaccess.cgi", "/htdocs/web/webfa_authentication.cgi", "/htdocs/localrec.cgi"], "notes": "Although httpcfg.php itself does not directly handle user input or invoke dangerous functions, it defines multiple invocation paths for external programs. These external programs (such as /usr/sbin/phpcgi, /htdocs/fileaccess.cgi, etc.) may be the points where user input is processed. It is recommended to further analyze these programs to determine whether security risks exist."}
{"name": "command-construction-SETVPNSRRT", "file_path": "REDACTED_SENSITIVE_DATA", "location": "SETVPNSRRT.php", "risk_score": 2.0, "confidence": 4.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "echo \"sip=`gethostip -d \".$server.\"`\\n\";\necho \"sed -i \\\"s/\".$server.\"/$sip/g\\\" /etc/ppp/options.\".$INF.\"\\n\";", "link_identifiers": ["$server", "$INF", "gethostip", "sed", "ip route", "query", "XNODE_getpathbytarget"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "web-dlcfg_hlper-unknown_functions", "file_path": "etc/scripts/dlcfg_hlper.php", "location": "dlcfg_hlper.php", "risk_score": 5.0, "confidence": 5.5, "description": "In the file 'dlcfg_hlper.php', calls to the functions `set()`, `movc()`, `mov()`, and `del()` were found, but the implementation details of these functions and the source of the `$ACTION` variable are unknown. Due to the lack of this critical information, it cannot be confirmed whether there is a scenario where HTTP input is passed to dangerous functions. It is recommended to provide the implementation code of these functions or the source of the `$ACTION` variable for further analysis.", "link_identifiers": ["set", "movc", "mov", "del", "$ACTION"], "notes": "Further analysis is needed on the definitions of the `movc()`, `mov()`, and `del()` functions, as well as the source of the `$ACTION` variable."}
{"name": "web-vulnerability-delpathbytarget-arbitrary-file-deletion", "file_path": "REDACTED_SENSITIVE_DATA", "location": "delpathbytarget.php:3-7", "risk_score": 8.5, "confidence": 8.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "$stsp = XNODE_getpathbytarget($BASE, $NODE, $TARGET, $VALUE, 0);\n  del($stsp.'/'.$POSTFIX);", "link_identifiers": ["$BASE", "$NODE", "$TARGET", "$VALUE", "$POSTFIX", "XNODE_getpathbytarget", "del"], "notes": "Limiting factors:\n1. Unable to obtain 'phplib/xnode.php' to verify the complete attack chain\n2. Need to confirm the specific implementation of the del() function\n\nRecommendations:\n1. Implement strict validation for all HTTP parameters\n2. Implement path normalization checks\n3. Restrict the directory scope for delete operations"}
{"name": "script-init-S20init", "file_path": "etc/init.d/S20init.sh", "location": "S20init.sh", "risk_score": 0.0, "confidence": 4.5, "description": "The S20init.sh script is a system initialization script primarily used to start services such as xmldb, servd, and LOGD, and does not involve the startup or invocation of web service components. There are no instances in the script where external input is passed to dangerous functions (such as `system`, `strcpy`, `sprintf`, etc.).", "code_snippet": "", "link_identifiers": ["xmldb", "servd", "LOGD", "dbload.sh", "image_sign", "xmldb_pid"], "notes": "It is recommended to analyze other scripts or binaries related to web services (such as httpd, lighttpd, or CGI programs) to identify potential security risks."}
{"name": "command_injection-dhcp6s_helper-cmd", "file_path": "etc/scripts/dhcp6s_helper.php", "location": "dhcp6s_helper.php", "risk_score": 8.0, "confidence": 8.0, "description": "The file 'dhcp6s_helper.php' contains command injection vulnerabilities in the add_route and remove_route functions. These functions use the cmd() function to execute system commands with untrusted $_GLOBALS parameters (DST, GATEWAY, DEVNAM) directly concatenated into the command string without sanitization. An attacker could manipulate these parameters to execute arbitrary commands.", "code_snippet": "cmd(\"ip -6 route add \".$_GLOBALS[\"DST\"].\" via \".$_GLOBALS[\"GATEWAY\"].\" dev \".$_GLOBALS[\"DEVNAM\"].\" table DHCP\\n\");", "link_identifiers": ["cmd", "add_route", "remove_route", "$_GLOBALS", "DST", "GATEWAY", "DEVNAM"], "notes": "These parameters should be properly validated and sanitized before being used in system commands. The cmd() function should implement correct escaping or use parameterized commands. Note: This finding is not directly related to HTTP request processing and is documented only for completeness."}
{"name": "command_injection-usbmount_helper-setattr", "file_path": "REDACTED_SENSITIVE_DATA", "location": "usbmount_helper.php", "risk_score": 7.0, "confidence": 7.0, "description": "A command injection vulnerability was discovered in the 'usbmount_helper.php' file. The `setattr` function executes the `smartctl` command, where `/dev/`.$dev may contain user-controlled input. An attacker could potentially execute arbitrary commands by manipulating the input parameters.", "code_snippet": "setattr(\"/runtime/SMART/\".$prefix.\"/status\", \"get\", \"smartctl -H /dev/\".$dev.\" | grep \\\"SMART Health Status\\\" | cut -d: -f2 | sed -e 's/ //g'\");", "link_identifiers": ["setattr", "smartctl", "dev", "prefix", "pid", "mntp", "usbmount_fsid.sh"], "notes": "Further verification is needed regarding the source of the $dev variable to confirm whether it can be controlled by users. It is recommended to inspect the web interface that calls this script and verify the validation of input parameters."}
{"name": "command_injection-usbmount_helper-setattr_script", "file_path": "REDACTED_SENSITIVE_DATA", "location": "usbmount_helper.php", "risk_score": 7.0, "confidence": 7.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["setattr", "usbmount_fsid.sh", "prefix", "pid", "dev", "mntp"], "notes": "Further verification is required regarding the sources of the $prefix and $pid variables to confirm whether they can be controlled by users. It is recommended to inspect the web interface that calls this script to verify the validation of input parameters."}
{"name": "command_injection-usbmount_helper-echo", "file_path": "REDACTED_SENSITIVE_DATA", "location": "usbmount_helper.php", "risk_score": 7.0, "confidence": 7.0, "description": "A command injection vulnerability was discovered in the 'usbmount_helper.php' file. When the `echo` command executes shell commands, `$prefix.$pid` and `$mntp` may contain user-controlled input. Attackers could potentially execute arbitrary commands by manipulating the input parameters.", "code_snippet": "echo \"sh mkdir -p /tmp/disk \\n\";\necho \"sh echo 0 > /tmp/disk/\".$prefix.$pid.\"\\n\";", "link_identifiers": ["echo", "prefix", "pid", "mntp", "dev", "usbmount_fsid.sh"], "notes": "Further verification is required regarding the sources of the $prefix, $pid, and $mntp variables to confirm whether they can be controlled by users. It is recommended to inspect the web interface that calls this script to verify the validation of input parameters."}
{"name": "file_read-usbmount_helper-fread", "file_path": "REDACTED_SENSITIVE_DATA", "location": "usbmount_helper.php", "risk_score": 5.0, "confidence": 6.0, "description": "A file read vulnerability was discovered in the 'usbmount_helper.php' file. When the `fread` function reads a file, the file path may contain user-controlled input. An attacker could potentially read arbitrary files by manipulating input parameters.", "code_snippet": "fread(\"\", \"/sys/block/\".$prefix.\"/../../../../../../manufacturer\");", "link_identifiers": ["fread", "prefix", "pid", "mntp", "dev"], "notes": "Further verification is needed regarding the source of the $prefix variable to confirm whether it can be controlled by users. It is recommended to inspect the web interface calling this script and verify the validation status of input parameters."}
{"name": "web-file_delete-delpathbytarget", "file_path": "REDACTED_SENSITIVE_DATA", "location": "delpathbytarget.php:3-7", "risk_score": 8.5, "confidence": 8.0, "description": "A high-risk arbitrary file deletion vulnerability was discovered in the 'delpathbytarget.php' file. The HTTP parameters `$BASE`, `$NODE`, `$TARGET`, `$VALUE`, and `$POSTFIX` are used to construct file paths and passed to the `del` function without sufficient validation. Attackers could potentially delete arbitrary files by crafting malicious parameters. Specific manifestations include: 1. Parameters are directly used to construct file paths; 2. Lack of effective validation of parameters; 3. Direct invocation of the `del` function to perform deletion operations.", "code_snippet": "$stsp = XNODE_getpathbytarget($BASE, $NODE, $TARGET, $VALUE, 0);\n  del($stsp.'/'.$POSTFIX);", "link_identifiers": ["del", "XNODE_getpathbytarget", "$BASE", "$NODE", "$TARGET", "$VALUE", "$POSTFIX"], "notes": "Due to security restrictions, the content of the 'xnode.php' file cannot be retrieved. It is recommended to further analyze this file to confirm the specific implementation and security measures of the `XNODE_getpathbytarget` and `del` functions."}
{"name": "command-injection-wfa_igd_handle-igd_prepare", "file_path": "etc/scripts/wfa_igd_handle.php", "location": "wfa_igd_handle.php (HIDDEN)", "risk_score": 8.5, "confidence": 8.0, "description": "A command injection vulnerability was identified in the `igd_prepare` function. This function takes the `$wan_ip` parameter and directly concatenates it into an `iptables` command executed via `exe_ouside_cmd`. The `$wan_ip` originates from network interface configurations or runtime storage, potentially allowing attackers to inject arbitrary commands by modifying these configurations. The critical code locations are within the `igd_prepare` function definition and its invocation points in `wfa_igd_handle.php`.", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["exe_ouside_cmd", "igd_prepare", "$wan_ip", "$igd_cmd", "iptables", "query", "REDACTED_SENSITIVE_DATA"], "notes": "Further analysis is required to determine the specific source path of `$wan_ip` and verify whether it originates directly from HTTP request parameters."}
{"name": "command-injection-wfa_igd_handle-SEND_IGD", "file_path": "etc/scripts/wfa_igd_handle.php", "location": "wfa_igd_handle.php:187-202", "risk_score": 8.5, "confidence": 8.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["exe_ouside_cmd", "SEND_IGD", "$wan_ip", "$DS_PORT", "upnpc", "query", "REDACTED_SENSITIVE_DATA", "REDACTED_SENSITIVE_DATA"], "notes": "Further analysis is required to determine the specific source of `$DS_PORT` to confirm whether it originates directly from HTTP request parameters. It is recommended to review all code paths that invoke `exe_ouside_cmd`."}
{"name": "command_injection-dhcp6s_helper-cmd_execution", "file_path": "etc/scripts/dhcp6s_helper.php", "location": "dhcp6s_helper.php", "risk_score": 8.0, "confidence": 8.0, "description": "Command injection vulnerabilities were found in the dhcp6s_helper.php file:  \n1. The `cmd()` function directly concatenates external inputs (such as `$_GLOBALS[\"DST\"]`, `$_GLOBALS[\"GATEWAY\"]`, `$_GLOBALS[\"DEVNAM\"]`) and executes system commands (e.g., `ip -6 route add`), posing a command injection risk.  \n2. The `add_route()` and `remove_route()` functions execute `ip -6 route` commands via `cmd()`, incorporating unvalidated external inputs.  \n3. The `main_entry()` function calls different functions based on the value of `$_GLOBALS[\"ACTION\"]` without strict input validation.  \n\nPotential impact: Attackers can inject malicious commands by manipulating these global variables, potentially leading to arbitrary command execution.", "code_snippet": "cmd(\"ip -6 route add \".$_GLOBALS[\"DST\"].\" via \".$_GLOBALS[\"GATEWAY\"].\" dev \".$_GLOBALS[\"DEVNAM\"].\" table DHCP\\n\");", "link_identifiers": ["cmd", "msg", "$_GLOBALS", "DST", "GATEWAY", "DEVNAM", "ACTION", "add_route", "remove_route", "main_entry"], "notes": "It is recommended to implement strict validation and filtering of inputs from `$_GLOBALS` to avoid direct command concatenation. Functions such as `escapeshellarg()` or similar should be used to escape inputs. Although this file is not a direct CGI script, it processes potentially web-interface-originated inputs and executes system commands, necessitating further tracing of input sources."}
{"name": "system-command-stopchild-CHILDUID", "file_path": "REDACTED_SENSITIVE_DATA", "location": "stopchild.php", "risk_score": 3.0, "confidence": 5.25, "description": "The script 'stopchild.php' uses the global variable CHILDUID to determine which child interface to stop via system commands. While no direct HTTP input to dangerous function linkage was found, the security depends on how CHILDUID is populated and sanitized before being used in the 'service INET.$uid stop' command.", "code_snippet": "$uid = $_GLOBALS[\"CHILDUID\"];\n$ret = main_entry($uid);", "link_identifiers": ["CHILDUID", "cmd", "service INET.$uid stop", "main_entry"], "notes": "command_execution"}
{"name": "command_injection-wfa_igd_handle-SEND_IGD", "file_path": "etc/scripts/wfa_igd_handle.php", "location": "wfa_igd_handle.php", "risk_score": 8.5, "confidence": 8.25, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "$igd_cmd=\"upnpc -m \".$wan_ip.\" -r \";\n$port=$DS_PORT;\n$igd_cmd=$igd_cmd.$port.\" tcp &\";\nexe_ouside_cmd($igd_cmd);", "link_identifiers": ["exe_ouside_cmd", "SEND_IGD", "DS_PORT", "wan_ip", "upnpc"], "notes": "It is recommended to further verify the source and validation mechanism of the DS_PORT parameter. Check if there are other similar patterns of dangerous function calls."}
{"name": "command_injection-wfa_igd_handle-DS_IPT", "file_path": "etc/scripts/wfa_igd_handle.php", "location": "wfa_igd_handle.php", "risk_score": 8.0, "confidence": 7.75, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["exe_ouside_cmd", "DS_IPT", "C_IP", "E_PORT", "SSL", "iptables"], "notes": "It is necessary to confirm whether these parameters all originate from HTTP requests and check if there are other similar parameter processing patterns."}
{"name": "command_injection-wfa_igd_handle-get_public_ip", "file_path": "etc/scripts/wfa_igd_handle.php", "location": "wfa_igd_handle.php", "risk_score": 8.0, "confidence": 7.5, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["get_public_ip", "urlget", "external_command"], "notes": "Analyze the call path of the get_public_ip() function to confirm whether there are other similar patterns of remote command acquisition and execution."}
{"name": "web-vulnerability-delpathbytarget-arbitrary-file-deletion", "file_path": "REDACTED_SENSITIVE_DATA", "location": "delpathbytarget.php:3-7", "risk_score": 8.5, "confidence": 8.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "$stsp = XNODE_getpathbytarget($BASE, $NODE, $TARGET, $VALUE, 0);\n  del($stsp.'/'.$POSTFIX);", "link_identifiers": ["del", "XNODE_getpathbytarget", "$BASE", "$NODE", "$TARGET", "$VALUE", "$POSTFIX"], "notes": "The following fixes are recommended: 1) Implement strict validation for all HTTP parameters 2) Add path normalization checks 3) Restrict the directory scope for deletion operations. Further analysis of the 'phplib/xnode.php' file is required to confirm the specific implementations of the 'XNODE_getpathbytarget' and 'del' functions."}
{"name": "command_injection-usbmount_helper-1", "file_path": "REDACTED_SENSITIVE_DATA", "location": "usbmount_helper.php:7-9", "risk_score": 9.0, "confidence": 8.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["$prefix", "$pid", "$dev", "setattr", "smartctl", "usbmount_fsid.sh", "toupper($prefix.$pid)", "XNODE_getpathbytarget"], "notes": "Recommendations: 1) Validate all web interfaces calling this script 2) Check the sources of $prefix and $pid 3) Implement input validation and command escaping. Need to confirm whether these variables originate from HTTP requests to meet core user requirements."}
{"name": "buffer_overflow-fileaccess.cgi-1", "file_path": "REDACTED_SENSITIVE_DATA", "location": "htdocs/fileaccess.cgi:0x0000a40c", "risk_score": 8.0, "confidence": 7.5, "description": "A high-risk buffer overflow vulnerability was discovered in fileaccess.cgi:\n1. HTTP request parameters are directly passed to the strncpy function and copied into a fixed-size buffer (0x40 bytes)\n2. The processed data is then copied via the strcpy function to the target buffer (piVar4[-0x50]) without length verification\n3. Attackers can trigger buffer overflow by manipulating HTTP request parameters\n\nVulnerability path:\nHTTP request parameters -> strncpy -> intermediate buffer -> strcpy -> target buffer", "code_snippet": "strncpy(piVar4[-0x130], *piVar4, 0x40);\nstrcpy(piVar4[-0x50], piVar4[-0x130]);", "link_identifiers": ["fcn.0000a40c", "strncpy", "strcpy", "piVar4[-0x130]", "piVar4[-0x50]", "HTTPHIDDEN"], "notes": "Recommendations: 1) Verify all web interfaces calling this CGI 2) Implement strict input validation and length checks 3) Replace with secure string functions"}
{"name": "command_injection-cgibin-fcn.000175f4", "file_path": "REDACTED_SENSITIVE_DATA", "location": "htdocs/cgibin:fcn.000175f4:0x17a50", "risk_score": 9.0, "confidence": 8.25, "description": "A high-risk command injection vulnerability was discovered in cgibin:\n1. Function fcn.000175f4 constructs a command string via sprintf and executes it using system\n2. The command parameters originate from environment variables *(puVar6 + -0x1c) in HTTP requests\n3. No input validation is performed, allowing attackers to inject arbitrary commands\n\nVulnerability path:\nHTTP request -> environment variable -> sprintf -> system", "code_snippet": "sym.imp.sprintf(0x7544 | 0x30000,0xbf50 | 0x20000,0xbf1c | 0x20000,*(puVar6 + -0x1c));\nsym.imp.system(0x7544 | 0x30000);", "link_identifiers": ["fcn.000175f4", "system", "sprintf", "getenv", "*(puVar6 + -0x1c)"], "notes": "Recommendations: 1) Identify the HTTP interface calling this function 2) Verify the source of environment variables 3) Implement strict input validation and command escaping"}
{"name": "systemic_command_injection-GLOBALS_vars", "file_path": "REDACTED_SENSITIVE_DATA", "location": "multiple files", "risk_score": 9.5, "confidence": 8.5, "description": "Systemic command injection risk patterns identified in multiple PHP scripts:\n1. Parameters obtained through $_GLOBALS variables (INF, PHYINF, DEVNAM, etc.)\n2. Directly passed to command execution functions (cmd/system)\n3. If these global variables originate from HTTP requests, it will lead to severe command injection vulnerabilities\n\nAffected files:\nIP-WAIT.php, dhcp6s_helper.php, stopchild.php, etc.", "link_identifiers": ["$_GLOBALS", "cmd", "system", "INF", "PHYINF", "DEVNAM", "DNS", "ME", "DST", "GATEWAY", "CHILDUID"], "notes": "Systemic risk requires prioritizing the investigation of the source of the $_GLOBALS variable and creating a complete variable contamination path map."}
