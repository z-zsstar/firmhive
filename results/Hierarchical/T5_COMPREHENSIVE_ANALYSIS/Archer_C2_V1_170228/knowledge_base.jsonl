{"name": "[SECRET_VALUE]", "file_path": "etc/ushare.conf", "location": "etc/ushare.conf:0 [global_config]", "risk_score": 7.5, "confidence": 7.4, "description": "The ushare.conf file lacks critical parameters such as USHARE_DIR (shared directory) and USHARE_PORT (service port), causing the service to rely on external input during runtime. If an attacker can control the parameter source (e.g., through environment variables or NVRAM settings), it may lead to directory traversal attacks or service redirection: 1) Arbitrary file access by tampering with USHARE_DIR, or 2) Man-in-the-middle attacks by hijacking USHARE_PORT. Trigger conditions include the presence of unvalidated external parameter injection points and the service running with elevated privileges.", "link_identifiers": ["USHARE_DIR", "USHARE_PORT", "USHARE_IFACE", "USHARE_ENABLE_DLNA"], "notes": "Follow-up required: 1) Verify whether USHARE_DIR/USHARE_PORT in the uShare startup script are obtained via nvram_get/env_get 2) Service runtime permission validation"}
{"name": "[SECRET_VALUE]", "file_path": "etc/ushare.conf", "location": "etc/ushare.conf:0 [feature_config]", "risk_score": 3.0, "confidence": 6.75, "description": "Enabling DLNA (USHARE_ENABLE_DLNA=yes) and Xbox compatibility mode (USHARE_ENABLE_XBOX=yes) expands the attack surface, while disabling the web interface (USHARE_ENABLE_WEB=no) mitigates some risks. Binding the network listening interface to br0 (USHARE_IFACE=br0) indicates the service is exposed on the local network, potentially exploitable by attackers within the same network segment.", "link_identifiers": ["USHARE_ENABLE_DLNA", "USHARE_ENABLE_XBOX", "USHARE_IFACE"]}
{"name": "[SECRET_VALUE]", "file_path": "etc/vsftpd.conf", "location": "etc/vsftpd.conf", "risk_score": 8.5, "confidence": 8.5, "description": "[SECRET_VALUE]", "code_snippet": "local_enable=YES\nwrite_enable=YES", "link_identifiers": ["write_enable", "local_enable", "ssl_enable", "vsftpd.conf", "FTP_PORT_21"], "notes": "[SECRET_VALUE]"}
{"name": "[SECRET_VALUE]", "file_path": "etc/vsftpd.conf", "location": "etc/vsftpd.conf", "risk_score": 1.0, "confidence": 5.0, "description": "[SECRET_VALUE]", "link_identifiers": ["anonymous_enable", "anon_upload_enable", "vsftpd.conf"]}
{"name": "[SECRET_VALUE]", "file_path": "[SECRET_VALUE]", "location": "[SECRET_VALUE]", "risk_score": 8.5, "confidence": 8.0, "description": "[SECRET_VALUE]", "code_snippet": "REDACTED_PASSWORD_PLACEHOLDER:$1$$iC.[SECRET_VALUE]/:0:0:REDACTED_PASSWORD_PLACEHOLDER:/:/bin/sh", "link_identifiers": ["REDACTED_[SECRET_VALUE]_PLACEHOLDER", "UID:0", "/bin/sh", "$1$$"], "notes": "[SECRET_VALUE]"}
{"name": "[SECRET_VALUE]", "file_path": "[SECRET_VALUE]", "location": "[SECRET_VALUE]", "risk_score": 6.0, "confidence": 7.0, "description": "[SECRET_VALUE]", "code_snippet": "dropbear:x:500:500:dropbear:/var/dropbear:/bin/sh", "link_identifiers": ["dropbear", "/bin/sh"], "notes": "[SECRET_VALUE]"}
{"name": "[SECRET_VALUE]", "file_path": "etc/init.d/rcS", "location": "etc/init.d/rcS", "risk_score": 5.0, "confidence": 5.5, "description": "A risk of service startup was identified in etc/init.d/rcS: direct calls to 'telnetd' and 'cos &' without using absolute paths (evidence: 'telnetd\\ncos &' code snippet). This could lead to service hijacking if the PATH environment variable includes attacker-writable directories (e.g., /tmp). Trigger conditions: 1) PATH contamination 2) Attacker can place malicious programs in higher-priority search directories. Actual impact is limited: PATH configuration could not be verified (due to /etc/profile access failure) and binary existence could not be confirmed (due to restricted global search capabilities).", "code_snippet": "telnetd\ncos &", "link_identifiers": ["telnetd", "cos", "PATH", "rcS"], "notes": "[SECRET_VALUE]"}
{"name": "[SECRET_VALUE]", "file_path": "etc/services", "location": "etc/services:0 (global)", "risk_score": 7.5, "confidence": 7.9, "description": "[SECRET_VALUE]", "code_snippet": "telnet          23/tcp\nftp            21/tcp\nhttp           80/tcp\nhttp-alt      8008/tcp", "link_identifiers": ["/etc/services", "telnet", "23/tcp", "23/udp", "ftp", "21/tcp", "21/udp", "http", "80/tcp", "80/udp", "http-alt", "8008/tcp", "telnetd"], "notes": "Subsequent correlation analysis required: 1) Identify the program actually listening on the port (e.g., /sbin/telnetd); 2) Examine the service program's network input handling logic; 3) Verify whether NVRAM configuration permits external access to these services. Correlated findings: In etc/init.d/rcS, the telnetd service startup does not use absolute paths (finding name: [SECRET_VALUE]), which may constitute a PATH hijacking attack chain component. Further analysis of ftp/http service implementations is needed."}
{"name": "[SECRET_VALUE]", "file_path": "sbin/usbp", "location": "usbp:0x400968 main", "risk_score": 2.0, "confidence": 6.25, "description": "In the main function, detection of a fixed command executed via the system function: When three retries still fail to access the /proc/diskstats file, execute 'echo open /proc/diskstats failed! >/dev/ttyS0' to output the error to the serial port. Trigger condition: The /proc/diskstats file is inaccessible (e.g., due to a filesystem corruption attack). No input validation mechanism exists, but the command string is fixed and uncontrollable. Security impact: 1) Exposes the usage pattern of the system function; if input concatenation exists in other paths, it may form a command injection chain. 2) Leaks system status information to the serial port. 3) May be used as a component of a denial-of-service attack (e.g., by continuously triggering error output).", "code_snippet": "if (iVar4 == 0) {\n    (**(loc._gp + -0x7f9c))(\"echo open /proc/diskstats failed! >/dev/ttyS0\");\n}", "link_identifiers": ["main", "system", "/proc/diskstats", "ttyS0", "sym.imp.system", "loc._gp"], "notes": "1) It is recommended to scan all system call points in the binary  \n2) The access logic of /proc/diskstats in other components needs to be analyzed  \n3) Serial port output may be used in information gathering attack chains"}
{"name": "[SECRET_VALUE]", "file_path": "sbin/hotplug", "location": "sbin/hotplug:0x0 (global)", "risk_score": 0.0, "confidence": 5.0, "description": "env_get", "link_identifiers": ["ACTION", "system", "exec", "popen"], "notes": "Initial analysis misjudged the function pointer (loc._gp) call target"}
{"name": "[SECRET_VALUE]", "file_path": "sbin/hotplug", "location": "sbin/hotplug:0x405d44", "risk_score": 6.0, "confidence": 8.0, "description": "Race condition impact is limited: In the sym.hotplug_storage_umount function: 1) Loop check for access('/var/run/dm_storage') 2) sleep(2) time window 3) Only irrelevant file /var/run/hotplug_storage_umount.pid is deleted. Attackers cannot manipulate dm_storage through symbolic links.", "link_identifiers": ["sym.hotplug_storage_umount", "access", "/var/run/dm_storage", "unlink", "/var/run/hotplug_storage_umount.pid"], "notes": "Verify whether dm_storage is being used by other privileged components"}
{"name": "[SECRET_VALUE]", "file_path": "sbin/hotplug", "location": "sbin/hotplug:0x0 (global)", "risk_score": 1.0, "confidence": 5.25, "description": "No valid attack path identified: Multiple rounds of verification confirmed the absence of: 1) External input processing points 2) Dangerous operation calls 3) Data contamination propagation chains. The program's functionality is limited to device status monitoring and log recording.", "link_identifiers": ["hotplug", "faccessat", "write", "ioctl"], "notes": "configuration_load"}
{"name": "[SECRET_VALUE]", "file_path": "sbin/usbp", "location": "usbp:0x4006e0(main), 0x400828(system)", "risk_score": 0.5, "confidence": 4.8, "description": "No exploitable vulnerabilities exposed in the program: 1) Command-line argument argv[1] is only used for printf log output, unfiltered but not propagated to dangerous functions (e.g., system), preventing command injection triggers. 2) File read buffer auStack_128 is strictly limited to 256-byte reads via fgets, with content solely used for device name detection (strstr('sd')) and not involved in command construction. 3) The sole system call uses hardcoded command 'echo...>/dev/ttyS0' without external input participating in parameter construction. Trigger conditions are restricted: fixed error-handling command executes only when /proc/diskstats fails to open three consecutive times, with attackers unable to control failure conditions or command content.", "link_identifiers": ["argv[1]", "printf", "auStack_128", "fgets", "strstr", "system", "/proc/diskstats", "/dev/ttyS0"], "notes": "Security boundary validation complete: 1) All external input points (argv/env) are isolated from core operations 2) File reads have length restrictions 3) Command execution contains no variable interpolation. Related finding: The same file at 0x400968 contains /proc/diskstats-related system calls (Knowledge Base ID: [SECRET_VALUE]), collectively forming a complete attack chain analysis."}
{"name": "[SECRET_VALUE]", "file_path": "sbin/hotplug", "location": "unknown:0 [[SECRET_VALUE]] 0x402a98", "risk_score": 9.0, "confidence": 8.25, "description": "[SECRET_VALUE]", "code_snippet": "char acStack_4b8 [64];\nfor (; (acStack_4b8[iStack_4c0 * 100] != '\\0' && (iStack_4c0 < 0xc)); iStack_4c0++)", "link_identifiers": ["[SECRET_VALUE]", "acStack_4b8", "iStack_4c0", "[SECRET_VALUE]", "[SECRET_VALUE]", "hotplug_3g", "Cls=", "switched_3g"], "notes": "Full attack chain: Physical access to insert malicious USB device → Kernel generates tainted data → Overflow during hotplug parsing. Verification required: 1) Actual USB descriptor control granularity 2) Existence of stack protection mechanisms. Follow-up analysis recommendation: Reverse engineer handle_card to validate secondary attack surface"}
{"name": "[SECRET_VALUE]", "file_path": "web/index.htm", "location": "web/index.htm: inline JavaScript", "risk_score": 5.0, "confidence": 7.5, "description": "Unvalidated URL Redirection: When the browser loads the page, inline JS checks if the URL contains 'tplinklogin.net' and automatically replaces it with 'tplinkwifi.net', triggering a redirection. This logic lacks validation of the input URL's legitimacy (e.g., special character filtering), allowing attackers to craft malicious URLs (e.g., http://<device_ip>/?payload.tplinklogin.net) in combination with XSS vulnerabilities to conduct phishing attacks. Security impact is limited by: 1) Fixed and uncontrollable redirection target 2) Requirement to first obtain the device IP and trick users into visiting.", "code_snippet": "var url = window.location.href;\nif (url.indexOf(\"tplinklogin.net\") >= 0)\n{\n    url = url.replace(\"tplinklogin.net\", \"tplinkwifi.net\");\n    window.location = url;\n}", "link_identifiers": ["window.location.href", "url.indexOf", "url.replace", "tplinklogin.net", "tplinkwifi.net"], "notes": "Verify if the redirection functionality in ./oid_str.js has been enhanced."}
{"name": "xss-$.dhtml-js-lib", "file_path": "web/MenuRpm.htm", "location": "js/lib.js:? (?) ?", "risk_score": 8.5, "confidence": 5.5, "description": "The `$.dhtml` function has been identified as having a script injection risk: when loading content containing `<script>` tags, it dynamically executes JS code via `$.script` (equivalent to eval). Trigger conditions: 1) An attacker needs to control the `path` parameter of `$.loadMenu` or tamper with HTTP responses; 2) The returned content must contain malicious `<script>` tags. In the current `MenuRpm.htm` invocation, since the `path` parameter is hardcoded as `'./frame/menu.htm'` with no user input involved, direct exploitation is not possible. If other entry points expose controllable path parameters, this could lead to stored XSS or remote code execution chains.", "link_identifiers": ["$.dhtml", "$.script", "innerHTML", "createElement(\"script\")", "scripts.push"], "notes": "Follow-up analysis required: 1) Other entry points calling $.loadMenu 2) Whether the ./frame/menu.htm file contains unfiltered dynamic content; related OID discovery (see notes_OID_REF)"}
{"name": "oid-backend-cgi-tentative", "file_path": "web/MenuRpm.htm", "location": "cgi-bin:? (?) ?", "risk_score": 9.0, "confidence": 7.5, "description": "Identified 36 sensitive OID identifiers (e.g., DIAG_TOOL, USER_CFG, etc.) corresponding to high-risk operations such as diagnostic command execution and system configuration modifications. These OIDs may be directly processed by backend CGI programs, constituting critical attack surfaces. Trigger condition: Attackers pass malicious OIDs and parameters through HTTP requests (e.g., API endpoints). Actual impact: If OID handlers lack permission checks or input validation, it could lead to device configuration tampering, command injection, and other vulnerabilities.", "link_identifiers": ["DIAG_TOOL", "USER_CFG", "ACL_CFG", "TASK_SCHEDULE", "UPNP_PORTMAPPING", "LAN_DHCP_STATIC_ADDR", "FTP_SERVER", "STORAGE_SERVICE"], "notes": "LOCATION_PENDING: Requires subsequent positioning of specific handler; associated with JS injection discovery ($.dhtml); notes_OID_REF: If verification confirms the existence of a cgi-bin handler, confidence should be elevated to 9.5."}
{"name": "potential-oid-js-chain", "file_path": "web/MenuRpm.htm", "location": "multi-component", "risk_score": 9.2, "confidence": 5.75, "description": "[SECRET_VALUE]", "link_identifiers": ["DIAG_TOOL", "USER_CFG", "$.loadMenu", "path"], "notes": "Based on the correlation analysis of the discovered oid-backend-cgi-tentative and xss-$.dhtml-js-lib; verification required: 1) whether set_webpath-like functions exist in cgi-bin 2) whether the menu.htm loading mechanism allows path redirection"}
{"name": "frame-load-status", "file_path": "web/mainFrame.htm", "location": "mainFrame.htm:28", "risk_score": 8.0, "confidence": 8.75, "description": "[SECRET_VALUE]", "code_snippet": "($.loadMain)(\"status.htm\");", "link_identifiers": ["$.loadMain", "status.htm", "$.io", "arg", "$.curPage"], "notes": "Follow-up verification required: 1) Input processing logic of status.htm 2) Actual testing for path traversal vulnerability. Note: During the same batch analysis, a bAnsi control flow issue was discovered (description available in raw data), but could not be stored due to missing location."}
{"name": "[SECRET_VALUE]", "file_path": "web/frame/login.htm", "location": "login.htm:198", "risk_score": 7.0, "confidence": 8.9, "description": "[SECRET_VALUE]", "code_snippet": "if ([SECRET_VALUE]) { REDACTED_PASSWORD_PLACEHOLDER.value = 'REDACTED_PASSWORD_PLACEHOLDER'; REDACTED_PASSWORD_PLACEHOLDER.focus(); }", "link_identifiers": ["REDACTED_[SECRET_VALUE]_PLACEHOLDER", "[SECRET_VALUE]", "REDACTED_[SECRET_VALUE]_PLACEHOLDER", "PCSubWin", "pageLoad"], "notes": "Analyze the feasibility of brute force attacks by integrating with the [SECRET_VALUE]entication interface, and it is recommended to trace the PCSubWin function."}
{"name": "[SECRET_VALUE]", "file_path": "web/frame/login.htm", "location": "login.htm:85-91", "risk_score": 8.5, "confidence": 9.25, "description": "[SECRET_VALUE]entication credentials are stored in plain Base64 within cookies. Trigger condition: Base64 encoding is executed by JavaScript upon submitting the login form. Constraint check: No encryption or HTTPOnly flag is applied. Potential impact: Credentials can be stolen via man-in-the-middle attacks; XSS vulnerabilities can read cookies. Exploitation method: Network sniffing or cross-site scripting attacks to obtain the [SECRET_VALUE]orization cookie value.", "code_snippet": "[SECRET_VALUE]", "link_identifiers": ["PCSubWin", "Base64Encoding", "[SECRET_VALUE]orization", "document.cookie"], "notes": "Verify the server-side handling logic for the [SECRET_VALUE]orization cookie"}
{"name": "[SECRET_VALUE]", "file_path": "web/frame/login.htm", "location": "login.htm:45 ([HIDDEN]), 237 ([HIDDEN]div)", "risk_score": 5.0, "confidence": 6.0, "description": "Sensitive path information is leaked through comments and hidden elements. Trigger condition: Directly viewing the page source code. Constraint check: No access control. Potential impact: Exposes the ../img/login/ directory structure, aiding path traversal attacks. Exploitation method: Combining with directory traversal vulnerabilities to access sensitive files.", "code_snippet": "<div class=\"nd\" style=\"height: 0; background: url(../img/login/1.jpg);\"></div>", "link_identifiers": ["nd", "background: url(../img/login/1.jpg)", "[SECRET_VALUE]"], "notes": "It is recommended to check the permission settings of the img directory"}
{"name": "[SECRET_VALUE]", "file_path": "web/main/restart.htm", "location": "restart.htm:4", "risk_score": 7.0, "confidence": 8.0, "description": "[SECRET_VALUE]", "code_snippet": "function doRestart(){\n  $.act(ACT_OP, ACT_OP_REBOOT);\n  $.exe(true);\n}", "link_identifiers": ["doRestart", "ACT_OP", "ACT_OP_REBOOT", "$.act", "$.exe"], "notes": "Track the definition location of the ACT_OP_REBOOT constant and the implementation of the $.act function (likely located in a global JS file)"}
{"name": "[SECRET_VALUE]", "file_path": "web/main/restart.htm", "location": "restart.htm:2", "risk_score": 3.0, "confidence": 5.5, "description": "Static resource reference: The page loads '[SECRET_VALUE].htm' via $.loadHelpFrame during initialization, with a fixed path that involves no user input. Tampering with this file could lead to XSS but requires filesystem write permissions, posing minimal practical risk.", "code_snippet": "$.loadHelpFrame(\"[SECRET_VALUE].htm\");", "link_identifiers": ["$.loadHelpFrame", "[SECRET_VALUE].htm"]}
{"name": "validation-[SECRET_VALUE]-endpoint-regex_flaw", "file_path": "[SECRET_VALUE]", "location": "[SECRET_VALUE]", "risk_score": 7.5, "confidence": 8.5, "description": "[SECRET_VALUE]", "code_snippet": "if (re.test(arg)) {\n    return $.alert([SECRET_VALUE]);\n}\n// [HIDDEN]: /[^\\x00-\\x19\\x21-\\xff]/", "link_identifiers": ["/cgi/[SECRET_VALUE]", "doSave", "[SECRET_VALUE]", "curName", "cur[SECRET_VALUE]", "re.test"], "notes": "The exposed endpoint `/cgi/[SECRET_VALUE]` is a critical attack surface, requiring immediate analysis of its backend implementation to validate input processing logic. Recommended next steps: Locate and analyze the binary file or script corresponding to `/cgi/[SECRET_VALUE]`."}
{"name": "[SECRET_VALUE]", "file_path": "[SECRET_VALUE]", "location": "www/usb3gUpload.htm: doUpload()[HIDDEN]", "risk_score": 8.5, "confidence": 9.0, "description": "The file implements the 3G USB configuration file upload function, where users control the upload content through the filename form field. Trigger condition: After selecting a file, users click the Upload button to execute the doUpload() function, which only verifies that the filename is not empty before submitting it to the /cgi/usb3gup endpoint, followed by an AJAX call to /cgi/usb3gupburn for post-processing. Security impact: Due to the lack of front-end file type validation, attackers can upload arbitrary content. If the backend CGI has file parsing vulnerabilities (such as command injection or path traversal), a complete attack chain could be formed: malicious file upload → backend processing triggers vulnerabilities → system command execution.", "code_snippet": "if($.id('filename').value == ''){...}\nformObj.action = '/cgi/usb3gup';\nformObj.submit();\n$.cgi('/cgi/usb3gupburn', null, function(ret){...})", "link_identifiers": ["filename", "/cgi/usb3gup", "/cgi/usb3gupburn", "doUpload", "formObj.submit", "$.cgi"], "notes": "[SECRET_VALUE]"}
{"name": "[SECRET_VALUE]", "file_path": "web/frame/menu.htm", "location": "menu.htm:48 (menuClick)", "risk_score": 6.5, "confidence": 7.5, "description": "Unvalidated URL parameter injection vulnerability: Attackers can inject arbitrary pages by tampering with the location.search parameter (e.g., menu.htm#__attacker.htm). Trigger condition requires user interaction with a malicious link. The regular expression filter '\\w+\\.htm' restricts file types but carries bypass risks through special characters (e.g., '%2ehtm'). Potential impacts include cross-site scripting or un[SECRET_VALUE]orized page loading, requiring combined assessment with the loadMain function for actual risk evaluation.", "code_snippet": "parent.frames['mainFrame'].$.loadMain(obj.href.match(/\\#__(\\w+\\.htm)\\/?$/)[1]);", "link_identifiers": ["menuClick", "location.search", "loadMain", "parent.frames['mainFrame']"], "notes": "Verify the path validation logic in the loadMain function (located in another file)"}
{"name": "[SECRET_VALUE]", "file_path": "web/frame/menu.htm", "location": "menu.htm:87 (logoutClick)", "risk_score": 5.0, "confidence": 7.5, "description": "The sensitive endpoint /cgi/logout is at risk of CSRF: the logoutClick function directly calls the logout API. The trigger condition involves luring users to visit a malicious page to activate the onclick event. Potential impacts include session termination leading to denial of service, requiring verification of the API's CSRF protection mechanism.", "code_snippet": "$.act(ACT_CGI, \"/cgi/logout\");\n$.exe();", "link_identifiers": ["logoutClick", "$.act", "ACT_CGI", "/cgi/logout"], "notes": "Analyze the CSRF protection implementation of /cgi/logout"}
{"name": "env_get-menu_cgi-dynamic_menu", "file_path": "web/frame/menu.htm", "location": "menu.htm:126", "risk_score": 4.0, "confidence": 6.5, "description": "Dynamic menu generation relies on external input: The menu is constructed by invoking menu.cgi via $.cgi with environment variables such as sysMode passed as parameters. The trigger condition depends on the values of control environment variables. Potential impacts include menu item tampering or malicious link injection, necessitating validation of menu.cgi's input filtering logic.", "code_snippet": "$.cgi(\"./frame/menu.cgi\",null,function(err){...});", "link_identifiers": ["$.cgi", "menu.cgi", "$.sysMode", "menulist"], "notes": "Analyze the filtering mechanism of menu.cgi for environment variables."}
{"name": "[SECRET_VALUE]", "file_path": "[SECRET_VALUE]", "location": "backNRestore.htm:0 ([HIDDEN])", "risk_score": 8.5, "confidence": 7.5, "description": "[SECRET_VALUE]", "code_snippet": "formObj.action = \"/cgi/confup\";\n$.cgi(\"/cgi/bnr\", null, function(ret){\n  $.deleteCookie(\"[SECRET_VALUE]orization\");\n  window.parent.$.refresh();\n});", "link_identifiers": ["filename", "confup", "bnr", "doSubmit", "$.cgi", "[SECRET_VALUE]orization", "$.refresh", "ERR_CONF_FILE_NONE"], "notes": "Correlation analysis required: 1) Known [SECRET_VALUE]word 'filename' involves /cgi/usb3gup file upload (knowledge base record) 2) [SECRET_VALUE]word '$.cgi' correlates with multiple CGI endpoints 3) Critical evidence gaps: confup path handling logic (located at /sbin/confup) bnr permission verification (located at /usr/sbin/bnr)"}
{"name": "[SECRET_VALUE]", "file_path": "[SECRET_VALUE]", "location": "backNRestore.htm:0 (JS[HIDDEN])", "risk_score": 7.0, "confidence": 9.5, "description": "Weak front-end validation mechanism: Only verifies if the filename is non-empty through JavaScript (if($.id('filename').value == \"\")), without checking file content/type/path. Attackers can bypass front-end validation by directly crafting malicious requests. The actual risk depends on the security implementation of the backend confup/bnr.", "code_snippet": "if($.id(\"filename\").value == \"\")\n{\n  $.alert(ERR_CONF_FILE_NONE);\n  return false;\n}", "link_identifiers": ["filename", "ERR_CONF_FILE_NONE", "doSubmit"], "notes": "Forms a combined vulnerability with the attack chain [SECRET_VALUE]: Frontend bypass makes backend flaws easier to trigger. Related to 'doSubmit' keyword records in the knowledge base (involving multiple form submission endpoints)."}
{"name": "xss-top-banner-56-57", "file_path": "web/frame/top.htm", "location": "top.htm:56-57", "risk_score": 8.0, "confidence": 8.25, "description": "Set innerHTML using dynamic data from the parent window (lines 56-57). Specific behavior: The content of 'nameModel' and 'numModel' elements is directly sourced from window.parent object properties. Trigger condition: An attacker needs to contaminate the $.desc/m_str.bannermodel/$.model properties of the parent window (e.g., via URL parameter injection). Security impact: Successful triggering could execute arbitrary JS code, leading to session hijacking or phishing attacks. Boundary check: Complete absence of input validation.", "code_snippet": "document.getElementById('nameModel').innerHTML = window.parent.$.desc;\ndocument.getElementById('numModel').innerHTML = window.parent.m_str.bannermodel + window.parent.$.model;", "link_identifiers": ["innerHTML", "window.parent.$.desc", "window.parent.m_str.bannermodel", "window.parent.$.model"], "notes": "It is necessary to analyze the parent window frame page to verify the data source. It is recommended to check ../frame/main.htm. Related findings: If properties such as $.desc are contaminated through the $.dhtml function in js/lib.js (refer to xss-$.dhtml-js-lib), it may form a combined vulnerability chain."}
{"name": "redirect-top-url-54-83", "file_path": "web/frame/top.htm", "location": "top.htm:54,83", "risk_score": 6.5, "confidence": 7.25, "description": "Unvalidated variables dynamically construct URLs (lines 54, 83). Specific manifestation: Concatenating URLs using undefined variables our_web_site/address. Trigger condition: Attackers control the values of our_web_site or address variables (e.g., via DOM pollution). Security impact: May redirect to malicious sites for phishing attacks. Constraint: Variables must be writable in the current scope.", "code_snippet": "var url = 'http://' + our_web_site;\nparent.location.href = 'http://' + address;", "link_identifiers": ["url", "our_web_site", "address", "parent.location.href"], "notes": "To track the variable definition location, it is recommended to perform a global search for the declaration of our_web_site/address."}
{"name": "script-include-customjs-21", "file_path": "web/frame/top.htm", "location": "top.htm:21", "risk_score": 5.0, "confidence": 6.5, "description": "Reference to external JS file ../js/custom.js (line 21). Specific manifestation: Failure to verify script source and content. Trigger condition: Attacker tampers with custom.js file or performs MITM attack. Security impact: May introduce vulnerabilities such as XSS/CSRF to expand attack surface. Constraint: Requires file write permissions or MITM capability.", "code_snippet": "<script src='../js/custom.js' type='text/JavaScript'></script>", "link_identifiers": ["../js/custom.js"], "notes": "Audit the content of the custom.js file, path: web/js/custom.js"}
{"name": "network_input-MenuRpm.htm-loadMenu", "file_path": "web/MenuRpm.htm", "location": "MenuRpm.htm:29", "risk_score": 7.5, "confidence": 7.25, "description": "The file dynamically loads the './frame/menu.htm' resource via $.loadMenu, which executes automatically when users access MenuRpm.htm. The primary risks include: 1) If menu.htm is tampered with (e.g., through firmware vulnerabilities), it could lead to XSS attacks; 2) No Content Security Policy (CSP) or input validation mechanisms are observed during the loading process; 3) Successful exploitation requires: attackers being able to modify the menu.htm file + users accessing the compromised page. Actual impacts may include session hijacking or malicious code execution.", "code_snippet": "$.loadMenu('./frame/menu.htm')", "link_identifiers": ["$.loadMenu", "menu.htm", "loadMenu"], "notes": "[SECRET_VALUE]"}
{"name": "static-menu-component-menu.htm", "file_path": "web/frame/menu.htm", "location": "menu.htm:132-220", "risk_score": 0.5, "confidence": 4.5, "description": "The HTML file serves as a static menu navigation page and does not directly process any external input sources (such as HTTP parameters, network interfaces, etc.). DOM operations are entirely based on internal variables (menulist/menuargs), with no unfiltered external input involved in page construction. All resource references within the file use relative paths and are controlled by internal variables ($.sysMode), with no cross-domain or uncontrolled resource loading detected.", "code_snippet": "function initMenu() {\n  var menulist = [...];\n  $.append(lvStack[curLv - 1], obj);\n}", "link_identifiers": ["menulist", "menuargs", "$.sysMode", "INCLUDE_WAN_MODE"], "notes": "As a front-end navigation component, it does not directly participate in the attack chain, but the referenced menu.cgi could potentially serve as an entry point."}
{"name": "[SECRET_VALUE].htm", "file_path": "web/frame/menu.htm", "location": "menu.htm:9-33,125-132", "risk_score": 1.0, "confidence": 4.5, "description": "The comments contain markers for disabled features during development (e.g., sysmod/wlguest5G), but no sensitive interfaces or credentials are exposed. The [SECRET_VALUE]orized operation (logoutClick) only manipulates cookies without involving hardcoded credentials. No forms or hidden endpoints are exposed.", "code_snippet": "/*[\"sysmod\", \"sysMode.htm\", 1, \"Operation Mode\"],*/\nfunction logoutClick(){$.deleteCookie(\"[SECRET_VALUE]orization\");}", "link_identifiers": ["/*[\"sysmod\"", "/*[\"wlguest5G\"", "logoutClick"]}
{"name": "wan-pollution-attack-chain", "file_path": "web/main/diagnostic.htm", "location": "diagnostic.htm:240-306", "risk_score": 8.5, "confidence": 6.5, "description": "Discovered a complete theoretical attack chain path based on WAN configuration pollution:  \n1) Attacker modifies WAN configuration (e.g., interface name/gateway IP) via NVRAM/network interface tampering.  \n2) When the user triggers diagnostic operations, frontend JavaScript passes polluted data (wanList[].name/gwIp) as the diagCommand.currHost parameter.  \n3) Data is transmitted to the backend via $.act(ACT_SET, DIAG_TOOL) invocation.  \n4) If the backend directly concatenates and executes commands (without validation), command injection can be achieved.  \nTrigger conditions:  \na) Existence of WAN configuration write vulnerability.  \nb) User/attacker can trigger diagnostic testing.  \nc) Backend fails to filter special characters.  \nBoundary checks: Frontend completely lacks input validation; backend implementation status unknown.", "code_snippet": "diagCommand.currHost = wanList[wanIndex].name;\n$.act(ACT_SET, DIAG_TOOL, null, null, diagCommand);", "link_identifiers": ["wanList[].name", "wanList[].gwIp", "diagCommand.currHost", "$.act", "ACT_SET", "DIAG_TOOL", "atmTest1", "wanTest"], "notes": "Critical Gap: DIAG_TOOL backend not located. Next steps required: 1) Search for DIAG_TOOL handler in /bin, /sbin 2) Analyze safety of currHost parameter usage 3) Verify WAN configuration write points (e.g., nvram_set). Knowledge base correlation reveals 'oid-backend-cgi-tentative': DIAG_TOOL is a sensitive OID, potentially processed by cgi-bin."}
{"name": "act-api-[SECRET_VALUE]-bypass-risk", "file_path": "web/main/diagnostic.htm", "location": "diagnostic.htm:785-789", "risk_score": 5.0, "confidence": 6.0, "description": "The $.act() communication mechanism exposes un[SECRET_VALUE]orized operation risks: All API calls (ACT_SET/ACT_GET) rely on frontend parameter construction, allowing attackers to bypass the interface and directly send malicious requests (session credentials required). However, no specific vulnerability exploitation points were identified. The risk depends on the input handling of each backend service.", "link_identifiers": ["$.act", "ACT_SET", "ACT_GET", "WAN_DSL_INTF_CFG", "L3_FORWARDING"]}
{"name": "[SECRET_VALUE]", "file_path": "web/main/status.htm", "location": "status.htm:JS[HIDDEN]", "risk_score": 8.0, "confidence": 7.75, "description": "[SECRET_VALUE]", "link_identifiers": ["saveSettings()", "[SECRET_VALUE]", "ssid"], "notes": "Verify the boundary checks on the ssid parameter in apply.cgi;  \nAssociated attack path: XSS manipulation of the sysMode parameter → calls saveSettings() → injects the set_wireless parameter in apply.cgi"}
{"name": "[SECRET_VALUE]", "file_path": "web/main/status.htm", "location": "status.htm:JS[HIDDEN]", "risk_score": 9.5, "confidence": 8.75, "description": "High-risk endpoint exposed: /cgi-bin/upload_firmware.cgi accepts firmware POST requests without front-end validation. Combined with the devInfo device information exposed via JS, attackers can craft specific firmware to trigger vulnerabilities and achieve remote code execution. Trigger condition: forging firmware matching devInfo; Risk: potential bypass of signature verification for persistent control.", "code_snippet": "xhr.open('POST','/cgi-bin/upload_firmware.cgi')", "link_identifiers": ["/cgi-bin/upload_firmware.cgi", "devInfo"], "notes": "Firmware verification has a high probability of vulnerabilities and requires reverse validation. Associated attack path: Forged firmware → Direct POST to upload_firmware.cgi → Bypass verification to achieve RCE (success probability 0.8)."}
{"name": "network_input-debug_info-cgi", "file_path": "web/main/status.htm", "location": "status.htm:[HIDDEN]", "risk_score": 6.0, "confidence": 6.5, "description": "Debug interface exposure risk: Comment reveals <!-- TEST API: /cgi-bin/debug_info.cgi -->, which may return sensitive device information. Attackers can directly access this endpoint to obtain memory layouts or configuration credentials, providing an informational foundation for exploiting other vulnerabilities. Trigger condition: Direct endpoint access; Risk: Information disclosure may reduce the difficulty of subsequent vulnerability exploitation.", "link_identifiers": ["/cgi-bin/debug_info.cgi"]}
{"name": "[SECRET_VALUE]", "file_path": "web/main/status.htm", "location": "[HIDDEN]", "risk_score": 9.0, "confidence": 7.0, "description": "Complete Wireless Attack Chain: Manipulating the sysMode parameter via XSS to trigger the saveSettings() function, injecting malicious set_wireless parameters into apply.cgi, ultimately leading to backend buffer overflow or RCE. This path demonstrates the full exploitation process from interface operations to system-layer vulnerabilities.", "link_identifiers": ["sysMode", "saveSettings()", "apply.cgi", "set_wireless"], "notes": "Attack steps: 1) XSS manipulation of sysMode parameter → 2) Call to saveSettings() → 3) Injection into apply.cgi → 4) Trigger RCE. Exploit probability 0.65; Related findings: [SECRET_VALUE]"}
{"name": "[SECRET_VALUE]", "file_path": "web/main/status.htm", "location": "[HIDDEN]", "risk_score": 9.8, "confidence": 8.0, "description": "Firmware upload attack chain: Forge malicious firmware matching devInfo device characteristics and directly POST to the upload_firmware.cgi endpoint, bypassing signature verification to achieve persistent control. This path exposes a high-risk operation interface without frontend validation.", "link_identifiers": ["devInfo", "/cgi-bin/upload_firmware.cgi", "firmware_signature"], "notes": "Attack steps: 1) Forge firmware → 2) POST to upload_firmware.cgi → 3) Bypass verification → 4) Establish persistent control. Exploit probability 0.8; Related discovery: [SECRET_VALUE]"}
{"name": "[SECRET_VALUE]", "file_path": "web/main/diagnostic.htm", "location": "diagnostic.htm:130,894,911", "risk_score": 7.0, "confidence": 8.0, "description": "The diagType parameter serves as the sole user input point on the page, controlling the diagnostic type selection (Internet/WAN). It directly governs subsequent processes (such as doDiag() calls) through JavaScript without implementing whitelist validation. Attackers can forcibly execute unintended diagnostic flows by modifying the diagType value in POST requests. Constraints: Requires bypassing frontend disable logic (line 894) or directly constructing HTTP requests. Potential impact: Combined with backend vulnerabilities, it may trigger un[SECRET_VALUE]orized diagnostic operations.", "code_snippet": "130: if (\"Internet\" == $.id(\"diagType\").value)\n894: $.id(\"diagType\").disabled = true\n911: <select id=\"diagType\" name=\"diagType\">", "link_identifiers": ["diagType", "wanInternetIdx", "doDiag()"]}
{"name": "ipc-diagnostic-diagCommand", "file_path": "web/main/diagnostic.htm", "location": "diagnostic.htm:264-600", "risk_score": 9.0, "confidence": 9.25, "description": "[SECRET_VALUE]", "code_snippet": "264: $.act(ACT_SET, DIAG_TOOL, null, null, diagCommand)\n278: var diagCommand = $.act(ACT_GET, DIAG_TOOL, null, null)", "link_identifiers": ["diagCommand", "ACT_SET", "DIAG_TOOL", "$.act"], "notes": "Immediately trace the backend DIAG_TOOL processing module (such as CGI programs) to verify command execution security."}
{"name": "[SECRET_VALUE]", "file_path": "[SECRET_VALUE]", "location": "backNRestore.htm:unknown", "risk_score": 7.0, "confidence": 7.75, "description": "The recovery function involves a multi-stage operation chain: user uploads configuration file → submits to /cgi/confup → calls /cgi/bnr interface → actively deletes [SECRET_VALUE]orization cookie. This process presents two risk points: 1) The file upload stage lacks visible filename extension/content validation logic (relying on undefined verification details in the doSubmit function) 2) Forced deletion of [SECRET_VALUE]entication cookies may lead to session fixation attacks. Attackers could craft malicious configuration files to trigger unintended operations, combining cookie deletion to achieve privilege bypass.", "link_identifiers": ["/cgi/confup", "/cgi/bnr", "doSubmit", "filename", "[SECRET_VALUE]orization", "deleteCookie"], "notes": "Requires further verification: 1) File processing logic of /cgi/confup 2) Whether cookie deletion requires prerequisites; relates to existing [SECRET_VALUE]orization risk items in knowledge base"}
{"name": "network_input-backup-exposure", "file_path": "[SECRET_VALUE]", "location": "unknown:unknown", "risk_score": 6.0, "confidence": 6.5, "description": "The backup function directly invokes the /cgi/conf.bin endpoint, but no parameter passing or input handling mechanism was identified. This design may expose the configuration download interface, allowing attackers to directly access and obtain sensitive device configurations. Combined with the cookie deletion operation in the restore function, this could form an attack chain: luring users to download malicious configurations → triggering a restore operation → clearing the session → redirecting to a phishing page.", "link_identifiers": ["/cgi/conf.bin", "onclick", "[SECRET_VALUE]orization"], "notes": "Confirm the access control mechanism of conf.bin; correlate with existing [SECRET_VALUE]orization risk items in the knowledge base."}
{"name": "[SECRET_VALUE]", "file_path": "web/main/diagnostic.htm", "location": "diagnostic.htm:261(currHost[HIDDEN]), 721([HIDDEN]), 496(mainDns[HIDDEN]), 626(testDispatch[HIDDEN]), 354([HIDDEN])", "risk_score": 8.8, "confidence": 8.85, "description": "Attack Chain (Integrated Update): Externally controllable wanList[].name/gwIp and mainDns values (via NVRAM configuration tampering) are directly assigned to diagCommand.currHost without validation in functions like atmTest1/wanTest, then submitted to the backend via $.act(ACT_SET, DIAG_TOOL). New critical details: 1) mainDns serves as an independent contamination source used at line 496 2) testDispatch routing (line 626) controls diagnostic process triggering 3) Boundary check exists only at line 721 (wanList.length), while 14 access points (e.g., line 354) lack protection. Trigger condition: After attacker tampers L3_FORWARDING/NET_CFG configurations, user visits diagnostic page (or forced trigger via CSRF). Potential impact: Combined with sensitive OID characteristics of backend DIAG_TOOL module (see oid-backend-cgi-tentative), insecure handling of currHost may lead to command injection.", "code_snippet": "261: diagCommand.currHost = wanList[wanIndex].name;\n496: diagCommand.currHost = mainDns;\n626: testDispatch[diagType](); // [HIDDEN]atmTest1/wanTest\n721: if (wanIndex >= wanList.length) return; // [HIDDEN]", "link_identifiers": ["currHost", "wanList[wanIndex].name", "wanList[wanIndex].gwIp", "mainDns", "diagCommand", "testDispatch", "$.act", "ACT_SET", "DIAG_TOOL", "L3_FORWARDING", "NET_CFG", "atmTest1", "wanTest"], "notes": "[SECRET_VALUE]"}
{"name": "memory-access-wanIndex-oob", "file_path": "web/main/diagnostic.htm", "location": "diagnostic.htm:138(wanIndex[HIDDEN]), 721([HIDDEN]), 354([HIDDEN])", "risk_score": 6.5, "confidence": 8.5, "description": "WAN Configuration Out-of-Bounds Access Risk: The wanIndex value depends on wanInternetIdx (dynamically determined by L3_FORWARDING configuration), but among 14 wanList[wanIndex] access points, only line 721 verifies length. New trigger mechanism: Manipulating aliasName.__ifAliasName configuration causes wanIndex≥wanList.length. Security impact: Returning undefined leads to logic exceptions (e.g., 'UP'!=undefined triggers errors), potentially disrupting device diagnostic functions or leaking memory information. This issue shares attack surface with high-risk parameter injection chains (L3_FORWARDING configuration tampering).", "code_snippet": "138: wanIndex = wanInternetIdx;\n354: if ('UP' != wanList[wanIndex].status) // [HIDDEN]status=undefined\n721: if (wanIndex >= wanList.length) return false; // [HIDDEN]", "link_identifiers": ["wanIndex", "wanList.length", "wanInternetIdx", "aliasName.__ifAliasName", "L3_FORWARDING"], "notes": "Evaluation must be conducted in conjunction with firmware environment: 1) Memory structure of wanList 2) Whether the exception handling mechanism exposes sensitive data. Related attack chain: [SECRET_VALUE] (shared L3_FORWARDING contamination entry point)"}
{"name": "[SECRET_VALUE]", "file_path": "bin/busybox", "location": "bin/busybox", "risk_score": 8.0, "confidence": 8.25, "description": "BusyBox v1.19.2 (compiled on 2016-09-13) carries multiple historical vulnerability risks, with high-risk components including 'telnetd' and 'httpd'. Attack trigger conditions: 1) Exposed telnet service (port 23) or HTTP service (ports 80/8008) 2) Sending specially crafted malicious requests. Specific risks:\n- CVE-2016-2147: telnetd authentication bypass vulnerability allowing unauthorized access\n- CVE-2016-2148: httpd Host header injection vulnerability leading to request forgery\nRelated findings: etc/init.d/rcS initiates telnetd service (discovery name: [SECRET_VALUE]), etc/services configures open ports (discovery name: [SECRET_VALUE])", "code_snippet": "BusyBox v1.19.2 (2016-09-13 10:03:21 HKT)", "link_identifiers": ["BusyBox", "telnetd", "httpd", "v1.19.2", "CVE-2016-2147", "CVE-2016-2148", "port_23", "port_80"], "notes": "[SECRET_VALUE]"}
{"name": "[SECRET_VALUE]", "file_path": "bin/busybox", "location": "bin/busybox", "risk_score": 3.0, "confidence": 5.0, "description": "Security policy restrictions caused the BusyBox applet enumeration to fail, impacting attack surface assessment. Specific limitations: 1) Direct execution of busybox is prohibited 2) Pipes/redirections are disabled 3) Only basic commands (cat/grep, etc.) are permitted. This prevents obtaining a complete feature list via 'busybox --list', potentially obscuring high-risk components (e.g., telnetd/httpd).", "link_identifiers": ["busybox", "applet", "security_restriction", "execute_shell"], "notes": "Recommendations: 1) Manually review the symbolic links in bin/busybox 2) Analyze the www directory to verify the httpd implementation"}
{"name": "[SECRET_VALUE]", "file_path": "[SECRET_VALUE]", "location": "[SECRET_VALUE]", "risk_score": 8.5, "confidence": 9.0, "description": "A high-risk file upload function was identified in usb3gUpload.htm: 1) Users can fully control filename input via the filename parameter. 2) The frontend doUpload() function directly retrieves raw user input with only non-empty validation. 3) Data is submitted to the /cgi/usb3gup endpoint via formObj.action. Attackers can craft malicious filenames containing path traversal (e.g., '../../bin/sh') or command injection characters (e.g., ';reboot;'). Trigger condition: Accessing the page and submitting the form. Actual impact: If the backend /cgi/usb3gup lacks path normalization, boundary checks, and command filtering for filename, it could directly lead to RCE or arbitrary file write.", "code_snippet": "function doUpload() {\n    if($.id(\"filename\").value == \"\") {\n        $.alert(ERR_USB_3G_FILE_NONE);\n        return false;\n    }\n    formObj.action = \"/cgi/usb3gup\";", "link_identifiers": ["filename", "doUpload", "/cgi/usb3gup", "formObj.action", "ERR_USB_3G_FILE_NONE", "[SECRET_VALUE]"], "notes": "Association Discovery: The knowledge base already contains a record for '[SECRET_VALUE]' (located at www/usb3gUpload.htm). Verification required: 1) Whether the two paths point to the same file 2) Whether the backend /cgi/usb3gup uses dangerous functions (such as system/popen) to process filename 3) Whether there is a risk of buffer overflow (strcpy-like operations)."}
{"name": "[SECRET_VALUE]", "file_path": "usr/sbin/xl2tpd", "location": "xl2tpd:0x0040fbe8 read_packet", "risk_score": 8.5, "confidence": 8.0, "description": "In the read_packet function (0x0040fbe8), the L2TP packets received from the network socket are written into the global_rbuf buffer with a fixed size (0x1000). When the write position exceeds the buffer capacity, only an error is logged without preventing out-of-bounds writes (the code shows only comparing *(param_1+0x14) and *(param_1+0x10)). An attacker sending malicious L2TP packets larger than 4KB can directly trigger a heap overflow, affecting the execution flow of subsequent handle_packet function and potentially leading to remote code execution.", "code_snippet": "if (*(param_1 + 0x14) <= *(param_1 + 0x10)) {\n  l2tp_log(4, \"%s: read overrun\\n\", \"read_packet\");\n  return -0x16;\n}", "link_identifiers": ["global_rbuf", "read_packet", "handle_packet", "*(param_1 + 0x14)", "*(param_1 + 0x10)"], "notes": "It is necessary to verify the construction method of oversized packets in conjunction with network protocols, and it is recommended to test L2TP control packets of 0x1001 bytes."}
{"name": "[SECRET_VALUE]", "file_path": "usr/sbin/xl2tpd", "location": "xl2tpd:0x4124f0 add_challenge_avp", "risk_score": 8.0, "confidence": 7.25, "description": "The AVP parsing functions (such as add_challenge_avp) directly use memcpy to copy AVP values provided by the network into stack/heap buffers (disassembly shows jalr t9 calling memcpy). No validation mechanism for src_len and dest_size was observed, allowing attackers to trigger buffer overflow by crafting AVPs with excessively long Values. Since AVP processing resides in the core path of L2TP protocol parsing, this vulnerability could lead to memory corruption and potentially bypass ASLR.", "code_snippet": "lw t9, -sym.imp.memcpy(gp);\njalr t9", "link_identifiers": ["add_challenge_avp", "add_chalresp_avp", "memcpy", "handle_avps", "s0"], "notes": "Verify the maximum allowed length of the Value field in the AVP structure within handle_avps(0x0040f2a0)."}
{"name": "[SECRET_VALUE]", "file_path": "usr/sbin/xl2tpd", "location": "xl2tpd:0x402060 death_handler", "risk_score": 8.0, "confidence": 6.75, "description": "The functions death_handler(0x402060) and lac_call use strcpy to process unverified data sources (disassembly shows jalr t9 calling strcpy). Since xl2tpd often runs with REDACTED_[SECRET_VALUE]_PLACEHOLDER privileges, an attacker controlling input sources (such as malicious configurations or protocol fields) can trigger stack overflow, leading to privilege escalation or remote code execution.", "code_snippet": "lw t9, -sym.imp.strcpy(gp);\njalr t9", "link_identifiers": ["death_handler", "lac_call", "strcpy", "s0"], "notes": "Track whether the source of tainted parameters is associated with network input (such as L2TP fields or configuration files)."}
{"name": "[SECRET_VALUE]", "file_path": "usr/bin/httpd", "location": "usr/bin/httpd: sym.http_rpm_update ([HIDDEN])", "risk_score": 9.2, "confidence": 8.5, "description": "A high-risk stack buffer overflow vulnerability exists in the firmware update interface. An attacker can trigger missing boundary checks in the sym.http_rpm_update function by sending an HTTP request with an excessively long filename parameter (>256 bytes) to the /rpm_update endpoint (e.g., in multipart/form-data format). Specific path: http_parser_illMultiObj parses the Content-Disposition field → unverified copy to a 256-byte stack buffer (auStack_a34). Successful exploitation could lead to arbitrary code execution, enabling complete device control. Trigger conditions: 1) Access to /rpm_update endpoint 2) Crafting an overly long filename 3) No [SECRET_VALUE]entication required (to be verified).", "code_snippet": "(**(loc._gp + -0x7e38))(puVar6,uStack_40,0x100); // [HIDDEN]256[HIDDEN]", "link_identifiers": ["sym.http_rpm_update", "auStack_a34", "http_parser_illMultiObj", "filename", "Content-Disposition", "0x100"], "notes": "[SECRET_VALUE]"}
{"name": "[SECRET_VALUE]", "file_path": "usr/bin/httpd", "location": "usr/bin/httpd:0x004099f0", "risk_score": 7.5, "confidence": 7.5, "description": "[SECRET_VALUE]", "link_identifiers": ["sym.http_rpm_[SECRET_VALUE]_main", "REDACTED_[SECRET_VALUE]_PLACEHOLDER", "http_parser_getEnv", "auStack_fbc", "USER_CFG"], "notes": "[SECRET_VALUE]"}
{"name": "[SECRET_VALUE]", "file_path": "usr/bin/httpd", "location": "usr/bin/httpd:0x00406bc8", "risk_score": 6.8, "confidence": 6.25, "description": "The global routing permission control variable is at risk of tampering. The permission flag g_http_alias_conf_admin is written into the routing table (ppcVar3[6]) through http_alias_addEntryByArg, affecting access control for subsequent requests. If an attacker modifies this variable through memory corruption vulnerabilities (such as the buffer overflow mentioned above), they could bypass permission checks for sensitive interfaces (e.g., /cgi/confup). Trigger conditions: 1) A writable memory vulnerability exists; 2) Tampering occurs after routing initialization. Actual exploitation would require combining with other vulnerabilities.", "code_snippet": "ppcVar3[6] = param_5; // [HIDDEN]", "link_identifiers": ["g_http_alias_conf_admin", "http_alias_addEntryByArg", "ppcVar3[6]", "g_http_alias_list"], "notes": "Verification required: 1) Whether variables are affected by NVRAM/env 2) Specific permission checking mechanism"}
{"name": "[SECRET_VALUE]", "file_path": "usr/bin/httpd", "location": "[SECRET_VALUE]", "risk_score": 9.5, "confidence": 7.25, "description": "[SECRET_VALUE]", "code_snippet": "[SECRET_VALUE]", "link_identifiers": ["sym.http_rpm_update", "g_http_alias_conf_admin", "confup", "bnr", "auStack_a34", "doSubmit", "ERR_CONF_FILE_NONE", "0x100"], "notes": "Leveraging the combination of Discovery 1/3 and the existing confup attack chain requires physical verification for: 1) Memory offset of g_http_alias_conf_admin 2) Path resolution of the bnr recovery script"}
{"name": "[SECRET_VALUE]", "file_path": "usr/bin/cwmp", "location": "cwmp:0x0040bef0 (cwmp_port_initUserdata)", "risk_score": 9.0, "confidence": 8.25, "description": "High-risk stack buffer overflow vulnerability: The `cwmp_port_initUserdata` function retrieves externally controllable CWMP_CFG configuration items via `rdp_getObjStruct` and copies them to a fixed-size stack buffer (`acStack_8e[33]`) using `strcpy` without length validation. The buffer is only 138 bytes away from the return address, allowing EIP overwrite for arbitrary code execution via overflow. Trigger condition: An attacker modifies the CWMP_CFG configuration item to exceed 33 bytes. High probability of successful exploitation; requires evaluation in conjunction with firmware protection mechanisms.", "code_snippet": "iVar2 = (*pcVar4)(\"CWMP_CFG\",...);\nif (acStack_8e[0] != '\\0') {\n    (**(...))(param_2 + 0x725,acStack_8e); // strcpy without length check", "link_identifiers": ["CWMP_CFG", "rdp_getObjStruct", "acStack_8e", "strcpy", "cwmp_port_initUserdata"], "notes": "Verification required: 1) Maximum length of CWMP_CFG configuration item 2) Firmware ASLR/NX status 3) Specific implementation of rdp_getObjStruct (cross-file)"}
{"name": "[SECRET_VALUE]", "file_path": "usr/bin/cwmp", "location": "cwmp:0x0040f7e4 (cwmp_hanleSoapHeader)", "risk_score": 4.0, "confidence": 5.5, "description": "SOAP ID Field Handling Potential Risk: The [SECRET_VALUE] function copies the user-controllable SOAP ID field (pcVar5) to the param_4+0xc buffer using an unspecified-sized function pointer operation. Potential overflow exists, but no boundary checks or dangerous operations were observed. Trigger condition: Crafting malicious SOAP messages to control the ID field. Current evidence is insufficient, requiring further verification of buffer size and function pointer implementation.", "link_identifiers": ["cwmp:ID", "cwmp_strstr", "param_4", "pcVar5", "cwmp_hanleSoapHeader"], "notes": "Suggestions for follow-up: 1) Locate the implementation of the loc._gp-0x7d2c function 2) Analyze the SOAP method name processing flow"}
{"name": "[SECRET_VALUE]", "file_path": "[SECRET_VALUE]", "location": "dropbearmulti:0x4043dc (main)", "risk_score": 3.5, "confidence": 8.4, "description": "Version Disclosure Vulnerability: When executing dropbearmulti directly with insufficient parameters, it outputs 'Dropbear multi-purpose version 2012.55'. Trigger conditions: 1) Not invoked via symbolic link 2) Command-line arguments ≤0. Attackers can exploit this for service fingerprinting to correlate with potential undisclosed vulnerabilities.", "link_identifiers": ["main", "param_1", "str.[SECRET_VALUE]...", "str.2012.55"], "notes": "The associated [SECRET_VALUE]word 'main' exists in the knowledge base; CVE verification failure requires manual intervention, recommend checking vendor security advisories."}
{"name": "[SECRET_VALUE]", "file_path": "[SECRET_VALUE]", "location": "sym.svr_[SECRET_VALUE]_[SECRET_VALUE]", "risk_score": 6.5, "confidence": 6.0, "description": "[SECRET_VALUE]", "link_identifiers": ["svr_[SECRET_VALUE]_[SECRET_VALUE]", "loc._gp + -0x79c0", "send_msg_user[SECRET_VALUE]_failure", "[SECRET_VALUE]"], "notes": "Decompilation is required to verify the comparison algorithm implementation, and theoretical risks need to be validated for practical feasibility in combination with network latency."}
{"name": "[SECRET_VALUE]", "file_path": "[SECRET_VALUE]", "location": "read_packet(0x0040fad0), buf_getstring(0x0040d5a0)", "risk_score": 0.5, "confidence": 4.95, "description": "Verified input security protection: Multi-layered boundary checks implemented in the network input path (session_loop→read_packet→process_packet): 1) Total packet length must be <34,993 bytes (0x88b9) and >header+16 bytes 2) [SECRET_VALUE]entication process string length ≤1,400 bytes (0x578). Violations immediately terminate the connection, effectively blocking buffer overflow attacks.", "link_identifiers": ["read_packet", "0x88b9", "buf_getstring", "0x578", "dropbear_exit"], "notes": "network_input"}
{"name": "[SECRET_VALUE]", "file_path": "usr/bin/wscd", "location": "wscd:0x40ee64 (sym.unique_service_name)", "risk_score": 9.8, "confidence": 9.5, "description": "High-risk stack buffer overflow vulnerability: An attacker can send a malicious SSDP M-SEARCH message and manipulate the USN header content (with no maximum length restriction). This input is extracted via `httpmsg_find_hdr(0x17)` in `ssdp_handle_ctrlpt_msg` and directly passed to the `unique_service_name` function. Inside the function, `sprintf` is used to format user-controllable data into a fixed 308-byte stack buffer (`auStack_148`) without any length validation. Overwriting the return address requires 324 bytes of input, potentially leading to remote code execution.", "code_snippet": "iVar4 = sym.httpmsg_find_hdr(param_1,0x17,&iStack_bb8);\niVar4 = sym.unique_service_name(iStack_bb8,auStack_5e4);\n...\n(*pcVar4)(auStack_148,\"urn%s\",auStack_148);", "link_identifiers": ["ssdp_handle_ctrlpt_msg", "httpmsg_find_hdr", "unique_service_name", "sprintf", "USN", "auStack_148", "param_1", "0x17"], "notes": "Full attack chain: 1) Send SSDP packets to manipulate USN header 2) Trigger ssdp_handle_ctrlpt_msg parsing 3) Extract corrupted data via field 0x17 4) Stack overflow in unique_service_name through sprintf. Recommend subsequent verification of ASLR bypass and shellcode injection feasibility."}
{"name": "path-traversal-fcn.0040aa54", "file_path": "usr/bin/vsftpd", "location": "vsftpd:0x0040aa54", "risk_score": 9.0, "confidence": 8.15, "description": "[SECRET_VALUE]", "code_snippet": "sym.str_split_char(param_1,0x43a4d4,0x7e);\nsym.vsf_sysutil_memcpy(...);", "link_identifiers": ["fcn.0040aa54", "sym.str_split_char", "sym.vsf_sysutil_memcpy", "RETR", "STOR", "SITE CHMOD", "0x43a4d4"], "notes": "Core Path Processing Function Defect, Affecting Multiple Command Modules"}
{"name": "[SECRET_VALUE]", "file_path": "usr/bin/vsftpd", "location": "vsftpd:0x0040e58c", "risk_score": 8.5, "confidence": 6.6, "description": "Permission Check Timing Vulnerability: The permission verification function (vsf_read_only_check) executes before path normalization. When an attacker uses path traversal sequences, the checked object differs from the actual operation path. Trigger conditions: 1) Construct a malicious path containing `../` 2) Target directory has loose permissions. Actual impact: Enables un[SECRET_VALUE]orized file operations when combined with path traversal vulnerabilities.", "link_identifiers": ["vsf_read_only_check", "vsf_access_check_file", "puStack_4c", "sym.process_post_login"]}
{"name": "[SECRET_VALUE]-bypass-anonymous", "file_path": "usr/bin/vsftpd", "location": "vsf_privop_do_login", "risk_score": 7.5, "confidence": 7.25, "description": "[SECRET_VALUE]", "link_identifiers": ["tunable_anonymous_enable", "tunable_deny_email_pass", "sym.str_contains_line", "sym.str_isempty", "ANONYMOUS"], "notes": "Verify the status of tunable_deny_email_pass in the firmware configuration."}
{"name": "priv-esc-SITE_CHMOD", "file_path": "usr/bin/vsftpd", "location": "vsftpd:0x0040e8b0", "risk_score": 9.0, "confidence": 8.0, "description": "[SECRET_VALUE]", "link_identifiers": ["SITE CHMOD", "fcn.0040aa54", "str_chmod", "../"], "notes": "constitutes a complete attack chain with path traversal vulnerabilities"}
{"name": "[SECRET_VALUE]", "file_path": "usr/bin/vsftpd", "location": "vsf_privop_do_login", "risk_score": 8.0, "confidence": 7.75, "description": "[SECRET_VALUE]", "link_identifiers": ["sym.vsf_sysdep_check_[SECRET_VALUE]", "sym.str_getlen", "0x81", "param_2"]}
{"name": "dos-STOU-command", "file_path": "usr/bin/vsftpd", "location": "vsftpd:0x40bf50", "risk_score": 6.5, "confidence": 7.5, "description": "STOU command denial of service: The loop for generating unique filenames (fcn.0040bedc) lacks a maximum attempt limit. Trigger conditions: 1) STOU command enabled 2) Attacker pollutes the target directory. Actual impact: Service thread resource exhaustion.", "code_snippet": "do {\n  sym.str_append_ulong(iVar2,iVar5);\n  iVar5++;\n} while (file_exists);", "link_identifiers": ["str_append_ulong", "iVar5", "str_stat", "fcn.0040bedc"]}
{"name": "TOCTOU-str_stat", "file_path": "usr/bin/vsftpd", "location": "vsftpd:0x40bf50-0x40c0a4", "risk_score": 7.0, "confidence": 5.75, "description": "TOCTOU Race Condition Vulnerability: A time window exists between the file operation check (str_stat) and actual creation (str_create_exclusive). Trigger conditions: 1) High-concurrency environment 2) Attacker-controlled filesystem. Actual impact: Unintended file write locations.", "link_identifiers": ["str_stat", "str_create_exclusive", "vsf_sysutil_retval_is_error"]}
{"name": "heap_overflow-sym.reply_trans-memcpy_length", "file_path": "usr/bin/smbd", "location": "smbd:0x42555c (sym.reply_trans)", "risk_score": 9.5, "confidence": 8.75, "description": "High-risk heap overflow vulnerability: An attacker controls the param_2+0x37 field value (uVar18) as the memcpy length parameter through an SMB TRANS request. Trigger conditions: 1) Send a crafted SMB packet to set the param_2+0x37 value 2) Make uVar18 > the allocated buffer size uVar17 3) Exploit the boundary check bypass at 0x42555c. Security impact: Controllable heap corruption may lead to remote code execution.", "link_identifiers": ["sym.reply_trans", "param_2", "uVar17", "uVar18", "memcpy", "smbd_process"], "notes": "Full attack chain: network interface → SMB protocol parsing → smbd_process() → sym.reply_trans(). Need to verify ASLR/NX protection status in the firmware environment."}
{"name": "integer_overflow-sym.reply_nttrans-memcpy_length", "file_path": "usr/bin/smbd", "location": "smbd:0x437d18 (sym.reply_nttrans)", "risk_score": 9.0, "confidence": 8.25, "description": "[SECRET_VALUE]", "link_identifiers": ["sym.reply_nttrans", "param_2", "uVar31", "uVar32", "memcpy", "iStack_e0"], "notes": "Associated with CVE-2023-39615 pattern, the attacker needs to construct an NT TRANS request to trigger it."}
{"name": "boundary_bypass-sym.[SECRET_VALUE]", "file_path": "usr/bin/smbd", "location": "smbd:0x438384 (sym.reply_nttrans)", "risk_score": 8.5, "confidence": 7.75, "description": "Missing boundary validation: memcpy only verifies that the address calculation does not cause integer overflow, but lacks: 1) source data length validation, 2) destination buffer boundary checks, and 3) source address range verification. Attackers can exploit malformed SMB data to achieve memory corruption.", "link_identifiers": ["sym.reply_nttrans", "memcpy", "s1", "v0", "uStack_e4"]}
{"name": "[SECRET_VALUE]", "file_path": "usr/bin/smbd", "location": "fcn.004e1d48:0x004e1d48 (accept)", "risk_score": 3.0, "confidence": 4.5, "description": "Main loop input processing limitation: Connections are accepted via `accept`, but the critical protocol parsing function `client_setfd` is a dynamically linked import, preventing full analysis of the preprocessing flow. No auxiliary attack surfaces such as NVRAM/configuration file operations were identified.", "link_identifiers": ["accept", "client_setfd", "sys_select", "SO_KEEPALIVE"], "notes": "Additional analysis of the libsmb.so library is required to verify the security of the preprocessing phase."}
{"name": "heap_overflow-upnpd-0x409aa4", "file_path": "usr/bin/upnpd", "location": "upnpd:0x409aa4(sym.pmlist_NewNode)", "risk_score": 9.0, "confidence": 8.75, "description": "[SECRET_VALUE]", "code_snippet": "uVar1 = (**(loc._gp + -0x7f1c))(param_5);\nif (5 < uVar1) {...} else {\n    (**(loc._gp + -0x7dcc))(puStack_10 + 0x1e,param_5);", "link_identifiers": ["pmlist_NewNode", "param_5", "NewExternalPort", "puStack_10", "[SECRET_VALUE]", "strcpy"], "notes": "Special constraint: Parameters must be pure numbers with a length of 5. Combinable with 0x406440 IP verification bypass."}
{"name": "heap_overflow-upnpd-0x408118", "file_path": "usr/bin/upnpd", "location": "upnpd:0x408118(fcn.00407e80)", "risk_score": 9.5, "confidence": 9.0, "description": "[SECRET_VALUE]", "link_identifiers": ["fcn.00407e80", "puVar2", "sym.[SECRET_VALUE]", "SOAP", "WANIPConnection"], "notes": "Composable 0x403fac format string vulnerability. PoC: Send >520 bytes of NewExternalPort"}
{"name": "[SECRET_VALUE]", "file_path": "usr/bin/upnpd", "location": "upnpd:0x40bc80(fcn.0040b278)", "risk_score": 9.0, "confidence": 8.25, "description": "[SECRET_VALUE]", "link_identifiers": ["fcn.0040b278", "g_vars", "[SECRET_VALUE]", "sym.pmlist_Find", "loc._gp-0x7dcc"], "notes": "[SECRET_VALUE]"}
{"name": "[SECRET_VALUE]", "file_path": "usr/sbin/xl2tpd", "location": "xl2tpd:0x0040a9d4 (sym.expand_payload)", "risk_score": 9.0, "confidence": 9.25, "description": "A controllable buffer underflow vulnerability exists in the `expand_payload` path: An attacker can manipulate the bit flags (0x4000/0x800/0x200) of `uVar2` via crafted L2TP packets to precisely control the value of `iVar13`. When calculating `puVar12 = puVar4 - iVar13`, if `iVar13` is too large, the pointer will reference memory before the buffer. The code only checks `puVar12 >= *(param_1+4)` (start boundary) without validating the write end boundary. An attacker can craft special flag combinations: 1) Set `uVar2=0x800|0x200` (making `iVar13=8`) to pass the start check 2) Then write 15 fields (30 bytes) starting at `puVar12`, causing heap memory out-of-bounds writes.", "code_snippet": "puVar12 = puVar4 - iVar13;\nif (puVar12 < *(param_1 + 4)) { ... }\n*puVar12 = uVar2;", "link_identifiers": ["expand_payload", "uVar2", "iVar13", "puVar4", "puVar12", "param_1+0xc", "*(param_1+4)", "handle_packet"], "notes": "The complete exploit chain with ID '[SECRET_VALUE]': recvmsg → handle_packet → expand_payload. Attackers can trigger heap memory corruption by sending specially crafted L2TP packets to UDP port 1701, potentially achieving RCE through a two-step vulnerability exploitation."}
{"name": "[SECRET_VALUE]", "file_path": "[SECRET_VALUE]", "location": "[SECRET_VALUE]", "risk_score": 8.5, "confidence": 9.25, "description": "[SECRET_VALUE]", "code_snippet": "case 0x53: // -S option\n  uVar12 = sym.xstrdup(*piVar4); // [HIDDEN]\n  *obj.ssh_program = uVar12;", "link_identifiers": ["obj.ssh_program", "sym.xstrdup", "sym.addargs", "vasprintf", "optarg", "-S", "fatal"], "notes": "Evaluate the blast radius based on the system memory size. It is recommended to test the firmware's behavior when memory is exhausted (whether it affects other services)."}
{"name": "[SECRET_VALUE]", "file_path": "usr/sbin/radvd", "location": "radvd:0x00404f18 [fcn.00404e40]", "risk_score": 9.2, "confidence": 8.75, "description": "[SECRET_VALUE]", "code_snippet": "do {\n  *puStack_10a0 = 0x19; // RDNSS[HIDDEN]\n  puStack_10a0[1] = (iVar4 >> 3) + 1; // [HIDDEN]\n  memcpy(puStack_10a0 + 2, &DAT_0041a8a0, 4); // [HIDDEN]\n  memcpy(puStack_10a0 + 6, *piVar16, 0x10); // RDNSS[HIDDEN]\n  iVar4 = iVar4 + 0x38; // [HIDDEN]56[HIDDEN]\n} while (piVar16 != NULL);", "link_identifiers": ["RDNSS", "fcn.00404e40", "auStack_ff0", "send_ra_forall", "piVar16", "yyparse"], "notes": "Exploitation requires control over configuration file writing (in combination with other vulnerabilities); it is recommended to examine the configuration file modification mechanism in the firmware (such as web interfaces)."}
{"name": "[SECRET_VALUE]", "file_path": "usr/sbin/radvd", "location": "radvd:0x00405a28 [process]", "risk_score": 5.0, "confidence": 7.0, "description": "ICMPv6 Packet Length Validation Flaw: The process function only validates the minimum length (16 bytes) without restricting the maximum length (upper limit 4096 bytes). Attackers can craft malformed packets of 1200-4096 bytes to enter the option parsing process, potentially triggering unhandled boundary conditions leading to crashes (DoS), though no direct memory corruption paths were identified.", "link_identifiers": ["process", "param_4", "RA packet", "option_length"], "notes": "The impact of DoS needs to be evaluated in conjunction with the specific device environment."}
{"name": "[SECRET_VALUE]", "file_path": "usr/sbin/radvd", "location": "[SECRET_VALUE]", "risk_score": 8.0, "confidence": 9.5, "description": "[SECRET_VALUE]", "link_identifiers": ["privsep_init", "[SECRET_VALUE]", "fork"], "notes": "This vulnerability can be combined with the RDNSS stack overflow to form a complete privilege escalation chain."}
{"name": "[SECRET_VALUE]", "file_path": "usr/sbin/dhcp6c", "location": "usr/sbin/dhcp6c:0x40e400 configure_ia", "risk_score": 9.8, "confidence": 8.75, "description": "High-risk stack overflow vulnerability: The configure_ia function performs unbounded copy operations on interface names within the 0x1f option when processing IA-PD type (0). Attackers can inject oversized interface names (≥18 bytes) through DHCPv6 REPLY/ADVERTISE packets to overwrite stack frames and achieve arbitrary code execution. Trigger conditions: 1) Device has DHCPv6 client enabled 2) Attacker forges server on the same link 3) Crafted packet contains malicious 0x1f option. Actual impact: Full device control (CVSS 9.8).", "code_snippet": "(**(loc._gp + -0x7c04))(auStack_58, puVar4[2]); // [HIDDEN]strcpy[HIDDEN]", "link_identifiers": ["configure_ia", "IA-PD", "0x1f", "puVar4[2]", "auStack_58", "recvmsg", "dhcp6_get_options", "client6_recv"], "notes": "Full attack chain: recvmsg( )→client6_recv( )→dhcp6_get_options( )→cf_post_config( )→configure_ia( ). Recommended verifications: 1) Firmware ASLR/NX protection status 2) Actual offset calculation"}
{"name": "[SECRET_VALUE]", "file_path": "usr/sbin/dhcp6c", "location": "usr/sbin/dhcp6c:0x414d40 client6_script", "risk_score": 6.8, "confidence": 6.25, "description": "Command injection vulnerability: client6_script passes unfiltered DHCP options (DNS/NTP server addresses) as environment variables when executing external scripts via execve. If the script (with unknown path origin) unsafely uses these variables, it may lead to command injection. Trigger conditions: 1) The script exists and does not securely handle variables 2) Attacker controls DHCP option content. Actual impact: Medium (depends on script implementation, CVSS 6.8).", "link_identifiers": ["client6_script", "execve", "new_domain_name_servers", "new_ntp_servers", "in6addr2str", "strlcat"], "notes": "Further analysis required: 1) Usage scenarios of client6_script 2) Security of default script path"}
{"name": "[SECRET_VALUE]", "file_path": "usr/sbin/dhcp6c", "location": "usr/sbin/dhcp6c:0x402b80 main", "risk_score": 7.8, "confidence": 5.5, "description": "Global buffer overflow: The main function uses sprintf to write the interface name from the startup parameters into a fixed buffer obj.info_path (format: '/var/run/dhcp6c-%s.info'). A privileged user (e.g., REDACTED_[SECRET_VALUE]_PLACEHOLDER) passing an excessively long interface name during startup can corrupt the global data area. Trigger condition: Malicious local user or misconfigured startup script. Actual impact: Local privilege escalation or DoS (CVSS 7.8).", "link_identifiers": ["main", "sprintf", "obj.info_path", "s2"], "notes": "Verification required: 1) Adjacent data structure of obj.info_path 2) Firmware boot parameter constraints"}
{"name": "[SECRET_VALUE]", "file_path": "usr/bin/upnpd", "location": "upnpd:0x405570", "risk_score": 9.5, "confidence": 8.75, "description": "[SECRET_VALUE]", "code_snippet": "(**(loc._gp + -0x7df0))(auStack_21c,0x200,\"<u:%sResponse xmlns:u=\\\"%s\\\">\\n%s\\n</u:%sResponse>\",*aiStackX_0 + 0xbc,\"urn:schemas-upnp-org:service:WANIPConnection:1\",0x40ecf4,*aiStackX_0 + 0xbc);", "link_identifiers": ["AddPortMapping", "snprintf", "auStack_21c", "[SECRET_VALUE]", "urn:schemas-upnp-org:service:WANIPConnection:1"], "notes": "Exploit chain complete: Network interface (HTTP/SOAP) → Parameter parsing → Unverified copy → Stack overflow → RCE. Need to verify ASLR/NX protection status. Associated file: upnpd binary."}
{"name": "[SECRET_VALUE]", "file_path": "usr/bin/upnpd", "location": "upnpd:0x4039b0", "risk_score": 9.2, "confidence": 7.25, "description": "[SECRET_VALUE]", "link_identifiers": ["main", "system", "event_0x805", "-url", "-desc", "[SECRET_VALUE]"], "notes": "Similar to the CVE-2016-1555 pattern. Potential correlation: If the UPnP stack overflow vulnerability gains execution privileges, it could trigger this command injection to form a dual-stage attack chain."}
{"name": "[SECRET_VALUE]", "file_path": "usr/bin/upnpd", "location": "upnpd:0x405570 and upnpd:0x4039b0", "risk_score": 10.0, "confidence": 7.75, "description": "[SECRET_VALUE]", "link_identifiers": ["AddPortMapping", "event_0x805", "[SECRET_VALUE]", "system", "RCE-chain"], "notes": "attack_chain"}
{"name": "RCE-http_cgi_main-strcpy", "file_path": "usr/bin/httpd", "location": "httpd:0x408e90 sym.http_cgi_main", "risk_score": 9.5, "confidence": 8.85, "description": "High-risk Remote Code Execution Vulnerability: In the http_cgi_main function when processing HTTP POST requests, user input is read into a 4000-byte stack buffer (acStack_fdc) via http_stream_fgets. After processing by http_tool_getAnsi, a strcpy call at 0x408e90 fails to validate length. Trigger conditions: 1) HTTP header contains valid action parameter 2) Attribute line begins with '\\\\' 3) Data length exceeds remaining space in target buffer. Lack of bounds checking leads to stack overflow, allowing return address overwrite for arbitrary code execution.", "code_snippet": "[SECRET_VALUE]", "link_identifiers": ["sym.http_cgi_main", "acStack_fdc", "http_stream_fgets", "sym.imp.strcpy", "sym.http_tool_getAnsi", "s1", "v1", "0x408e90"], "notes": "Verify the initialization process of the global linked list 0x42224c. Attack path: network interface → CGI processing function → strcpy hazardous operation."}
{"name": "[SECRET_VALUE]", "file_path": "usr/bin/httpd", "location": "[SECRET_VALUE]", "risk_score": 8.5, "confidence": 9.0, "description": "[SECRET_VALUE]", "code_snippet": "addiu a1, s3, 5; jalr t9 (strncat); lw t9, -sym.imp.open", "link_identifiers": ["http_file_rpmRep", "s3", "strncat", "open", "/var/tmp/pc/web/"], "notes": "Attack path: network interface → path parameter processing → file system access"}
{"name": "OOBRead-http_tool_argUnEscape", "file_path": "usr/bin/httpd", "location": "[SECRET_VALUE]", "risk_score": 8.0, "confidence": 9.0, "description": "URL Decoding Out-of-Bounds Read Vulnerability: In the http_tool_argUnEscape function when processing HTTP parameters, when the input contains isolated '%' characters (such as % or %a), directly accessing pcVar2[1]/pcVar2[2] leads to out-of-bounds reading. Trigger condition: GET/POST parameters contain unclosed percent signs. Absence of buffer length checking may cause process crashes or information leakage.", "code_snippet": "if (cVar1 == '%') { cStack_28 = pcVar2[1]; cStack_27 = pcVar2[2]; ...", "link_identifiers": ["http_tool_argUnEscape", "param_1", "pcVar2", "http_parser_argStrToList", "0x26"], "notes": "Affects all HTTP parameter processing flows, attack path: network input → parameter parsing → memory out-of-bounds access"}
{"name": "[SECRET_VALUE]", "file_path": "usr/bin/httpd", "location": "httpd:http_rpm_[SECRET_VALUE]_main", "risk_score": 9.2, "confidence": 8.55, "description": "High-risk format string vulnerability: In the http_rpm_auth_main authentication process, sprintf is used to concatenate externally controllable name/[SECRET_VALUE] parameters into a 3978-byte stack buffer (auStack_fbc). Trigger conditions: 1) Send an authentication request 2) Combined length of name+[SECRET_VALUE] exceeds 3978 bytes 3) *(param_1+0x34)==1. Lack of length validation leads to stack overflow.", "link_identifiers": ["sym.http_parser_getEnv", "name", "[SECRET_VALUE]", "REDACTED_PASSWORD_PLACEHOLDER=%s\\[SECRET_VALUE]=%s\\n", "auStack_fbc", "USER_CFG"], "notes": "Attack Path: [SECRET_VALUE]entication Interface → Environment Variable Retrieval → Format String Construction"}
{"name": "[SECRET_VALUE]", "file_path": "usr/bin/httpd", "location": "httpd:0x004099f0", "risk_score": 8.0, "confidence": 7.25, "description": "[SECRET_VALUE]entication Race Condition Vulnerability: http_rpm_[SECRET_VALUE]_main accesses environment variables and USER_CFG configurations through a global linked list (0x422200) without synchronization mechanisms. Trigger condition: High-concurrency [SECRET_VALUE]entication requests (>5 requests/second). May lead to [SECRET_VALUE]entication bypass or configuration corruption.", "code_snippet": "pcStack_18 = sym.http_parser_getEnv(\"name\"); iVar1 = (**(loc._gp + -0x7e7c))(0,\"USER_CFG\",&uStack_17ec,auStack_fbc,2);", "link_identifiers": ["http_rpm_[SECRET_VALUE]_main", "http_parser_getEnv", "USER_CFG", "0x422200", "old[SECRET_VALUE]"], "notes": "Relying on the httpd thread model, the attack path: concurrent [SECRET_VALUE]entication requests → global state race condition"}
{"name": "AttackChain-DirectRCE", "file_path": "usr/bin/httpd", "location": "attack_chain", "risk_score": 9.5, "confidence": 8.85, "description": "Direct RCE attack chain: Sending a crafted HTTP POST request → Contaminated data flows into http_cgi_main → Triggers strcpy stack overflow → Overwrites return address to achieve code execution. Feasibility: High (8.7/10), no [SECRET_VALUE]entication required.", "link_identifiers": ["HTTP_POST", "sym.http_cgi_main", "acStack_fdc", "sym.imp.strcpy"], "notes": "attack_chain: 1) Construct an HTTP request with excessively long data 2) Set the action parameter to trigger CGI processing branch 3) Exploit stack overflow to control program flow"}
{"name": "AttackChain-Combined", "file_path": "usr/bin/httpd", "location": "attack_chain", "risk_score": 9.2, "confidence": 8.0, "description": "[SECRET_VALUE]", "link_identifiers": ["http_file_rpmRep", "s3", "sym.http_rpm_[SECRET_VALUE]_main", "sprintf"], "notes": "[SECRET_VALUE]"}
{"name": "[SECRET_VALUE]", "file_path": "usr/sbin/pppd", "location": "pppd:0x0041a5c8", "risk_score": 9.5, "confidence": 8.5, "description": "[SECRET_VALUE]", "code_snippet": "iVar5 = strlen(uVar8);\n(**(loc._gp + -0x773c))(0x465cbc + uVar1 + 1, uVar8, iVar5);", "link_identifiers": ["chap_[SECRET_VALUE]_peer", "peer_name", "memcpy", "0x465cbc", "sym.link_established", "PPPoE"], "notes": "Associate with CVE-2020-15705 attack pattern. Mitigation recommendations: 1) Add peer_name length validation 2) Isolate the global [SECRET_VALUE]entication buffer"}
{"name": "[SECRET_VALUE]", "file_path": "usr/sbin/pppd", "location": "pppd:main→parse_args→option_error", "risk_score": 9.0, "confidence": 8.5, "description": "High-risk format string vulnerability: Attackers trigger option_error via malicious command-line arguments, leading to memory leak/tampering through an unfiltered vslprintf+fprintf chain when obj.phase=1. Trigger condition: Network service invokes pppd with format string-containing arguments. Boundary check: Complete lack of input filtering. Security impact: Remote code execution (refer to CVE-2020-15779), high success probability (requires firmware boot parameter validation).", "link_identifiers": ["option_error", "parse_args", "argv", "obj.phase", "vslprintf", "fprintf"], "notes": "Verify the output target (network/log) of global_stream in the firmware"}
{"name": "[SECRET_VALUE]", "file_path": "usr/sbin/pppd", "location": "pppd:0x0040e440 sym.device_script", "risk_score": 9.0, "confidence": 7.75, "description": "Command injection vulnerability: The device_script function executes /bin/sh -c via execl, with parameter param_1 (obj.ppp_devnam) directly derived from user input (command line or /etc/ppp/options file). Trigger condition: Tampering with device name configuration. Boundary check: No command separator filtering implemented. Security impact: Arbitrary command execution with REDACTED_[SECRET_VALUE]_PLACEHOLDER privileges, success probability depends on configuration controllability.", "link_identifiers": ["device_script", "execl", "/bin/sh", "obj.ppp_devnam", "parse_args", "options_from_file"], "notes": "Associating /etc/ppp/options file permission risks"}
{"name": "[SECRET_VALUE]", "file_path": "usr/sbin/pppd", "location": "pppd:0x00407b3c main", "risk_score": 7.0, "confidence": 7.5, "description": "Configuration Tampering Risk: Hardcoded loading of /etc/ppp/options allows attackers to inject malicious parameters by modifying the file. Trigger Condition: Improper file permission configuration. Boundary Check: Absence of configuration signature verification. Security Impact: Indirectly triggers aforementioned vulnerabilities (Risk Level: 7.0).", "link_identifiers": ["/etc/ppp/options", "sym.options_from_file", "obj.privileged"]}
{"name": "[SECRET_VALUE]", "file_path": "usr/sbin/pppd", "risk_score": 0.0, "confidence": 0.0, "description": "LCP Protocol Buffer Overflow (Unverified): Potential overflow in loop_chars function, unable to confirm MRU constraint mechanism and buffer type due to tool limitations. Evidence status: Symbol table missing leading to failure in locating critical functions, no reliable conclusion.", "link_identifiers": ["loop_chars", "lcp_loop_mru", "MRU", "LCP"], "notes": "Symbol table recovery or static analysis enhancement required"}
{"name": "[SECRET_VALUE]", "file_path": "usr/bin/cwmp", "location": "usr/bin/cwmp:? [cwmp_parse[SECRET_VALUE]Info] 0x404ac8", "risk_score": 9.5, "confidence": 8.75, "description": "High-risk HTTP Response Processing Vulnerability Chain: Attackers achieve RCE by triggering consecutive stack overflows through malicious HTTP responses. Exploitation steps: 1) Send >9-byte HTTP header line to overwrite cwmp_readLine stack buffer (auStack_434); 2) Inject >306-byte authentication data in WWW-Authenticate header; 3) Data propagates through [SECRET_VALUE] to cwmp_parseAuthInfo; 4) Unvalidated strcpy(auStack_41b) overwrites return address. Successful exploitation requires controlling HTTP responses (e.g., via MITM attacks), but firmware as CPE devices often exposes WAN interfaces, creating a broad attack surface.", "code_snippet": "strcpy(auStack_41b + 0x307, param_3); // [HIDDEN]0x41b[HIDDEN]", "link_identifiers": ["cwmp_parse[SECRET_VALUE]Info", "cwmp_readLine", "[SECRET_VALUE]", "auStack_41b", "auStack_434", "param_3", "WWW-[SECRET_VALUE]enticate", "strcpy"], "notes": "Vulnerability chain completeness: Initial input (HTTP) → Propagation (parsing function) → Dangerous operation (strcpy). Mitigation recommendations: 1) Add length validation in cwmp_readLine 2) Replace strcpy with strncpy 3) Enable stack protection mechanism"}
{"name": "diagtool-backend-confirmed", "location": "cross-component: diagnostic.htm → cgi-bin", "risk_score": 9.0, "confidence": 8.75, "description": "Vulnerability validation confirmed through knowledge base correlation analysis:  \n1) DIAG_TOOL is processed by a cgi-bin program (based on oid-backend-cgi-tentative findings).  \n2) ACT_SET operation passes diagCommand to the backend via $.act() (based on ipc-diagnostic-diagCommand findings).  \n3) The tainted parameter currHost is transmitted without validation (based on [SECRET_VALUE] findings).  \nFull attack chain prerequisites: The cgi-bin handler directly concatenates currHost to execute system commands.", "link_identifiers": ["DIAG_TOOL", "ACT_SET", "cgi-bin", "diagCommand.currHost", "$.act"], "notes": "Final validation requirement: Analyze the DIAG_TOOL processing logic in the cgi-bin source code to verify whether currHost is directly used for command execution (such as system()/popen() calls)."}
