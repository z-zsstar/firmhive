{"name": "[SECRET_VALUE]", "file_path": "etc/init.d/rcS", "location": "rcS:8-21,24", "risk_score": 8.0, "confidence": 8.5, "description": "rcS creates 13 globally writable directories (0777 permissions), including sensitive locations such as /var/run and /var/tmp/dropbear. Trigger condition: Automatically executed during system startup. Security impact: Attackers can implant malicious files or tamper with runtime data like PIDs, potentially leading to privilege escalation (e.g., through symlink attacks or service configuration file tampering) when combined with service vulnerabilities.", "code_snippet": "/bin/mkdir -m 0777 -p /var/run\n/bin/mkdir -m 0777 -p /var/tmp/dropbear", "link_identifiers": ["mkdir", "0777", "/var/run", "/var/tmp/dropbear", "/var/samba/private"], "notes": "Follow-up analysis required: 1. Check whether services such as telnetd/cos/rttd are using these directories 2. Verify whether the directories are exposed to network services"}
{"name": "[SECRET_VALUE]", "file_path": "etc/init.d/rcS", "location": "rcS:62", "risk_score": 9.5, "confidence": 9.0, "description": "The telnetd service starts in no-parameter mode without [SECRET_VALUE]entication enabled. Trigger condition: Automatically executed during system startup. Security impact: Attackers can directly obtain device shell access via telnet (no credentials required), resulting in complete device compromise.", "code_snippet": "telnetd", "link_identifiers": ["telnetd"], "notes": "Further analysis required: 1. Locate the telnetd binary path 2. Verify whether its default configuration enforces [SECRET_VALUE]entication"}
{"name": "config-ftp-unsafe-upload", "file_path": "etc/vsftpd.conf", "location": "etc/vsftpd.conf:0 (global) 0x0", "risk_score": 8.0, "confidence": 8.0, "description": "The FTP service configuration allows [SECRET_VALUE]enticated users to upload files (write_enable=YES) but does not restrict file types or implement a security sandbox. Attackers with valid credentials can upload malicious files (e.g., webshells) via FTP. If the web service can access FTP directories, this creates an RCE attack chain. Trigger conditions: 1) Attackers obtain local user credentials (e.g., weak [SECRET_VALUE]s) 2) The system runs a web service overlapping with FTP user directories. Constraints: The chroot_local_user configuration may restrict directory access, requiring verification of the actual directory structure.", "link_identifiers": ["write_enable", "local_enable", "chroot_local_user"], "notes": "[SECRET_VALUE]"}
{"name": "config-ftp-anonymous-default", "file_path": "etc/vsftpd.conf", "location": "etc/vsftpd.conf:0 (global) 0x0", "risk_score": 2.0, "confidence": 5.0, "description": "Anonymous access is explicitly disabled (anonymous_enable=NO), but the [SECRET_VALUE] retains the default value 'ftp'. If anonymous access is enabled in the future, it may lead to default account permission issues. Under the current configuration, neither anonymous upload (anon_upload_enable) nor directory creation (anon_mkdir_write_enable) is enabled. Trigger condition: Administrator erroneously enables anonymous access functionality.", "link_identifiers": ["anonymous_enable", "[SECRET_VALUE]"], "notes": ""}
{"name": "network_input-MiniDLNA-[HIDDEN]", "file_path": "etc/minidlna.conf", "location": "etc/minidlna.conf", "risk_score": 8.0, "confidence": 8.25, "description": "The MiniDLNA service is exposed on port 8200 (br0 interface) without access control. Attackers can exploit vulnerabilities by sending malicious DLNA requests over the network. If the service runs as REDACTED_[SECRET_VALUE]_PLACEHOLDER (with the user configuration commented out), successful exploitation would grant complete control of the device. Verification is required to determine whether sbin/minidlnad contains vulnerabilities such as buffer overflows.", "code_snippet": "port=8200\nnetwork_interface=br0\n#user=jmaggard", "link_identifiers": ["port=8200", "network_interface=br0", "#user"], "notes": "[SECRET_VALUE]"}
{"name": "network_input-MiniDLNA-[HIDDEN]", "file_path": "etc/minidlna.conf", "location": "etc/minidlna.conf", "risk_score": 6.5, "confidence": 6.5, "description": "The absence of explicit configuration for media directory (media_dir) and REDACTED_[SECRET_VALUE]_PLACEHOLDER container (root_container) may allow access to sensitive paths when using default values. Combined with directory traversal vulnerabilities (such as unfiltered path parameters in HTTP requests), attackers could read system files. Trigger condition: minidlna fails to perform boundary checks when processing malicious file path requests.", "code_snippet": "#media_dir=AVP,G,/home/zhu/media\n#root_container=.", "link_identifiers": ["#media_dir", "#root_container=."], "notes": "Verify the actual file access logic of minidlna"}
{"name": "network_input-MiniDLNA-[HIDDEN]", "file_path": "etc/minidlna.conf", "location": "etc/minidlna.conf", "risk_score": 5.0, "confidence": 6.0, "description": "Disabling strict DLNA mode (strict_dlna=no) may reduce protocol parsing security. When combined with inotify monitoring (inotify=yes), malicious file creation events could trigger parsing vulnerabilities. Attack chain: lure users into downloading malformed media files → inotify triggers parsing → vulnerability exploitation.", "code_snippet": "inotify=yes\nstrict_dlna=no", "link_identifiers": ["strict_dlna=no", "inotify=yes"], "notes": "It is necessary to combine file monitoring and parsing logic analysis."}
{"name": "[SECRET_VALUE]", "file_path": "[SECRET_VALUE]", "location": "[SECRET_VALUE]", "risk_score": 8.5, "confidence": 8.65, "description": "[SECRET_VALUE]", "link_identifiers": ["[SECRET_VALUE]", "REDACTED_[SECRET_VALUE]_PLACEHOLDER", "nobody", "UID=0", "GID=0", "/bin/sh", "[HIDDEN]=/"], "notes": "[SECRET_VALUE]"}
{"name": "weak-creds-ftp-vsftpd_[SECRET_VALUE]", "file_path": "etc/vsftpd_[SECRET_VALUE]", "location": "etc/vsftpd_[SECRET_VALUE]", "risk_score": 9.0, "confidence": 10.0, "description": "[SECRET_VALUE]", "code_snippet": "REDACTED_[SECRET_VALUE]_PLACEHOLDER:1234:1:1;guest:guest:0:0;test:test:1:1;", "link_identifiers": ["vsftpd_[SECRET_VALUE]", "REDACTED_[SECRET_VALUE]_PLACEHOLDER", "guest", "test", "FTP[HIDDEN]", "[SECRET_VALUE]"], "notes": "Correlation Discovery: config-ftp-anonymous-default (located in etc/vsftpd.conf). Follow-up Recommendations: 1) Check whether the /etc/vsftpd.conf configuration allows anonymous login or contains directory traversal vulnerabilities; 2) Verify if the FTP service is invoked through the web interface (e.g., PHP scripts in the www directory)."}
{"name": "[SECRET_VALUE]", "file_path": "etc/init.d/rcS", "location": "rcS:62", "risk_score": 7.0, "confidence": 9.5, "description": "The telnetd service is started without [SECRET_VALUE]entication parameters (command: 'telnetd'). Trigger condition: The rcS script is automatically executed during system startup. Constraint: Relies on the default [SECRET_VALUE]entication mechanism /bin/login. Security impact: If /bin/login contains hardcoded credentials or [SECRET_VALUE]entication logic vulnerabilities, attackers can directly gain system privileges through network access. Exploitation method: Attempt [SECRET_VALUE]entication bypass by remotely connecting to the telnet service.", "code_snippet": "telnetd", "link_identifiers": ["telnetd", "rcS", "/bin/login"], "notes": "Related knowledge base record #telnetd. Requires further verification: 1) Reverse analysis of /bin/login 2) Testing default credentials (e.g., [SECRET_VALUE])"}
{"name": "[SECRET_VALUE]", "file_path": "etc/init.d/rcS", "location": "rcS:38-60", "risk_score": 6.0, "confidence": 6.25, "description": "[SECRET_VALUE]", "code_snippet": "[SECRET_VALUE]", "link_identifiers": ["insmod", "[SECRET_VALUE]", "/lib/modules/tfat.ko"], "notes": "Critical constraints: The module file's permission settings (whether writable) and integrity check mechanisms must be verified"}
{"name": "[SECRET_VALUE]", "file_path": "etc/init.d/rcS", "location": "rcS:3", "risk_score": 0.0, "confidence": 0.0, "description": "The `mount -a` command relies on the `/etc/fstab` configuration. Trigger condition: system startup. Constraint: unable to verify whether `/etc/fstab` can be modified externally. Security impact: theoretically, tampering with fstab could lead to malicious mounts, but there is currently no evidence supporting actual exploitability.", "code_snippet": "mount -a", "link_identifiers": ["mount", "-a", "/etc/fstab"], "notes": "Insufficient evidence: 1) Unable to access /etc directory 2) No relevant operation scripts found. Recommend conducting specialized analysis after obtaining full firmware access."}
{"name": "[SECRET_VALUE]", "file_path": "etc/init.d/rcS", "location": "rcS", "risk_score": 0.0, "confidence": 0.0, "description": "The startup commands for the cos/rttd service do not specify a path ('cos &'/'rttd &'). Trigger condition: runs in the background upon system startup. Constraint: the PATH environment variable is undefined, preventing the executable from being located. Security impact: unknown, as analysis of the service binary is obstructed.", "link_identifiers": ["cos", "rttd"], "notes": "Next steps: 1) Perform a global search for cos/rttd executable files 2) Analyze directories such as /bin, /sbin, etc."}
{"name": "[SECRET_VALUE]", "file_path": "bin/login", "location": "bin/login:0x30c48 (strcmp), 0x30c70 (memset)", "risk_score": 2.0, "confidence": 5.0, "description": "[SECRET_VALUE]", "link_identifiers": ["strcmp", "memset", "[SECRET_VALUE]"], "notes": "Security Practice Record. Recommendations: 1) Check BusyBox vulnerability database 2) Monitor [SECRET_VALUE]entication process through dynamic analysis 3) Strengthen input filtering mechanisms"}
{"name": "http-request-injection", "file_path": "web/index.htm", "location": "www/js/lib.js:500", "risk_score": 9.0, "confidence": 8.0, "description": "High-risk HTTP Request Injection Vulnerability: The `$.exe()` function fails to filter CR/LF characters when concatenating the `attrs` parameter, allowing attackers to inject arbitrary HTTP headers or request bodies via controllable `attrs` parameters. Trigger conditions: 1) Frontend calls `$.act()` with user-controlled `attrs` parameters (e.g., from URL parameters); 2) Parameter values contain `%0d%0a` sequences; 3) Triggering `$.exe()` to send requests. Actual impact: May bypass [SECRET_VALUE]entication to execute privileged operations (e.g., configuration tampering) or steal sessions.", "code_snippet": "data += \"[...]\" + index + \",\" + obj[6] + \"\\r\\n\" + obj[5];", "link_identifiers": ["$.exe", "attrs", "obj[5]", "data+=", "\\r\\n", "ACT_GET", "ACT_SET"], "notes": "Complete attack path: User input → $.act() call → $.exe() injection → Backend privileged operation"}
{"name": "device-info-leak", "file_path": "web/index.htm", "location": "www/frame/bot.htm:12", "risk_score": 7.5, "confidence": 8.5, "description": "Device Information Disclosure Vulnerability: bot.htm retrieves and displays hardware/software versions in plaintext via $.act(ACT_GET, IGD_DEV_INFO). Trigger Condition: Accessing any page containing this script (no [SECRET_VALUE]entication required). Security Impact: Exposes precise device versions, enabling attackers to match vulnerability exploitation chains.", "code_snippet": "var devInfo = $.act(ACT_GET, IGD_DEV_INFO...);\n$(\"#bot_sver\").html(...devInfo.softwareVersion);", "link_identifiers": ["$.act", "ACT_GET", "IGD_DEV_INFO", "devInfo.softwareVersion", "#bot_sver"]}
{"name": "un[SECRET_VALUE]orized-reboot", "file_path": "web/index.htm", "location": "www/frame/top.htm:0", "risk_score": 6.0, "confidence": 6.0, "description": "Device restart operation exposed: top.htm triggers a reboot via $.act(ACT_OP, ACT_OP_REBOOT). Trigger condition: User clicks the #topReboot element (can be combined with CSRF exploitation). Constraint: Requires a valid session cookie. Security impact: Denial-of-service attack or configuration reset.", "link_identifiers": ["$.act", "ACT_OP", "ACT_OP_REBOOT", "#topReboot", "ACT_REBOOT"], "notes": "Actual risk depends on the strength of backend session validation"}
{"name": "http-link-mitm", "file_path": "web/index.htm", "location": "www/frame/bot.htm:0", "risk_score": 4.0, "confidence": 5.0, "description": "HTTP Man-in-the-Middle Risk: The bot.htm footer uses an HTTP protocol support link (http://www.tp-link.com/en/support/). Trigger condition: User clicks the link. Impact: Potential hijacking and redirection to a phishing site.", "link_identifiers": ["http://www.tp-link.com/en/support/", "T_sup", "bot.htm"]}
{"name": "[SECRET_VALUE]", "file_path": "[SECRET_VALUE]", "location": "[SECRET_VALUE]", "risk_score": 9.0, "confidence": 9.15, "description": "[SECRET_VALUE]", "code_snippet": "[SECRET_VALUE]", "link_identifiers": ["[SECRET_VALUE]", "Base64Encoding", "xmlHttpObj.open", "[SECRET_VALUE]", "[SECRET_VALUE]", "window.location.hostname"], "notes": "[SECRET_VALUE]"}
{"name": "[SECRET_VALUE]", "file_path": "web/frame/set[SECRET_VALUE].htm", "location": "set[SECRET_VALUE].htm:248-312", "risk_score": 8.5, "confidence": 9.0, "description": "[SECRET_VALUE]", "code_snippet": "[SECRET_VALUE]", "link_identifiers": ["check[SECRET_VALUE]", "PCSubWin", "input-error", "usrTips", "[SECRET_VALUE]Tips", "[SECRET_VALUE]", "$confirm.value"], "notes": "[SECRET_VALUE]"}
{"name": "[SECRET_VALUE]", "file_path": "web/frame/login.htm", "location": "web/frame/login.htm", "risk_score": 8.5, "confidence": 8.0, "description": "[SECRET_VALUE]", "code_snippet": "[SECRET_VALUE]", "link_identifiers": ["[SECRET_VALUE]orization", "document.cookie", "Base64Encoding", "REDACTED_[SECRET_VALUE]_PLACEHOLDER", "PCSubWin"], "notes": "[SECRET_VALUE]"}
{"name": "[SECRET_VALUE]", "file_path": "web/frame/login.htm", "location": "web/frame/login.htm", "risk_score": 3.5, "confidence": 7.0, "description": "Login lock mechanism front-end implementation flaws: 1) Failure counter ([SECRET_VALUE]Times) and lock duration (forbidTime) are injected by the backend 2) Front-end countdown logic is implemented via recursive setTimeout. Attackers can bypass lock display by disabling JavaScript or modifying client-side time (though backend state remains effective). Trigger condition: After 5 consecutive login failures, attacker manipulates client environment. Actual impact: May cause user experience deception without actual permission bypass, as real locking depends on backend verification.", "code_snippet": "if ([SECRET_VALUE]Times >= 5) {\n    isLocked = true;\n    lockWeb(true);\n    count = 600 - forbidTime;\n    // [HIDDEN]\n}", "link_identifiers": ["[SECRET_VALUE]Times", "forbidTime", "isLocked", "setTimeout", "lockWeb"], "notes": "The update and validation mechanism for [SECRET_VALUE]Times needs to be verified on the server-side component."}
{"name": "xss-potential-bothtm-version", "file_path": "web/frame/bot.htm", "location": "bot.htm:10-14", "risk_score": 5.0, "confidence": 5.0, "description": "[SECRET_VALUE]", "code_snippet": "var devInfo = $.act(ACT_GET, IGD_DEV_INFO, null, null, [\"hardwareVersion\", \"softwareVersion\"]);\n$(\"#bot_sver\").html(s_str.swver + devInfo.softwareVersion);", "link_identifiers": ["IGD_DEV_INFO", "ACT_GET", "$.act", "devInfo.softwareVersion", "devInfo.hardwareVersion", "#bot_sver", ".html()"], "notes": "[SECRET_VALUE]"}
{"name": "[SECRET_VALUE]", "file_path": "web/js/str.js", "location": "web/js/str.js", "risk_score": 7.0, "confidence": 7.5, "description": "Due to limitations in tool capabilities, the content of the 'web/js/str.js' file cannot be retrieved, thus preventing code-level analysis. File reading tool support is required to verify the following potential risks: 1) Whether sensitive information leakage exists (such as hardcoded credentials); 2) Whether it contains unfiltered user input processing logic (e.g., eval()/innerHTML); 3) Whether dangerous API endpoints are exposed.", "link_identifiers": ["web/js/str.js", "js_analysis"], "notes": "It is recommended to add a file content reading tool in the future to support JS file analysis, with a focus on patterns such as DOM manipulation functions, network request handling, and hardcoded encryption [SECRET_VALUE]s."}
{"name": "oid-definition-constants", "file_path": "web/js/oid_str.js", "location": "web/js/oid_str.js", "risk_score": 0.0, "confidence": 5.0, "description": "The file is a static OID string definition file and does not contain executable code or input processing logic. All contents are constant declarations, with no risks of: 1) Sensitive information leakage (e.g., GPON_[SECRET_VALUE]_[SECRET_VALUE] is merely an object identifier name and does not store actual [SECRET_VALUE]s) 2) Missing input validation (no input processing points) 3) Dangerous function calls (e.g., eval/innerHTML) 4) Network request interfaces. However, the defined OID constants may be referenced in operations such as nvram_get/set, requiring data flow tracking of these identifiers in other components.", "link_identifiers": ["GPON_[SECRET_VALUE]_[SECRET_VALUE]", "WEB_INCLUDE_TEST", "INCLUDE_LAN_WLAN", "IGD", "VOICE_CAP", "LAN_WLAN_GUESTNET", "WAN_ETH_INTF"], "notes": "[SECRET_VALUE]"}
{"name": "xss-jquery_tpMsg-confirm", "file_path": "web/js/jquery.tpMsg.js", "location": "jquery.tpMsg.js: [HIDDEN](confirm)", "risk_score": 8.5, "confidence": 8.0, "description": "The DOM-based XSS vulnerability exists in the $.confirm() function. Attackers can inject malicious scripts (such as <img src=x onerror=alert(1)>) by controlling the str or replaceStr parameters. Trigger condition: When confirm() is called, tainted parameters are directly written into the DOM. The absence of any input filtering or boundary checking may lead to arbitrary script execution.", "code_snippet": "tmp.find(\"span.text\").html(str);", "link_identifiers": ["confirm", "str", "replaceStr", "tmp.find(\"span.text\").html", "html()", "$.turnqss"], "notes": "To verify the encoding effect of $.turnqss(), it is recommended to trace all confirm() call points to confirm whether the parameters originate from network input."}
{"name": "xss-jquery_tpMsg-alertAsnyc", "file_path": "web/js/jquery.tpMsg.js", "location": "jquery.tpMsg.js: jQuery.extend.alertAsnyc", "risk_score": 7.0, "confidence": 7.0, "description": "The multi-source pollution XSS vulnerability exists in the alertAsnyc() function. Script injection can be achieved by controlling the errno or str parameters. Trigger condition: When polluted data from errno/str is concatenated (m_str.errno + \":\" + errno + \"<br>\" + str) and then written to the DOM via html(). Absence of security isolation measures allows combining multiple pollution sources to execute attacks.", "code_snippet": "tmp.find(\"span.text\").css(...).html($.turnqss(m_str.errno + \":\"+ errno + \"<br>\" + str));", "link_identifiers": ["alertAsnyc", "errno", "str", "tmp.find(\"span.text\").html", "html()", "$.turnqss", "m_str.errno"], "notes": "m_str.errno may originate from the language pack file, and if this file can be tampered with, it would expand the attack surface."}
{"name": "cgi-handler-ssrf-potential", "file_path": "web/js/lib.js", "location": "web/js/lib.js:[HIDDEN]", "risk_score": 7.5, "confidence": 7.5, "description": "The file contains a CGI invocation mechanism (ACT_CGI) but does not define its specific implementation. User input obtained via $.io($.params) may be passed to the ACT_CGI operation, with no observed input validation logic. Potential risk: If the $.act function does not filter path parameters, attackers could craft malicious paths to perform server-side request forgery (SSRF). Trigger condition: Controlling the value of the $.params parameter. Associated attack chain: Combined with existing $.act implementations (e.g., device-info-leak), it could form a complete exploitation path of 'network input → ACT_CGI → backend CGI'.", "link_identifiers": ["ACT_CGI", "$.act", "$.io", "$.params", "/cgi/info", "ACT_GET", "ACT_OP"], "notes": "[SECRET_VALUE]"}
{"name": "deprecated-css-loader", "file_path": "web/js/lib.js", "location": "web/js/lib.js:[HIDDEN]", "risk_score": 2.0, "confidence": 4.5, "description": "The dynamic CSS loading logic uses fixed paths, with no user input involved in path concatenation. IE version detection relies on the deprecated `$.browser` object, which may cause path resolution anomalies due to browser spoofing, though the theoretical impact is limited.", "link_identifiers": ["$.browser.msie", "css.href", "./css/ie.file.css"]}
{"name": "[SECRET_VALUE]", "file_path": "web/main/parentCtrl.htm", "location": "[SECRET_VALUE]", "risk_score": 8.5, "confidence": 8.0, "description": "[SECRET_VALUE]", "code_snippet": "$(\"#addUrl\").append('<div ... value=\"' + allBlackUrl[blackIndex] + '\" ...');", "link_identifiers": ["[SECRET_VALUE]", "[SECRET_VALUE]", "innerHTML", "entryName", "description", "urlAddr", "$.initTableBody"], "notes": "Verify the effectiveness of the $.isdomain filter; recommend subsequent testing for actual XSS triggering and analysis of post-session-hijacking operations."}
{"name": "api-firewall-rule-bypass", "file_path": "web/main/parentCtrl.htm", "location": "[SECRET_VALUE]", "risk_score": 9.0, "confidence": 7.25, "description": "High-risk API call chain: Direct manipulation of core modules such as FIREWALL/EXTERNAL_HOST via $.act(ACT_SET), with parameters like internalHostRef lacking sufficient validation. Attackers can craft malicious requests by combining XSS or CSRF to: 1) Disable parental controls (enable=0) 2) Modify firewall rules. Trigger condition: Sending specially crafted AJAX requests to backend processing modules. Actual impact: Complete bypass of access controls, overriding system security policies.", "code_snippet": "$.act(ACT_SET, RULE, this.__stack, null, [\"enable=0\"]);", "link_identifiers": ["$.act", "ACT_SET", "FIREWALL", "EXTERNAL_HOST", "RULE", "internalHostRef", "__stack", "[SECRET_VALUE]", "IGD_DEV_INFO"], "notes": "[SECRET_VALUE]"}
{"name": "input-validation-device-name", "file_path": "web/main/parentCtrl.htm", "location": "www/parentCtrl.htm: doSave[HIDDEN]", "risk_score": 6.5, "confidence": 6.25, "description": "Input validation flaw chain: 1) MAC address only performs format validation ($.mac) without filtering special characters 2) Device name validation ($.isname) rules undefined 3) No length restriction on device name leading to posfix concatenation risks. Attackers may trigger memory corruption or injection through excessively long device names (>32 characters) or special characters. Trigger condition: Submitting malicious input when adding new devices.", "code_snippet": "if (!($.isname($(\"#deviceName\").val()))) { alert(ERR_FW_ENTRYNAME_INVAD); return; }", "link_identifiers": ["macAddress", "deviceName", "$.mac", "$.isname", "curDevNum", "maxDevNum", "posfix", "ERR_FW_ENTRYNAME_INVAD"], "notes": "Reverse implementation of $.isname required; test device name exceeding 64 characters and embedded HTML tags"}
{"name": "untrusted-file-upload-softup", "file_path": "web/main/softup.htm", "location": "softup.htm:[HIDDEN]", "risk_score": 9.0, "confidence": 9.0, "description": "The file upload functionality has user-controllable input points: 1) The HTML form parameter 'filename' accepts arbitrary file uploads to /cgi/softup. 2) The frontend only validates non-empty fields (ERR_FIRM_FILE_NONE) without boundary checks for file type/size/content. 3) Attackers can craft malicious firmware files to trigger backend vulnerabilities. Actual impact depends on /cgi/softup's handling of uploaded files: if file signatures are not verified or parsing vulnerabilities exist, it may lead to arbitrary code execution or device bricking.", "link_identifiers": ["filename", "/cgi/softup", "multipart/form-data", "ERR_FIRM_FILE_NONE"], "notes": "Analyze the processing logic of the /cgi/softup binary verification file"}
{"name": "firmware-burn-chain", "file_path": "web/main/softup.htm", "location": "softup.htm:JS[HIDDEN]", "risk_score": 9.5, "confidence": 7.75, "description": "Firmware burning process exposes a dangerous operation chain: 1) Frontend asynchronously calls /cgi/softburn via $.cgi 2) No secondary confirmation mechanism for burning operation 3) IGD_DEV_INFO data structure exposes device details. If attackers combine file upload vulnerabilities to control burning content, complete device hijacking is possible. Trigger conditions: tampering with filename parameter → bypassing frontend validation → exploiting /cgi/softup vulnerability to write malicious firmware → triggering /cgi/softburn execution.", "code_snippet": "$('#t_upgrade').click(function(){\n  if($(\"#filename\").val() == \"\"){\n    $.alert(ERR_FIRM_FILE_NONE);\n    return false;\n  }\n  // [HIDDEN]/cgi/softburn\n});", "link_identifiers": ["/cgi/softburn", "$.cgi", "IGD_DEV_INFO", "ACT_GET"], "notes": "[SECRET_VALUE]"}
{"name": "[SECRET_VALUE]", "file_path": "web/main/diagnostic.htm", "location": "diagnostic.htm:80-230 (startDiag function)", "risk_score": 8.0, "confidence": 8.0, "description": "The target address input ($(\"#l_addr\")) is directly used to construct diagnostic requests (ipping.host/tracert.host) without format validation. Trigger condition: The user submits a diagnostic request with an address containing special characters. Security impact: If the backend directly concatenates system commands (e.g., ping/traceroute), it could lead to command injection. Exploitation method: Inject command separators (e.g., '; rm -rf /').", "code_snippet": "if ($(\"#l_addr\").prop(\"value\") == \"\") {...}\n...\nipping.host = $(\"#l_addr\").prop(\"value\");\ntracert.host = $(\"#l_addr\").prop(\"value\");", "link_identifiers": ["startDiag", "$(\"#l_addr\")", "ipping.host", "tracert.host", "ACT_OP_IPPING", "ACT_OP_TRACERT"], "notes": "It is necessary to combine backend CGI to verify the command execution method. Related files: backend programs handling ACT_OP_IPPING/ACT_OP_TRACERT requests."}
{"name": "network_input-diagnostic_csrf", "file_path": "web/main/diagnostic.htm", "location": "diagnostic.htm:112, 200", "risk_score": 7.5, "confidence": 8.25, "description": "Sensitive endpoints (ACT_OP_IPPING/ACT_OP_TRACERT) are exposed via $.act() without CSRF protection. Trigger condition: Directly constructing malicious POST requests. Security impact: Bypassing frontend interface to execute un[SECRET_VALUE]orized diagnostic operations. Exploitation method: Forging request packets to manipulate tracert/ipping object parameters.", "code_snippet": "$.act(ACT_OP, ACT_OP_IPPING);\n$.act(ACT_OP, ACT_OP_TRACERT);", "link_identifiers": ["$.act", "ACT_OP", "ACT_OP_IPPING", "ACT_OP_TRACERT", "IPPING_DIAG", "TRACEROUTE_DIAG"], "notes": "Verify backend [SECRET_VALUE]entication mechanism. Attack path starting point: network interface (HTTP POST)"}
{"name": "network_input-diagnostic_dos", "file_path": "web/main/diagnostic.htm", "location": "diagnostic.htm:86-94, 118", "risk_score": 6.0, "confidence": 7.0, "description": "Packet size (pktSize) validation contains a logical flaw: permits zero value (0-65500) without compensating for ICMP header length (+8 bytes). Trigger condition: setting packet size to zero. Security impact: may cause abnormal backend memory allocation (pre-allocating 0 bytes). Exploitation method: crafting anomalous packet sizes to trigger denial of service.", "code_snippet": "pktSize = parseInt($(\"#l_ping_pkt_size\").prop(\"value\"), 10);\n...\nif (isNaN(pktSize) || pktSize < 0 || pktSize > 65500) {...}\n...\npktSize = parseInt($(\"#l_ping_pkt_size\").prop(\"value\"), 10) + 8;", "link_identifiers": ["pktSize", "dataBlockSize", "$(\"#l_ping_pkt_size\")", "icmpPkts", "strstr"], "notes": "The actual risk depends on the backend buffer processing logic. Example of incomplete boundary checking"}
{"name": "network_input-diagnostic_xss", "file_path": "web/main/diagnostic.htm", "location": "diagnostic.htm:60-62, 150", "risk_score": 6.5, "confidence": 6.0, "description": "disNewLine() directly inserts unfiltered diagnostic results (ipping.X_TP_Result) using innerHTML. Trigger condition: when diagnostic returns results containing malicious scripts. Security impact: Stored XSS attack. Exploitation method: Polluting DNS responses or injecting malicious scripts through man-in-the-middle attacks.", "code_snippet": "function disNewLine(info, stat) {\n  var showText = $(\"#result\").html();\n  showText += info + \"\\r\\n\";\n  $(\"#result\").html(showText);\n}\n...\ndisNewLine(ipping.X_TP_Result, \"\");", "link_identifiers": ["disNewLine", "ipping.X_TP_Result", "$(\"#result\").html", "showText"], "notes": "Verify whether the diagnostic output is externally controllable. Related components: DNS resolution service or network middleware."}
{"name": "wifi-adv-param-injection", "file_path": "web/main/sysconf.htm", "location": "web/sysconf.htm JavaScript[HIDDEN]", "risk_score": 8.0, "confidence": 8.75, "description": "The wireless advanced configuration form collects parameters (such as beaconInterval/rts) through the wlAdvSave function and submits them via $.act(ACT_SET, LAN_WLAN). The frontend only validates numerical ranges (without filtering special characters), allowing attackers to craft malicious parameters to exploit backend vulnerabilities. Trigger condition: submitting an HTTP request to modify wireless configuration. The actual impact depends on the backend's handling of LAN_WLAN, potentially leading to command injection or buffer overflow.", "link_identifiers": ["wlAdvSave", "beaconInterval", "rts", "frag", "LAN_WLAN", "ACT_SET", "X_TP_BeaconInterval"], "notes": "Critical taint parameters: beaconInterval/rts. Need to verify the LAN_WLAN processing function in the backend cgibin."}
{"name": "wds-bridge-xss-vector", "file_path": "web/main/sysconf.htm", "location": "web/sysconf.htm WDS[HIDDEN]", "risk_score": 7.5, "confidence": 7.75, "description": "The WDS bridge configuration submits parameters such as wdsSsid/wdsMac to the LAN_WLAN_WDSBRIDGE endpoint via wdsSave. The SSID field allows arbitrary input of up to 32 bytes (without XSS filtering), which may lead to stored XSS if the backend stores and renders this value. Trigger condition: an attacker submits an SSID field containing malicious scripts. MAC address validation only performs frontend format checking via $.mac(), which can be bypassed.", "link_identifiers": ["wdsSave", "wdsSsid", "wdsMac", "LAN_WLAN_WDSBRIDGE", "BridgeSSID", "BridgeBSSID"], "notes": "The SSID can serve as a cross-site scripting attack vector; it is necessary to check whether the management interface renders this value."}
{"name": "dos-threshold-bypass", "file_path": "web/main/sysconf.htm", "location": "web/sysconf.htm DoS[HIDDEN]", "risk_score": 6.0, "confidence": 7.75, "description": "[SECRET_VALUE]", "link_identifiers": ["[SECRET_VALUE]", "icmpLow", "udpLow", "tcpLow", "DDOS_CFG", "synLevelLow"]}
{"name": "unified-act-framework-vuln", "file_path": "web/main/sysconf.htm", "location": "web[HIDDEN]", "risk_score": 9.0, "confidence": 9.25, "description": "[SECRET_VALUE]", "link_identifiers": ["$.act", "ACT_SET", "LAN_WLAN", "DDOS_CFG", "LED_NIGHTMODE"], "notes": "Core attack path: HTTP parameter → $.act → backend configuration processing. Related findings: cgi-handler-ssrf-potential (unverified ACT_CGI), api-firewall-rule-bypass (unverified ACT_SET), device-info-leak (unverified ACT_GET). Priority audit required for backend processing functions corresponding to each ENDPOINT."}
{"name": "[SECRET_VALUE]", "file_path": "web/main/ethWan.htm", "location": "ethWan.htm (JavaScript[HIDDEN])", "risk_score": 8.5, "confidence": 8.25, "description": "[SECRET_VALUE]", "link_identifiers": ["ACT_OP_DHCP_RELEASE", "ACT_OP_PPP_DISCONN", "wan_pppoelistarg", "REDACTED_[SECRET_VALUE]_PLACEHOLDER", "[SECRET_VALUE]", "customMacAddr", "$.act"], "notes": "Correlation Discovery: unified-act-framework-vuln (shared $.act framework), network_input-diagnostic_csrf (similar to unprotected ACT_OP operations). To be verified: 1) Actual handler (cgi path) for $.act() requests not yet identified 2) Backend filtering mechanism for REDACTED_PASSWORD_PLACEHOLDER/[SECRET_VALUE] parameters not verified 3) Whether ACT_OP operations are subject to permission control not confirmed. Next steps: Analyze files handling ACT_OP requests in the cgi-bin directory; Trace the usage path of wan_pppoelistarg parameter in the backend; Verify if customMacAddr is directly written to network configuration."}
{"name": "csrf-missing-usb-operation", "file_path": "web/main/usbManage.htm", "location": "/www/usbManage.htm: [HIDDEN] [[HIDDEN]]", "risk_score": 7.5, "confidence": 8.5, "description": "The lack of CSRF protection in forms poses a risk of USB state tampering. Specific manifestation: All form operations trigger AJAX requests through $.loadMain/$.act without using CSRF [SECRET_VALUE]s. Trigger condition: When users click the 'Save'/'Scan' buttons. Constraint: Requires a valid user session but lacks secondary verification. Security impact: Attackers can craft malicious pages to trick administrators into clicking, resulting in forced unmounting or mounting of USB devices. Exploitation method: Social engineering attacks + malicious HTML pages triggering $.act(ACT_SET, USB_DEVICE).", "link_identifiers": ["$.loadMain", "$.act", "ACT_SET", "USB_DEVICE", "handleUsb", "mountUsb"], "notes": "Verify whether the backend /cgi-bin/ related programs validate CSRF [SECRET_VALUE]s. Associated file: /js/common.js (implements $.act)"}
{"name": "[SECRET_VALUE]", "file_path": "web/main/usbManage.htm", "location": "/www/usbManage.htm:1040(server_name[HIDDEN]),1115(shareName[HIDDEN]),1582(command[HIDDEN])", "risk_score": 8.0, "confidence": 8.5, "description": "Network input validation flaws may lead to injection attacks. Specific manifestations: 1) The server_name parameter only undergoes frontend validation for 15-character length and certain special characters; 2) The shareName parameter does not filter Shell metacharacters; 3) Hidden fields like command.force lack validation. Trigger condition: When submitting USB configuration forms. Constraints: Frontend uses regex filtering (/[\\/:*?\"<>|\\[\\]+ ]+/) but doesn't cover all dangerous characters. Security impact: Maliciously crafted shareName could trigger backend command injection. Exploitation method: Bypass filtering to inject characters like ;|$() for arbitrary command execution.", "code_snippet": "if ((/[\\\\\\/:\\*?\"<>|\\[\\]\\+ ]+/).test(newStr)) { $.alert([SECRET_VALUE]); }", "link_identifiers": ["server_name", "shareName", "command.force", "[SECRET_VALUE]", "CMM_USB_SERVER_NAME_LENGTH"], "notes": "[SECRET_VALUE]"}
{"name": "parameter-pollution-usb-mount", "file_path": "web/main/usbManage.htm", "location": "/www/usbManage.htm:488[HIDDEN]([SECRET_VALUE][HIDDEN])", "risk_score": 8.5, "confidence": 8.0, "description": "The USB device operation interface is vulnerable to parameter pollution. Specific manifestation: the fifth parameter 'command' in $.act() accepts user-controlled objects (including enable/force fields). Trigger condition: when calling functions like [SECRET_VALUE](). Constraint: physical device presence required but offline devices can be forcibly operated. Security impact: tampering with command.force=1 may cause abnormal mounting and filesystem corruption. Exploitation method: forging command={enable:1,force:1} parameters combined with CSRF.", "code_snippet": "$.act(ACT_SET, USB_DEVICE, usbDeviceList[idx].__stack, null, command);", "link_identifiers": ["command", "command.enable", "command.force", "[SECRET_VALUE]", "USB_DEVICE", "LOGICAL_VOLUME"], "notes": "Track the usage of the command object in the backend. Associated file: /cgi-bin/usb_manage.cgi"}
{"name": "csrf-factory-reset-chain", "file_path": "[SECRET_VALUE]", "location": "backNRestore.htm:38-53", "risk_score": 8.0, "confidence": 8.25, "description": "The factory reset function has a CSRF vulnerability: 1) The user clicks the 'Factory Restore' button to trigger the $.act(ACT_OP_FACTORY_RESET) operation. 2) Only a $.confirm dialog is used for user confirmation, with no session/cookie verification mechanism. 3) It shares the execution framework with ACT_OP_REBOOT. Upon successful reset, [SECRET_VALUE]entication credentials are cleared ($.deleteCookie(\"[SECRET_VALUE]orization\")) and a device reboot is immediately triggered. Trigger condition: An attacker induces an [SECRET_VALUE]enticated user to visit a malicious page. Actual impact: The device is restored to factory settings + forced reboot forms a dual denial-of-service attack chain, resulting in complete configuration loss and service interruption.", "code_snippet": "$(\"#resetBtn\").click(function() {\n    $.confirm(c_str.cdefaults, function() {\n        $.act(ACT_OP, ACT_OP_FACTORY_RESET);\n        $.exe(function(err) {\n            if (!err) {\n                $.guage([...], function() {\n                    window.location.reload();\n                });\n            }\n            $.act(ACT_OP, ACT_OP_REBOOT);\n            $.exe(function(err) {\n                if (!err) $.deleteCookie(\"[SECRET_VALUE]orization\");\n            }, true);\n        });\n    })\n});", "link_identifiers": ["ACT_OP_FACTORY_RESET", "$.act", "ACT_OP_REBOOT", "$.deleteCookie", "[SECRET_VALUE]orization", "resetBtn", "ACT_REBOOT"], "notes": "Vulnerability chain correlation: 1) Forms a continuous attack chain with the un[SECRET_VALUE]orized reboot vulnerability (un[SECRET_VALUE]orized-reboot) 2) Backend verification required: whether ACT_OP_FACTORY_RESET calls mtd erase 3) Device state after clearing [SECRET_VALUE]entication credentials"}
{"name": "csrf-dos-restart_htm", "file_path": "web/main/restart.htm", "location": "restart.htm:7", "risk_score": 6.0, "confidence": 7.75, "description": "The restart.htm implements the device restart function. Clicking the #t_reboot button triggers: 1) A confirmation dialog (c_str.creboot) pops up; 2) Calls $.act(ACT_OP, ACT_OP_REBOOT); 3) Executes $.exe(true) to submit the request. Trigger condition: An attacker induces an [SECRET_VALUE]enticated user to visit a malicious page (CSRF). Security impact: The lack of secondary [SECRET_VALUE]entication and progress bar mechanisms could be exploited to conceal attacks, leading to device denial of service (risk value 6/10). No user input parameters were found, thus no input validation flaws exist.", "code_snippet": "$(\"#t_reboot\").click(function(){\n  if($.confirm(c_str.creboot)) {\n    $.guage([...], function(){$.refresh();});\n    $.act(ACT_OP, ACT_OP_REBOOT);\n    $.exe(true);\n  }\n});", "link_identifiers": ["#t_reboot", "c_str.creboot", "$.act", "ACT_OP", "ACT_OP_REBOOT", "$.exe", "$.guage"], "notes": "[SECRET_VALUE]"}
{"name": "format-string-httpd-0xb514", "file_path": "usr/bin/httpd", "location": "usr/bin/httpd:0xb514 (fcn.0000b3b4)", "risk_score": 7.5, "confidence": 7.0, "description": "In the handling of HTTP 401 responses, a hardcoded JS template (0x10038) and unvalidated [SECRET_VALUE]entication attempts (uVar1) and ban duration (uVar7) are used to execute sprintf. Trigger conditions: 1) Accessing a restricted URL triggers an HTTP 401 status code. 2) The global structure (*0xb5ac)[0x10] is non-zero. Vulnerability manifestation: The template contains 4 placeholders but only 2 parameters are provided, leading to reading data outside the stack. Missing boundary checks: The target buffer of 512 bytes does not verify parameter count matching. Security impact: Attackers triggering 401 responses via un[SECRET_VALUE]orized access may leak sensitive stack data (e.g., memory addresses), with no direct evidence of code execution. Exploit probability is moderate: Requires precise control of the global structure state.", "code_snippet": "sym.imp.sprintf(puVar9 + -0x480, *0xb5bc, uVar1, uVar7);  // *0xb5bc=0x10038", "link_identifiers": ["fcn.0000b3b4", "sprintf", "0x10038", "uVar1", "uVar7", "*0xb5ac", "param_1=0x191", "/userRpm/LoginRpm.htm"], "notes": "Contradiction: The initial report requires the path to include '/frame', but the actual triggered path is a restricted URL. Dynamic testing recommendation: Verify memory leaks in 401 responses. Additional conclusion: This file shows no NVRAM/environment variable operations or command execution function calls."}
{"name": "uninit-struct-httpd-0x2fa18", "file_path": "usr/bin/httpd", "location": "usr/bin/httpd:0x2fa18 (global_struct)", "risk_score": 4.0, "confidence": 4.0, "description": "The global structure (containing an [SECRET_VALUE]entication count field) pointed to by address 0xb5ac at location 0x2fa18 shows no initialization code. Trigger condition: Any operation using this structure (e.g., 0xb438/0xb46c). Actual impact: Uninitialized state may cause [SECRET_VALUE]entication count errors or null pointer crashes, with no evidence of external controllability. Low probability of exploitation.", "link_identifiers": ["0xb5ac", "0x2fa18", "*puVar6", "fcn.0000b3b4@0xb438"], "notes": "Analysis of initialization requires integration with the firmware boot process. Shares a critical structure pointer *0xb5ac with the format string vulnerability. Additional conclusion: No NVRAM/environment variable operations or command execution function calls were identified in this file."}
{"name": "[SECRET_VALUE]", "file_path": "etc/vsftpd_[SECRET_VALUE]", "location": "/etc/vsftpd_[SECRET_VALUE]", "risk_score": 9.0, "confidence": 9.75, "description": "[SECRET_VALUE]", "code_snippet": "REDACTED_[SECRET_VALUE]_PLACEHOLDER:1234:1:1;guest:guest:0:0;test:test:1:1;", "link_identifiers": ["vsftpd_[SECRET_VALUE]", "REDACTED_[SECRET_VALUE]_PLACEHOLDER", "guest", "test", "FTP[HIDDEN]", "file_permission"], "notes": "[SECRET_VALUE]"}
{"name": "config-ftp-plaintext", "file_path": "etc/vsftpd.conf", "location": "etc/vsftpd.conf", "risk_score": 9.0, "confidence": 9.75, "description": "FTP service does not have SSL/TLS encryption enabled (ssl_enable parameter is missing in the configuration). Trigger condition: Any FTP network communication process. Security impact: All [SECRET_VALUE]entication credentials and file contents are transmitted in plaintext, allowing attackers to obtain legitimate user credentials through man-in-the-middle attacks. Exploitation method: Logging into the system after intercepting credentials via ARP spoofing or network sniffing.", "link_identifiers": ["ssl_enable"], "notes": "It is necessary to analyze and verify whether other services such as HTTP/API depend on FTP credentials in conjunction with network services."}
{"name": "config-ftp-unsafe-upload", "file_path": "etc/vsftpd.conf", "location": "etc/vsftpd.conf", "risk_score": 7.5, "confidence": 8.5, "description": "Global write permissions enabled (write_enable=YES) with local user login activated (local_enable=YES). Trigger condition: when an attacker obtains valid credentials. Security impact: permits arbitrary file uploads, combined with chroot isolation (chroot_local_user=YES) but lacking an exception list, potentially enabling code execution by uploading malicious scripts to executable directories (e.g., /www).", "link_identifiers": ["write_enable", "local_enable", "chroot_local_user"], "notes": "[SECRET_VALUE]"}
