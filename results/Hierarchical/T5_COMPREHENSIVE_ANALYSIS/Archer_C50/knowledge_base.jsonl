{"name": "cmd-telnetd-unencrypted", "file_path": "etc/init.d/rcS", "location": "rcS:38", "risk_score": 9.0, "confidence": 9.0, "description": "Start unencrypted telnetd service: The script directly executes the 'telnetd' command without any encryption parameters or access controls. This service listens on port 23/TCP, transmitting credentials in plaintext. Attackers can perform man-in-the-middle attacks to steal credentials or exploit vulnerabilities (such as buffer overflows) in the telnetd binary to directly gain control of the device. Trigger condition: The device is network-accessible with port 23 open after startup. Constraint: The service runs continuously without timeout restrictions. Potential impact: Complete device compromise.", "code_snippet": "telnetd", "link_identifiers": ["telnetd"], "notes": "Analyze whether vulnerabilities exist in /bin/telnetd to form a complete attack chain"}
{"name": "file-write-var-perm", "file_path": "etc/init.d/rcS", "location": "rcS:8-16,20-22", "risk_score": 7.5, "confidence": 8.0, "description": "High-risk directory permission settings: Global writable directories such as /var/tmp and /var/usbdisk are created using '/bin/mkdir -m 0777'. After an attacker gains low-privilege access (e.g., through a telnetd vulnerability), they can plant malicious scripts or tamper with data in these directories to achieve privilege escalation or persistent control. Trigger condition: The attacker gains arbitrary command execution privileges. Constraint: Directories are created at startup with persistent permissions. Potential impact: Privilege escalation, data tampering, or denial of service.", "code_snippet": "/bin/mkdir -m 0777 -p /var/tmp\n/bin/mkdir -m 0777 -p /var/usbdisk", "link_identifiers": ["/bin/mkdir", "-m 0777", "/var/tmp", "/var/usbdisk"], "notes": "Check if the directories under /var are being used by critical services"}
{"name": "cmd-cos-unknown", "file_path": "etc/init.d/rcS", "location": "rcS:47", "risk_score": 6.0, "confidence": 5.0, "description": "Unknown background service cos started: Executing 'cos &' launches an unverified background service. This service may handle network/IPC inputs but lacks path and parameter information. If input validation flaws (such as command injection) exist, it could be exploited for attack chain expansion. Trigger condition: The service receives external input after startup. Constraint: The service remains running. Potential impact: Remote code execution or privilege escalation.", "code_snippet": "cos &", "link_identifiers": ["cos"], "notes": "Locate the COS binary and analyze its input processing logic"}
{"name": "account-REDACTED_PASSWORD_PLACEHOLDER-REDACTED_PASSWORD_PLACEHOLDER-privilege", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 9.0, "confidence": 8.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_PASSWORD_PLACEHOLDER:$1$$iC.REDACTED_SECRET_KEY_PLACEHOLDER/:0:0:REDACTED_PASSWORD_PLACEHOLDER:/:/bin/sh", "link_identifiers": ["REDACTED_PASSWORD_PLACEHOLDER", "UID=0", "GID=0", "/bin/sh", "$1$$iC.REDACTED_SECRET_KEY_PLACEHOLDER/"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "account-nobody-REDACTED_PASSWORD_PLACEHOLDER-disabled", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 6.5, "confidence": 5.5, "description": "The \"nobody\" account is configured with REDACTED_PASSWORD_PLACEHOLDER privileges (UID=0/GID=0) but is currently disabled. Trigger condition: Account activation through other vulnerabilities. Exploitation method: Privilege escalation to REDACTED_PASSWORD_PLACEHOLDER. Boundary check: Current disabled status provides basic protection.", "code_snippet": "nobody:*:0:0:nobody:/:/bin/sh", "link_identifiers": ["nobody", "UID=0", "GID=0", "*"], "notes": "Monitor account activation behavior"}
{"name": "network_input-ushare-interface_exposure", "file_path": "etc/ushare.conf", "location": "etc/ushare.conf:7", "risk_score": 8.0, "confidence": 8.75, "description": "USHARE_IFACE=br0 binds the service to the bridge interface. If br0 is exposed to an untrusted network (e.g., WAN), attackers can directly connect to the service. The lack of access control mechanisms (e.g., missing USHARE_ACL parameter) allows any device on the same network to access the service without authentication. Trigger condition: The attacker is within the same broadcast domain or has routing access to the br0 interface. Potential impact: Provides an initial attack entry point, enabling malicious requests to trigger protocol vulnerabilities.", "code_snippet": "USHARE_IFACE=br0", "link_identifiers": ["USHARE_IFACE", "br0"], "notes": "It is necessary to verify the exposure scope of br0 in conjunction with the network topology, and it is recommended to subsequently scan for open ports."}
{"name": "network_input-ushare-protocol_vulnerability", "file_path": "etc/ushare.conf", "location": "etc/ushare.conf:27-30", "risk_score": 8.5, "confidence": 7.75, "description": "USHARE_ENABLE_XBOX=yes and USHARE_ENABLE_DLNA=yes enable extended protocol support. Historical vulnerabilities indicate that DLNA protocol parsing often contains buffer overflow issues (e.g., CVE-2017-10617). Trigger condition: An attacker sends malformed media files or malicious protocol packets. Potential impact: May bypass memory protection mechanisms to achieve remote code execution, forming a complete attack chain.", "code_snippet": "USHARE_ENABLE_XBOX=yes\nUSHARE_ENABLE_DLNA=yes", "link_identifiers": ["USHARE_ENABLE_XBOX", "USHARE_ENABLE_DLNA"], "notes": "It is recommended to conduct an in-depth protocol analysis of the uShare binary."}
{"name": "network_input-ushare-dynamic_port", "file_path": "etc/ushare.conf", "location": "etc/ushare.conf:10", "risk_score": 4.0, "confidence": 7.0, "description": "The unset USHARE_PORT results in the use of IANA dynamic ports (49152-65535). While this increases scanning difficulty, the port range remains detectable. Failure to specify a fixed port hinders precise firewall policy configuration. Trigger condition: An attacker conducts port scanning to identify services. Actual impact: Slightly increases attack complexity but does not constitute substantial defense.", "code_snippet": "USHARE_PORT=", "link_identifiers": ["USHARE_PORT"]}
{"name": "ftp-ssl-disabled", "file_path": "etc/vsftpd.conf", "location": "etc/vsftpd.conf:0 (global config)", "risk_score": 8.0, "confidence": 8.25, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "ssl_enable=NO\nrsa_cert_file=\nrsa_private_key_file=\nwrite_enable=YES\nlocal_enable=YES", "link_identifiers": ["ssl_enable", "rsa_cert_file", "rsa_private_key_file", "write_enable", "local_enable"], "notes": "Subsequent verification is required for the actual open ports of the FTP service and the network boundary protection status."}
{"name": "ftp-chroot-conflict", "file_path": "etc/vsftpd.conf", "location": "etc/vsftpd.conf:0 (global config)", "risk_score": 6.5, "confidence": 6.0, "description": "Potential permission configuration conflict: chroot_local_user=YES restricts users to their home directories, while write_enable=YES requires write permissions. If administrators resolve this conflict by setting allow_writeable_chroot=YES (though not explicitly present in the current configuration), it may trigger historical vsftpd vulnerabilities (e.g., CVE-2007-5962), leading to chroot escape. Attackers could construct special path sequences to access other system directories after obtaining FTP accounts. Trigger conditions: 1) The actual runtime environment enables allow_writeable_chroot 2) Attackers possess file upload permissions. Boundary check: The default configuration (allow_writeable_chroot=NO) is theoretically secure but requires runtime verification.", "code_snippet": "chroot_local_user=YES\nwrite_enable=YES\n# allow_writeable_chroot=YES (potential conflict)", "link_identifiers": ["chroot_local_user", "write_enable", "allow_writeable_chroot"], "notes": "It is recommended to dynamically verify the service runtime configuration and check /var/log/vsftpd.log to confirm the actual chroot behavior."}
{"name": "command_execution-iptables_path_pollution", "file_path": "etc/iptables-stop", "location": "etc/iptables-stop:4", "risk_score": 8.0, "confidence": 7.5, "description": "The script uses relative paths to invoke the iptables command (e.g., 'iptables -F'), without specifying absolute paths or resetting the PATH environment variable. When PATH is compromised (e.g., containing writable directories like /tmp), an attacker can place a malicious iptables program to achieve command injection. Trigger conditions: 1) Attacker controls the PATH variable, 2) Malicious program is placed in a PATH directory, 3) The script is executed. Impact: Gains REDACTED_PASSWORD_PLACEHOLDER privileges (since iptables typically requires REDACTED_PASSWORD_PLACEHOLDER permissions to execute).", "code_snippet": "iptables -t filter -F", "link_identifiers": ["iptables", "PATH"], "notes": "It is necessary to analyze whether the parent process calling this script (such as the init script) has securely configured the PATH environment variable. Common scenarios in firmware where service restarts are triggered through web interfaces may be exploited."}
{"name": "configuration_reset-iptables_flush", "file_path": "etc/iptables-stop", "location": "etc/iptables-stop:4-16", "risk_score": 9.0, "confidence": 7.0, "description": "command_execution  \n\nThe script performs a high-risk firewall cleanup operation: flushing all rule chains (-F/-X) and setting the default policy to ACCEPT (lines 4-16). If triggered by an attacker (e.g., via unauthorized service invocation), it will completely disable the firewall. Trigger condition: the attacker gains script execution privileges. Impact: complete removal of network protection, exposing all ports and services.", "code_snippet": "iptables -P INPUT ACCEPT\niptables -P FORWARD ACCEPT\niptables -P OUTPUT ACCEPT", "link_identifiers": ["iptables -F", "iptables -X", "iptables -P ACCEPT"], "notes": "Correlate with the system service invocation chain analysis (e.g., /etc/init.d) to verify whether there exists a web interface or IPC mechanism capable of triggering this script."}
{"name": "internal_monitor-diskstats_monitor-0x004006e0", "file_path": "sbin/usbp", "location": "main @ 0x004006e0", "risk_score": 0.5, "confidence": 4.9, "description": "The program is essentially a disk status monitoring tool with no USB data processing capability: 1) The input source is limited to the trusted system file /proc/diskstats 2) The output channel is the physical serial port /dev/ttyS0 3) No external input interfaces such as network/USB are present. Trigger conditions: The program can only be affected if an attacker can tamper with the /proc pseudo-filesystem or gain physical access to the serial port, but the former requires REDACTED_PASSWORD_PLACEHOLDER privileges while the latter requires physical contact, resulting in an extremely low practical attack surface.", "code_snippet": "iVar4 = fopen(\"/proc/diskstats\", \"r\");\nfgets(auStack_128, 0x100, iVar4);", "link_identifiers": ["rdp_updateUsbInfo", "/proc/diskstats", "/dev/ttyS0", "dm_shmInit", "fgets"], "notes": "The rdp_updateUsbInfo function requires validation through dynamic analysis; the dm_shmInit shared memory operation may serve as an interaction point with other components, suggesting subsequent analysis of components that utilize this shared memory. Conclusion: No exploitable attack paths were identified in the current file. It is recommended to shift focus to analyzing other files with exposed external interfaces (such as CGI programs under the www directory)."}
{"name": "config-dir_permission-rcS", "file_path": "etc/init.d/rcS", "location": "rcS:18,24", "risk_score": 9.0, "confidence": 10.0, "description": "The script creates globally writable directories (0777), including /var/samba/private (line 24) and /var/tmp/dropbear (line 18). Trigger condition: Automatically executed during system startup. Security impact: Attackers can tamper with dropbear keys or samba configuration files (e.g., injecting malicious smb.conf), achieving privilege escalation or information theft when related services start. Exploitation chain: Control directory → inject malicious configuration/keys → service loading → system compromise.", "link_identifiers": ["/bin/mkdir", "-m 0777", "/var/samba/private", "/var/tmp/dropbear"], "notes": "Verify whether dropbear/samba uses these directories"}
{"name": "command-PATH_injection-rcS", "file_path": "etc/init.d/rcS", "location": "rcS:76,84", "risk_score": 7.0, "confidence": 7.0, "description": "The telnetd (line 76) and cos (line 84) services were launched without using absolute paths, and the PATH environment variable was not configured. Trigger conditions: 1) The system PATH includes writable directories (e.g., /var/tmp). 2) An attacker places a malicious program with the same name in a prioritized PATH location. Security impact: Malicious programs are loaded during service startup to achieve code execution. Exploitation chain: PATH pollution → placement of malicious program → service startup → RCE.", "link_identifiers": ["telnetd", "cos", "PATH"], "notes": "To be verified subsequently: 1) Default PATH content of the system 2) COS service functionality"}
{"name": "attack_chain-file_pollution_to_rce", "file_path": "usr/bin/cos", "location": "usr/bin/cos:0x409bfc [strcpy]", "risk_score": 9.5, "confidence": 8.25, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "// [HIDDEN]\n0x00409bfc  jalr t9 ; sym.imp.strcpy  // [HIDDEN]\n(**(gp-0x7f58))(buf,\"rm -rf %s%s\",\"/var/usbdisk/\",param) // [HIDDEN]", "link_identifiers": ["/var/tmp/umount_failed_list", "REDACTED_SENSITIVE_DATA", "fcn.00409bdc", "strcpy", "s2", "s0", "fcn.004099f4", "rm -rf", "system"], "notes": "Exploitation Constraints: 1) Bypass ASLR to achieve overflow exploitation 2) Command injection must avoid path truncation. Subsequent dynamic verification of overflow feasibility and inspection of HTTP file upload interfaces are recommended."}
{"name": "attack_surface-world_writable_file", "file_path": "usr/bin/cos", "location": "usr/bin/cos:0x409874 [fopen]", "risk_score": 7.5, "confidence": 7.75, "description": "Auxiliary attack surface: File permission configuration flaw. The globally writable file '/var/tmp/umount_failed_list' (0666 permission) is periodically cleared by fopen('w+'), providing attackers with a stable pollution entry point. Trigger condition: Writing to the file via physical access or network service vulnerabilities. Security impact: Medium to high risk (severity level 7.5), serving as a precondition for the primary attack chain.", "link_identifiers": ["REDACTED_SENSITIVE_DATA", "fopen", "w+", "umask", "/var/tmp/umount_failed_list"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "web-framework-dynamic-resource-loading", "file_path": "web/MenuRpm.htm", "location": "web/MenuRpm.htm", "risk_score": 3.0, "confidence": 8.75, "description": "This file serves as the router's web interface framework, dynamically loading menu.htm via $.loadMenu and referencing multiple JS files. While it contains no direct input processing, the loaded external resources (particularly lib.js and menu.htm) may include HTTP parameter handling points, forming potential attack entry paths. Trigger condition: These resources are automatically loaded when users access the web interface; Security impact: If referenced files contain input validation flaws, it may lead to XSS or command injection vulnerabilities.", "link_identifiers": ["$.loadMenu", "lib.js", "menu.htm", "oid_str.js", "str.js"], "notes": "Priority analysis required: 1) Implementation of loadMenu in lib.js and its input handling 2) Form/API endpoints in menu.htm 3) String processing functions in str.js. Potential attack vector: User input → unvalidated parameters in lib.js → dangerous operations"}
{"name": "network_input-libjs_dom_xss", "file_path": "web/mainFrame.htm", "location": "js/lib.js: loadMain[HIDDEN]", "risk_score": 9.0, "confidence": 8.25, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "if (!path) path = $.curPage;\nvar bFile = (path.indexOf(\"<\") < 0);\n...\n$.loadPage(\"main\", path, function(){...})", "link_identifiers": ["loadMain", "path", "innerHTML", "$.dhtml", "$.err", "$.errBack", "bFile"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "configuration_load-login_hardcoded_admin", "file_path": "web/mainFrame.htm", "location": "frame/login.htm", "risk_score": 8.5, "confidence": 8.75, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "if (REDACTED_PASSWORD_REDACTED_SECRET_KEY_PLACEHOLDER) {\n  REDACTED_PASSWORD_PLACEHOLDER.value = \"REDACTED_PASSWORD_PLACEHOLDER\";\n  REDACTED_PASSWORD_PLACEHOLDER.focus();\n}", "link_identifiers": ["REDACTED_PASSWORD_PLACEHOLDER.value", "REDACTED_PASSWORD_REDACTED_SECRET_KEY_PLACEHOLDER", "lockWeb", "lockTime", "REDACTED_SECRET_KEY_PLACEHOLDER", "REDACTED_PASSWORD_PLACEHOLDER"], "notes": "Verify whether REDACTED_PASSWORD_REDACTED_SECRET_KEY_PLACEHOLDER is controlled by the backend to form a privilege escalation chain. Associated vulnerability chain: Directly obtaining administrator privileges after being exploited by an XSS vulnerability."}
{"name": "network_input-login_cookie_token", "file_path": "web/mainFrame.htm", "location": "frame/login.htm", "risk_score": 8.0, "confidence": 8.75, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["document.cookie", "Authorization", "Base64Encoding", "REDACTED_PASSWORD_PLACEHOLDER", "REDACTED_PASSWORD_PLACEHOLDER"], "notes": "Combining with XSS vulnerabilities can form a complete attack chain: XSS execution → cookie theft → administrator privilege escalation. Related to the loadMain vulnerability in lib.js."}
{"name": "static_content-web-indexhtm-0001", "file_path": "web/index.htm", "location": "web/index.htm:0 (global) 0x0", "risk_score": 0.0, "confidence": 5.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "<frameset>...</frameset> <script>if(url.indexOf('tplinklogin.net')>=0){window.location=url.replace('tplinklogin.net','tplinkwifi.net')}</script>", "link_identifiers": ["frameset", "frame", "window.location", "tplinklogin.net", "tplinkwifi.net"], "notes": "Switch to another directory (such as cgi-bin) to analyze the actual network endpoints."}
{"name": "network_input-auth_error_page-cookie_clear", "file_path": "web/frame/accErr.htm", "location": "web/frame/accErr.htm", "risk_score": 0.5, "confidence": 4.95, "description": "Static Login Error Handling Page, Core Behaviors: 1) Automatically executes the deleteCookie function upon page load to clear the 'Authorization' authentication cookie, serving as a proper session termination mechanism; 2) Displays fixed error message text containing physical device reset instructions (requires holding the reset button for 8-10 seconds). No user input parameter processing, no dynamic content generation, and no external resources referenced. Trigger conditions are limited to user access to this page, with no possibility of being contaminated or exploited by external inputs.", "link_identifiers": ["deleteCookie", "Authorization", "body.onload", "document.cookie", "document.location.reload"], "notes": "The device reset instructions may be utilized for physical denial-of-service attacks, but this is not a vulnerability on this page. It is recommended to inspect other dynamic pages involving authentication processing (such as login forms) for potential cookie handling flaws."}
{"name": "network_input-login-REDACTED_SECRET_KEY_PLACEHOLDER", "file_path": "web/frame/login.htm", "location": "login.htm (JavaScript[HIDDEN])", "risk_score": 8.0, "confidence": 9.25, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["PCSubWin", "REDACTED_PASSWORD_PLACEHOLDER", "REDACTED_PASSWORD_PLACEHOLDER", "Base64Encoding", "Authorization"], "notes": "Verify the backend's handling logic for the Authorization cookie"}
{"name": "network_input-login-BruteForceLock", "file_path": "web/frame/login.htm", "location": "unknown", "risk_score": 7.5, "confidence": 8.25, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "if (authTimes >= 10) { isLocked = true; count = 7200 - forbidTime; }", "link_identifiers": ["authTimes", "forbidTime", "isLocked"], "notes": "It is recommended to analyze the locking implementation mechanism of the backend authentication module; the location needs to be confirmed later."}
{"name": "network_input-login-AdminAutoFill", "file_path": "web/frame/login.htm", "location": "unknown", "risk_score": 6.0, "confidence": 6.75, "description": "Suspicious variable exposure: The `REDACTED_PASSWORD_REDACTED_SECRET_KEY_PLACEHOLDER` variable controls automatic REDACTED_PASSWORD_PLACEHOLDER REDACTED_PASSWORD_PLACEHOLDER population. Trigger condition: Automatically populates REDACTED_PASSWORD_PLACEHOLDER when set to true. Manifestations: 1) Variable source not explicitly defined in file 2) Potentially controllable via URL parameters or cookies. Security impact: If attackers can manipulate this variable, they may bypass REDACTED_PASSWORD_PLACEHOLDER input to directly access REDACTED_PASSWORD_PLACEHOLDER accounts. Exploitation method: Attempt to tamper with `REDACTED_PASSWORD_REDACTED_SECRET_KEY_PLACEHOLDER` variable to force REDACTED_PASSWORD_PLACEHOLDER account population.", "code_snippet": "if (REDACTED_PASSWORD_REDACTED_SECRET_KEY_PLACEHOLDER) { REDACTED_PASSWORD_PLACEHOLDER.value = \"REDACTED_PASSWORD_PLACEHOLDER\"; }", "link_identifiers": ["REDACTED_PASSWORD_REDACTED_SECRET_KEY_PLACEHOLDER", "REDACTED_PASSWORD_PLACEHOLDER.value"], "notes": "Track the definition location and assignment logic of the REDACTED_PASSWORD_REDACTED_SECRET_KEY_PLACEHOLDER variable; the location needs to be confirmed later."}
{"name": "network_input-menu-logout_endpoint", "file_path": "web/frame/menu.htm", "location": "menu.htm:132-143", "risk_score": 7.5, "confidence": 8.75, "description": "Exposed authentication logout endpoint /cgi/logout: Directly invoked via the logoutClick() function without any authentication state verification or CSRF protection. Attackers can forcibly trigger this function through malicious pages or XSS, leading to unexpected termination of user sessions (session fixation attack). Trigger condition is simple: only requires luring users to visit pages containing malicious scripts.", "code_snippet": "function logoutClick(){\n  $.act(ACT_CGI, \"/cgi/logout\");\n  $.exe();\n}", "link_identifiers": ["logoutClick", "/cgi/logout", "ACT_CGI", "$.act", "$.exe"], "notes": "The actual impact needs to be verified in conjunction with the implementation of /cgi/logout. It is recommended to check whether there are associated CSRF protection mechanisms. Core user requirement relevance: This is a network input point exposed by the HTTP endpoint, which may constitute the starting point of a session fixation attack chain."}
{"name": "network_input-menu-dynamic_loader", "file_path": "web/frame/menu.htm", "location": "menu.htm:160", "risk_score": 6.0, "confidence": 6.0, "description": "Dynamic menu configuration loading mechanism: The menu configuration is loaded via `$.cgi('./frame/menu.cgi')`. Although the use of fixed relative paths does not present direct vulnerabilities, it is necessary to verify whether menu.cgi: 1) parses user input, 2) returns sensitive path information, 3) has path traversal risks (e.g., controlling paths through parameters). This mechanism could become an intermediate link in an attack chain.", "link_identifiers": ["$.cgi", "menu.cgi", "menulist"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "attack_chain-XSS-CredentialTheft", "file_path": "web/frame/login.htm", "location": "[HIDDEN]js/lib.js → frame/login.htm", "risk_score": 9.5, "confidence": 8.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["loadMain", "path", "innerHTML", "Authorization", "Base64Encoding", "document.cookie"], "notes": "Associated vulnerabilities: network_input-libjs_dom_xss and network_input-login-REDACTED_SECRET_KEY_PLACEHOLDER. Verification required to determine if the backend's path parameter filtering mechanism can be bypassed."}
{"name": "network_input-page_router-curPage_switch", "file_path": "web/js/local.js", "location": "local.js:75-103", "risk_score": 4.0, "confidence": 8.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "if($.curPage){\n  switch(/(\\w+).htm$/.exec($.curPage)[1]){\n    case \"demorpm\":...\n    case \"softup\":...\n    case \"status\":...\n  }\n}", "link_identifiers": ["$.curPage", "exec($.curPage)", "switch(/(\\w+).htm$", "softup", "demorpm"], "notes": "The actual risk depends on the firmware upgrade implementation in the softup branch. Correlation analysis is required for: 1) How the HTML file sets $.curPage 2) The command execution logic of the softup.htm page 3) The network configuration operations (lanArg/wanArg) in the status branch."}
{"name": "xss-banner_dynamic_content-1", "file_path": "web/frame/banner.htm", "location": "banner.htm:10-14", "risk_score": 4.0, "confidence": 2.5, "description": "The file contains a potential XSS vulnerability point: using the $.h function to dynamically set element content by passing the $.desc and $.model variables. Trigger conditions: 1) Non-Chinese environment ($.cn=false) 2) Contaminated data transmitted through $.desc/$.model. If verification shows that $.h is equivalent to innerHTML and the variables are contaminated by external input, it could form the initial node of an XSS attack chain. Actual risk depends on: a) Verification of variable contamination paths b) Analysis of the $.h function implementation.", "code_snippet": "$.h($.id('mname'), '' + $.desc);\n$.h($.id('mnum'), m_str.bannermodel + $.model);", "link_identifiers": ["$.h", "$.desc", "$.model", "m_str.bannermodel", "$.id", "innerHTML"], "notes": "Critical evidence missing: 1) Parent page unlocated, preventing tracking of $.object data source 2) Directory restrictions blocking access to web/js validation of $.h implementation. Knowledge base correlation record: XSS vulnerability potentially combining with lib.js's loadMain flaw to form cookie theft→privilege escalation attack chain (refer to notes field for related records)"}
{"name": "verification-js_lib_implementation", "file_path": "web/frame/banner.htm", "location": "web/js/lib.js ([HIDDEN])", "risk_score": 8.5, "confidence": 4.0, "description": "[REDACTED_PASSWORD]", "code_snippet": "N/A ([HIDDEN])", "link_identifiers": ["lib.js", "$.h", "innerHTML", "$.loadMenu", "dynamic_content"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "config-oid_str.js-global_vars", "file_path": "web/js/oid_str.js", "location": "web/js/oid_str.js:1-560 ([HIDDEN])", "risk_score": 0.5, "confidence": 6.0, "description": "The file only declares global configuration variables without any execution logic. Specific manifestations: 1) No input processing points such as URL parameter parsing 2) No dangerous functions like eval/innerHTML 3) No API calls or data storage operations. Trigger conditions: Not applicable, as there are no code execution paths. Security impact: The file itself contains no directly exploitable vulnerabilities, but the defined configuration identifiers (e.g., MANAGEMENT_SERVER) may be used for system configuration in other components. If attackers can tamper with the backend implementations corresponding to these identifiers (e.g., through environment variables or APIs), it may indirectly lead to unauthorized access or configuration tampering.", "link_identifiers": ["IGD", "MANAGEMENT_SERVER", "UPNP_CFG", "CWMP_CFG", "FIREWALL", "USER_ACCOUNT"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "hardcoded_credentials-3g_js-apn_config", "file_path": "web/js/3g.js", "location": "web/js/3g.js ([HIDDEN])", "risk_score": 9.0, "confidence": 10.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["REDACTED_PASSWORD_PLACEHOLDER", "REDACTED_SENSITIVE_DATA", "apn", "dial_num", "isp_name", "w3gisp_js"], "notes": "Review all entries containing credentials and implement encrypted storage. This file does not interact with other components and constitutes an independent risk point."}
{"name": "static-js-err-mapping-err_js", "file_path": "web/js/err.js", "location": "err.js: entire file", "risk_score": 0.0, "confidence": 5.0, "description": "The file contains only a static error code mapping object (e_str) with no DOM manipulation or input processing logic. Error messages are generic prompts (e.g., 'Invalid IP address!') and involve no sensitive information. There are no externally controllable parameters, but validation is required to ensure callers do not unsafely utilize the e_str object via eval/dynamic insertion.", "link_identifiers": ["e_str", "window.e_str", "CMM_ERROR", "ERR_HTTP_ERR_GET"], "notes": "Check if the HTML/PHP files referencing this JS securely handle the e_str object (e.g., to avoid eval injection). Potentially related files: pages containing `<script src='err.js'>` or CGI scripts dynamically generating JS."}
{"name": "web-help-sensitive-field-exposure", "file_path": "web/js/help.js", "location": "web/js/help.js", "risk_score": 0.5, "confidence": 5.0, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["User Name", "REDACTED_SENSITIVE_DATA", "REDACTED_SENSITIVE_DATA", "REDACTED_SENSITIVE_DATA", "REDACTED_SENSITIVE_DATA", "openWindow1", "openWindow2"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "network_input-top.htm-custom_js_ref", "file_path": "web/frame/top.htm", "location": "web/frame/top.htm", "risk_score": 3.5, "confidence": 7.5, "description": "The file does not contain direct attack surfaces (missing forms/input fields), but it references an external JS file via `<script src='../js/custom.js'>`. This JS file may handle device model data (`window.parent.$.model`) and website redirection logic (`NewW` function). If vulnerabilities exist in custom.js (such as unvalidated URL parameters), attackers could potentially construct malicious links to trigger XSS or command injection.", "link_identifiers": ["custom.js", "window.parent.$.model", "NewW", "our_web_site"], "notes": "The critical attack path depends on the implementation of custom.js: 1) The NewW function may lead to XSS if URL parameters are not validated; 2) Device model data sourced from unverified NVRAM could introduce injection; it is necessary to verify the filtering mechanism for location.href parameters in the NewW function within custom.js."}
{"name": "network_input-libjs_path_traversal-420", "file_path": "web/js/lib.js", "location": "lib.js:420", "risk_score": 9.5, "confidence": 8.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "path = (path ? path : $.curPage.replace(/\\.htm$/, '.cgi')) + (arg ? '?' + $.toStr(arg, '=', '&') : '');", "link_identifiers": ["cgi", "$.curPage", "path", "$.io", ".htm", ".cgi"], "notes": "Form a complete utilization chain: URL fragment → $.curPage → path → file reading. Need to verify whether the $.io function is restricted by CORS. Related knowledge base: 1) The 'menu.cgi' file may accept unfiltered parameters 2) 'Associated vulnerability chain: xss-banner_dynamic_content-1'"}
{"name": "network_input-libjs_ssrf-488", "file_path": "web/js/lib.js", "location": "lib.js:488", "risk_score": 8.0, "confidence": 7.25, "description": "SSRF/Path Traversal Risk: The load function directly passes the value of $.curPage to the $.io function (line 488). Trigger Condition: Control $.curPage with a value that does not contain the '<' character. Exploitation Method: Set $.curPage to an external URL (http://attacker.com) or a local sensitive path. Security Impact: Can access internal services or read system files, but limited by the implementation of $.io. Boundary Check: Only checks if the content contains HTML tags, with no URL protocol filtering.", "code_snippet": "if (html.indexOf('<') < 0) { $.io(html, false, function(ret) {...}", "link_identifiers": ["$.load", "$.io", "html", "$.curPage"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "configuration_load-libjs_global_param-50", "file_path": "web/js/lib.js", "location": "lib.js:50,1269", "risk_score": 7.5, "confidence": 6.75, "description": "Global parameter pollution risk: $.params controls the local JS loading path (lines 50, 1269). Trigger condition: Polluting $.params when local mode is enabled. Exploitation method: Set to a malicious URL (http://evil.com/script.js). Security impact: Remote code execution, but dependent on local mode activation. Trigger probability is relatively low.", "code_snippet": "params: './js/local.js'\n$.io($.params, true);", "link_identifiers": ["$.params", "$.io", "$.local"], "notes": "Potential attack path: Network input → $.params pollution → Remote script loading. Need to verify local mode activation conditions."}
{"name": "configuration_security-iptables_disable", "file_path": "etc/iptables-stop", "location": "etc/iptables-stop:1-15", "risk_score": 7.0, "confidence": 6.25, "description": "The script clears all firewall rules (-F/-X) via the iptables command and sets the default policy of the filter/nat tables to ACCEPT, completely disabling the firewall. Trigger condition: Must be executed with REDACTED_PASSWORD_PLACEHOLDER privileges. Security impact: 1) Removes network layer protection, leaving all ports open 2) If exploited by attackers (e.g., triggered via web vulnerabilities), it can combine with intranet penetration to form a complete attack chain 3) Successful exploitation requires: the attacker has already obtained script execution privileges (through privilege escalation or service vulnerabilities).", "code_snippet": "iptables -t filter -F\niptables -t filter -X\niptables -P INPUT ACCEPT", "link_identifiers": ["iptables", "-F", "-X", "-P ACCEPT", "filter", "nat", "PATH"], "notes": "Verification required: 1) File permissions (whether writable by www-data) 2) Call chain (whether invoked by web interface) 3) Interaction with nvram/env. Associated risk: Same file contains PATH pollution vulnerability (command_execution-iptables_path_pollution), which can be combined to achieve command hijacking."}
{"name": "network_input-libjs_dom_xss-187", "file_path": "web/js/lib.js", "location": "lib.js:187,203", "risk_score": 9.0, "confidence": 8.75, "description": "High-risk DOM-based XSS vulnerability: The html() function directly sets elem.innerHTML (line 187), and the dhtml() function dynamically executes scripts (line 203). Trigger conditions: Attacker controls the value parameter (html function) or str parameter (dhtml function). Exploitation method: Inject malicious HTML/JS code. Constraints: The dhtml function only executes scripts when the input contains <script> tags. Security impact: Full control over page DOM, enabling cookie theft (including Authorization) or malicious request initiation.", "code_snippet": "elem.innerHTML = value;\n$.each(scripts, function() {$.script(this.text || this.textContent || this.innerHTML || '')});", "link_identifiers": ["innerHTML", "html", "dhtml", "elem", "value", "$.script", "document.cookie"], "notes": "Combining with the document.cookie operation (line 331), authentication tokens can be stolen. It is necessary to trace the source of the value/str parameters. Related knowledge base: 'Combined with XSS vulnerabilities, a complete attack chain can be formed: XSS execution → cookie theft → obtaining administrator privileges.'"}
