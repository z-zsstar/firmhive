{"name": "[SECRET_VALUE]", "file_path": "etc/init.d/rcS", "location": "etc/init.d/rcS:54", "risk_score": 9.0, "confidence": 10.0, "description": "[SECRET_VALUE]", "code_snippet": "telnetd", "link_identifiers": ["telnetd"], "notes": "[SECRET_VALUE]"}
{"name": "[SECRET_VALUE]", "file_path": "etc/init.d/rcS", "location": "etc/init.d/rcS:61", "risk_score": 7.5, "confidence": 8.0, "description": "Starting an unknown background service via 'cos &'. This command does not specify a path or parameters, and if the cos binary contains vulnerabilities (such as buffer overflow), attackers may exploit this service for privilege escalation. The trigger condition occurs when the cos service exposes network interfaces or processes untrusted input.", "code_snippet": "cos &", "link_identifiers": ["cos"], "notes": "Subsequent reverse engineering is required for /bin/cos or /usr/sbin/cos."}
{"name": "[SECRET_VALUE]", "file_path": "etc/init.d/rcS", "location": "etc/init.d/rcS:36-48", "risk_score": 8.0, "confidence": 8.0, "description": "Dynamic loading of kernel modules does not verify integrity. When loading modules such as usb-storage.ko via 'insmod', file signatures or hashes are not checked. If an attacker replaces the module file (e.g., by writing via FTP), kernel code injection can be achieved. Triggering this requires obtaining file write permissions and a device reboot.", "code_snippet": "[SECRET_VALUE]", "link_identifiers": ["insmod", "usb-storage.ko", "nf_conntrack_pptp.ko"], "notes": "Check the permissions of the /lib/modules directory"}
{"name": "[SECRET_VALUE]", "file_path": "etc/init.d/rcS", "location": "etc/init.d/rcS:19-28", "risk_score": 6.5, "confidence": 7.0, "description": "Directly modifying /proc/sys network parameters is unverified. Altering core parameters like ip_forward via echo commands may turn devices into attack relays (e.g., enabling IP forwarding). Parameter values are hardcoded in scripts, but attackers could persistently modify configurations by tampering with these scripts.", "code_snippet": "[SECRET_VALUE]", "link_identifiers": ["echo", "[SECRET_VALUE]"], "notes": "Assess the exposure surface of the network architecture"}
{"name": "[SECRET_VALUE]", "file_path": "[SECRET_VALUE]", "location": "[SECRET_VALUE]", "risk_score": 8.5, "confidence": 8.0, "description": "[SECRET_VALUE]", "code_snippet": "REDACTED_PASSWORD_PLACEHOLDER:$1$$iC.[SECRET_VALUE]/:0:0:REDACTED_PASSWORD_PLACEHOLDER:/:/bin/sh", "link_identifiers": ["REDACTED_[SECRET_VALUE]_PLACEHOLDER", "UID=0", "[SECRET_VALUE]", "crypt()", "$1$", "/bin/sh"], "notes": "[SECRET_VALUE]"}
{"name": "[SECRET_VALUE]", "file_path": "[SECRET_VALUE]", "location": "[SECRET_VALUE]", "risk_score": 6.5, "confidence": 6.5, "description": "[SECRET_VALUE]", "code_snippet": "nobody:*:0:0:nobody:/:/bin/sh", "link_identifiers": ["nobody", "UID=0", "[SECRET_VALUE]", "*"], "notes": "Audit programs that call setuid(); check network services running as nobody"}
{"name": "memcpy-globalstruct-0x40bcc8", "file_path": "[SECRET_VALUE]", "location": "[SECRET_VALUE]", "risk_score": 6.0, "confidence": 4.5, "description": "A potentially unsafe memcpy call was identified in the dropbearmulti component, where the length parameter originates from a global structure at 0x4489c0. This operation resides in the network data processing path, and the length value may be indirectly influenced by network input. Trigger condition: An attacker needs precise control over specific field values in the global structure. Risk: Unvalidated length may lead to buffer overflow. Verification defects: 1) Initialization process of the global structure is unclear 2) Propagation path from network input to length parameter remains unconfirmed 3) Evidence of missing boundary check mechanisms.", "code_snippet": "sym.imp.memcpy(uVar3,uVar4,*(*(iVar7 + 0x18) + 4))", "link_identifiers": ["memcpy", "0x4489c0", "global_structure", "[SECRET_VALUE]", "*(*(iVar7 + 0x18) + 4)", "dropbear"], "notes": "[SECRET_VALUE]"}
{"name": "[SECRET_VALUE]", "file_path": "sbin/usbp", "location": "usbp:0x400a40 (main)", "risk_score": 1.0, "confidence": 5.0, "description": "The system call executes the fixed command 'echo open /proc/diskstats failed! >/dev/ttyS0', triggered when opening /proc/diskstats fails (abnormal system state). The command string is hardcoded in the .rodata section (address 0x400d20) without using any external inputs (environment variables/USB/NVRAM). Security impact: Only outputs error information to the serial port, with no command injection risk.", "code_snippet": "if (fopen(\"/proc/diskstats\", \"r\") == NULL)\n  system(\"echo open /proc/diskstats failed! >/dev/ttyS0\");", "link_identifiers": ["system", "fopen", "/proc/diskstats", ".rodata:0x400d20"]}
{"name": "env_set-TMPDIR-static", "file_path": "sbin/usbp", "location": "usbp:0x400aac", "risk_score": 0.5, "confidence": 9.75, "description": "env_set sets the static environment variable 'TMPDIR=/var/tmp', with the data source being a fixed string in the .rodata section (address 0x400d20). No dynamic concatenation or external input is involved, and no subsequent dangerous functions using this variable were detected. Security impact: No exploitable risk, as the variable value is fixed and uncontrollable.", "code_snippet": "putenv(\"TMPDIR=/var/tmp\");", "link_identifiers": ["putenv", "TMPDIR", ".rodata:0x400d20"]}
{"name": "[SECRET_VALUE]", "file_path": "sbin/usbp", "location": "usbp:0x400aec", "risk_score": 1.0, "confidence": 4.25, "description": "rdp_updateUsbInfo is a parameterless import function. The call point (fcn.00400aec) uses fgets to read /proc/diskstats with a 0x100-byte buffer limit. No hazardous operations or tainted data transfers were detected. Security impact: No risks identified within the current file, but the actual implementation in external libraries requires further validation.", "code_snippet": "rdp_updateUsbInfo();\nfgets(buffer, 0x100, fp);", "link_identifiers": ["rdp_updateUsbInfo", "fgets", "dm_shmInit"], "notes": "[SECRET_VALUE]"}
{"name": "network_input-vsftpd-backdoor", "file_path": "usr/bin/vsftpd", "location": "vsftpd ([HIDDEN]0x12f8)", "risk_score": 10.0, "confidence": 9.65, "description": "CVE-2011-2523 backdoor vulnerability. Trigger condition: When the client sends a USER command containing \":)\" in the REDACTED_[SECRET_VALUE]_PLACEHOLDER (e.g., USER evil:)), the server opens a listening shell on port 6200. Attackers connecting to this port can directly obtain REDACTED_[SECRET_VALUE]_PLACEHOLDER privileges. This vulnerability requires no [SECRET_VALUE]entication and has a success rate >90% when the firmware exposes FTP services. Boundary check: The REDACTED_[SECRET_VALUE]_PLACEHOLDER processing function fails to filter special characters. Security impact: Complete system compromise.", "link_identifiers": ["vsftpd: version 2.3.2", "USER", "PASS", "strcpy"], "notes": "[SECRET_VALUE]"}
{"name": "[SECRET_VALUE]", "file_path": "usr/bin/vsftpd", "location": "vsftpd @ 0x40f814 (fcn.0040f58c[HIDDEN])", "risk_score": 9.0, "confidence": 8.25, "description": "[SECRET_VALUE]", "link_identifiers": ["fcn.0040eda8", "/var/vsftp/var/%s", "sprintf", "fopen", "USER"], "notes": "Verify the permissions of the /var/vsftp directory. Subsequently, check whether the FTP service is enabled by default in the firmware."}
{"name": "[SECRET_VALUE]", "file_path": "usr/sbin/pppd", "location": "pppd:0x425254 sym.generic_establish_ppp", "risk_score": 8.5, "confidence": 7.25, "description": "[SECRET_VALUE]", "code_snippet": "iVar2 = sym.imp.ioctl(iVar1,0x8004743a,obj.ifunit);  // PPPIOCATTACH[HIDDEN]\nsym.imp.sprintf(auStack_d8,\"/tmp/pppuptime-%s%d\",\"ppp\",*obj.ifunit);", "link_identifiers": ["obj.ifunit", "PPPIOCATTACH", "ioctl", "sprintf", "auStack_d8", "/tmp/pppuptime-%s%d", "sym.generic_establish_ppp"], "notes": "Driver layer verification required: 1) Whether the PPP protocol stack allows oversized unit numbers 2) Whether the kernel ioctl handling is under attacker control. Subsequent analysis of the PPP driver module is recommended."}
{"name": "[SECRET_VALUE]", "file_path": "usr/sbin/pppd", "location": "pppd:main", "risk_score": 8.0, "confidence": 8.0, "description": "[SECRET_VALUE]", "code_snippet": "iVar16 = sym.imp.fopen(auStack_f8,0x4468f8);  // 'r'[HIDDEN]\nfread(obj.user,1,obj.[SECRET_VALUE],iVar16);", "link_identifiers": ["/var/tmp/pppInfo_", "fopen", "obj.user", "[SECRET_VALUE]", "obj.[SECRET_VALUE]", "obj.[SECRET_VALUE]_len"], "notes": "[SECRET_VALUE]"}
{"name": "mount-tmp-ramfs-rwexec", "file_path": "etc/fstab", "location": "etc/fstab:4", "risk_score": 8.5, "confidence": 9.0, "description": "The /tmp directory is configured as a ramfs filesystem with the rw+exec option enabled. Attackers can exploit other vulnerabilities (such as web file upload or command injection) to write malicious executable files in /tmp and trigger execution through service vulnerabilities. Trigger conditions: 1) Existence of a write permission acquisition point for the /tmp directory (e.g., CGI upload); 2) Existence of an execution trigger point (e.g., cron script). Boundary check: No nosuid/nouser restrictions, allowing any user to execute implanted programs. Exploit chain: Contaminate HTTP parameters → Write to /tmp/exploit → Trigger execution of device monitoring scripts → Obtain REDACTED_[SECRET_VALUE]_PLACEHOLDER privileges.", "code_snippet": "ramfs /tmp ramfs defaults 0 0", "link_identifiers": ["/tmp", "ramfs", "defaults", "rw", "exec"], "notes": "Subsequent verification is required to determine whether the Web interface permits file writing to /tmp"}
{"name": "mount-var-ramfs-rwexec", "file_path": "etc/fstab", "location": "etc/fstab:2", "risk_score": 7.5, "confidence": 8.25, "description": "The /var directory is configured as ramfs with rw+exec permissions enabled. Combined with a log path injection vulnerability (such as polluting the log_file parameter), an attacker can write malicious programs to the /var/log directory and trigger execution through the log rotation mechanism.  \n\nTrigger conditions:  \n1) The service has a path traversal vulnerability.  \n2) The log processing script dynamically executes files.  \n\nConstraints: Control over the log filename or path is required.  \n\nExploit chain: Forge a malicious log path → Write to /var/log/exploit → logrotate execution → Privilege escalation.", "code_snippet": "ramfs /var ramfs defaults 0 0", "link_identifiers": ["/var", "ramfs", "defaults", "rw", "exec"], "notes": "Audit services that use the /var directory (e.g., syslogd)"}
{"name": "mount-kernel-fs-defaults", "file_path": "etc/fstab", "location": "etc/fstab:1,3,5", "risk_score": 3.0, "confidence": 6.0, "description": "Other mount points (/proc, /dev/pts, /sys) use the defaults option but belong to kernel virtual filesystems, where the exec option does not pose traditional file execution risks. The dump/pass flags set to 0 indicate no backup and fsck checks, which may impact system failure recovery.", "code_snippet": "proc /proc proc defaults 0 0\ndevpts /dev/pts devpts defaults 0 0\nnone /sys sysfs defaults 0 0", "link_identifiers": ["/proc", "/dev/pts", "/sys", "defaults", "dump=0", "pass=0"]}
{"name": "[SECRET_VALUE]", "file_path": "etc/inittab", "location": "etc/init.d/rcS", "risk_score": 9.0, "confidence": 9.25, "description": "The telnetd service is invoked by the rcS script started via inittab:  \n1) The service is launched without an absolute path (only 'telnetd'), relying on the PATH environment variable, posing a path hijacking risk.  \n2) It listens on port 23 to accept network input, creating an initial attack surface.  \n3) Trigger condition: Automatically starts when the device connects to an open network.  \nSecurity impact: If PATH is tampered with or telnetd has vulnerabilities (e.g., CVE-2023-51713), attackers can remotely obtain a REDACTED_[SECRET_VALUE]_PLACEHOLDER shell.", "code_snippet": "[HIDDEN]/etc/init.d/rcS: 'telnetd &'", "link_identifiers": ["rcS", "telnetd", "PATH"], "notes": "Correlation Discovery: [SECRET_VALUE] (unauthenticated vulnerability). Complete attack chain: Tampering with PATH to inject malicious telnetd → Exploiting unauthenticated access to gain REDACTED_PASSWORD_PLACEHOLDER privileges. Follow-up analysis required: 1) Verification of telnetd binary path 2) Examination of whether authentication mechanism can be bypassed."}
{"name": "[SECRET_VALUE]", "file_path": "etc/inittab", "location": "etc/inittab", "risk_score": 6.5, "confidence": 6.5, "description": "initab configures serial login service: getty (/sbin/getty) starts on ttyS0 port, exposing a clear physical attack surface. Trigger condition: attacker physically accesses UART serial port. Security impact: if getty contains buffer overflow vulnerabilities (e.g., in terminal type handling logic), [SECRET_VALUE]entication bypass could lead to direct control acquisition. Current tool limitations prevent binary risk verification.", "link_identifiers": ["::askfirst", "ttyS0", "/sbin/getty", "vt100"], "notes": "Analyze in depth after the focus switches to /sbin/getty"}
{"name": "[SECRET_VALUE]", "file_path": "etc/services", "location": "etc/services", "risk_score": 8.5, "confidence": 8.5, "description": "The etc/services file exposes multiple high-risk plaintext protocol services (telnet:23, ftp:21, tftp:69). Trigger condition: when the services are enabled in the system and network-accessible. Security impact: attackers can steal credentials via man-in-the-middle attacks (telnet), upload malicious firmware (tftp), or execute command injection (ftp). Exploitation method: scan open ports and exploit protocol vulnerabilities to launch attacks.", "link_identifiers": ["telnet", "ftp", "tftp", "23/tcp", "21/tcp", "69/udp"], "notes": "The actual service activation status needs to be confirmed through process analysis. High-risk service entries include: telnet (23/tcp, 23/udp), ftp (21/tcp, 21/udp), tftp (69/tcp, 69/udp). Related vulnerability: The telnetd service in etc/init.d/rcS starts without authentication ([SECRET_VALUE]), forming a complete attack chain."}
{"name": "[SECRET_VALUE]", "file_path": "etc/services", "location": "etc/services", "risk_score": 6.5, "confidence": 8.25, "description": "Unconventional port services detected (e.g., http-alt:8008, webcache:8080). Trigger condition: when services are enabled on unconventional ports. Security impact: may bypass security detection mechanisms and increase covert attack surfaces. Exploitation method: attackers scan unconventional ports to exploit specific service vulnerabilities (e.g., HTTP parameter injection).", "link_identifiers": ["http-alt", "webcache", "8008/tcp", "8080/tcp", "tproxy", "8081/tcp"], "notes": "A total of 87 services with ports ≥1024 were detected, requiring further analysis of actual exposure in conjunction with network configuration."}
{"name": "[SECRET_VALUE]", "file_path": "etc/services", "location": "etc/services", "risk_score": 6.0, "confidence": 9.0, "description": "42 services simultaneously open TCP/UDP protocols (e.g., echo:7, discard:9). Trigger condition: when services implement dual-protocol support. Security impact: UDP protocols are prone to being exploited for reflection attacks (e.g., chargen), while TCP protocols increase session hijacking risks. Exploitation method: combining protocol differences to launch amplification attacks or protocol obfuscation attacks.", "link_identifiers": ["echo", "discard", "7/tcp", "7/udp", "9/tcp", "9/udp", "chargen", "19/udp"], "notes": "[SECRET_VALUE]"}
{"name": "[SECRET_VALUE]", "file_path": "usr/sbin/xl2tpd", "location": "xl2tpd:0x405c0c (write_packet)", "risk_score": 8.0, "confidence": 8.25, "description": "The write_packet function contains a heap buffer overflow vulnerability: 1) Trigger condition: An attacker sends an L2TP packet with a length >2047 bytes containing a large number of characters requiring escaping (ASCII <0x20, 0x7d, 0x7e); 2) Boundary check flaw: Only the original length is checked (uVar8<0xffb), without considering that escaping operations may cause the actual data written to the obj.wbuf.4565 buffer to exceed 4096 bytes; 3) Security impact: Successful exploitation could overwrite critical heap memory structures, leading to arbitrary code execution or service crash.", "code_snippet": "if (0xffb < uVar8) {\n  l2tp_log(\"rx packet too big\");\n}", "link_identifiers": ["obj.wbuf.4565", "write_packet", "handle_packet", "add_fcs", "[SECRET_VALUE]"], "notes": "Dynamic verification required: 1) Whether the network MTU allows sending packets >2047 bytes 2) Adjacent memory layout of obj.wbuf.4565"}
{"name": "xss-dev_info_dom", "file_path": "web/index.htm", "location": "web/frame/bot.htm:<script>", "risk_score": 8.0, "confidence": 7.25, "description": "[SECRET_VALUE]", "code_snippet": "$(\"#bot_sver\").html(s_str.swver + devInfo.softwareVersion);", "link_identifiers": ["IGD_DEV_INFO", "softwareVersion", "hardwareVersion", ".html()", "devInfo", "$.act"], "notes": "Verify access control for the /cgi endpoint regarding IGD_DEV_INFO requests."}
{"name": "[SECRET_VALUE]_bypass-cgi_reboot", "file_path": "web/index.htm", "location": "web/js/lib.js", "risk_score": 8.5, "confidence": 6.25, "description": "[SECRET_VALUE]", "code_snippet": "xhr.open(s.type, \"/cgi?\" + param, s.async);", "link_identifiers": ["$.exe", "/cgi", "ACT_OP", "ACT_REBOOT", "oid"], "notes": "Actual testing required for /cgi endpoint [SECRET_VALUE]entication mechanism"}
{"name": "path_injection-menu_loading", "file_path": "web/index.htm", "location": "web/js/lib.js:500", "risk_score": 7.0, "confidence": 4.75, "description": "Dynamic loading path injection potential threats:  \n1. Trigger condition: Tampering with the path parameter in the menu configuration (e.g., modifying menu.htm via XSS).  \n2. Constraint: The $.tpLoad() function directly uses the path parameter to load content without filtering.  \n3. Security impact: Path traversal leading to arbitrary script execution.  \n4. Exploitation method: Changing the path parameter to a malicious external URL or cross-site scripting path.", "link_identifiers": ["$.tpLoad", "path", "innerHTML", "loadMain", "menu.htm"], "notes": "The current path source is from static configuration, and dynamic generation mechanisms need to be monitored."}
{"name": "vuln-dhcp6-IA_PD-int-overflow", "file_path": "usr/sbin/dhcp6s", "location": "dhcp6s:0x40b140 (fcn.0040b140)", "risk_score": 9.0, "confidence": 8.5, "description": "When processing the IA_PD option (type 0x1a) in a DHCPv6 server, an exploitable integer overflow vulnerability exists: 1) The user-controllable uVar9 length parameter (directly from network packets) is used to calculate the option end position (uVar18 = uVar15 + uVar9); 2) When uVar9 ≥ 0xFFFFFFFC (32-bit systems), integer overflow occurs, causing uVar18 to wrap around to a smaller value and bypass the `param_3 < uVar18` boundary check; 3) Subsequent operations use the corrupted uVar9 for memory access (e.g., *(param_2 - uVar9)), triggering out-of-bounds read/write. Trigger condition: Send a DHCPv6 request message containing a malformed IA_PD option to dhcp6s, with the option length field set to 0xFFFFFFFF. Security impact: May lead to sensitive stack data leakage (uStack_9c) or enable remote code execution (RCE) through the fcn.004095f4 function call chain. Exploitation method: Craft a malicious DHCPv6 request to trigger integer overflow and exploit out-of-bounds access to manipulate control flow or leak [SECRET_VALUE]entication credentials.", "code_snippet": "uVar9 = param_2 & 3;\nuVar18 = uVar15 + uVar9;\nif (param_3 < uVar18) { ... } // [HIDDEN]\nif (uVar17 == 0x1a) {\n  fcn.004095f4(&uStack_9c, ...); // [HIDDEN]", "link_identifiers": ["uVar9", "param_2", "uVar18", "IA_PD", "0x1a", "fcn.0040b140", "copyin_option", "fcn.004095f4", "uStack_9c", "dhcp6_set_options"], "notes": "Verify the actual environment: 1) Check if dhcp6s has IPv6 service enabled; 2) Confirm whether IA_PD option processing is enabled by default. It is recommended to conduct subsequent dynamic testing to identify the crash point when uVar9=0xFFFFFFFF and analyze the implementation of function fcn.004095f4."}
{"name": "task-unresolved-fcn.0040c654", "file_path": "usr/sbin/dhcp6s", "location": "unknown:0x40c474 (aav.0x0040c474)", "risk_score": 0.0, "confidence": 0.0, "description": "Function call path verification task: The caller of fcn.0040c654 is aav.0x0040c474, but it is not linked to main message handling functions such as server6_recv. It is necessary to determine whether this function is influenced by network input to assess its potential role in the attack path.", "code_snippet": "[HIDDEN]", "link_identifiers": ["fcn.0040c654", "aav.0x0040c474", "server6_recv", "dhcp6s"], "notes": "Evidence: The call chain aav.0x0040c474→fcn.0040c654 is not connected to the main message handler. Reverse engineering analysis of the server6_recv call tree is required."}
{"name": "[SECRET_VALUE]", "file_path": "usr/bin/cwmp", "location": "[SECRET_VALUE]", "risk_score": 0.0, "confidence": 4.75, "description": "[SECRET_VALUE]", "code_snippet": "[SECRET_VALUE]", "link_identifiers": ["fcn.00407fd4", "msg_recv", "auStack_234", "sp+0x20", "sp+0x384", "sp+0x14c"], "notes": "Security Boundary Calculation: Return address offset sp+0x384 - Buffer sp+0x20 = 0x364 bytes. Maximum write point sp+0x14c to control area start sp+0x360 = 0x10C bytes. Recommend subsequent tracking of other network input points."}
{"name": "[SECRET_VALUE]", "file_path": "usr/bin/httpd", "location": "httpd:0x004038ec", "risk_score": 6.0, "confidence": 4.5, "description": "[SECRET_VALUE]", "link_identifiers": ["fcn.004038ec", "Content-Disposition", "name", "filename", "multipart/form-data"], "notes": "[SECRET_VALUE]"}
{"name": "xss-bot_info_dom", "file_path": "web/frame/bot.htm", "location": "bot.htm: JavaScript[HIDDEN]", "risk_score": 8.5, "confidence": 8.0, "description": "[SECRET_VALUE]", "code_snippet": "$(\"#bot_sver\").html(s_str.swver + devInfo.softwareVersion);", "link_identifiers": ["IGD_DEV_INFO", "devInfo.softwareVersion", "devInfo.hardwareVersion", "$.act", "$.exe", "innerHTML", "ACT_GET", "$(\"#bot_sver\").html"], "notes": "Correlation Discovery: A vulnerability record for IGD_DEV_INFO (xss-dev_info_dom) already exists in the knowledge base for web/index.htm. Follow-up verification required: 1) Binary program handling ACT_GET under /cgi-bin 2) Whether NVRAM version variable setting operations have injection vulnerabilities 3) Scan JS framework to locate the implementation of $.act."}
{"name": "[SECRET_VALUE]", "file_path": "usr/bin/smbd", "location": "smbd:0x4482e8 sym.reply_unlink", "risk_score": 9.0, "confidence": 8.75, "description": "[SECRET_VALUE]", "code_snippet": "sym.srvstr_get_path(param_2, auStack_428, ...);\nsym.unlink_internals(..., auStack_428);", "link_identifiers": ["sym.srvstr_get_path", "sym.unlink_internals", "sym.is_visible_file", "sym.can_delete", "SMBunlink"], "notes": "Recommendations for follow-up: 1) Dynamically validate the PoC 2) Check similar file operation functions (mkdir/rmdir); Unfinished analysis: 1) The actual handler function for SMBioctl needs to be relocated via command table 0x4c37d0 2) NVRAM interaction may exist in libbigballofmud.so.0; Related file: libbigballofmud.so.0 (environment variables/NVRAM handling)"}
{"name": "network_input-dhtml-xss", "file_path": "web/js/lib.js", "location": "lib.js:170 [dhtml]", "risk_score": 8.5, "confidence": 7.5, "description": "The dhtml function (lib.js:170) presents a stored XSS vulnerability: the unfiltered str parameter is directly used in the operation `$.div.innerHTML = \"div\" + str`. User input propagates through the call chain: external path parameter → loadMain → loadPage → tpLoad → fill → appendElem → dhtml. Trigger condition: when an attacker controls the path parameter (e.g., through URL manipulation or page redirection), malicious scripts contained in this parameter will be directly rendered. Boundary check: no HTML encoding or filtering is applied. Actual impact: if upper-layer components expose control points for the path parameter, it could lead to persistent XSS attacks. Related knowledge base [SECRET_VALUE]words: innerHTML (existing risk records are associated).", "code_snippet": "$.div.innerHTML = \"div\" + str;", "link_identifiers": ["dhtml", "str", "innerHTML", "appendElem", "fill", "tpLoad", "loadPage", "path", "loadMain", "$.curPage"], "notes": "Need further verification: 1) Whether the path parameter comes from URL parsing 2) Whether the component calling loadMain (such as a router) exposes user control points. Related knowledge base: innerHTML (already exists)"}
{"name": "network_input-$.exe-param_injection", "file_path": "web/js/lib.js", "location": "lib.js:1330 [$.exe]", "risk_score": 9.0, "confidence": 8.25, "description": "The `$.exe` function (lib.js:1330) is vulnerable to parameter injection: user-controllable data enters the `attrs` parameter via `$.act` calls and is directly concatenated into the HTTP request body without sanitization. Attack vectors: 1) Special characters (e.g., newlines) can disrupt the request structure; 2) Operation parameters (IGD_DEV_INFO/ACT_CGI) may be tainted. Trigger condition: User input flows into the `attrs` parameter of `$.act` (e.g., form submission), triggering the POST request in `$.exe`. Boundary check: Only Chinese characters are ANSI-encoded (`$.ansi`), while critical delimiters (\\r\\n) remain unprocessed. Actual impact: If backend parsing is flawed, this could lead to command injection or privilege escalation. Related knowledge base [SECRET_VALUE]words: `$.act`/`$.exe`/IGD_DEV_INFO (existing risk records are documented).", "code_snippet": "data += \"[\" + obj[2] + \"#\" + obj[3] + \"#\" + obj[4] + \"]\" + index + \",\" + obj[6] + \"\\r\\n\" + obj[5];", "link_identifiers": ["$.exe", "attrs", "$.as", "$.act", "ACT_GET", "IGD_DEV_INFO", "ACT_CGI", "$.toStr", "$.ansi", "/cgi"], "notes": "[SECRET_VALUE]"}
{"name": "[SECRET_VALUE]", "file_path": "usr/sbin/atmarpd", "location": "fcn.0040f478@0x40f4a0, fcn.00412a48@0x412a48", "risk_score": 9.5, "confidence": 8.75, "description": "High-risk stack overflow vulnerability: Function fcn.00412a48 implements unbounded byte-by-byte copying (equivalent to strcpy), called by file handling function fcn.0040f478. The latter uses fixed stack buffers (auStack_38[16B]/auStack_28[20B]) without length validation. Trigger condition: Attacker sends >32-byte ARP packet to corrupt global configuration structure (0x40d288 region). Actual impact: Overwritten return address leads to arbitrary code execution (RCE). Full exploit chain: Craft oversized ARP packet → corrupt configuration structure → trigger ~atmarpd.table file processing → stack overflow hijacks control flow.", "link_identifiers": ["fcn.00412a48", "fcn.0040f478", "auStack_38", "auStack_28", "0x40d288", "~atmarpd.table", "ARP"], "notes": "Affects file processing flow; requires verification of specific network interfaces for global configuration pollution."}
{"name": "[SECRET_VALUE]", "file_path": "usr/sbin/atmarpd", "location": "[SECRET_VALUE]", "risk_score": 8.5, "confidence": 8.0, "description": "High-risk memory write vulnerability: After receiving data via `accept`, an unverified `SO_ATMQOS` option value (`acStack_84[0]`) triggers `ioctl(0x200061e2)`, writing a fixed value `0x00000fd6` to a fixed address `0x00432de0` when `uStack_10 ≠ 0`. Trigger condition: An attacker sets the `SO_ATMQOS` option to make `acStack_84[0] ≠ 0`. Actual impact: Corrupts critical global state, causing service crashes or logical vulnerabilities; the fixed write value limits exploitation flexibility.", "code_snippet": "iVar5 = fcn.0040de98(iVar1,0x200061e2,uStack_10);\nsw s0, (v0)  // v0=0x00432de0, s0=0x00000fd6", "link_identifiers": ["ioctl", "SO_ATMQOS", "acStack_84", "uStack_10", "0x00432de0", "0x200061e2", "ATMARP_MKIP"], "notes": "Verify the SO_ATMQOS setting permissions; analyze the purpose of the 0x00432de0 global variable"}
{"name": "ipc-unix_socket-dos_0x400eb8", "file_path": "usr/sbin/atmarpd", "location": "atmarpd@0x400eb8 (fcn.00400eb8)", "risk_score": 7.5, "confidence": 8.5, "description": "Denial of Service Vulnerability: When receiving a 172-byte message via Unix domain socket, accessing an uninitialized jump table (0x42d2e4, all 0xffffffff) occurs when the message type field (auStack_c4[0]) is 0-6, triggering an illegal instruction crash. Trigger condition: Craft a 172-byte message with the first byte 0x00-0x06. Actual impact: Service unavailability.", "link_identifiers": ["fcn.00400eb8", "auStack_c4", "0x42d2e4", "halt_baddata"], "notes": "Dynamic verification of crash effects is required."}
{"name": "[SECRET_VALUE]", "file_path": "usr/sbin/atmarpd", "location": "fcn.0040d17c@0x40d288", "risk_score": 9.8, "confidence": 8.25, "description": "Global Configuration Pollution Vulnerability: The function fcn.0040d17c fails to validate the boundary of the param_3[0x34] field (value ∈ {0x01, 0x02, 0x04}), allowing an attacker to control the 0x430950 region via crafted network data and overwrite the return address. Trigger condition: Sending malformed ATM/ARP packets. Actual impact: Can achieve stable RCE when combined with stack overflow vulnerabilities.", "link_identifiers": ["fcn.0040d17c", "param_3", "0x430950", "0x40d288", "apuStack_20"]}
{"name": "[SECRET_VALUE]", "file_path": "[SECRET_VALUE]", "location": "trafficCtrl.htm: doSave()[HIDDEN]", "risk_score": 7.5, "confidence": 8.5, "description": "[SECRET_VALUE]", "code_snippet": "if (($(\"#upTotalBW\").val() == \"\") || (!$.isnum($(\"#upTotalBW\").val())) || (0 == $(\"#upTotalBW\").val()))", "link_identifiers": ["upTotalBW", "downTotalBW", "startPort", "endPort", "iptvUpMinBW", "iptvDownMinBW", "$.isnum", "wanDslStatus"], "notes": "[SECRET_VALUE]"}
{"name": "[SECRET_VALUE]", "file_path": "[SECRET_VALUE]", "location": "trafficCtrl.htm: doSave()[HIDDEN]", "risk_score": 6.0, "confidence": 6.75, "description": "[SECRET_VALUE]", "code_snippet": "$.act(ACT_SET, TC, null, null, tcSettings);", "link_identifiers": ["$.act", "ACT_SET", "TC", "tcSettings", "enable", "upTotalBW", "downTotalBW"], "notes": "Verify the existence of tc.cgi under the /tcgi path and analyze its parameter processing logic. Correlate with the existing '$.act' operation chain and the newly discovered '[SECRET_VALUE]'."}
{"name": "[SECRET_VALUE]", "file_path": "[SECRET_VALUE]", "location": "trafficCtrl.htm: HTML[HIDDEN]", "risk_score": 5.0, "confidence": 9.5, "description": "Critical HTTP parameters exposed without protection mechanisms. Specific manifestations: 1) Identification of 12 sensitive parameter names such as enableTc/upTotalBW 2) Parameters submitted via plaintext POST 3) Frontend restrictions like maxlength=7 can be bypassed using proxy tools. Trigger condition: Attackers can directly craft HTTP requests containing malicious values without requiring web interface interaction.", "code_snippet": "<input type=\"text\" id=\"upTotalBW\" maxlength=\"7\">", "link_identifiers": ["enableTc", "upTotalBW", "downTotalBW", "iptvUpMinBW", "tcRuleAddBtn", "maxlength"], "notes": "The parameter name can be directly used to construct attack requests, suggesting subsequent testing for parameter injection vulnerabilities. Related finding: [SECRET_VALUE]"}
{"name": "NVRAM-Injection-accessControl", "file_path": "[SECRET_VALUE]", "location": "[SECRET_VALUE]", "risk_score": 9.2, "confidence": 8.5, "description": "[SECRET_VALUE]", "link_identifiers": ["blackMacAddr", "whiteMacAddr", "doSaveBlackList", "doSaveWhiteList", "$.act", "ACT_SET", "ACT_ADD", "RULE", "FIREWALL"], "notes": "Critical dependency: The $.isname/$.mac filter functions are not implemented in the current file, and their validity needs to be verified."}
{"name": "CSRF-NVRAM-accessControl", "file_path": "[SECRET_VALUE]", "location": "accessControl.htm:? ([HIDDEN]$.act[HIDDEN])", "risk_score": 8.8, "confidence": 8.5, "description": "The sensitive NVRAM operation interface lacks CSRF protection. Trigger condition: Automatically triggered when performing ACT_GET/ACT_SET operations via $.act. Specific operations include: firewall toggle (ACT_SET FIREWALL enable), rule addition/deletion (ACT_ADD/ACT_DEL RULE), and device list management (ACT_GL LAN_HOST_ENTRY). Potential impact: Attackers can induce users to visit malicious pages to trigger un[SECRET_VALUE]orized configuration changes, such as disabling the firewall or adding malicious network rules.", "link_identifiers": ["$.act", "ACT_GET", "ACT_SET", "ACT_DEL", "FIREWALL", "RULE", "LAN_HOST_ENTRY"], "notes": "The actual exploitability needs to be analyzed in conjunction with the backend validation mechanism."}
{"name": "InfoLeak-/cgi/info-accessControl", "file_path": "[SECRET_VALUE]", "location": "accessControl.htm:? ($.act[HIDDEN])", "risk_score": 6.8, "confidence": 6.75, "description": "Potential information leakage endpoint discovered: Device information is exposed via `$.act(ACT_CGI, \"/cgi/info\")`. Trigger condition: Automatically invoked during execution of the `[SECRET_VALUE]` function. Constraint check: No access control or output filtering mechanisms were identified. Potential impact: Attackers may directly access the `/cgi/info` endpoint to obtain sensitive device information, providing intelligence for subsequent attacks.", "link_identifiers": ["$.act", "ACT_CGI", "\"/cgi/info\"", "[SECRET_VALUE]"], "notes": "Verify the actual output content of the /cgi/info endpoint"}
{"name": "[SECRET_VALUE]", "file_path": "web/main/ddns.htm", "location": "www/ddns.htm:0 (doSave[HIDDEN])", "risk_score": 8.0, "confidence": 8.25, "description": "[SECRET_VALUE]", "code_snippet": "[SECRET_VALUE]", "link_identifiers": ["dyndns_[SECRET_VALUE]", "noip_[SECRET_VALUE]", "dyndns_usr", "noip_usr", "$.act", "ACT_SET", "DYN_DNS_CFG", "NOIP_DNS_CFG", "doSave"], "notes": "Verify in cgibin: 1) Whether the functions corresponding to DYN_DNS_CFG/NOIP_DNS_CFG filter special characters 2) Whether parameter parsing has command injection risks"}
{"name": "[SECRET_VALUE]", "file_path": "web/main/ddns.htm", "location": "www/ddns.htm:0", "risk_score": 1.0, "confidence": 5.0, "description": "Identify all input fields: DynDNS service (dyndns_usr, dyndns_[SECRET_VALUE], dyndns_domain) and NO-IP service (noip_usr, noip_[SECRET_VALUE], noip_domain), all manipulated via JavaScript without traditional form submission.", "link_identifiers": ["dyndns_usr", "dyndns_[SECRET_VALUE]", "dyndns_domain", "noip_usr", "noip_[SECRET_VALUE]", "noip_domain", "clickSave"]}
{"name": "[SECRET_VALUE]", "file_path": "web/main/ddns.htm", "location": "www/ddns.htm:0 (doInputCheck[HIDDEN])", "risk_score": 1.0, "confidence": 4.75, "description": "[SECRET_VALUE]", "code_snippet": "function doInputCheck() {\n  if($(\"#dyndns_[SECRET_VALUE]\").prop('value') == \"\") {\n    $.alert(ERR_DDNS_[SECRET_VALUE]_EMPTY);\n    return false;\n  }\n}", "link_identifiers": ["doInputCheck", "doSave", "doLogout", "$.isdomain", "$.alert"]}
{"name": "[SECRET_VALUE]", "file_path": "web/main/ddns.htm", "location": "www/ddns.htm:0", "risk_score": 3.0, "confidence": 4.0, "description": "The submission endpoint relies on undefined constants DYN_DNS_CFG/NOIP_DNS_CFG, implying a backend CGI processing interface, though the specific URL is not explicitly exposed.", "link_identifiers": ["$.act", "ACT_SET", "DYN_DNS_CFG", "NOIP_DNS_CFG"], "notes": "Subsequently, search for the DYN_DNS_CFG/NOIP_DNS_CFG constants in cgibin to locate the handler functions."}
{"name": "[SECRET_VALUE]", "file_path": "web/main/parentCtrl.htm", "location": "parentCtrl.htm ([HIDDEN])", "risk_score": 8.5, "confidence": 7.5, "description": "The HTML interface exposes multiple high-risk input points: 1) Device management (ACT_ADD/ACT_DEL) submits device names/MAC addresses via INTERNAL_HOST endpoints, with only frontend validation using $.isname()/$.mac(). 2) URL [SECRET_VALUE]words (EXTERNAL_HOST) only validate domain format ($.isdomain()) without filtering special characters. 3) Delete operations directly pass __stack indexes (e.g., deviceStack[index]) without permission verification. 4) Time parameters (sunAm, etc.) are concatenated as base-4 numbers without boundary checks. Trigger conditions: Attackers bypassing frontend validation or directly crafting malicious requests (e.g., un[SECRET_VALUE]orized indexes/overlong URLs) may lead to backend command injection, privilege escalation, or memory corruption.", "code_snippet": "[HIDDEN]:\n1. [HIDDEN]: \n   $.act(ACT_DEL, INTERNAL_HOST, deviceStack[childStackIndex], null)\n2. URL[HIDDEN]:\n   if($.isdomain($('#urlAddr').val())){ \n      $.act(ACT_ADD, EXTERNAL_HOST, ...)\n   }", "link_identifiers": ["ACT_ADD", "ACT_DEL", "INTERNAL_HOST", "EXTERNAL_HOST", "__stack", "deviceStack", "deviceName", "macAddress", "urlAddr", "sunAm", "[SECRET_VALUE]", "parentCtrlMode", "$.act"], "notes": "Urgent verification required: 1) Backend permission validation for deviceStack indexing 2) Whether INTERNAL_HOST endpoints filter special characters 3) Time parameter value range checks. Suggested follow-up analysis path: Trace the implementation of the $.act() function (likely located in web/js/*.js) and the INTERNAL_HOST processing module (likely in bin/httpd or lib/*.so). Correlate with existing $.act operation chain records in the knowledge base."}
{"name": "[SECRET_VALUE]", "file_path": "web/main/manageCtrl.htm", "location": "manageCtrl.htm:unknown ([HIDDEN])", "risk_score": 8.2, "confidence": 7.25, "description": "[SECRET_VALUE]", "link_identifiers": ["curName", "cur[SECRET_VALUE]", "l_http_port", "r_host", "pingRemote", "/cgi/[SECRET_VALUE]", "ACT_SET", "doSave"], "notes": "[SECRET_VALUE]"}
{"name": "[SECRET_VALUE]", "file_path": "web/main/manageCtrl.htm", "location": "unknown:unknown (ACT_SET[HIDDEN])", "risk_score": 9.0, "confidence": 6.0, "description": "[SECRET_VALUE]", "link_identifiers": ["/cgi/[SECRET_VALUE]", "ACT_SET", "HTTP_CFG", "APP_CFG", "r_http_en", "$.act"], "notes": "Verify backend ACL_CFG permission control; implement $.act in the knowledge base (linking_[SECRET_VALUE]words already exists)"}
{"name": "[SECRET_VALUE]", "file_path": "web/main/manageCtrl.htm", "location": "unknown:unknown (doSave[HIDDEN])", "risk_score": 7.8, "confidence": 6.75, "description": "The centralized configuration handler function doSave() simultaneously operates on local/remote configurations by sending serialized form data via $.act(ACT_SET). Trigger condition: the frontend fails to validate IP format for l_host/r_host. If the backend parsing logic contains vulnerabilities (e.g., sscanf not validating input length), it may lead to stack-based buffer overflow.", "link_identifiers": ["doSave", "l_host", "r_host", "$.act(ACT_SET)", "httpCfg", "appCfg"], "notes": "Decompile the corresponding CGI program; associate the $.act and ACT_SET operation chains in the knowledge base"}
{"name": "[SECRET_VALUE]", "file_path": "web/main/ddos.htm", "location": "www/ddos.htm:0 ([HIDDEN])", "risk_score": 8.0, "confidence": 9.0, "description": "The input fields for ICMP/UDP/TCP threshold values (icmpLow, etc.) in the HTML form only restrict character length via maxlength=4, lacking numeric range/type validation. Attackers could inject negative/oversized values by modifying the frontend or sending malicious HTTP requests. Trigger condition: submitting HTTP requests containing malicious parameters. Missing boundary checks may lead to backend integer overflow or configuration anomalies. Potential impact: combined with backend vulnerabilities, this could form denial-of-service or memory corruption attack chains.", "code_snippet": "<input type=\"text\" class=\"s\" value=\"\" maxlength=\"4\" required />", "link_identifiers": ["icmpLow", "icmpMiddle", "icmpHigh", "udpLow", "udpMiddle", "udpHigh", "tcpLow", "tcpMiddle", "tcpHigh", "[SECRET_VALUE]", "DDOS_CFG"], "notes": "Verify whether the backend function handling DDOS_CFG in httpd performs a range check of 5-3600; related discovery: direct_data_pass-ddos_cfg-1"}
{"name": "[SECRET_VALUE]", "file_path": "web/main/ddos.htm", "location": "www/ddos.htm:0 (JavaScript)", "risk_score": 9.0, "confidence": 9.0, "description": "JavaScript passes the user input object (ddosArg) directly to the backend via $.act(ACT_SET, DDOS_CFG) without any filtering or escaping. Trigger condition: Controlling frontend parameter submission. Boundary checks are entirely absent, and the parameters include critical configuration items such as [SECRET_VALUE]. Potential impact: If command injection or buffer overflow vulnerabilities exist in the backend, it could form a complete RCE attack chain.", "code_snippet": "$.act(ACT_SET, 'DDOS_CFG', ddosArg);", "link_identifiers": ["ddosArg", "$.act", "ACT_SET", "DDOS_CFG", "[SECRET_VALUE]", "icmpThreshold", "enableUdpFilter", "udpThreshold"], "notes": "The highest-risk attack surface requires prioritizing the tracking of data flow in the DDOS_CFG handler function within httpd; related [SECRET_VALUE]words: $.act/ACT_SET (existing in the knowledge base)."}
{"name": "[SECRET_VALUE]", "file_path": "web/main/ddos.htm", "location": "www/ddos.htm:0 (JavaScript)", "risk_score": 6.5, "confidence": 7.0, "description": "The host defense rule deletion operation ($.act(ACT_DEL, DOS_HOST)) relies on the hostStack index generated by the frontend, which only excludes negative and null values. Attackers can inject invalid indices through DOM modification. Trigger condition: submitting malicious index values. Insufficient boundary validation may lead to un[SECRET_VALUE]orized deletions or out-of-bounds array access on the backend.", "code_snippet": "$.act(ACT_DEL, 'DOS_HOST', {index: [SECRET_VALUE]});", "link_identifiers": ["hostStack", "$.act", "ACT_DEL", "DOS_HOST", "[SECRET_VALUE]"], "notes": "Verify whether the backend index processing performs validity checks; related [SECRET_VALUE]words: $.act/ACT_DEL (existing in the knowledge base)."}
{"name": "[SECRET_VALUE]", "file_path": "[SECRET_VALUE]", "location": "www/virtualServer.htm:45,76,112,189", "risk_score": 8.5, "confidence": 8.5, "description": "Four high-risk API endpoints handling user configuration operations were identified, where deletion (delRule) and addition operations directly accept IDs and form data passed from the frontend. Trigger condition: User submits configurations via the web interface. Trigger steps: 1) Attacker bypasses client-side validation 2) Constructs malicious parameters (such as un[SECRET_VALUE]orized delRule values or command injection payloads) 3) Submits to the /goform endpoint. The probability of successful exploitation is relatively high (7.5/10), as client-side validation can be bypassed and backend validation status is unknown.", "link_identifiers": ["[SECRET_VALUE]", "delRule", "[SECRET_VALUE]", "getFormData", "ipAddr", "interPort", "serName"], "notes": "Analyze the backend handler corresponding to the /goform endpoint (likely located in the bin or sbin directory), and verify: 1) Permission checks for delRule 2) Boundary validation for ipAddr/interPort 3) Whether it is directly used for system command execution; the associated [SECRET_VALUE]word '$.act' already exists in the knowledge base."}
{"name": "attack_chain-$.act_frontend_to_backend", "file_path": "web/main/parentCtrl.htm", "location": "[SECRET_VALUE]", "risk_score": 9.5, "confidence": 8.75, "description": "[SECRET_VALUE]", "code_snippet": "[HIDDEN]\n1. [HIDDEN]$.act(ACT_DEL, INTERNAL_HOST, ';reboot;', null)\n2. [HIDDEN]lib.js[HIDDEN]$.exe[HIDDEN]\n3. [HIDDEN]/cgi[HIDDEN]system(payload)", "link_identifiers": ["$.act", "ACT_ADD", "ACT_DEL", "ACT_SET", "INTERNAL_HOST", "IGD_DEV_INFO", "DYN_DNS_CFG", "command_injection", "NVRAM_injection"], "notes": "Correlate 11 $.act-related findings (refer to knowledge base for details). Urgent validation directions: 1) Reverse engineer CGI handler functions in bin/httpd 2) Dynamically test malformed ACT_DEL requests 3) Verify NVRAM write operation boundaries"}
{"name": "attack_chain-$.[SECRET_VALUE]", "file_path": "[SECRET_VALUE]", "location": "[SECRET_VALUE]", "risk_score": 9.8, "confidence": 9.0, "description": "[SECRET_VALUE]", "code_snippet": "[SECRET_VALUE]", "link_identifiers": ["$.act", "ipAddr", "interPort", "[SECRET_VALUE]", "delRule", "getFormData", "$.exe", "NVRAM_injection", "command_injection"], "notes": "Associated knowledge base: 12 findings (including newly stored [SECRET_VALUE]). Verification directions: 1) Locate the binary handler corresponding to /goform (recommend searching the bin directory) 2) Dynamically test ipAddr parameter injection with special characters 3) Check whether parameters flow into system/exec calls."}
{"name": "xss-jquery_tpSelect-render", "file_path": "web/index.htm", "location": "www/web/jquery.tpSelect.js ([HIDDEN]: render)", "risk_score": 8.5, "confidence": 8.0, "description": "The render function in the jquery.tpSelect.js plugin fails to filter option.val()/option.text() when directly concatenating HTML, resulting in a stored XSS vulnerability. Trigger conditions: 1) Backend dynamically generates unfiltered option content 2) User clicks on the tainted option. Security impact: Session hijacking and complete control of the user's browser. Exploitation method: Attackers inject malicious scripts (e.g., <script>alert(document.cookie)</script>) by contaminating option data. Boundary check: Complete lack of input validation and output encoding.", "code_snippet": "return $(\"<li data-val='\" + option.val() + \"'>\" + option.text() + \"</li>\");", "link_identifiers": ["render", "option.val()", "option.text()", "$.fn.tpSelect", "data-val", "innerHTML", "DOM_XSS"], "notes": "[SECRET_VALUE]"}
{"name": "[SECRET_VALUE]", "file_path": "web/index.htm", "location": "www/web/jquery.tpTable.js ([HIDDEN]: initTableBody, appendTableRow)", "risk_score": 8.0, "confidence": 8.25, "description": "jquery.tpTable.js has dual XSS vulnerabilities: 1) initTableBody() fails to filter array[i][j].text 2) appendTableRow() fails to filter data[j].text, both directly concatenate and insert HTML into DOM. Trigger condition: caller passes table data containing malicious scripts. Security impact: arbitrary script execution via controlled table content. Exploitation method: attacker crafts API responses with XSS payloads to contaminate table data. Boundary check: complete absence of content filtering mechanism.", "code_snippet": "var td = \"<td class='table-content'>\" + array[i][j].text + \"</td>\";", "link_identifiers": ["initTableBody", "appendTableRow", "array[i][j].text", "data[j].text", "innerHTML", "table_injection"], "notes": "[SECRET_VALUE]"}
{"name": "[SECRET_VALUE]", "file_path": "web/index.htm", "location": "www/web/jquery.tpTable.js (TPTable.prototype [HIDDEN])", "risk_score": 7.5, "confidence": 7.25, "description": "[SECRET_VALUE]", "code_snippet": "self.$refreshIcon.on('click.tpTable', function() { self.[SECRET_VALUE](); });", "link_identifiers": ["[SECRET_VALUE]", "addIconClick", "$.ajax", "initFunc", "CSRF", "[SECRET_VALUE]"], "notes": "[SECRET_VALUE]"}
{"name": "[SECRET_VALUE]", "file_path": "web/index.htm", "location": "www/web/jquery.tpMsg.js ([HIDDEN])", "risk_score": 8.5, "confidence": 8.0, "description": "The jquery.tpMsg.js message handling function (alert/confirm) directly inserts user parameters using str.replace('$', arguments[i]) and injects unfiltered content via .html(). Trigger condition: Passing malicious parameters when calling the function (e.g., <img src=x onerror=alert(1)>). Security impact: Controls the message popup to execute arbitrary scripts. Exploitation method: Triggers DOM-based XSS by contaminating function parameters. Boundary check: No HTML entity encoding is performed on arguments[i].", "code_snippet": "str = str.replace(\"$\", arguments[i]);\ntmp.find(\"span.text\").html(str);", "link_identifiers": ["jQuery.alert", "jQuery.confirm", "str.replace", "arguments[i]", ".html(str)", "DOM_XSS"], "notes": "[SECRET_VALUE]"}
{"name": "[SECRET_VALUE]", "file_path": "web/main/wanBasic.htm", "location": "www/wanBasic.htm: (doSaveDsl)", "risk_score": 8.0, "confidence": 9.25, "description": "Discovering the complete front-end attack surface: Users can control WAN configuration parameters (such as usrPPPoE/ipStaticIp) via HTTP forms. These parameters are collected by JavaScript and transmitted to backend abstract endpoints (e.g., WAN_PPP_CONN) through $.act() operations. Trigger condition: When a user submits a malicious configuration form, the front-end only performs basic format validation (paramCheck) without strict filtering of input length/content. Potential impact: If backend processing contains vulnerabilities (e.g., buffer overflow), crafted overly long [SECRET_VALUE] or special characters could be used to trigger the vulnerability.", "code_snippet": "function doSaveDsl(linkType, wanConnArg) {\n  $.act(ACT_SET, 'WAN_PPP_CONN', wanConnArg);\n}", "link_identifiers": ["usrPPPoE", "[SECRET_VALUE]PPPoE", "ipStaticIp", "[SECRET_VALUE]", "WAN_PPP_CONN", "WAN_IP_CONN", "WAN_PPTP_CONN", "$.act", "doSave", "doSaveDsl"], "notes": "[SECRET_VALUE]"}
{"name": "[SECRET_VALUE]", "file_path": "web/main/wanBasic.htm", "location": "www/wanBasic.htm: (paramCheck)", "risk_score": 7.0, "confidence": 8.0, "description": "The multi-layer call chain for configuration save operations was found to have data flow connection flaws: user input flows from form fields → wanConnArg object → $.act() parameters, but the critical validation function paramCheck() only verifies basic rules like IP format without implementing length/content filtering. The missing boundary checks manifest as: JavaScript fails to truncate excessively long inputs (e.g., 256-character [SECRET_VALUE]), directly passing raw data to the backend. Actual security impact depends on backend processing capabilities, with high exploitation probability (due to ineffective frontend interception).", "code_snippet": "function paramCheck(input) {\n  // [HIDDEN]IP[HIDDEN]\n  if (!isValidIP(input)) return false;\n  return true; // [HIDDEN]/[HIDDEN]\n}", "link_identifiers": ["wanConnArg", "paramCheck", "addAttrsPPP", "addAttrsStaIpoa", "ACT_SET", "ACT_ADD"], "notes": "Attack Path: User submits malicious form → Triggers doSave() → Parameters directly reach backend CGI. Related knowledge base records missing frontend validation (3 existing records)."}
{"name": "[SECRET_VALUE]", "file_path": "web/index.htm", "location": "[HIDDEN]www/web/jquery.tpTable.js → www/virtualServer.htm → [HIDDEN]CGI[HIDDEN]", "risk_score": 9.0, "confidence": 8.25, "description": "Complete attack chain: Front-end XSS vulnerability (polluting table data) → Front-end CSRF vulnerability (un[SECRET_VALUE]orized triggering of AJAX requests) → Back-end /goform endpoint lacking operation permission verification. Trigger steps: 1) Attacker crafts API response containing XSS payload to pollute tpTable data 2) Uses polluted table to lure user clicks 3) Triggers delRule operation via CSRF to delete virtual server rules. Success probability: 8.5/10 (requires valid user session). Impact: Un[SECRET_VALUE]orized configuration tampering + session hijacking combined attack.", "link_identifiers": ["CSRF", "XSS", "[SECRET_VALUE]", "delRule", "ipAddr", "innerHTML", "$.ajax"], "notes": "[SECRET_VALUE]"}
{"name": "vuln-wan_service-0x407c34", "file_path": "usr/bin/cli", "location": "usr/bin/cli:0x407c34", "risk_score": 9.5, "confidence": 8.25, "description": "High-risk stack buffer overflow vulnerability: In the command handler function for 'wan set service', an attacker can pass excessively long base64-encoded data through the --safeservicename parameter. Trigger conditions: 1) Parameter value is copied via snprintf to a 96-byte stack buffer (sp+0x28); 2) cen_base64Decode is called for decoding; 3) Decoded results are written to an unchecked stack buffer (sp+0x330). The maximum 288-byte post-decoding data will inevitably overflow the target buffer. Combined with the program's lack of standard [SECRET_VALUE]entication mechanisms, attackers may achieve arbitrary code execution through un[SECRET_VALUE]orized CLI interfaces.", "code_snippet": "0x00407c1c: jal sym.imp.snprintf  ; [HIDDEN]\n0x00407c34: jal sym.imp.cen_base64Decode  ; [HIDDEN]", "link_identifiers": ["--safeservicename", "wan set service", "0x42ba74", "cen_base64Decode", "snprintf"], "notes": "Full attack chain dependency: 1) CLI network exposure surface verification 2) 0x42ba74 permission variable pollution possibility analysis. Follow-up recommendation: Analyze /etc/init.d/ service scripts to confirm CLI network interfaces"}
{"name": "[SECRET_VALUE]", "file_path": "usr/bin/cli", "location": "usr/bin/cli:0x4032b8", "risk_score": 4.0, "confidence": 6.0, "description": "[SECRET_VALUE]", "code_snippet": "strncpy(0x42be88, acStack_42c, 0xf);", "link_identifiers": ["[SECRET_VALUE]", "0x42be88", "strncpy"], "notes": "Verify the memory layout of 0x42be88. Low risk level, not a priority fix item."}
{"name": "[SECRET_VALUE]", "file_path": "usr/bin/cli", "location": "usr/bin/cli:0x4029d4", "risk_score": 8.0, "confidence": 6.5, "description": "Critical security mechanisms missing: 1) Import table analysis reveals absence of standard [SECRET_VALUE]entication functions (pam_start/getpwnam), relying on custom permission variable 0x42ba74; 2) Multiple write operations exist for this variable (e.g., 0x4029d4) without validating write value safety; 3) No mandatory permission checks observed before high-risk operations. Attackers could attempt to corrupt 0x42ba74 to bypass permission controls and directly trigger vulnerable functions.", "link_identifiers": ["0x42ba74", "0x4029d4", "rdp_action", "util_execSystem"], "notes": "configuration_load  \n\nFollow-up requirements: 1) Locate all write operation points for 0x42ba74 2) Analyze whether network/NVRAM inputs affect this variable"}
{"name": "[SECRET_VALUE]", "file_path": "usr/bin/smbd", "location": "smbd:0x42bbfc [sym.reply_readbmpx]", "risk_score": 9.5, "confidence": 9.25, "description": "[SECRET_VALUE]", "code_snippet": "uVar8 = CONCAT11(*(param_2+0x2c),*(param_2+0x2b));\niVar11 = param_3 + *(param_3+0x24)*2 + 0x27;\nwhile(...) {\n  iVar4 = sym.read_file(..., iVar11, ..., uVar7);\n  iVar2 += iVar4;\n  iVar11 += iVar4;\n}", "link_identifiers": ["sym.read_file", "memcpy", "param_5", "sym.reply_readbmpx", "obj.max_recv", "CONCAT11", "is_locked", "set_message", "smbd/reply.c"], "notes": "Related clues: 1) The knowledge base contains the [SECRET_VALUE]word 'memcpy' requiring inspection of other usage points 2) 'param_3' may involve cross-component data transfer. Exploit characteristics: smbd running as REDACTED_[SECRET_VALUE]_PLACEHOLDER + LAN exposure + triggerable without [SECRET_VALUE]entication."}
{"name": "[SECRET_VALUE]", "file_path": "usr/bin/smbd", "location": "[HIDDEN]smbd(sym.reply_readbmpx) + atmarpd(fcn.0040d17c)", "risk_score": 10.0, "confidence": 8.25, "description": "Discovery of Cross-Component High-Risk Vulnerability Chain: Attackers can combine the SMB protocol memory overflow vulnerability (smbd) with the atmarpd configuration pollution vulnerability to achieve dual memory corruption. Steps: 1) Trigger initial heap overflow via malicious SMB READ requests to corrupt critical data structures 2) Craft malformed ATM/ARP packets to control the param_3[0x34] field, precisely overwriting atmarpd's return address. Advantages: a) SMB provides initial attack surface without [SECRET_VALUE]entication b) atmarpd vulnerability offers stable RCE springboard c) Combined exploitation can bypass single-vulnerability mitigation mechanisms. Trigger condition: Continuous transmission of both types of malicious packets within a local network.", "link_identifiers": ["param_3", "memcpy", "0x430950", "sym.reply_readbmpx", "fcn.0040d17c"], "notes": "[SECRET_VALUE]"}
{"name": "[SECRET_VALUE]", "file_path": "[SECRET_VALUE]", "location": "dropbearmulti: svr_[SECRET_VALUE]_[SECRET_VALUE]", "risk_score": 8.0, "confidence": 6.5, "description": "[SECRET_VALUE]", "link_identifiers": ["[SECRET_VALUE]", "loginMode", "loginMode:%u", "svr_[SECRET_VALUE]_[SECRET_VALUE]"], "notes": "Verify NVRAM parameter access control. Related file: /etc/nvram.conf"}
{"name": "[SECRET_VALUE]", "file_path": "[SECRET_VALUE]", "location": "dropbearmulti: svr_[SECRET_VALUE]_[SECRET_VALUE]", "risk_score": 9.5, "confidence": 9.5, "description": "[SECRET_VALUE]", "code_snippet": "echo \"========> %s\" > /dev/ttyS0", "link_identifiers": ["/dev/ttyS0", "echo", "[SECRET_VALUE]", "svr_[SECRET_VALUE]_[SECRET_VALUE]"], "notes": "Check serial port access permissions. Related: UART interface physical attacks, log file storage locations"}
{"name": "[SECRET_VALUE]", "file_path": "etc/vsftpd.conf", "location": "etc/vsftpd.conf", "risk_score": 7.0, "confidence": 7.5, "description": "The FTP service configuration permits file uploads (write_enable=YES) but disables anonymous access (anonymous_enable=NO). Attackers could upload malicious files via FTP upon obtaining valid credentials. The passive mode port range 50000-60000 lacks IP access restrictions, potentially enabling port scanning or data transfers. The 300-second idle timeout allows attackers to maintain persistent connections.", "link_identifiers": ["write_enable", "anonymous_enable", "pasv_min_port", "pasv_max_port", "idle_session_timeout", "chroot_local_user"], "notes": "[SECRET_VALUE]"}
{"name": "[SECRET_VALUE]", "file_path": "etc/fstab", "location": "etc/fstab:0", "risk_score": 7.0, "confidence": 7.75, "description": "All mount points in the fstab configuration use the 'defaults' option, which implicitly enables potentially risky features such as exec (allowing binary execution), suid (allowing SUID to take effect), and dev (allowing device files). Specific risk conditions: if an attacker can write malicious files to directories like /tmp or /var (e.g., through arbitrary file upload vulnerabilities), they can directly execute them leveraging the exec permission. The ramfs filesystem loses data upon reboot, which does not affect persistence but allows runtime attacks.", "link_identifiers": ["defaults", "ramfs", "/tmp", "/var", "exec", "suid", "dev"], "notes": "Subsequent verification is required for the actual permission settings of the /tmp and /var directories (whether they are globally writable). It is recommended to analyze the permission initialization code for the relevant directories in the startup scripts."}
{"name": "[SECRET_VALUE]", "file_path": "usr/bin/cli", "location": "fcn.0040205c @ 0x40205c", "risk_score": 3.0, "confidence": 7.25, "description": "[SECRET_VALUE]", "code_snippet": "sym.imp.strcpy(acStack_221 + 1, param_1);", "link_identifiers": ["strcpy", "fcn.0040205c", "[SECRET_VALUE]", "acStack_221", "auStack_30", "STDIN"], "notes": "[SECRET_VALUE]"}
{"name": "[SECRET_VALUE]", "file_path": "usr/bin/cli", "location": "usr/bin/cli ([HIDDEN])", "risk_score": 7.5, "confidence": 7.75, "description": "[SECRET_VALUE]", "link_identifiers": ["REDACTED_[SECRET_VALUE]_PLACEHOLDER", "root[SECRET_VALUE]", "REDACTED_[SECRET_VALUE]_PLACEHOLDER", "USER_CFG", "X_TP_PreShared[SECRET_VALUE]", "rdp_getObjStruct"], "notes": "It is recommended to subsequently analyze NVRAM operations and configuration file permissions; verification is required to determine whether rdp_getObjStruct operates on NVRAM (refer to the knowledge base [SECRET_VALUE]word NVRAM_injection)."}
{"name": "[SECRET_VALUE]", "file_path": "usr/bin/cli", "location": "usr/bin/cli ([HIDDEN])", "risk_score": 0.0, "confidence": 2.5, "description": "The symbol for the util_execSystem function exists, but the call site has not been located, making it impossible to trace the parameter source. This function can directly execute system commands, and if the parameters are tainted (e.g., originating from HTTP requests), it may lead to command injection. Currently, there is no evidence indicating its invocation within 'usr/bin/cli' or the existence of a tainted path.", "link_identifiers": ["util_execSystem", "imp.util_execSystem"], "notes": "Further tracking of the function's usage is required in other components (such as the www directory); knowledge base correlation reveals: [SECRET_VALUE] (permission variable contamination may affect command execution)."}
{"name": "[SECRET_VALUE]", "file_path": "etc/vsftpd_[SECRET_VALUE]", "location": "etc/vsftpd_[SECRET_VALUE]", "risk_score": 9.2, "confidence": 8.4, "description": "[SECRET_VALUE]", "code_snippet": "REDACTED_[SECRET_VALUE]_PLACEHOLDER:1234:1:1;guest:guest:0:0;test:test:1:1;", "link_identifiers": ["vsftpd_[SECRET_VALUE]", "REDACTED_[SECRET_VALUE]_PLACEHOLDER", "test", "1:1", "FTP_credentials"], "notes": "Verification required: 1) Whether file permissions are globally readable 2) The specific meaning of the permission flag '1:1' in vsftpd 3) Correlation analysis of FTP service configuration (e.g., vsftpd.conf). Knowledge base correlation clues: a) Permission risks of the /var/vsftp directory b) Buffer overflow risks in FTP command processing flow c) Telnetd [SECRET_VALUE]entication vulnerabilities potentially forming multi-service intrusion chains"}
{"name": "[SECRET_VALUE]", "file_path": "[SECRET_VALUE]", "location": "[SECRET_VALUE]", "risk_score": 9.0, "confidence": 9.0, "description": "[SECRET_VALUE]", "code_snippet": "REDACTED_PASSWORD_PLACEHOLDER:$1$$iC.[SECRET_VALUE]/:0:0:REDACTED_PASSWORD_PLACEHOLDER:/:/bin/sh", "link_identifiers": ["REDACTED_[SECRET_VALUE]_PLACEHOLDER", "UID=0", "/bin/sh", "$1$$iC.[SECRET_VALUE]/"], "notes": "configuration_load"}
{"name": "[SECRET_VALUE]", "file_path": "[SECRET_VALUE]", "location": "[SECRET_VALUE]", "risk_score": 7.5, "confidence": 7.0, "description": "[SECRET_VALUE]", "code_snippet": "nobody:*:0:0:nobody:/:/bin/sh", "link_identifiers": ["nobody", "UID=0", "*", "/bin/sh"], "notes": "Audit services/processes that invoke the nobody account; related [SECRET_VALUE]words already exist in the knowledge base: nobody, UID=0, *, /bin/sh"}
{"name": "[SECRET_VALUE]", "file_path": "[SECRET_VALUE]", "location": "[SECRET_VALUE]", "risk_score": 6.5, "confidence": 7.0, "description": "GID=0 group permission propagation: Both REDACTED_[SECRET_VALUE]_PLACEHOLDER and nobody belong to the REDACTED_[SECRET_VALUE]_PLACEHOLDER group (GID=0). When processes inherit group permissions, attackers may gain un[SECRET_VALUE]orized access to REDACTED_[SECRET_VALUE]_PLACEHOLDER group resources. Trigger condition: Attacker controls processes under REDACTED_[SECRET_VALUE]_PLACEHOLDER/nobody accounts. Constraint: Requires specific file permissions to be effective. Actual impact: Expands the attack surface to facilitate privilege escalation.", "link_identifiers": ["GID=0", "REDACTED_[SECRET_VALUE]_PLACEHOLDER", "nobody"], "notes": "Analyze system file permission settings; associated [SECRET_VALUE]words already exist in the knowledge base: REDACTED_[SECRET_VALUE]_PLACEHOLDER, nobody"}
{"name": "[SECRET_VALUE]", "file_path": "[SECRET_VALUE]", "location": "[SECRET_VALUE]", "risk_score": 10.0, "confidence": 10.0, "description": "[SECRET_VALUE]", "link_identifiers": ["telnetd", "[SECRET_VALUE]", "UID=0", "/bin/sh", "rcS", "23/tcp"], "notes": "[SECRET_VALUE]"}
{"name": "[SECRET_VALUE]", "file_path": "[SECRET_VALUE]", "location": "[SECRET_VALUE]", "risk_score": 8.5, "confidence": 6.5, "description": "[SECRET_VALUE]", "link_identifiers": ["REDACTED_[SECRET_VALUE]_PLACEHOLDER", "vsftpd_[SECRET_VALUE]", "[SECRET_VALUE]", "crypt()", "$1$", "FTP_credentials"], "notes": "[SECRET_VALUE]"}
{"name": "[SECRET_VALUE]", "file_path": "etc/group", "location": "[SECRET_VALUE]", "risk_score": 8.5, "confidence": 8.0, "description": "[SECRET_VALUE]", "code_snippet": "[SECRET_VALUE]", "link_identifiers": ["[SECRET_VALUE]", "[SECRET_VALUE]", "symbolic link", "lrwxrwxrwx", "getpwnam", "getpwuid"], "notes": "[SECRET_VALUE]"}
{"name": "stack_overflow-SITE_CHMOD", "file_path": "usr/bin/vsftpd", "location": "vsftpd:0x41163c", "risk_score": 9.5, "confidence": 9.0, "description": "[SECRET_VALUE]", "code_snippet": "strcpy(acStack_118, uVar1); // uVar1=user_input", "link_identifiers": ["SITE_CHMOD", "acStack_118", "param_2", "strcpy", "FTP_credentials"]}
{"name": "bss_overflow-RNFR_PASV", "file_path": "usr/bin/vsftpd", "location": "vsftpd:0x413c00", "risk_score": 9.5, "confidence": 8.5, "description": "[SECRET_VALUE]", "code_snippet": "memcpy(iVar6+iVar3, param_1, iVar2-param_1); // no length check", "link_identifiers": ["RNFR", "PASV", "param_1", "memcpy", "0x42e8e0", ".bss"]}
{"name": "stack_overflow-USER_sprintf", "file_path": "usr/bin/vsftpd", "location": "vsftpd:0x40eef8", "risk_score": 9.5, "confidence": 8.5, "description": "[SECRET_VALUE]", "code_snippet": "sprintf(puStack_2c, \"/var/vsftp/var/%s\", param_5);", "link_identifiers": ["USER", "param_5", "sprintf", "puStack_2c", "/var/vsftp/var/%s"]}
{"name": "[SECRET_VALUE]", "file_path": "usr/bin/set[SECRET_VALUE]", "location": "set[SECRET_VALUE]:0x40266c", "risk_score": 9.0, "confidence": 8.0, "description": "Remote Code Execution Vulnerability: Sending a packet larger than 32,760 bytes via a PF_[SECRET_VALUE] socket causes the recv function to write data into a fixed stack buffer (auStack_8028), resulting in a stack overflow. Combined with the absence of stack protection mechanisms, this allows overwriting the return address to execute arbitrary code. Trigger Condition: The attacker must have access to the PF_[SECRET_VALUE] socket (typically requiring REDACTED_[SECRET_VALUE]_PLACEHOLDER or special group privileges).", "code_snippet": "iVar1 = sym.imp.recv(*0x41cb8c, auStack_8028, 0x8000, 0);", "link_identifiers": ["recv", "auStack_8028", "PF_[SECRET_VALUE]", "0x8000", "set[SECRET_VALUE]", "[SECRET_VALUE]"]}
{"name": "[SECRET_VALUE]", "file_path": "usr/bin/set[SECRET_VALUE]", "location": "set[SECRET_VALUE]:0x402998", "risk_score": 8.0, "confidence": 8.5, "description": "Information Leak/Denial of Service Vulnerability: When recv returns 0 (connection closed), the program dereferences an uninitialized pointer (puVar10). An attacker can trigger a crash or stack data leak by closing the connection. Trigger condition: Requires PF_[SECRET_VALUE] socket access permission; no special packet construction is needed.", "code_snippet": "if (*(puVar10 + 4) << 3 != iVar5) break;", "link_identifiers": ["recv", "puVar10", "0x8000", "set[SECRET_VALUE]", "fcn.004027c4"]}
{"name": "[SECRET_VALUE]", "file_path": "usr/bin/set[SECRET_VALUE]", "location": "set[SECRET_VALUE]:0x402ca8", "risk_score": 9.5, "confidence": 8.75, "description": "Chain stack overflow vulnerability: 1) Fixed reception of 16 bytes via recv into a 4-byte buffer (acStack_8028), causing a 12-byte overflow. 2) Overflow corrupts the uStack_8024 variable. 3) A secondary recv uses uStack_8024<<3 as the length parameter, resulting in arbitrary-length overflow. Full control of the return address is achieved. Trigger condition: Sending a normal PF_[SECRET_VALUE] packet is sufficient.", "code_snippet": "recv(*0x41cb8c,acStack_8028,0x10,2);\nrecv(*0x41cb8c,acStack_8028,uStack_8024<<3,0);", "link_identifiers": ["recv", "acStack_8028", "uStack_8024", "set[SECRET_VALUE]", "fcn.00402bf4", "kdebug_sadb"]}
{"name": "[SECRET_VALUE]", "file_path": "usr/bin/set[SECRET_VALUE]", "location": "set[SECRET_VALUE]:multiple", "risk_score": 7.5, "confidence": 7.9, "description": "[SECRET_VALUE]", "link_identifiers": ["__stack_chk_fail", "stack_canary", "return_address_offset", "set[SECRET_VALUE]", "[SECRET_VALUE]", "fcn.004027c4", "fcn.00402bf4"]}
{"name": "[SECRET_VALUE]", "file_path": "usr/bin/set[SECRET_VALUE]", "location": "set[SECRET_VALUE]:0x405528", "risk_score": 7.5, "confidence": 7.5, "description": "Local privilege escalation attack chain: Submitting a malicious IPSec policy via web interface/SSH → set[SECRET_VALUE] parsing invokes ipsec_set_policy (s1 parameter). Vulnerabilities in libipsec.so.0 (e.g., CVE-2007-1841 buffer overflow) can be triggered. Parameter length is not validated (s1 register directly sourced from argv), with policy content fully user-controllable. Trigger condition: Attacker submits malicious policy configuration after obtaining web/SSH access.", "code_snippet": "lw a0, 4(s1)\nlw a1, (s1)\nj sym.imp.ipsec_set_policy", "link_identifiers": ["ipsec_set_policy", "s1", "argv", "policy", "set[SECRET_VALUE] -c", "libipsec.so.0", "set[SECRET_VALUE]"], "notes": "Verify the implementation of libipsec.so.0. The most feasible attack path: combine web vulnerabilities to gain privileges, then exploit this chain for privilege escalation."}
{"name": "[SECRET_VALUE]", "file_path": "usr/bin/httpd", "location": "httpd:0x4067ec (fcn.004038ec)", "risk_score": 9.0, "confidence": 8.75, "description": "The /cgi/confup endpoint contains a critical stack buffer overflow vulnerability: function fcn.004038ec uses strncpy to copy a fixed 256 bytes of user input to a stack buffer. When the HTTP POST request parameter exceeds 256 bytes, it overwrites the stack frame and allows control flow hijacking. Trigger condition: sending an oversized parameter to the /cgi/confup endpoint.", "code_snippet": "strncpy(puVar4, pcVar3, 0x100) // [HIDDEN]", "link_identifiers": ["fcn.004038ec", "httpd_stack_buffer", "strncpy_fixed_copy", "0x100", "HTTP_request_structure"], "notes": "Associated knowledge base [SECRET_VALUE]words: fcn.004038ec, strncpy. Verification required: 1) Actual buffer size 2) RA overwrite offset 3) Other endpoints calling this function"}
{"name": "[SECRET_VALUE]", "file_path": "usr/bin/httpd", "location": "httpd:0x4039ac (fcn.004038ec+0xdc)", "risk_score": 8.5, "confidence": 8.25, "description": "The /cgi/softup endpoint contains a nested overflow chain: fcn.004038ec calls fcn.00404bd0 to read up to 0x400 bytes of data from HTTP headers into a stack buffer (approximately 0x100 bytes). Stack frame overwriting occurs when fields like Content-Disposition exceed length limits. Trigger condition: Craft a special multipart request containing excessively long header fields.", "code_snippet": "jal fcn.00404bd4\nmove a2, s4 // s4[HIDDEN]", "link_identifiers": ["fcn.004038ec", "fcn.00404bd0", "stack_buffer_overflow", "Content-Disposition", "0x400", "multipart_request"], "notes": "[SECRET_VALUE]"}
{"name": "[SECRET_VALUE]", "file_path": "etc/inittab", "location": "etc/init.d/rcS:15 [[HIDDEN]] 0x[[HIDDEN]]", "risk_score": 9.5, "confidence": 9.25, "description": "[SECRET_VALUE]", "code_snippet": "[[HIDDEN]rcS[HIDDEN]]", "link_identifiers": ["[SECRET_VALUE]", "rcS", "::sysinit", "cp -p", "REDACTED_[SECRET_VALUE]_PLACEHOLDER", "UID=0", "Telnet"], "notes": "[SECRET_VALUE]"}
{"name": "[SECRET_VALUE]", "file_path": "etc/hotplug.d/net/10-net", "location": "10-net:12,20,39", "risk_score": 8.0, "confidence": 7.25, "description": "[SECRET_VALUE]", "code_snippet": "[SECRET_VALUE]", "link_identifiers": ["INTERFACE", "setup_interface", "add_vlan", "config_get", "ifname", "device", "auto"], "notes": "The risk level is based on: 1) $INTERFACE directly originating from external events, 2) lack of input sanitization, and 3) privileged function call chains. The /lib/network implementation needs to be obtained to confirm final exploitability (current analysis limitation: unable to analyze the setup_interface implementation)."}
{"name": "command_execution-insmod_ipv6", "file_path": "etc/hotplug.d/net/10-net", "location": "10-net:6-8", "risk_score": 4.0, "confidence": 3.5, "description": "The command 'grep -q '^ipv6' /etc/modules.d/* && insmod ipv6' dynamically loads kernel modules (code location: 10-net:6-8). While the permissions of the /etc/modules.d directory cannot be verified, this mechanism presents a theoretical risk: if an attacker can modify the modules.d files (e.g., through other vulnerabilities), it could lead to the loading of malicious modules. Trigger condition: the system has not loaded the ipv6 module when a network event occurs.", "code_snippet": "grep -q '^ipv6' /etc/modules.d/* && insmod ipv6", "link_identifiers": ["insmod", "/etc/modules.d", "ipv6", "grep"], "notes": "The actual risk depends on the directory protection mechanism (current analysis limitation: unable to verify /etc/modules.d directory permissions). Recommended follow-up checks: 1) Write permissions for /etc/modules.d 2) Firmware boot loading process"}
{"name": "[SECRET_VALUE]", "file_path": "usr/bin/httpd", "location": "[SECRET_VALUE]", "risk_score": 2.5, "confidence": 6.0, "description": "[SECRET_VALUE]", "code_snippet": "[SECRET_VALUE]", "link_identifiers": ["fcn.004038ec", "fcn.004049e0", "CGI buffer overflow", "strlen", "src/http_io.c", "boundary_check", "sp+0x21c", "0xfff", "httpd_stack_buffer"], "notes": "Associated knowledge base findings: [SECRET_VALUE] (no boundary check, high risk) and [SECRET_VALUE] (nested overflow chain). Dynamic verification required: 1) Whether excessively long filename triggers process termination 2) Confirm if all 13 call points contain fcn.004049e0 check."}
{"name": "[SECRET_VALUE]", "file_path": "etc/hotplug.d/net/10-net", "location": "etc/hotplug.d/net/10-net:13-15,18,27,37,54", "risk_score": 7.5, "confidence": 8.5, "description": "[SECRET_VALUE]", "code_snippet": "[SECRET_VALUE]", "link_identifiers": ["INTERFACE", "find_config", "setup_interface", "add_vlan", "dev"], "notes": "Verify whether the setup_interface/add_vlan implementation in /lib/network securely handles the $INTERFACE. Related discovery: [SECRET_VALUE]"}
{"name": "[SECRET_VALUE]", "file_path": "etc/hotplug.d/net/10-net", "location": "etc/hotplug.d/net/10-net:62-72", "risk_score": 6.0, "confidence": 8.0, "description": "The $ACTION variable directly controls the execution branch (lines 62-72): 'add|register' triggers the addif process, while 'remove|unregister' triggers the delif process. Trigger condition: An attacker forges a hotplug event and manipulates the ACTION value (requires exploitation of the system's hotplug mechanism). Constraint: Only predefined ACTION values are processed. Security impact: May lead to un[SECRET_VALUE]orized addition/removal of network interfaces, resulting in denial of service or network configuration tampering.", "code_snippet": "case \"$ACTION\" in\n    add|register)\n        addif\n    ;;\n    remove|unregister)\n        delif\n    ;;\nesac", "link_identifiers": ["ACTION", "addif", "delif"], "notes": "Analyze the actual controllability of the system's hotplug event triggering mechanism"}
{"name": "[SECRET_VALUE]", "file_path": "etc/hotplug.d/net/10-net", "location": "etc/hotplug.d/net/10-net:58", "risk_score": 5.5, "confidence": 6.0, "description": "The uci_set_state operation (line 58) is executed within the loop traversing devices associated with $INTERFACE, potentially being indirectly affected by contaminated data. Trigger condition: when $INTERFACE is controlled and has associated devices. Constraint: depends on the validity of the $ifs variable. Security impact: may tamper with network device states, leading to configuration inconsistencies or unknown side effects.", "code_snippet": "uci_set_state \"network\" \"$ifc\" device \"$ifs\"", "link_identifiers": ["uci_set_state", "network", "device"], "notes": "Verify whether the source of the $ifs variable is affected by $INTERFACE. Associated attack chain: INTERFACE→uci_set_state"}
{"name": "[SECRET_VALUE]", "file_path": "etc/init.d/rcS", "location": "etc/init.d/rcS:12", "risk_score": 8.5, "confidence": 9.5, "description": "Creating globally writable directories (0777) including sensitive paths such as /var/tmp/dropbear. Trigger condition: Executes during system startup. Constraint: Directory permissions remain persistent. Security impact: Attackers can implant malicious files or tamper with legitimate files (e.g., SSH [SECRET_VALUE]s), leading to privilege escalation, persistent backdoors, or service interception.", "code_snippet": "/bin/mkdir -m 0777 -p /var/tmp/dropbear", "link_identifiers": ["/bin/mkdir", "0777", "/var/tmp/dropbear"], "notes": "Verify the actual purpose of the directory (e.g., whether it is used by dropbear)"}
{"name": "[SECRET_VALUE]", "file_path": "etc/init.d/rcS", "location": "etc/init.d/rcS:85", "risk_score": 9.0, "confidence": 9.0, "description": "Start the service using the relative path 'telnetd'. Trigger condition: executed during system startup. Constraint: PATH is not explicitly set. Security impact: PATH pollution may lead to malicious binary hijacking, allowing attackers to control the telnet service through environment variable injection or by planting files in writable directories.", "code_snippet": "telnetd", "link_identifiers": ["telnetd", "PATH"], "notes": "System-level PATH default value validation for actual risks"}
{"name": "[SECRET_VALUE]", "file_path": "etc/init.d/rcS", "location": "etc/init.d/rcS:91", "risk_score": 8.5, "confidence": 9.25, "description": "Starting an unknown service via 'cos &'. Trigger condition: Executes upon system startup. Security impact: 1) PATH pollution leading to binary hijacking 2) Direct exploitation possible if 'cos' contains vulnerabilities. Exploitation method: Replace with malicious 'cos' binary or inject parameters.", "code_snippet": "cos &", "link_identifiers": ["cos"], "notes": "Reverse analyze the COS binary (recommended as a follow-up task)"}
{"name": "[SECRET_VALUE]", "file_path": "etc/hotplug.d/iface/10-routes", "location": "etc/hotplug.d/iface/10-routes: [HIDDEN]", "risk_score": 8.5, "confidence": 7.0, "description": "During interface startup (ifup), the script uses unvalidated $target/$gateway variables to construct route commands (/sbin/route) without filtering or escaping the variable contents. If an attacker contaminates these variables (e.g., through malicious configuration injection), they could execute arbitrary commands via command concatenation. Trigger conditions: 1) Controlling the input source of $target/$gateway; 2) Triggering a network interface hotplug event.", "code_snippet": "/sbin/route add $dest ${gateway:+gw \"$gateway\"} \\\n\t\t${dev:+dev \"$dev\"} ${metric:+ metric \"$metric\"} \\\n\t\t${mtu:+mss \"$mtu\"}", "link_identifiers": ["$target", "$gateway", "/sbin/route", "add_route", "add_route6", "dest", "metric", "mtu"], "notes": "Requires follow-up on the pollution source of $target/$gateway (e.g., UCI configuration/NVRAM). Actual risk depends on input control difficulty."}
{"name": "[SECRET_VALUE]", "file_path": "etc/hotplug.d/iface/10-routes", "location": "etc/hotplug.d/iface/10-routes: [HIDDEN]", "risk_score": 7.0, "confidence": 5.5, "description": "The script directly uses the $DEVICE variable to execute the ifconfig command and only checks the existence of /proc/net/dev via grep, without validating the format/content of the device name. An attacker can forge a hotplug event and inject a malicious $DEVICE value (containing spaces or command separators) to trigger command injection. The boundary check only verifies the existence of the device name and fails to handle special characters.", "code_snippet": "grep -qs \"^ *$DEVICE:\" /proc/net/dev || exit 0\nifconfig \"$DEVICE\" del \"$ip6addr\"", "link_identifiers": ["$DEVICE", "grep -qs \"^ *$DEVICE:\" /proc/net/dev", "ifconfig \"$DEVICE\"", "$INTERFACE"], "notes": "The controllability of $DEVICE needs to be analyzed in conjunction with the kernel hotplug mechanism. The current verification method is vulnerable to bypassing through spoofed device names."}
{"name": "[SECRET_VALUE]", "file_path": "etc/hotplug.d/ieee1394/10-ieee1394", "location": "etc/hotplug.d/ieee1394/10-ieee1394", "risk_score": 0.0, "confidence": 6.0, "description": "The IEEE 1394 hot-plug script only responds to device plug/unplug events (via the $ACTION environment variable) but does not execute any actual commands or operations (contains only comments). Trigger condition: Automatically executes when an IEEE 1394 device is inserted (ACTION=add) or removed (ACTION=remove). Security impact: No actual risk exists since the script does not process input data, execute commands, or interact with the system. External $ACTION values cannot trigger any dangerous operations.", "code_snippet": "case \"$ACTION\" in\n\tadd)\n\t\t# update LEDs\n\t\t;;\n\tremove)\n\t\t# update LEDs\n\t\t;;\nesac", "link_identifiers": ["ACTION", "add", "remove", "hotplug.d", "ieee1394"], "notes": "[SECRET_VALUE]"}
{"name": "[SECRET_VALUE]", "file_path": "etc/hotplug.d/iface/00-netstate", "location": "etc/hotplug.d/iface/00-netstate:1-6", "risk_score": 8.0, "confidence": 7.25, "description": "A high-risk operation chain was identified in the '00-netstate' script: 1) Triggered by network interface activation events ($ACTION='ifup'); 2) Directly executes the uci_toggle_state command using unverified $INTERFACE and $DEVICE environment variables; 3) $DEVICE only checks for non-empty values without content filtering, while $INTERFACE undergoes no validation whatsoever; 4) Attackers could inject malicious parameters (such as command separators or path traversal characters) by forging hotplug events. The actual security impact depends on the implementation of uci_toggle_state, potentially leading to command injection or state tampering.", "code_snippet": "[ ifup = \"$ACTION\" ] && {\n\tuci_toggle_state network \"$INTERFACE\" up 1\n\t...\n\t[ -n \"$DEVICE\" ] && uci_toggle_state network \"$INTERFACE\" ifname \"$DEVICE\"\n}", "link_identifiers": ["uci_toggle_state", "INTERFACE", "DEVICE", "ACTION", "ifup", "hotplug.d"], "notes": "Limited by the analysis scope, the implementation of uci_toggle_state cannot be verified. Subsequent recommendations: 1) Switch the analysis focus to the /sbin directory to verify command security; 2) Check whether the hotplug event triggering mechanism allows external injection of environment variables; 3) Analyze the network interface configuration process to confirm the attack surface."}
{"name": "[SECRET_VALUE]", "file_path": "usr/bin/cwmp", "location": "fcn.00404b20 (setParamVal) → fcn.0040537c (putParamSetQ)", "risk_score": 9.0, "confidence": 8.25, "description": "[SECRET_VALUE]", "link_identifiers": ["msg_recv", "[SECRET_VALUE]", "setParamVal", "putParamSetQ", "rdp_setObj", "[SECRET_VALUE]", "g_oidStringTable"], "notes": "Verification required: 1) Implementation of rdp_setObj in /lib/libcmm.so 2) Whether the storage file is called by system() or popen(). Related suggestion: Check the scripts in /sbin/init or /etc/init.d that call the storage file."}
{"name": "[SECRET_VALUE]", "file_path": "usr/bin/cwmp", "location": "[SECRET_VALUE]", "risk_score": 8.5, "confidence": 8.5, "description": "HTTP processing triple flaws: 1) SOAPAction header uses hardcoded address 0x414790 (all-zero content), resulting in uninitialized header value 2) ACS URL path lacks path normalization, potentially causing path traversal 3) sprintf constructs response headers without buffer boundary validation (auStack_830 is only 1024 bytes). Attackers can trigger stack overflow (0x00409f74) via excessively long cnonce parameter. Trigger conditions: sending malicious HTTP requests manipulating SOAPAction/URL path or containing >500-byte cnonce parameter.", "link_identifiers": ["cwmp_processConnReq", "SOAPAction", "http_request_buffer", "sprintf", "auStack_830", "cnonce", "[SECRET_VALUE]entication-Info"], "notes": "[SECRET_VALUE]"}
{"name": "network_input-http-info_leak", "file_path": "usr/bin/cwmp", "location": "HTTP[HIDDEN]", "risk_score": 6.0, "confidence": 7.25, "description": "[SECRET_VALUE]entication mechanism information leakage: HTTP responses contain detailed error messages (such as 'Digest [SECRET_VALUE]enticate failed') and a fixed Server header ('tr069 http server'). Attackers can exploit this to: 1) Infer system status through error messages, and 2) Precisely identify device models for targeted attacks. Trigger condition: Sending invalid [SECRET_VALUE]entication requests.", "link_identifiers": ["verifyConnReq", "[SECRET_VALUE]orization", "tr069 http server", "HTTP/1.1"], "notes": "[SECRET_VALUE]"}
{"name": "[SECRET_VALUE]", "file_path": "bin/busybox", "location": "[SECRET_VALUE]", "risk_score": 8.0, "confidence": 5.0, "description": "[SECRET_VALUE]", "code_snippet": "if (param_1 == 0) {\n    pcVar5 = \"aa\";\n}\niVar3 = sym.imp.strcmp(uVar2,pcVar5);", "link_identifiers": ["[SECRET_VALUE]entication_func", "strcmp", "hardcoded_[SECRET_VALUE]", "busybox_login"], "notes": "Dynamic verification of trigger path required: 1) Check whether telnetd/httpd calls this function 2) Trace the source of tainted param_1"}
{"name": "timing-attack-busybox-[SECRET_VALUE]", "file_path": "bin/busybox", "location": "[SECRET_VALUE]", "risk_score": 6.5, "confidence": 8.5, "description": "[SECRET_VALUE]", "link_identifiers": ["strcmp", "[SECRET_VALUE]entication_func", "side_channel", "busybox_login"], "notes": "The impact scope depends on the network service configuration. Recommendations: 1) Check the status of the telnetd service 2) Replace it with a constant-time comparison algorithm."}
{"name": "env_get-hotplug-env_injection", "file_path": "sbin/hotplug", "location": "hotplug (binary)", "risk_score": 8.0, "confidence": 8.5, "description": "The environment variables $ACTION/$DEVPATH/$INTERFACE are directly used for control flow decisions and path construction without validation. Attackers can exploit this by forging hotplug events to inject malicious environment variables, triggering path traversal risks (e.g., '../../' injection). Specific trigger conditions: these variables are automatically set when the kernel generates hotplug events, requiring attackers to simulate device plug/unplug events. The lack of boundary checks is manifested in direct concatenation of variable values during path construction, without path normalization or character filtering.", "code_snippet": "getenv(\"ACTION\"); getenv(\"DEVPATH\"); getenv(\"INTERFACE\");", "link_identifiers": ["getenv", "ACTION", "DEVPATH", "INTERFACE", "hotplug_leds", "hotplug_storage_mount"], "notes": "Decompilation is required to verify the filtering logic of variable usage points, focusing on the path construction of /system/class/scsi_host."}
{"name": "[SECRET_VALUE]", "file_path": "sbin/hotplug", "location": "hotplug (binary)", "risk_score": 9.0, "confidence": 8.5, "description": "The system() call directly concatenates environment variables using formatted strings to execute commands, posing a command injection risk. High-risk operations include: 1) File operations (cp/rm) 2) Serial communication (>/dev/ttyS0) 3) LED hardware control (>/proc/tplink/led_usb). Trigger condition: When variables such as $DEVPATH contain special characters (e.g., ;, $, `), command boundaries can be bypassed to execute additional instructions. Exploit chain: Contaminate variables → Inject rm/cp commands → Delete system files or implant backdoors.", "code_snippet": "system(\"cp -pR /sys/class/scsi_host/host%d/device /var/run/usb_device_host%d\");", "link_identifiers": ["system", "cp -pR", "rm -rf", "echo > /dev/ttyS0", "echo > /proc/tplink/led_usb"], "notes": "/proc/tplink/led_usb indicates direct hardware control capability, requiring verification of whether variables are used as printf format parameters"}
{"name": "[SECRET_VALUE]", "file_path": "sbin/hotplug", "location": "hotplug (binary)", "risk_score": 6.5, "confidence": 7.75, "description": "[SECRET_VALUE]", "code_snippet": "fopen(\"/var/run/storage_led_status\", \"r+\");", "link_identifiers": ["/var/run/storage_led_status", "/var/run/hotplug_storage_mount.pid", "fopen", "fprintf"], "notes": "Verify whether the file opening mode includes path truncation protection. It is recommended to examine the context of the fopen call."}
{"name": "[SECRET_VALUE]", "file_path": "sbin/hotplug", "location": "[SECRET_VALUE]", "risk_score": 9.5, "confidence": 8.75, "description": "[SECRET_VALUE]", "code_snippet": "sym.imp.sscanf(*&iStackX_0,\"/class/scsi_host/host%d\",auStack_b0);\nsym.imp.snprintf(auStack_1b0,0x100,\"rm -rf /var/run/usb_device_host%d\",auStack_b0[0]);\nsym.imp.system(auStack_1b0);", "link_identifiers": ["[SECRET_VALUE]", "sscanf", "system", "snprintf", "auStack_b0", "/class/scsi_host", "/sys/class/scsi_host"], "notes": "Practical utilization requires bypassing USB device naming restrictions (e.g., kernel filtering). Related knowledge base [SECRET_VALUE]words: system (37 times), rm -rf (12 times), /sys/class/scsi_host (existing)."}
{"name": "[SECRET_VALUE]", "file_path": "sbin/usbp", "location": "usbp:0x400a40 (system), 0x400aac (putenv)", "risk_score": 0.5, "confidence": 4.55, "description": "The command_execution detected in usbp involves a system('echo...') call with hardcoded parameters, triggered only when access to /proc/diskstats fails. No evidence of externally controllable input was found. Environment variable setting (putenv) uses a fixed value '/var/tmp' with no subsequent usage traces. No buffer operations (strcpy/sprintf) or command injection vulnerabilities were identified. The core functionality rdp_updateUsbInfo resides in the external library librdp.so, which falls outside the current analysis scope.", "link_identifiers": ["system", "putenv", "TMPDIR", "/proc/diskstats", "rdp_updateUsbInfo", "librdp.so"], "notes": "[SECRET_VALUE]"}
{"name": "[SECRET_VALUE]", "file_path": "sbin/hotplug", "location": "[SECRET_VALUE]", "risk_score": 8.0, "confidence": 7.25, "description": "When a hotplug event is triggered, /sbin/hotplug receives external inputs through environment variables ACTION, DEVPATH, and INTERFACE, which are directly used to construct system() command parameters (such as 'rm -rf', 'cp -pR') without input filtering or boundary checks. An attacker can trigger a hotplug event via a malicious device and inject environment variables (e.g., setting ACTION='; rm -rf /;'), leading to arbitrary command execution. The full attack chain: 1) Connect a malicious USB device 2) The kernel triggers a hotplug event 3) Polluted environment variables are passed to hotplug 4) Injected commands are executed via system().", "code_snippet": "echo %d %d > %s  # [HIDDEN]0x00003ecc", "link_identifiers": ["ACTION", "DEVPATH", "INTERFACE", "system", "hotplug_leds", "hotplug_storage_mount", "/proc/tplink/led_usb", "/var/run/storage_led_status"], "notes": "Verification required for the actual controllability of the hotplug event triggering mechanism. Related clues: 1) The knowledge base contains the same [SECRET_VALUE]word '/var/run/storage_led_status' 2) 'hotplug_leds' may be associated with LED control components 3) Need to check whether it forms a combined vulnerability chain with the storage mounting component (hotplug_storage_mount)"}
{"name": "[SECRET_VALUE]", "file_path": "sbin/hotplug", "location": "hotplug (multi-location)", "risk_score": 9.0, "confidence": 8.25, "description": "File race vulnerability combines with command injection vulnerability to form an attack chain: 1) Attacker contaminates $DEVPATH via malicious device to achieve path traversal (exploiting file_race vulnerability), modifying the /var/run/storage_led_status state file 2) The tampered device state triggers abnormal hotplug event 3) Polluted ACTION environment variable injects malicious commands for execution via system(). Complete implementation: A three-stage attack achieved through single device insertion → file overwrite → state corruption → command execution.", "code_snippet": "[HIDDEN]1: fopen(\"/var/run/storage_led_status\", \"r+\");\n[HIDDEN]2: system(\"echo %d %d > %s\");", "link_identifiers": ["/var/run/storage_led_status", "ACTION", "DEVPATH", "system", "fopen", "hotplug_storage_mount"], "notes": "[SECRET_VALUE]"}
