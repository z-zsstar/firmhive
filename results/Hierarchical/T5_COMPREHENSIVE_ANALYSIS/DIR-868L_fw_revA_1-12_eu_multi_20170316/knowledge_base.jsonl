{"name": "network_input-web-tools_system_bypass", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 6.0, "confidence": 8.25, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["dlcfg.cgi", "seama.cgi", "tools_fw_rlt.php", "REPORT_METHOD", "sealpac", "PAGE.OnClickDownload", "PAGE.OnClickUpload"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "network_input-webaccess_login-credential_hash", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 7.5, "confidence": 8.5, "description": "The static login page transmits user credentials (REDACTED_PASSWORD_REDACTED_PASSWORD_PLACEHOLDER_PASSWORD_PLACEHOLDER) hashed via HMAC-MD5 to /auth.cgi through XMLRequest. No direct command execution or file operations were detected, but two critical risk propagation paths exist: 1) User input is transmitted after hashing without frontend filtering, relying solely on backend auth.cgi for complete validation 2) The redirect parameter in redirect_category_view.php lacks page-level validation. Trigger conditions require attackers to intercept/modify plaintext before hashing or craft malicious redirect URLs.", "link_identifiers": ["auth.cgi", "REDACTED_PASSWORD_PLACEHOLDER", "REDACTED_PASSWORD_PLACEHOLDER", "XMLRequest", "exec_auth_cgi", "redirect_category_view.php", "send_request"], "notes": "Immediate analysis required for /webaccess/cgi-bin/auth.cgi: 1) Verify boundary checks after hash decryption 2) Trace SQL query construction process 3) Validate parameter handling in category_view.php redirects. Potential attack chain: unfiltered input → auth.cgi authentication bypass → redirect attack via jump vulnerability."}
{"name": "network_input-explorer-ajax_mkdir_input", "file_path": "REDACTED_SENSITIVE_DATA", "location": "explorer.php: JavaScriptHIDDENCreateDir()", "risk_score": 7.5, "confidence": 8.5, "description": "The user input exists in the 'new_dir_input' field and flows to the Ajax request parameters (action=mkdir&where=) via the CreateDir() function. Trigger condition: An attacker bypasses client-side validation and directly constructs a malicious request. Constraints: The client-side only checks for illegal characters (/\\:*?\"<>|) and leading spaces, with no length restrictions or server-side validation. Security impact: Path traversal may enable arbitrary directory creation, potentially leading to filesystem disruption or RCE preconditions if backend processing is inadequate.", "code_snippet": "str+=\"action=mkdir&path=\"+REDACTED_SECRET_KEY_PLACEHOLDER(path)+\"&where=\"+REDACTED_SECRET_KEY_PLACEHOLDER(REDACTED_SECRET_KEY_PLACEHOLDER);", "link_identifiers": ["new_dir_input", "CreateDir", "action=mkdir", "where=[HIDDEN]", "REDACTED_SECRET_KEY_PLACEHOLDER"], "notes": "Client-side validation can be bypassed by tools such as Burp Suite; it is necessary to conduct correlation analysis on htdocs/web/portal/__ajax_explorer.sgi's handling of the 'where' parameter."}
{"name": "network_input-explorer-client_validation_flaws", "file_path": "REDACTED_SENSITIVE_DATA", "location": "explorer.php: JavaScriptHIDDENCreateDir()", "risk_score": 6.5, "confidence": 8.75, "description": "Client-side validation has three flaws: 1) The regular expression /[\\\\/:*?\"<>|]/ fails to filter Unicode or URL-encoded characters; 2) The leading space check can be bypassed using %20; 3) No path normalization or ../ detection. Trigger condition: Directly sending malicious Ajax requests. Security impact: Potential directory traversal attacks (e.g., where=../../../etc).", "code_snippet": "var re=/[\\\\/:*?\"<>|]/;\nif(re.exec(REDACTED_SECRET_KEY_PLACEHOLDER)) { alert(...); }", "link_identifiers": ["new_dir_input", "re=/[\\\\/:*?\"<>|]/", "REDACTED_SECRET_KEY_PLACEHOLDER.indexOf(\" \")==0"], "notes": "Verify that the vulnerability can be exploited for path traversal; a complete attack chain analysis requires combining with the backend file htdocs/web/portal/__ajax_explorer.sgi."}
{"name": "file_write-DUMPLOG_unvalidated_file_write", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 8.5, "confidence": 6.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "fwrite(\"a\", $file, \"[Time]\".$time);", "link_identifiers": ["DUMPLOG_append_to_file", "DUMPLOG_all_to_file", "$file", "fwrite"], "notes": "Critical Gap: No call points found. Next steps required: 1. Perform global search for PHP files calling DUMPLOG_all_to_file (focus on /www directory) 2. Verify if $file originates from $_GET/$_POST 3. Check firmware permission model (whether web service runs as REDACTED_PASSWORD_PLACEHOLDER)"}
{"name": "command_injection-upnp-REDACTED_SECRET_KEY_PLACEHOLDER", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 9.5, "confidence": 8.75, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "$cmd = 'iptables -t nat -D DNAT.UPNP'.$proto.' --dport '.$extport.' -j DNAT --to-destination \"'.$intclnt.'\":'.$intport;", "link_identifiers": ["NewRemoteHost", "internalclient", "remotehost", "intclnt", "iptables -t nat -D DNAT.UPNP", "SHELL_FILE", "fwrite", "REDACTED_SENSITIVE_DATA", "AddPortMapping", "REDACTED_SECRET_KEY_PLACEHOLDER"], "notes": "Complete attack chain: Control input → Contaminate runtime node → Trigger deletion → Command injection. Verification required: 1) SHELL_FILE execution mechanism 2) Input filtering in AddPortMapping.php"}
{"name": "stack_overflow-http_request_uri_copy", "file_path": "htdocs/fileaccess.cgi", "location": "fcn.0000adbc:0xb04c", "risk_score": 9.0, "confidence": 8.25, "description": "Stack-based buffer overflow vulnerability. Specific behavior: When the HTTP request URI length exceeds 0xFC2 bytes (4034 bytes), the strcpy function copies REQUEST_URI to a fixed-size buffer without boundary checking, resulting in stack memory overwrite. Trigger condition: Sending an excessively long URI request (>4034 bytes). Security impact: May cause service crash or enable arbitrary code execution through control flow hijacking. Constraint: Buffer size is implicitly defined, requiring dynamic testing to confirm offset.", "code_snippet": "strcpy(dest, REQUEST_URI);", "link_identifiers": ["REQUEST_URI", "strcpy", "fcn.0000adbc", "fileaccess.cgi"], "notes": "It is necessary to analyze the stack layout to confirm the precise coverage point, and dynamic testing is recommended for subsequent validation of exploitation feasibility. The input source REQUEST_URI is shared with the path traversal vulnerability."}
{"name": "path_traversal-http_request_uri_construct", "file_path": "htdocs/fileaccess.cgi", "location": "fcn.0000adbc:0xb188", "risk_score": 9.5, "confidence": 9.25, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "sprintf(file_path, \"id=%s\", user_input);", "link_identifiers": ["REQUEST_URI", "sprintf", "fcn.0000adbc", "fcn.000266d8", "file_path", "fileaccess.cgi"], "notes": "Forming critical attack chain nodes: Controlling the file_path variable can trigger unsafe file operations (as discovered in unsafe_file_operation-fileaccess_cgi). Similar vulnerabilities in other CGIs have been confirmed to be reliably exploitable."}
{"name": "unsafe_file_operation-fileaccess_cgi", "file_path": "htdocs/fileaccess.cgi", "location": "Cross-referenced: fcn.000266d8", "risk_score": 9.0, "confidence": 8.25, "description": "Unsafe file operations with user-controlled paths. Specific manifestations: Functions like fopen64/unlink directly use paths derived from REQUEST_URI. Trigger condition: Controlling file path parameters via HTTP requests. Security impact: Enables arbitrary file read/write/delete. Constraints: Relies on path traversal vulnerabilities to bypass directory restrictions, combining both to form a complete attack chain.", "link_identifiers": ["fopen64", "unlink", "fcn.000266d8", "file_path", "fileaccess.cgi"], "notes": "Risk of compounding with path traversal vulnerability (path_traversal-http_request_uri_construct): Path traversal provides arbitrary path construction capability, while this vulnerability executes the final dangerous operation."}
{"name": "port_validation-upnp-AddPortMapping", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 8.0, "confidence": 9.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "if($NewExternalPort==\"\" || isdigit($NewExternalPort)==0)\n{\n    $_GLOBALS[\"errorCode\"]=716;\n}\n...\n$cmd = 'iptables -t nat -A DNAT.UPNP'.$proto.' --dport '.$NewExternalPort", "link_identifiers": ["NewExternalPort", "NewInternalPort", "isdigit", "errorCode=716", "errorCode=402", "set(\"externalport\"", "set(\"internalport\"", "iptables -t nat -A DNAT.UPNP", "--dport"], "notes": "Exploit chain completeness: High. Related vulnerability: Firewall failure may amplify command injection vulnerability (refer to command_injection-upnp-REDACTED_SECRET_KEY_PLACEHOLDER). Follow-up recommendations: 1) Analyze UPnP service exposure status 2) Examine system behavior after firewall crash"}
{"name": "potential_command_injection-upnp-AddPortMapping", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 7.5, "confidence": 6.25, "description": "Potential command injection risk (requires further verification): The $REDACTED_SECRET_KEY_PLACEHOLDER parameter is directly concatenated into the iptables command after being validated by INET_validv4addr. If the IP validation function does not filter special characters (such as `;`, `|`), it may allow command injection through crafted inputs like `192.168.1.1';reboot;'`. Trigger conditions: 1) Device is in router mode 2) INET_validv4addr validation passes 3) SHELL_FILE mechanism executes the written command. Boundary check: Relies solely on the filtering effectiveness of INET_validv4addr.", "code_snippet": "$cmd = 'iptables -t nat -A DNAT.UPNP'.$proto.' --dport '.$NewExternalPort.' -j DNAT --to-destination \"'.$REDACTED_SECRET_KEY_PLACEHOLDER.'\":'.$NewInternalPort;", "link_identifiers": ["$REDACTED_SECRET_KEY_PLACEHOLDER", "INET_validv4addr", "iptables", "--to-destination"], "notes": "Unverified dependencies: 1) Implementation of /htdocs/phplib/inet.php. Associated exploit chain: Contaminated values can trigger execution through the command_injection-upnp-REDACTED_SECRET_KEY_PLACEHOLDER vulnerability (refer to this finding)."}
{"name": "access_control-upnp-REDACTED_SECRET_KEY_PLACEHOLDER-permission_bypass", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 6.0, "confidence": 9.0, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["REDACTED_SENSITIVE_DATA", "router", "errorCode", "ACTION_NODEBASE", "REDACTED_SECRET_KEY_PLACEHOLDER", "XNODE_del_entry", "upnpigd/portmapping"], "notes": "The vulnerability exists independently but can be combined with command injection chains (knowledge_base_id:command_injection-upnp-REDACTED_SECRET_KEY_PLACEHOLDER): attackers first delete log mappings to cover their tracks, then trigger command injection attacks."}
{"name": "input_validation-upnp-AddPortMapping_port_range", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 6.0, "confidence": 8.5, "description": "Missing port range validation: The NewExternalPort and NewInternalPort parameters are only verified for numeric format using isdigit(), without proper validation of valid port ranges (1-65535). Attackers could submit port values of 0 or exceeding 65535, causing iptables command execution failures or creating abnormal DNAT rules. Trigger condition: Sending an AddPortMapping request containing invalid ports via the UPnP protocol.", "link_identifiers": ["NewExternalPort", "NewInternalPort", "isdigit", "iptables", "DNAT.UPNP", "SHELL_FILE"], "notes": "Verify the handling mechanism of SHELL_FILE execution for abnormal ports. Related knowledge base: Three instances mentioning the SHELL_FILE execution mechanism have been identified (see notes field)."}
{"name": "potential_command_injection-upnp-AddPortMapping_REDACTED_SECRET_KEY_PLACEHOLDER", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 8.5, "confidence": 5.75, "description": "Potential command injection risk: The REDACTED_SECRET_KEY_PLACEHOLDER parameter, after being validated by INET_validv4addr, is directly concatenated into the iptables command (--to-destination parameter). If the INET_validv4addr validation is not strict (e.g., failing to filter special characters), attackers may inject malicious commands. Trigger condition: Submitting a forged IP address containing command separators while the validation function has vulnerabilities.", "link_identifiers": ["REDACTED_SECRET_KEY_PLACEHOLDER", "INET_validv4addr", "iptables", "--to-destination", "SHELL_FILE"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "stack_overflow-httpd-REQUEST_URI_fcn.0000ac10", "file_path": "htdocs/fileaccess.cgi", "location": "fcn.0000ac10:0xac10", "risk_score": 9.5, "confidence": 8.75, "description": "High-risk stack overflow vulnerability: In the fcn.0000ac10 function, the strcat operation fails to verify whether the total length exceeds the auStack_1038 buffer (4035 bytes). Trigger conditions: 1) Attacker controls environment variables (e.g., REQUEST_URI) via HTTP request; 2) Tainted data is processed by fcn.0000a480; 3) Concatenated length exceeds 4035 bytes. Exploitation method: Craft an oversized request (≈4034 bytes) to overwrite the return address, achieving arbitrary code execution. The program runs with REDACTED_PASSWORD_PLACEHOLDER privileges; successful exploitation grants full device control.", "code_snippet": "sym.imp.strcat(*piVar3, piVar3[-1]);", "link_identifiers": ["REQUEST_URI", "strcat", "fcn.0000ac10", "auStack_1038", "0xfc2", "QUERY_STRING"], "notes": "Complete attack chain: HTTP request → REQUEST_URI contamination → fcn.0000a480 processing → strcat stack overflow → EIP hijacking"}
{"name": "path_traversal-httpd-REQUEST_URI_fcn.0000adbc", "file_path": "htdocs/fileaccess.cgi", "location": "fcn.0000adbc:0x1e4", "risk_score": 8.0, "confidence": 9.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "sym.imp.sprintf(puVar6 + 0 + -0x2af0, 0x5cb4, puVar6 + 0 + -0x106c);", "link_identifiers": ["REQUEST_URI", "sprintf", "0x5cb4", "fcn.0000adbc"]}
{"name": "boundary_check_bypass-httpd-REQUEST_URI_fcn.0000adbc", "file_path": "htdocs/fileaccess.cgi", "location": "fcn.0000adbc:0x0000b04c", "risk_score": 7.0, "confidence": 7.0, "description": "Boundary Check Bypass Risk: The strlen check (≤0xfc2) on REQUEST_URI at fcn.0000adbc contains a conditional branch vulnerability. When fcn.0000a1c0 returns non-zero, it directly operates on tainted data while skipping length validation. Trigger condition: A specially crafted request causes fcn.0000a1c0 to return non-zero. Exploitation method: Bypasses the 4034-byte limit, allowing oversized tainted data to enter the processing chain.", "link_identifiers": ["REQUEST_URI", "fcn.0000a1c0", "fcn.0000adbc", "0xfc2"]}
{"name": "network_input-ACL-INET_validv4addr_validation", "file_path": "htdocs/phplib/inet.php", "location": "fatlady/INBFILTER.php:44,50", "risk_score": 8.0, "confidence": 8.5, "description": "Attack Path 1: User submits malicious IP address via ACL configuration interface (startip/endip parameters) → INBFILTER.php invokes INET_validv4addr validation → Validation logic only checks numerical range (1-223) without verifying input length/format → Malformed input may cause undefined behavior in underlying ipv4networkid function. Trigger condition: Accessing ACL configuration interface and submitting specially crafted IP address. Actual impact: Combined with implementation flaws in ipv4networkid, may cause service crash or remote code execution.", "code_snippet": "if(INET_validv4addr(query(\"startip\")) != 1) return i18n(\"The start IP address is invalid\");", "link_identifiers": ["query", "startip", "endip", "INET_validv4addr", "ipv4networkid", "REDACTED_SENSITIVE_DATA"], "notes": "Correlate existing findings: INET_validv4addr. Verification required: 1) Implementation of ipv4networkid function 2) High-risk call points in HTTP.WAN-1.php"}
{"name": "network_input-IP_Validation-INET_validv4host_buffer", "file_path": "htdocs/phplib/inet.php", "location": "inet.php:34", "risk_score": 7.5, "confidence": 7.5, "description": "Attack Path 2: The INET_validv4host function fails to perform length validation on the $ipaddr parameter (missing maximum length constraint) → directly passes to the ipv4hostid function → excessively long IP address strings may trigger buffer overflow. Trigger condition: Upstream callers (e.g., WiFi configuration interface) do not filter user input length. Potential impact: Remote code execution or denial of service, with success probability dependent on the buffer operation implementation of ipv4hostid.", "code_snippet": "function INET_validv4host($ipaddr, $mask)\n{\n    $hostid = ipv4hostid($ipaddr, $mask);\n    ...", "link_identifiers": ["INET_validv4host", "$ipaddr", "ipv4hostid", "ipv4maxhost"], "notes": "REDACTED_SENSITIVE_DATA"}
