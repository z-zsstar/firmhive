{"name": "command_execution-init_scripts-rcS_Swildcard", "file_path": "etc/init.d/rcS", "location": "etc/init.d/rcS:5", "risk_score": 8.5, "confidence": 8.25, "description": "rcS, as the primary system initialization control script, unconditionally executes all service scripts starting with 'S' in the /etc/init.d/ directory. These scripts may contain attack entry points such as network services and privileged operations. The trigger condition is automatic execution during system startup, with no input validation mechanism. The potential risk lies in attackers achieving persistent attacks by implanting malicious service scripts or tampering with existing ones.", "code_snippet": "for i in /etc/init.d/S??* ;do\n\t[ ! -f \"$i\" ] && continue\n\t$i\ndone", "link_identifiers": ["/etc/init.d/S??*", "$i", "/etc/init0.d/rcS"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "command_execution-custom_path-init0_rcS", "file_path": "etc/init.d/rcS", "location": "etc/init.d/rcS:9", "risk_score": 7.0, "confidence": 6.5, "description": "Command execution: Abnormal path detected at /etc/init0.d/rcS during script termination. Standard Linux initialization typically utilizes init.d exclusively, suggesting this path may indicate customized components or configuration errors. If this path exists with write permissions, attackers could potentially achieve privileged code execution by replacing this file.", "code_snippet": "/etc/init0.d/rcS", "link_identifiers": ["/etc/init0.d/rcS"], "notes": "Verify the existence of the /etc/init0.d directory and its file permissions"}
{"name": "config-static-init-S10init", "file_path": "etc/init.d/S10init.sh", "location": "etc/init.d/S10init.sh", "risk_score": 0.0, "confidence": 5.0, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["mount", "echo", "REDACTED_SENSITIVE_DATA", "/proc/sys/vm/panic_on_oom"], "notes": "It is recommended to shift the analysis to other scripts containing service startup logic (such as the /etc/rc.d or /service directories), focusing on startup files that involve environment variable manipulation or external command execution."}
{"name": "config-load-ipv6-settings", "file_path": "etc/init.d/S16ipv6.sh", "location": "etc/init.d/S16ipv6.sh:0 [global] 0x0", "risk_score": 1.0, "confidence": 4.9, "description": "S16ipv6.sh is a static configuration script without external input processing capability. Specific behaviors: 1) All kernel parameters (forwarding/accept_dad/disable_ipv6) are directly written with hardcoded values via echo 2) ip6tables policy is fixed to DROP. Trigger condition: Executes automatically only during system startup. Boundary check: Does not involve any input validation. Security impact: No externally controllable input points exist, making it impossible to construct attack paths.", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["REDACTED_SENSITIVE_DATA", "REDACTED_SENSITIVE_DATA", "REDACTED_SENSITIVE_DATA", "ip6tables -P FORWARD DROP"], "notes": "Note: 1) Static configurations may be overridden by other components. 2) It is recommended to check network services dependent on this configuration. 3) If disable_ipv6=1 does not take effect, it may expose IPv6 attack surfaces."}
{"name": "command_execution-gpio_event-S40gpioevent", "file_path": "etc/init0.d/S40gpioevent.sh", "location": "etc/init0.d/S40gpioevent.sh", "risk_score": 1.0, "confidence": 4.75, "description": "This GPIO event handling script registers fixed event responses during system startup: 1) It only accepts the 'start' parameter without deep validation, but this parameter is controlled by the init system, making injection difficult for attackers; 2) All hardware operations use static predefined commands (e.g., 'usockc /var/gpio_ctrl STATUS_GREEN'), with no dynamic input concatenation or missing boundary checks; 3) No environment variable/NVRAM reading, privilege changes, or dangerous command execution occurs. Trigger condition: Requires internally generated specific events (e.g., 'WAN-1.CONNECTED') with no externally controllable trigger path. Security impact: The event handling logic is entirely hardcoded, with no data flow propagating from attack surfaces (network/IPC, etc.) to this point, making exploit chain construction impossible.", "code_snippet": "if [ \"$1\" = \"start\" ]; then\n\tevent \"STATUS.READY\"\t\tadd \"usockc /var/gpio_ctrl STATUS_GREEN\"\n\tevent \"WAN-1.CONNECTED\"\t\tinsert \"WANLED:phpsh /etc/scripts/update_wanled.php EVENT=WAN_CONNECTED\"", "link_identifiers": ["$1", "event", "usockc", "gpio_ctrl", "phpsh", "update_wanled.php", "update_bridgeled.php", "update_wpsled.php", "STATUS.READY", "WAN-1.CONNECTED"], "notes": "The invoked PHP scripts (such as update_wanled.php) require separate security analysis, which falls outside the scope of this document. Although the event name may be triggered by other processes, the script only registers the handling logic, and the event content is uncontrollable."}
{"name": "nvram_get-gpiod-param-injection", "file_path": "etc/init.d/S45gpiod.sh", "location": "etc/init.d/S45gpiod.sh", "risk_score": 8.0, "confidence": 8.25, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["wanidx", "xmldbc", "REDACTED_SENSITIVE_DATA", "gpiod", "-w"], "notes": "To verify the handling of the -w parameter by gpiod: 1) Whether it is copied to a fixed-size buffer 2) Whether it is used for command concatenation 3) The boundary checking mechanism. It is recommended to immediately analyze /sbin/gpiod."}
{"name": "init-script-symlink-creation", "file_path": "etc/init0.d/S91proclink.sh", "location": "etc/init0.d/S91proclink.sh:0", "risk_score": 1.0, "confidence": 4.75, "description": "The startup script S91proclink.sh creates symbolic links related to the network stack during initialization: 1) Triggered only when the /proc/alpha directory is detected and the /var/proc directory does not exist 2) Executed with REDACTED_PASSWORD_PLACEHOLDER privileges but contains no external input handling logic 3) The created symbolic links point to kernel network interfaces (e.g., multicast_br0, hnat) and may provide access paths for other components. The script itself requires no boundary checks as it has no controllable input points and fixed execution conditions. Potential impact depends on how other components utilize these symbolic links to access /proc interfaces.", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["/proc/alpha", "/var/proc", "multicast_br0", "multicast_br1", "ip_conntrack_fastnat", "hnat", "nf_conntrack_flush"], "notes": "Recommended follow-up analysis: 1) Inspect components utilizing the /var/proc/alpha path 2) Validate security boundaries of kernel interfaces like multicast_br0/hnat 3) Trace whether network services access /proc interfaces through these symbolic links"}
{"name": "env_get-telnetd-unauthenticated_access", "file_path": "etc/init0.d/S80telnetd.sh", "location": "S80telnetd.sh:7", "risk_score": 9.0, "confidence": 8.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["entn", "telnetd", "br0", "start"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "file_read-telnetd-hardcoded_creds", "file_path": "etc/init0.d/S80telnetd.sh", "location": "S80telnetd.sh:12", "risk_score": 8.5, "confidence": 9.5, "description": "Using hardcoded credentials Alphanetworks:$image_sign for authentication ($image_sign is read from /etc/config/image_sign). Attackers can extract the firmware to obtain the credentials, enabling remote REDACTED_PASSWORD_PLACEHOLDER login when the telnet service is running. No boundary checks or dynamic change mechanisms are implemented.", "code_snippet": "telnetd -l /usr/sbin/login -u Alphanetworks:$image_sign -i br0 &", "link_identifiers": ["image_sign", "Alphanetworks", "/etc/config/image_sign"], "notes": "The credentials are hardcoded during firmware compilation and are identical across all devices."}
{"name": "nvram_get-telnetd-init_state", "file_path": "etc/init0.d/S80telnetd.sh", "location": "S80telnetd.sh:10", "risk_score": 7.0, "confidence": 7.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "if [ \"$1\" = \"start\" ] && [ \"$orig_devconfsize\" = \"0\" ]; then", "link_identifiers": ["orig_devconfsize", "xmldbc", "REDACTED_SENSITIVE_DATA"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "event_registration-S41event-1", "file_path": "etc/init0.d/S41event.sh", "location": "S41event.sh:4-9", "risk_score": 6.5, "confidence": 6.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["event", "SYSLOG_MSG", "SITESURVEY", "DISKUP", "DISKDOWN", "REDACTED_SENSITIVE_DATA", "/etc/events/update_usb_led.php"], "notes": "Follow-up analysis required: 1) Event trigger source of the /sbin/event binary 2) Input handling of registered scripts. Related finding: Event mechanism in S40gpioevent.sh (low risk)"}
{"name": "start_param_handling-S41event-2", "file_path": "etc/init0.d/S41event.sh", "location": "S41event.sh:3", "risk_score": 1.0, "confidence": 6.0, "description": "The script receives input (e.g., 'start') via the positional parameter $1, used solely for conditional branch evaluation. Trigger condition: parameter passed during system startup. Security impact: low, as the parameter is not passed to hazardous operations and comparison values are hardcoded.", "code_snippet": "if [ \"$1\" = \"start\" ]; then", "link_identifiers": ["$1", "start"]}
{"name": "NVRAM_Pollution-REDACTED_SECRET_KEY_PLACEHOLDER-S22mydlink", "file_path": "etc/init.d/S22mydlink.sh", "location": "etc/init.d/S22mydlink.sh:10-22", "risk_score": 7.5, "confidence": 6.75, "description": "NVRAM contamination triggers a firmware reset chain. When dev_uid is not set, the script retrieves the lanmac value from devdata to generate a new uid. If an attacker tampers with lanmac (e.g., via an unauthorized API), mydlinkuid processes the corrupted data and: 1) executes erase_nvram.sh (suspected full configuration wipe); 2) forces a system reboot. Boundary checks only validate null values without verifying MAC format/length. Trigger condition: the script executes during first boot or when dev_uid is cleared. Actual impact: denial of service + configuration reset.", "code_snippet": "mac=`devdata get -e lanmac`\nuid=`mydlinkuid $mac`\ndevdata set -e dev_uid=$uid\n/etc/scripts/erase_nvram.sh\nreboot", "link_identifiers": ["devdata", "lanmac", "mydlinkuid", "dev_uid", "erase_nvram.sh", "reboot"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "Mount_Injection-REDACTED_SECRET_KEY_PLACEHOLDER-S22mydlink", "file_path": "etc/init.d/S22mydlink.sh", "location": "etc/init.d/S22mydlink.sh:2-5", "risk_score": 6.0, "confidence": 5.25, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "domount=`xmldbc -g /mydlink/mtdagent`\nif [ \"$domount\" != \"\" ]; then\n\tmount -t squashfs $MYDLINK /mydlink\nfi", "link_identifiers": ["xmldbc", "/mydlink/mtdagent", "mount", "squashfs", "MYDLINK", "REDACTED_SENSITIVE_DATA"], "notes": "Critical validation constraints: 1) xmldbc node configuration mechanism not located 2) mydlinkmtd file write point unidentified. Correlation analysis recommendation: Reverse-engineer /sbin/xmldbc and inspect /dev/mtdblock device file"}
{"name": "network_input-httpcfg-port_boundary", "file_path": "etc/services/HTTP.php", "location": "HTTP/httpcfg.php (HIDDEN)", "risk_score": 7.0, "confidence": 7.0, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["$port", "http_server", "REDACTED_SENSITIVE_DATA", "Port", "httpd"], "notes": "Verify the fault tolerance of httpd for illegal ports; Associated constraint: The httpd service component has not been analyzed."}
{"name": "nvram_set-http-state_sync", "file_path": "etc/services/HTTP.php", "location": "HTTP.php and httpcfg.php", "risk_score": 7.0, "confidence": 7.0, "description": "NVRAM state synchronization risk: HTTP.php sets temporary nodes /runtime/widget/* (such as login credentials) via xmldbc, while httpcfg.php reads persistent nodes /webaccess/*. Device states may become inconsistent after reboot. Trigger condition: Physical access triggering reboot or firmware update. Boundary check: No explicit synchronization mechanism. Actual impact: Expired /runtime credentials may be exploited to bypass authentication. Exploitation method: Attacker maintains active sessions during maintenance windows.", "link_identifiers": ["xmldbc -x", "REDACTED_SENSITIVE_DATA", "query(\"/webaccess/enable\")", "REDACTED_SENSITIVE_DATA"], "notes": "Physical access/timing attack required; Critical limitation: xmldbc component cannot be analyzed"}
{"name": "command_execution-widget-password_path", "file_path": "etc/services/HTTP.php", "location": "HTTP.php:18", "risk_score": 8.5, "confidence": 5.25, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["REDACTED_SENSITIVE_DATA", "xmldbc -x", "REDACTED_SENSITIVE_DATA"], "notes": "Critical limitation: Unable to verify widget permission settings; associated component /widget not located"}
{"name": "command_execution-IPTABLES-nat_injection", "file_path": "REDACTED_SENSITIVE_DATA", "location": "IPTABLES.php:unknown (HIDDEN)", "risk_score": 8.5, "confidence": 6.75, "description": "Attack Path A (Command Injection): Externally controllable NAT configuration parameters ($uid/$ifname) are directly concatenated into iptables chain names and system commands (e.g., 'echo $rtidx $ifname >> $rttbl') during firewall rule generation. If an attacker injects malicious parameters (e.g., '; rm -rf /') through the web interface/NVRAM, arbitrary commands will be executed upon firewall reload. Trigger conditions: 1) Attacker contaminates the uid or ifname fields in /etc/config/nat 2) Administrator performs a firewall reload. Missing boundary checks: No special character filtering, no validation of interface name format.", "code_snippet": "foreach (\"/nat/entry\") {\n  $uid = query(\"uid\");\n  IPT_newchain($START, \"nat\", \"PRE.MASQ.\".$uid);\n}\nfwrite(a,$START, 'echo '.$rtidx.' '.$ifname.' >> '.$rttbl.'\\n');", "link_identifiers": ["uid", "ifname", "IPT_newchain", "fwrite", "/etc/config/nat", "XNODE_getpathbytarget", "rttbl"], "notes": "Verification required: 1) Write permissions for /etc/config/nat 2) Web interface's filtering mechanism for uid/ifname. Related file: /htdocs/cgi-bin/firewall_setting.cgi"}
{"name": "file_read-IPTABLES-rule_tampering", "file_path": "REDACTED_SENSITIVE_DATA", "location": "IPTABLES.php:39-53", "risk_score": 8.0, "confidence": 8.0, "description": "Attack Path B (Rule Injection): The firewall dynamically loads rule files via fread('e', '/etc/config/nat') without signature verification/source checking. If an attacker modifies this file (e.g., adding malicious DNAT rules), they could achieve port redirection or access control bypass. Trigger conditions: 1) Attacker gains file write permissions (e.g., via CVE-2023-XXXX vulnerability) 2) Triggers firewall service restart. Actual impact: Could expose internal network services or bypass SPI protection.", "code_snippet": "$nat = fread(\"e\", \"/etc/config/nat\");\nforeach (\"/nat/entry\") {\n  IPT_newchain($START, \"nat\", \"DNAT.VSVR.\".$uid);\n}", "link_identifiers": ["/etc/config/nat", "fread", "IPT_newchain", "DNAT.VSVR", "nat/entry"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "nvram_get-IPTABLES-xnode_exposure", "file_path": "REDACTED_SENSITIVE_DATA", "location": "IPTABLES.php:unknown", "risk_score": 6.5, "confidence": 5.5, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["query", "XNODE_getpathbytarget", "REDACTED_SENSITIVE_DATA", "/runtime/inf"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "configuration_load-IPTABLES-dos_hardcoded", "file_path": "REDACTED_SENSITIVE_DATA", "location": "IPTABLES.php:unknown (DOSHIDDEN)", "risk_score": 5.0, "confidence": 8.5, "description": "Configuration flaw: The DOS/SPI protection rules use hardcoded thresholds (e.g., '--limit 50/s'), preventing adjustment via configuration. Attackers can bypass protection by flooding SYN/Ping packets exceeding the threshold. Trigger condition: Attacker launches flood attacks exceeding 50pps.", "code_snippet": "$iptcmd.\" -p tcp --syn \".$limit.\" -j RETURN\\n\"", "link_identifiers": ["DOS", "SPI", "limit", "--limit 50/s", "echo-request"], "notes": "Verify whether the management interface provides threshold adjustment functionality."}
{"name": "path_traversal-svchlper-script_injection", "file_path": "REDACTED_SENSITIVE_DATA", "location": "sbin/svchlper:4,8,9,10,16", "risk_score": 7.0, "confidence": 7.0, "description": "The service name parameter $2 is not filtered, leading to a path traversal vulnerability: 1) The file existence check `[ ! -f /etc/services/$2.php ]` on L4 can be bypassed using `$2=\"../malicious\"`; 2) The xmldbc call on L9 generates `/var/servd/$2_{start,stop}.sh` without validating path legality; 3) L8/L10/L16 directly execute the generated script files. Trigger condition: An attacker can control the $2 parameter value of svchlper. Constraints: a) A controllable .php file must exist outside the /etc/services directory; b) The /var/servd directory must have write permissions. Potential impact: Arbitrary script writing and execution via path traversal may lead to complete device compromise. Exploitation method: Craft a malicious $2 parameter with path traversal sequences (e.g., `../../tmp/exploit`).", "code_snippet": "[ ! -f /etc/services/$2.php ] && exit 108\nxmldbc -P /etc/services/$2.php -V START=/var/servd/$2_start.sh\nsh /var/servd/$2_start.sh > /dev/console", "link_identifiers": ["$2", "xmldbc", "/etc/services/$2.php", "/var/servd/$2_start.sh", "/var/servd/$2_stop.sh"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "dangerous_operation-svchlper-script_generation", "file_path": "REDACTED_SENSITIVE_DATA", "location": "sbin/svchlper:8,9,10,16", "risk_score": 6.0, "confidence": 7.0, "description": "Hazardous operations are primarily manifested in: 1) L9 using xmldbc to dynamically generate scripts (potential write point); 2) L8/L10/L16 directly executing generated scripts via sh (code execution point). Input sources are limited to command-line arguments ($1, $2, $3), with no use of environment variables or file reads. No interaction with /etc/config/nat was found. Buffer handling: As a shell script, it primarily relies on variable assignment, with no traditional buffer overflow detected, but path concatenation lacks boundary checks.", "code_snippet": "xmldbc -P /etc/services/$2.php -V START=/var/servd/$2_start.sh\nsh /var/servd/$2_start.sh > /dev/console", "link_identifiers": ["xmldbc", "sh", "/var/servd/$2_start.sh", "$2"], "notes": "The core risk lies in the $2 parameter processing chain. Relevant knowledge base: 1) Mount_Injection-REDACTED_SECRET_KEY_PLACEHOLDER-S22mydlink's xmldbc configuration mounting pattern 2) Initialization detection logic of nvram_get-telnetd-init_state. It is recommended to review all components invoking svchlper (especially network services)."}
{"name": "credential_storage-WEBACCESS-fixed_credential", "file_path": "REDACTED_SENSITIVE_DATA", "location": "WEBACCESS.php:? (setup_wfa_account) ?", "risk_score": 8.0, "confidence": 8.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "//fwrite(\"w\", $ACCOUNT, \"REDACTED_PASSWORD_PLACEHOLDER:\".$REDACTED_PASSWORD_PLACEHOLDER...);\nfwrite(\"w\", $ACCOUNT, \"REDACTED_PASSWORD_PLACEHOLDER:x\"...);\nstartcmd(\"tpyrcrsu 2\");", "link_identifiers": ["/var/run/storage_account_root", "comma_handle", "tpyrcrsu", "fwrite", "setup_wfa_account"], "notes": "Reverse analyze whether the tpyrcrsu command in the /etc/scripts directory dynamically injects passwords; correlate with existing fwrite operations"}
{"name": "access_control-WEBACCESS-static_config", "file_path": "REDACTED_SENSITIVE_DATA", "location": "WEBACCESS.php:? (setup_wfa_account & webaccesssetup) ?", "risk_score": 3.0, "confidence": 5.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "foreach(\"entry\")\n{\n  $rw = query(\"permission\");\n}\nif ($webaccess != 1) { http_error(\"8\"); }", "link_identifiers": ["permission", "/webaccess/enable", "XNODE_getpathbytarget"]}
{"name": "command_execution-IPV4.INET-dev_attach-command_injection", "file_path": "etc/scripts/IPV4.INET.php", "location": "IPV4.INET.php:dev_attach()", "risk_score": 8.0, "confidence": 8.25, "description": "High-risk command injection vulnerability: When ACTION=ATTACH, unvalidated $_GLOBALS['DEVNAM'] and $_GLOBALS['IPADDR'] are directly concatenated into shell commands (ip addr add). Attackers can inject malicious commands by contaminating these global variables (e.g., via HTTP parameters). Boundary checks are entirely absent, with simple trigger conditions (controlling ACTION and arbitrary parameter pollution), potentially leading to remote code execution upon successful exploitation.", "code_snippet": "echo \"ip addr add \".$_GLOBALS[\"IPADDR\"].\"/\".$mask.\" broadcast \".$brd.\" dev \".$_GLOBALS[\"DEVNAM\"].\"\\\\n\";", "link_identifiers": ["dev_attach", "DEVNAM", "IPADDR", "ACTION", "ATTACH", "ip addr add"], "notes": "Source of contamination to verify: It is recommended to analyze how upstream components (such as web interfaces) that call this script set the $_GLOBALS parameters."}
{"name": "file_write-IPV4.INET-dev_attach-arbitrary_write", "file_path": "etc/scripts/IPV4.INET.php", "location": "IPV4.INET.php:dev_attach()", "risk_score": 7.5, "confidence": 7.25, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "$kick_alias_fn=\"/var/run/kick_alias.sh\";\nfwrite(\"a\", $kick_alias_fn, \"ip addr del \".$VaLuE.\"/24 dev \".$_GLOBALS[\"DEVNAM\"].\" \\\\n\");", "link_identifiers": ["dev_attach", "DEVNAM", "kick_alias_fn", "fwrite", "/var/run/kick_alias.sh"], "notes": "The file writing portion is partially controllable, requiring combination with command injection to achieve a complete attack chain."}
{"name": "input_validation-IPV4.INET-main_entry-global_pollution", "file_path": "etc/scripts/IPV4.INET.php", "location": "IPV4.INET.php:main_entry()", "risk_score": 6.0, "confidence": 4.75, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "if ($_GLOBALS[\"INF\"]==\"\") return \"No INF !!\";\nif ($_GLOBALS[\"ACTION\"]==\"ATTACH\") return dev_attach(1);", "link_identifiers": ["$_GLOBALS", "INF", "ACTION", "IPADDR", "DEVNAM", "main_entry"], "notes": "Missing validation turns all parameters into potential sources of contamination"}
{"name": "command_execution-IPV4.INET-dev_attach-xmldbc_service", "file_path": "etc/scripts/IPV4.INET.php", "location": "IPV4.INET.php:dev_attach()/dev_detach()", "risk_score": 7.0, "confidence": 6.5, "description": "Dangerous Firmware Interaction: Direct database manipulation via xmldbc ('xmldbc -t kick_alias') followed by service restart (service DHCPS4). Parameter contamination can lead to firmware denial of service or privilege escalation.", "code_snippet": "echo \"xmldbc -t kick_alias:30:\\\"sh \".$kick_alias_fn.\"\\\" \\\\n\";\necho \"service DHCPS4.\".$_GLOBALS[\"INF\"].\" restart\\\\n\";", "link_identifiers": ["xmldbc", "event", "service", "DHCPS4", "kick_alias"], "notes": "Combined with parameter pollution to trigger, it is recommended to audit the security mechanism of xmldbc."}
{"name": "network_input-ppp_ipup_script_injection", "file_path": "etc/scripts/ip-up", "location": "etc/scripts/ip-up:3-4", "risk_score": 8.0, "confidence": 6.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["$1(ifname)", "$6(param)", "xmldbc", "/var/run/ppp4_ipup_$1.sh", "PARAM", "IFNAME"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "command_injection-usbmount-event_command", "file_path": "REDACTED_SENSITIVE_DATA", "location": "usbmount_helper.sh:10,14,16,24", "risk_score": 9.5, "confidence": 8.5, "description": "Command injection vulnerability - The externally input `$dev` and `$suffix` parameters are directly concatenated into the event command execution environment (e.g., 'event MOUNT.$suffix add \"usbmount mount $dev\"'). Attackers can inject arbitrary commands through malicious USB device names (e.g., 'dev=sda;rm -rf /'). Trigger condition: The kernel passes tainted parameters during USB device mounting/unmounting. Boundary check: Complete absence of special character filtering. Security impact: Obtains REDACTED_PASSWORD_PLACEHOLDER privilege shell (script runs as REDACTED_PASSWORD_PLACEHOLDER), enabling execution of arbitrary system commands.", "code_snippet": "event MOUNT.$suffix add \"usbmount mount $dev\"\nevent FORMAT.$suffix add \"phpsh /etc/events/FORMAT.php dev=$dev action=try_unmount counter=30\"", "link_identifiers": ["$dev", "$suffix", "event", "MOUNT.$suffix", "UNMOUNT.$suffix", "FORMAT.$suffix", "DISKUP", "DISKDOWN"], "notes": "Verify whether the event command execution environment interprets command strings through the shell. Related file: /etc/events/FORMAT.php. Related knowledge base entry: command_execution-IPV4.INET-dev_attach-xmldbc_service (File: etc/scripts/IPV4.INET.php)"}
{"name": "path_traversal-usbmount-xmldbc_mntp", "file_path": "REDACTED_SENSITIVE_DATA", "location": "usbmount_helper.sh:12,34", "risk_score": 8.0, "confidence": 7.75, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["$4", "$5", "mntp=\"$5\"", "mntp=\"$4\"", "xmldbc", "phpsh", "usbmount_helper.php"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "parameter_processing-usbmount-argv", "file_path": "REDACTED_SENSITIVE_DATA", "location": "usbmount_helper.sh:3-8", "risk_score": 7.5, "confidence": 9.0, "description": "Parameter Handling Boundary Missing - No length validation or content filtering is performed on all command-line parameters ($1-$5) (e.g., 'suffix=\"`echo $2|tr \"[a-z]\" \"[A-Z]\"`$3\"'). Attackers passing excessively long parameters (>128KB) can cause environment variable overflow or construct compound attack chains. Trigger Condition: Malicious parameters are passed during script invocation. Boundary Check: Absence of length restrictions and content filtering mechanisms. Security Impact: Disruption of script execution environment or serving as a trigger vector for other vulnerabilities.", "code_snippet": "suffix=\"`echo $2|tr \"[a-z]\" \"[A-Z]\"`$3\"\nif [ \"$3\" = \"0\" ]; then dev=$2; else dev=$2$3; fi", "link_identifiers": ["$1", "$2", "$3", "$4", "$5", "suffix", "dev", "tr [a-z] [A-Z]"], "notes": "It is necessary to examine the parameter passing mechanism of the parent process (such as udev/hotplug) that calls this script. Subsequent analysis is recommended: the trigger scripts in the /etc/hotplug.d/block directory."}
{"name": "syntax_error-factorydefault-interpreter_conflict", "file_path": "REDACTED_SENSITIVE_DATA", "location": "factorydefault.php:0", "risk_score": 0.0, "confidence": 5.0, "description": "The factorydefault.php file contains an interpreter conflict: it simultaneously includes both a POSIX shebang (#!/bin/sh) and PHP syntax (<?), preventing the file from being correctly executed by any interpreter. Specific manifestations: 1) When executed as a shell script, PHP code triggers syntax errors; 2) When included by PHP, the shebang line causes syntax errors. Trigger condition: Any attempt to execute or include the file. Actual impact: The script functionality is completely non-functional, and the source of the $ACTION variable and the iptables command execution mechanism cannot be verified. The hardcoded DNS redirection command has no user input concatenation, posing no injection risk.", "code_snippet": "#!/bin/sh\n<?", "link_identifiers": ["#!/bin/sh", "<?", "$ACTION", "iptables", "REDIRECT"], "notes": "An invalid file renders all analysis conclusions invalid. Recommendations: 1) Check other locations in the firmware for valid versions 2) Verify whether this file is actually called"}
{"name": "missing_dependency-config_php-file_absence", "file_path": "REDACTED_SENSITIVE_DATA", "location": "etc/scripts/config.php:missing", "risk_score": 0.0, "confidence": 5.0, "description": "The config.php file does not exist in the etc/scripts directory. Trigger condition: require_once('config.php') call in factorydefault.php. Actual impacts: 1) Unable to verify whether the $ACTION variable is defined in config.php; 2) Cannot analyze potential NVRAM operations or input filtering logic. Evidence shows the directory contains 51 files but no config.php, ruling out path error possibilities.", "link_identifiers": ["config.php", "require_once", "etc/scripts"], "notes": "Possible reasons: Incomplete firmware or the file is located in another directory (e.g., etc/). Subsequent steps may involve scanning the global config.php."}
{"name": "command_execution-IPV6.INET-dev_attach-command_injection", "file_path": "etc/scripts/IPV6.INET.php", "location": "IPV6.INET.php:308 - cmd(\"ip -6 addr add \".$_GLOBALS[\"IPADDR\"].\"/\".$_GLOBALS[\"PREFIX\"].\" dev \".$_GLOBALS[\"DEVNAM\"]); IPV6.INET.php:346 - cmd(\"ip -6 route add \".$_GLOBALS[\"GATEWAY\"].\"/128 dev \".$_GLOBALS[\"DEVNAM\"])", "risk_score": 9.5, "confidence": 9.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "if ($_GLOBALS[\"ACTION\"]==\"ATTACH\") return dev_attach(1);\n...\n// dev_attachHIDDEN:\ncmd(\"ip -6 addr add \".$_GLOBALS[\"IPADDR\"].\"/\".$_GLOBALS[\"PREFIX\"].\" dev \".$_GLOBALS[\"DEVNAM\"]);", "link_identifiers": ["cmd", "dev_attach", "dev_detach", "IPADDR", "PREFIX", "DEVNAM", "GATEWAY", "INF", "ACTION"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "configuration_load-IPV6.INET-dev_attach-dns_injection", "file_path": "etc/scripts/IPV6.INET.php", "location": "IPV6.INET.php:281", "risk_score": 7.0, "confidence": 7.0, "description": "DNS configuration injection risk: The $_GLOBALS['DNS'] variable is passed from the parent process (not initialized within the file) and written to system configuration via add_each() in the dev_attach function (line 281). If an attacker contaminates this parameter (e.g., by setting it to a malicious DNS address), it could lead to DNS hijacking. Trigger condition: Executed during network interface ATTACH operation. Boundary checks are missing, but the risk is lower than command injection (depends on specific parent process implementation).", "code_snippet": "add_each($_GLOBALS[\"DNS\"], $sts.\"/inet/ipv6\", \"dns\");", "link_identifiers": ["add_each", "DNS", "dev_attach", "ACTION", "ATTACH"], "notes": "Verify the input filtering mechanism of the parent process. Related pattern: IPV4.INET.php has a global variable pollution issue (refer to input_validation-IPV4.INET-main_entry-global_pollution)."}
{"name": "smb-rce-buffer_overflow-chain", "file_path": "sbin/smbd", "location": "/usr/sbin/smbd:0x5a104(fcn.0005a0ac)→0x1092d4(fcn.001092d4)→0x10a598(fcn.0010a248)", "risk_score": 9.5, "confidence": 8.75, "description": "The SMB protocol processor has a complete attack chain: the attacker sends malformed SMB packets (35-39 bytes in length or with a forged NetBIOS header) → bypasses the length validation in fcn.0005a0ac → corrupts the context structure parameters (puVar15[]) in fcn.001092d4 → passes unverified data to the strcpy operation (puVar17/puVar2) in fcn.0010a248 → triggers a heap-based buffer overflow to achieve RCE. Trigger condition: unauthenticated network packets with a high success probability.", "code_snippet": "0x5a104: cmp sb, 0x22\n0x1093c0: strcpy(puVar24+iVar6+8, pcVar17)\n0x10a598: strcpy(iVar10, puVar17)", "link_identifiers": ["fcn.0005a0ac", "sb", "0x22", "fcn.001092d4", "param_1", "puVar15[0x50]", "fcn.0010a248", "param_3", "sym.imp.strcpy", "puVar17", "puVar2", "smb_protocol", "netbios_header"], "notes": "Evaluate the feasibility of controlling flow hijacking after dynamic verification overflow. Related file: /etc/samba/smb.conf (configuration may affect memory layout). Related vulnerability: format string vulnerability in the same file (fcn.0010a248)."}
{"name": "smb-format_string-exploit", "file_path": "sbin/smbd", "location": "/usr/sbin/smbd:0x10a2f0(fcn.0010a248)", "risk_score": 7.5, "confidence": 6.5, "description": "Format string vulnerability exploitation chain: The attacker controls the SMB message field (uVar6) → passed to fcn.0010a248 via fcn.001092d4 → triggers unrestricted sprintf(puVar4,*0x10a79c,uVar6). Arbitrary address write may be achieved when the global format string (*0x10a79c) contains %n. Trigger condition: Requires specific format string configuration, with moderate success probability.", "code_snippet": "sym.imp.sprintf(puVar4,*0x10a79c,uVar6);", "link_identifiers": ["sym.imp.sprintf", "*0x10a79c", "uVar6", "param_3", "puVar4", "fcn.001092d4", "fcn.0010a248", "smb_protocol"], "notes": "Reverse verification of the format string content at *0x10a79c is required. Subsequent analysis of the Samba configuration loading process is recommended. Related vulnerability: Buffer overflow in the same file (fcn.001092d4/fcn.0010a248)."}
{"name": "ipc-udevd-netlink_event_processing", "file_path": "sbin/udevd", "location": ".rodata:0x00011eb4 init_uevent_netlink_sock; .dynstr:0x00008d13 execv; .dynstr:0x00008b80 strcpy; .dynstr:0x00012ab0 sprintf; .rodata:0x00012a70 /etc/udev/rules.d", "risk_score": 8.0, "confidence": 6.75, "description": "udevd receives external device events via netlink socket (evidence: 'init_uevent_netlink_sock' string). Event data may flow to dangerous operations: 1) execv executing external commands (reference to address 0x8d13) 2) strcpy/sprintf performing memory operations (references to addresses 0x8b80/0x12ab0). Trigger condition: attacker forges device events to trigger rule execution. Actual impact depends on: a) whether rule files (/etc/udev/rules.d) allow unfiltered parameters to be passed to PROGRAM directive b) whether event data processing lacks boundary checks. Exploitation probability: medium (requires combined analysis with rule files).", "link_identifiers": ["init_uevent_netlink_sock", "execv", "strcpy", "sprintf", "/etc/udev/rules.d", "PROGRAM", "run_program", "udev_event_run"], "notes": "Limitations: 1) Decompilation failure prevents verification of data flow 2) Actual vulnerabilities depend on the contents of rule files. Subsequent analysis must include: a) /etc/udev/rules.d/*.rules files b) Dynamic verification mechanism for event data processing"}
{"name": "command_injection-IPV4.INET-dev_attach-ipaddr_global_pollution", "file_path": "etc/scripts/IPV4.INET.php", "location": "etc/scripts/IPV4.INET.php:dev_attach()", "risk_score": 9.5, "confidence": 8.75, "description": "High-risk command injection vulnerability (IPADDR parameter). An attacker can control the $_GLOBALS['IPADDR'] parameter (e.g., setting it to '1.1.1.1;id') and trigger the dev_attach function to execute unfiltered shell commands when ACTION=ATTACH. Trigger conditions: 1) Control global variable assignment 2) Set ACTION=ATTACH. The $mask/$brd variables are calculated from SUBNET/MASK, posing a risk of secondary contamination. Exploitation method: Inject arbitrary commands by contaminating IPADDR to gain REDACTED_PASSWORD_PLACEHOLDER privileges.", "link_identifiers": ["IPADDR", "ACTION", "dev_attach", "ip addr add", "SUBNET", "MASK", "BROADCAST"], "notes": "Related vulnerability: command_execution-IPV6.INET-dev_attach-command_injection (same pattern cross-protocol). Requires verification of upstream contamination sources: 1) How web interfaces set global variables 2) XNODE_set_var mechanism in xnode.php"}
{"name": "command_injection-IPV4.INET-kick_alias-timed_execution", "file_path": "etc/scripts/IPV4.INET.php", "location": "etc/scripts/IPV4.INET.php:168", "risk_score": 8.5, "confidence": 8.0, "description": "Command execution vulnerability in scheduled tasks (xmldbc chain). The $VaLuE variable is written unfiltered into /var/run/kick_alias.sh and executed periodically via xmldbc -t kick_alias:30. Trigger conditions: 1) Control $VaLuE input (e.g. '127.0.0.1;malicious_cmd') 2) Wait 30 seconds for scheduled execution. Exploitation method: Stored attack - write malicious command and wait for automatic execution.", "link_identifiers": ["$VaLuE", "kick_alias_fn", "fwrite", "xmldbc", "kick_alias"], "notes": "Track the source of $VaLuE from: 1) HTTP request processing flow 2) NVRAM/getenv operations. No directly related records found in the knowledge base, further analysis of the contamination chain is required."}
{"name": "execution_control-IPV4.INET-main_entry-action_parameter", "file_path": "etc/scripts/IPV4.INET.php", "location": "etc/scripts/IPV4.INET.php:274-276", "risk_score": 6.0, "confidence": 6.25, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["ACTION", "dev_attach", "dev_detach", "main_entry"], "notes": "Associated records: input_validation-IPV4.INET-main_entry-global_pollution. Checks required: 1) File execution context 2) Definition in htdocs/phplib/xnode.php"}
{"name": "network_input-httpd-uri_overflow", "file_path": "sbin/httpd", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 9.0, "confidence": 8.75, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "sym.imp.strcpy(ppcVar7[-8] + 0xdb0, ppcVar7[-7]);", "link_identifiers": ["REDACTED_SENSITIVE_DATA", "strcpy", "ppcVar7[-7]", "0xdb0", "0x9c0", "fcn.0001b0f8", "HTTP/1.1", "URI"], "notes": "Dynamic testing is required to confirm the target buffer size (current evidence points to a stack structure). Related functions: fcn.0001b89c (URI normalization), fcn.000163b0 (request line reading)."}
{"name": "network_input-httpd-multistage_pollution", "file_path": "sbin/httpd", "location": "httpd:0x17f74 → 0xa31c → 0xa070", "risk_score": 8.0, "confidence": 6.75, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["fcn.00017f74", "sprintf", "param_1+0x9c4", "fcn.0000a31c.param_2", "open64", "fcn.0000a070.strcpy", "multipart", "Content-Type"], "notes": "Full utilization requires addressing: 1) Potential additional constraints introduced by environment variable handling at fcn.0000acb4 2) The 128-byte local buffer limitation in file stream reading"}
{"name": "configuration_load-XNODE-set_var-xnode", "file_path": "htdocs/phplib/xnode.php", "location": "xnode.php:150-154", "risk_score": 4.5, "confidence": 5.5, "description": "The XNODE_set_var function has an unfiltered parameter passing risk that is not directly exploited:\n- Specific manifestation: The $name/$value parameters are passed directly to the set() function without any filtering\n- Trigger condition: Requires an external call point that passes user input ($_GET/$_POST) as parameters\n- Boundary check: No length restriction or content filtering; $name theoretically carries a path traversal risk (though actual path construction logic already limits this)\n- Security impact: If a call chain exists, attackers could inject malicious values to pollute global configurations", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["XNODE_set_var", "$name", "$value", "set", "XNODE_getpathbytarget", "REDACTED_SENSITIVE_DATA"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "attack_chain-XNODE-IPTABLES-potential", "file_path": "htdocs/phplib/xnode.php", "location": "HIDDEN: IPTABLES.php → xnode.php", "risk_score": 7.0, "confidence": 6.0, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["XNODE_set_var", "XNODE_getpathbytarget", "$uid", "$ifname", "set", "REDACTED_SENSITIVE_DATA"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "attack_chain-svchlper-service_parameter_injection", "file_path": "REDACTED_SENSITIVE_DATA", "location": "svchlper:7", "risk_score": 8.0, "confidence": 6.0, "description": "The service name parameter ($2) lacks validation, leading to multiple risks: 1) Path traversal: Values like '../evil' can bypass the /etc/services/ directory restriction; 2) Command injection: Controlling $2 allows manipulation of PHP templates to generate malicious start/stop scripts. Trigger conditions: a) An attacker controls the $2 parameter passed to svchlper (source verification required) b) Existence of xmldbc template vulnerabilities or writable directories. Actual impact: Privilege escalation (dependent on $2 source controllability). Connection to existing attack chains: Knowledge base records indicate $2 may originate from the wanindex setting in the gpiod component (see 'nvram_get-gpiod-param-injection').", "code_snippet": "xmldbc -P /etc/services/$2.php -V START=/var/servd/$2_start.sh\nsh /var/servd/$2_start.sh", "link_identifiers": ["$2", "/etc/services/$2.php", "/var/servd/$2_start.sh", "xmldbc", "sh", "gpiod", "wanindex"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "attack_chain-nvram_to_command_injection", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 9.0, "confidence": 6.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["wanindex", "gpiod", "$2", "xmldbc", "REDACTED_SENSITIVE_DATA", "svchlper"], "notes": "Cross-component attack chain"}
