{"name": "config-vsftpd-write_permission", "file_path": "etc/vsftpd.conf", "location": "etc/vsftpd.conf:0", "risk_score": 7.5, "confidence": 7.25, "description": "The vsftpd configuration allows local user login (write_enable=YES) with write permissions enabled (local_enable=YES). If the system contains accounts with weak passwords, attackers could log in via FTP and upload malicious files (e.g., webshells). While chroot_local_user=YES provides basic isolation, privilege escalation vulnerabilities (e.g., through uploaded executable files) may bypass this restriction. Trigger conditions: 1) Attackers obtain valid account credentials 2) The target system has writable directories. Actual impact may lead to RCE or privilege escalation.", "link_identifiers": ["write_enable", "local_enable", "chroot_local_user", "ftp_REDACTED_PASSWORD_PLACEHOLDER"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "network_input-file_upload-upload_html", "file_path": "webs/upload.html", "location": "webs/upload.html", "risk_score": 8.5, "confidence": 9.4, "description": "The HTML file upload interface has unvalidated file upload functionality: 1) The form directly submits to upload.cgi, with the file field named 'filename'; 2) No client-side file type/extension validation logic; 3) Uses multipart/form-data encoding to support arbitrary file uploads. Trigger condition: Attackers can directly craft malicious file upload requests. Security impact: If upload.cgi lacks server-side validation, it may lead to malicious firmware/webshell uploads, potentially enabling remote code execution or device compromise.", "code_snippet": "<form method='post' ENCTYPE='multipart/form-data' action='upload.cgi'>\n<input type='file' name='filename'>", "link_identifiers": ["upload.cgi", "filename", "multipart/form-data"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "service-ftp-inetd_root_exec", "file_path": "etc/inetd.conf", "location": "etc/inetd.conf", "risk_score": 8.5, "confidence": 8.75, "description": "The FTP service is exposed via TCP ports and executes /bin/ftpd with REDACTED_PASSWORD_PLACEHOLDER privileges. Attackers can send malicious FTP requests (such as malformed USER/PASS commands) over the network. If the ftpd service contains input validation vulnerabilities (e.g., buffer overflow), attackers can directly obtain REDACTED_PASSWORD_PLACEHOLDER privileges. Trigger condition: The device has FTP service enabled and exposed to the network. Boundary checks rely on the ftpd implementation, and the configuration itself lacks filtering mechanisms.", "code_snippet": "ftp\tstream\ttcp\tnowait\tREDACTED_PASSWORD_PLACEHOLDER\t/bin/ftpd ftpd", "link_identifiers": ["ftp", "tcp", "/bin/ftpd", "REDACTED_PASSWORD_PLACEHOLDER", "ftpd"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "service-telnet-inetd_login_exec", "file_path": "etc/inetd.conf", "location": "etc/inetd.conf", "risk_score": 8.5, "confidence": 8.5, "description": "The Telnet service executes `/bin/telnetd` with REDACTED_PASSWORD_PLACEHOLDER privileges via TCP port, passing the parameter `'-L /bin/login'`. Attackers can inject malicious data (such as authentication bypass or command injection) through Telnet connections. If vulnerabilities exist in telnetd/login, REDACTED_PASSWORD_PLACEHOLDER privilege escalation may occur. Trigger condition: Telnet service is enabled and network accessible. Parameter passing increases the attack surface, but no configuration-layer filtering is implemented.", "code_snippet": "telnet\tstream  tcp \tnowait  REDACTED_PASSWORD_PLACEHOLDER    /bin/telnetd telnetd -L /bin/login", "link_identifiers": ["telnet", "tcp", "/bin/telnetd", "REDACTED_PASSWORD_PLACEHOLDER", "telnetd", "/bin/login", "-L"], "notes": "Two-stage attack path: telnetd processes network input and passes it to login"}
{"name": "service-basic-inetd_dos_risk", "file_path": "etc/inetd.conf", "location": "etc/inetd.conf", "risk_score": 5.0, "confidence": 9.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "daytime\tdgram\tudp\twait\tREDACTED_PASSWORD_PLACEHOLDER\tinternal", "link_identifiers": ["echo", "discard", "daytime", "chargen", "time", "udp", "tcp", "internal", "REDACTED_PASSWORD_PLACEHOLDER"], "notes": "Denial of service risk, recommend reviewing service necessity"}
{"name": "env_set-PATH-command_injection", "file_path": "etc/profile", "location": "etc/profile:4", "risk_score": 7.0, "confidence": 7.5, "description": "The PATH environment variable includes a user-writable directory /home/scripts, where attackers can plant malicious programs (such as commands disguised as 'smd'). When the system executes commands without using absolute paths (e.g., 'smd'), it will prioritize executing the malicious program in /home/scripts. Trigger conditions: 1) The attacker has write permissions for /home/scripts; 2) A privileged process executes commands without path restrictions. Missing boundary check: The security of directory permissions in PATH is not verified. Actual impact: May lead to privilege escalation or persistent backdoors.", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["PATH", "/home/scripts", "smd"], "notes": "Subsequent verification required: 1) Actual permissions of the /home/scripts directory 2) Execution context of the smd command (whether executed within a privileged process)"}
{"name": "env_set-KERNELVER-module_hijack", "file_path": "etc/profile", "location": "etc/profile:6,15", "risk_score": 5.0, "confidence": 5.5, "description": "Using the unvalidated $KERNELVER variable during dynamic kernel module loading, which, despite being hardcoded, could be overridden by environment variables. If an attacker contaminates KERNELVER (e.g., by setting environment variables through other vulnerabilities), it may result in loading an incorrect version or a malicious kernel module. Trigger condition: KERNELVER variable is tampered with + the system loads the bcm_log.ko module. Missing boundary checks: No format/range validation is performed on KERNELVER. Actual impact: May cause system crashes or the loading of malicious modules.", "code_snippet": "KERNELVER=2.6.30\ntest -e /lib/modules/$KERNELVER/extra/bcm_log.ko && insmod /lib/modules/$KERNELVER/extra/bcm_log.ko", "link_identifiers": ["KERNELVER", "insmod", "/lib/modules", "bcm_log.ko"], "notes": "Verify the possibility of environment variable overwriting through cross-validation (e.g., via HTTP API/NVRAM settings)"}
{"name": "command_execution-bcmdl-firmware_hijack", "file_path": "etc/profile", "location": "etc/profile:54", "risk_score": 8.5, "confidence": 6.75, "description": "High-risk firmware loading chain: The system loads the firmware file `/etc/wlan/rtecdc.trx` via `/bin/bcmdl` without integrity verification. Attackers can achieve arbitrary code execution by tampering with this file (the firmware executes during driver loading). Trigger conditions: 1) Tampering with `/etc/wlan/rtecdc.trx` 2) Triggering driver reload (system reboot or module unload). Missing boundary checks: No file signature or permission validation. Actual impact: Kernel-level code execution, forming a complete attack chain (file tampering → driver loading → privileged execution).", "code_snippet": "test -e /etc/wlan/rtecdc.trx && mount -t usbfs none /proc/bus/usb && /bin/bcmdl /etc/wlan/rtecdc.trx", "link_identifiers": ["/bin/bcmdl", "/etc/wlan/rtecdc.trx", "wl.ko"], "notes": "Critical follow-up analysis: 1) Permission settings of /etc/wlan/rtecdc.trx file 2) Whether wl.ko driver is loaded in privileged context"}
{"name": "network_input-usbManage.cmd-param_injection", "file_path": "webs/usbManage.html", "location": "webs/usbManage.html (HIDDEN)", "risk_score": 7.5, "confidence": 8.5, "description": "The API endpoint `usbManage.cmd` accepts externally controllable parameters (`usbnum`, `volnum`, `enable`) for managing USB device/storage volume states. These parameters undergo no filtering or boundary checks, enabling attackers to craft malicious requests: 1) Trigger out-of-bounds access via index overflow; 2) Attempt command injection through special character insertion. Trigger condition: Send an `action=set` request to `/usbManage.cmd` with tainted parameters. Successful exploitation may lead to device state tampering or RCE, contingent on missing backend validation.", "link_identifiers": ["usbManage.cmd", "action", "usbnum", "volnum", "enable", "handleDevice", "handleVolume"], "notes": "Verify the backend's boundary checks for usbnum/volnum and the filtering mechanism for the enable parameter. Related file: CGI binary handling usbManage.cmd requests."}
{"name": "command_execution-usbManage.html-eval_dynamic_code", "file_path": "webs/usbManage.html", "location": "usbManage.html:21,34 (evalHIDDEN)", "risk_score": 8.0, "confidence": 7.5, "description": "The eval() function dynamically executes the loc variable: eval('location=\"' + loc + '\"'). The loc variable is constructed via string concatenation (e.g., 'usb_manage.asp?dev=' + index). If the index parameter (derived from usbnum/volnum) is tainted, malicious code injection becomes possible. Trigger condition: An attacker controls the usbnum/volnum parameter values and injects JavaScript code. Successful exploitation may lead to XSS or arbitrary redirection, with actual risk depending on the strictness of backend parameter filtering.", "code_snippet": "var code = 'location=\"' + loc + '\"';\neval(code);", "link_identifiers": ["eval", "loc", "code", "handleDevice", "handleVolume", "index"], "notes": "Test whether the backend allows special characters (such as quotes, semicolons) in usbnum/volnum. Tainted path: HTTP parameter → index variable → loc concatenation → eval execution."}
{"name": "network_input-wancfg-unauth_access", "file_path": "webs/waninfo.html", "location": "waninfo.html:15", "risk_score": 9.5, "confidence": 10.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["sessionKey", "wancfg.cmd", "wanL3Edit.cmd", "usb3g.cmd", "go('wancfg.cmd", "action=manual"], "notes": "Form a complete attack chain: network input (sessionKey) → dangerous operation (WAN configuration change)"}
{"name": "network_input-waninfo-eval_injection", "file_path": "webs/waninfo.html", "location": "waninfo.html:26-28", "risk_score": 7.5, "confidence": 7.5, "description": "The eval() function exposes a risk of parameter injection through dynamic code execution. Specific manifestation: The editClick()/usb3gEditClick() functions use eval(loc) for dynamic redirection, where loc is constructed by concatenating the entryList array. Trigger condition: Contamination of the entryList array content (e.g., via XSS). Boundary check: No input filtering or encoding is applied. Security impact: Injection of malicious parameters can hijack the configuration process (e.g., location='wanL3Edit.cmd?dns=attacker_ip'), with success probability dependent on the method of entryList contamination.", "code_snippet": "var code = 'location=\"' + loc + '\"';\neval(code);", "link_identifiers": ["eval(code)", "entryList", "editClick", "usb3gEditClick", "location="], "notes": "Verify the source of entryList data (potential API contamination)"}
{"name": "network_input-resource_integrity", "file_path": "webs/waninfo.html", "location": "waninfo.html:2-4", "risk_score": 6.0, "confidence": 7.0, "description": "The external resource references lack integrity verification. Specific manifestations: Directly referencing resources such as stylemain.css/util.js without SRI hashes. Trigger conditions: Man-in-the-middle attacks or firmware tampering. Boundary check: No resource validation mechanism. Security impact: Hijacking JavaScript could enable persistent backdoors (e.g., modifying the authentication logic in util.js), but network isolation must first be breached.", "code_snippet": "<link rel=stylesheet href='stylemain.css'>\n<script src=\"util.js\">", "link_identifiers": ["stylemain.css", "colors.css", "util.js", "href=", "src="], "notes": "Requires integration with network man-in-the-middle capability"}
{"name": "network_input-auth-cookie_plaintext", "file_path": "webs/login.html", "location": "www/login.html:? (PCSubWinHIDDEN)", "risk_score": 9.0, "confidence": 9.0, "description": "Authentication credentials are stored in plain Base64 within cookies, with no Secure/HttpOnly attributes set: 1) The 'Authorization' cookie is set via the PCSubWin function, with the value 'Basic ' + Base64(user:pass); 2) The absence of the Secure attribute exposes the cookie during HTTP transmission; 3) The lack of HttpOnly allows XSS attacks to steal the cookie. Trigger condition: Man-in-the-middle attacks or XSS vulnerabilities. Impact: Attackers can gain full system control upon obtaining administrator credentials.", "link_identifiers": ["PCSubWin", "document.cookie", "Authorization", "Base64Encoding"], "notes": "The server-side CGI program's cookie handling logic needs to be checked; subsequent focus should be on tracking the input processing flow of /cgi-bin/login."}
{"name": "network_input-password_truncation", "file_path": "webs/login.html", "location": "www/login.html:? (HIDDEN)", "risk_score": 7.5, "confidence": 7.0, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["REDACTED_PASSWORD_PLACEHOLDER", "pcPassword2", "maxlength"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "network_input-js_validation_bypass", "file_path": "webs/login.html", "location": "www/login.html:? (PCSubWin0HIDDEN)", "risk_score": 7.0, "confidence": 8.5, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["PCSubWin0", "REDACTED_PASSWORD_PLACEHOLDER", "indexOf"], "notes": "Verify the server-side filtering mechanism for illegal passwords."}
{"name": "network_input-get_sensitive_data", "file_path": "webs/login.html", "location": "www/login.html:? (PCSubWinHIDDEN)", "risk_score": 8.0, "confidence": 8.65, "description": "Submitting sensitive data using the GET method:  \n1) Implicitly using GET requests through location.reload();  \n2) May result in Authorization cookies appearing in URLs or server logs.  \nTrigger conditions: Network sniffing or log access.  \nImpact: Disclosure of authentication credentials.", "link_identifiers": ["location.reload", "GET"], "notes": "Check the HTTP server log storage policy"}
{"name": "network_input-wlsecurity-btnApply_eval_xss", "file_path": "webs/wlsecurity.html", "location": "wlsecurity.html (JavaScript function btnApply)", "risk_score": 9.0, "confidence": 8.75, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["btnApply", "eval", "location", "encodeUrl", "sessionKey", "wlWpaPsk", "wlRadiusKey", "wlKeys"], "notes": "Verify the filtering logic of encodeUrl in util.js; Attack chain: untrusted input (form field) → tainted parameter passing → eval dangerous operation"}
{"name": "network_input-wlsecurity-GET_credential_exposure", "file_path": "webs/wlsecurity.html", "location": "wlsecurity.html (JavaScript function btnApply)", "risk_score": 8.5, "confidence": 9.5, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["btnApply", "location", "wlWpaPsk", "wlRadiusKey", "wlKeys", "GET"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "network_input-wlsecurity-WPS_hardcoded_PIN", "file_path": "webs/wlsecurity.html", "location": "wlsecurity.html (JavaScript btnApply case 'NewPIN')", "risk_score": 7.5, "confidence": 7.0, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["btnApply", "NewPIN", "REDACTED_SENSITIVE_DATA", "WscDevPin", "encodeUrl"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "network_input-wlsecurity-DOM_manipulation", "file_path": "webs/wlsecurity.html", "location": "wlsecurity.html (JavaScript functions)", "risk_score": 5.0, "confidence": 5.0, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["authModeChange", "wscModeChange", "showhide", "getSelect", "wlAuthMode", "wlWscMode"], "notes": "Analyze the DOM manipulation security in util.js; potential attack chain: tainted URL parameters → DOM injection → XSS"}
{"name": "xss-usbSmbSrv-eval_injection", "file_path": "webs/usbSmbSrv.html", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 8.0, "confidence": 7.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "var code = 'location=\"' + loc + '\"';\neval(code);", "link_identifiers": ["eval", "location", "sessionKey", "folderList", "path", "name", "waninfo.html"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "xss-usbSmbSrv-path_validation", "file_path": "webs/usbSmbSrv.html", "location": "usbSmbSrv.html: doFolderSet()HIDDEN", "risk_score": 7.5, "confidence": 7.0, "description": "The `doFolderSet()` function performs only partial character substitution on the path parameter (&→|, %→*, etc.), without handling critical symbols such as quotes/semicolons. If the path contains double quotes (e.g., '\";alert(1);//'), it can disrupt the eval statement structure, leading to code execution. Trigger condition: An attacker controls the shared folder path (e.g., via USB drive filenames or network configuration injection). Actual impact: Serves as the front-end trigger point for achieving a stored XSS attack chain.", "code_snippet": "loc += \"&path=\" + folderList[idx][1].replace(/\\&/g, \"|\").replace(/%/g, \"*\")...;", "link_identifiers": ["replace", "path", "folderList", "eval", "doFolderSet"], "notes": "It is necessary to verify in the firmware environment whether folderList receives external inputs (such as USB device names)."}
{"name": "csrf-usbSmbSrv-unauth_action", "file_path": "webs/usbSmbSrv.html", "location": "usbSmbSrv.html: doSelAction()HIDDEN", "risk_score": 8.0, "confidence": 8.0, "description": "Sensitive operations (such as deleting folders/disabling services) are directly triggered via URL parameters (e.g., usbSmbSrv.cmd?action=set&folder=delete), lacking CSRF protection mechanisms. Trigger condition: Inducing users to visit malicious links. Actual impact: Combined with the sessionKey hardcoding issue, it enables one-click attacks (attack chain: obtain fixed sessionKey → construct malicious request → trigger high-risk operations).", "code_snippet": "loc += '&folder=';\nswitch (action) {... case 2: loc += 'delete'; ...}", "link_identifiers": ["doSelAction", "action=set", "folder=delete", "sessionKey", "waninfo.html"], "notes": "The CSRF risk is exacerbated by the hardcoded sessionKey, allowing attackers to directly construct valid requests. It is recommended to subsequently analyze whether CGI files validate the HTTP Referer."}
{"name": "network_input-wlcfg-eval_injection", "file_path": "webs/wlcfg.html", "location": "wlcfg.html: btnApplyHIDDEN", "risk_score": 8.5, "confidence": 7.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "var code = 'location=\"' + loc + '\"';\neval(code);", "link_identifiers": ["eval", "encodeUrl", "wlSsid", "wlSsid3", "wlSsid4", "btnApply", "util.js"], "notes": "The actual risk depends on the implementation of encodeUrl (likely in util.js), requiring verification of whether it filters JavaScript special characters such as quotes/semicolons. The knowledge base already contains validation requirements regarding encodeUrl in util.js."}
{"name": "network_input-wlcfg-sensitive_parameter_exposure", "file_path": "webs/wlcfg.html", "location": "wlcfg.html:142-227(HIDDEN), btnApplyHIDDEN", "risk_score": 6.0, "confidence": 7.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "loc += '&wlCountry=' + wlCountry.value;\nloc += '&sessionKey=<%ejGetOther(sessionKey)%>';", "link_identifiers": ["wlCountry", "wlMaxAssoc", "wlEnbl", "sessionKey", "<%ejGetOther(sessionKey)%>", "wlcfg.wl"], "notes": "Check the backend's validation strength for sessionKey and parameter boundary checks. The knowledge base already contains an attack chain record for 'network input (sessionKey) → dangerous operation'."}
{"name": "network_input-wlcfg-unvalidated_redirect", "file_path": "webs/wlcfg.html", "location": "wlcfg.html: btnApplyHIDDEN", "risk_score": 4.0, "confidence": 5.5, "description": "Unvalidated redirect parameter: The jumpBack variable is directly concatenated into the URL without sanitization (loc += '&jumpBack=' + jumpBack). Trigger condition: Attacker controls the jumpBack value (e.g., through DOM contamination). Potential impact: Open redirect vulnerability.", "code_snippet": "loc += '&jumpBack=' + jumpBack;", "link_identifiers": ["jumpBack", "loc", "DOM_pollution"], "notes": "Need to confirm whether jumpBack is user-controllable. Potential attack path: tainted URL parameters → client-side DOM injection → open redirect."}
{"name": "analysis_failure-httpd-request_handler", "file_path": "bin/httpd", "location": "bin/httpd (HIDDEN)", "risk_score": 0.0, "confidence": 4.5, "description": "Unable to complete full attack path analysis for bin/httpd. REDACTED_PASSWORD_PLACEHOLDER causes: 1) Decompiler encountered 'bad instruction data' error, failed to identify critical request handling functions 2) String cross-reference tools (izz/axt) produced no output, unable to locate input parameter parsing points 3) Dangerous operation checks interrupted due to aforementioned issues. No evidence indicates the existence of exploitable vulnerabilities or complete attack chains.", "code_snippet": "", "link_identifiers": ["main", "cmsMdm_init", "cmsMsg_recv", "HTTPD_CFG"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "system_init-rcS-script", "file_path": "etc/init.d/rcS", "location": "etc/init.d/rcS:1-13", "risk_score": 0.0, "confidence": 4.75, "description": "The rcS startup script only performs basic system initialization (mounting file systems/creating directories) and contains no external input processing logic. Comprehensive verification confirms: 1) No environment variable/NVRAM operations (no getenv/setenv/nvram_get calls) 2) No suspicious input sources or IPC interfaces 3) No command execution points (no system/exec calls) 4) No dangerous file operations (redirection/writing to sensitive paths). The script's functional boundaries are clearly defined, involving no user-controllable data flows.", "code_snippet": "mount -t proc proc /proc\n/bin/mount -a\nmkdir /var/run", "link_identifiers": ["mount", "mkdir", "export PATH"], "notes": "Attack path analysis should focus on: 1) Network service startup scripts (e.g., /etc/init.d/httpd) 2) User-space programs (/sbin/ /usr/sbin/) 3) Web interface handlers (/www/cgi-bin/). Priority should be given to analyzing components containing network listening or configuration parsing logic."}
{"name": "config-load-udhcpd-ip-validation", "file_path": "bin/udhcpd", "location": "fcn.004040c0:0x004040d8", "risk_score": 7.0, "confidence": 7.25, "description": "The configuration file loading process lacks input validation for IP address-related configuration items ('start'/'end'), directly invoking inet_aton for conversion. Attackers could tamper with /etc/udhcpd.conf to inject malformed IP strings (such as overly long or specially formatted data), potentially triggering buffer overflow vulnerabilities in unpatched legacy libc implementations. Trigger conditions: 1) Attacker possesses configuration file modification privileges (requiring REDACTED_PASSWORD_PLACEHOLDER access or file write vulnerability exploitation) 2) Target system uses vulnerable libc implementation. Actual security impact: May lead to remote code execution (RCE) or denial of service (DoS), with moderate exploitation probability (dependent on libc version and privilege acquisition method).", "code_snippet": "lw t9, -sym.imp.inet_aton(gp)\njalr t9", "link_identifiers": ["inet_aton", "start", "end", "/etc/udhcpd.conf"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "fstab-tmpfs-permission-issue", "file_path": "etc/fstab", "location": "etc/fstab:0", "risk_score": 7.0, "confidence": 7.5, "description": "The /var and /mnt directories in fstab are configured as tmpfs filesystems without the noexec/nosuid options. If an attacker can write files to these directories (e.g., via a web vulnerability upload), they could execute arbitrary code or create SUID programs to achieve privilege escalation. Trigger conditions: 1) Attacker obtains file write permissions 2) Can trigger file execution. The 420KB capacity of the /var directory is easily exhausted by log files, potentially causing a DoS.", "link_identifiers": ["/etc/fstab", "/var", "/mnt", "tmpfs", "size=420k", "size=16k"], "notes": "Validation of the /var directory write points requires integration with other components (e.g., web interface log paths). Subsequent analysis is recommended to examine write operations performed by scripts in the www directory on /var."}
{"name": "command_injection-busybox_ash-PATH_pollution_chain", "file_path": "bin/busybox", "location": "bin/busybox:0x004317c0 (PATHHIDDEN) → 0x004319a4 (execveHIDDEN)", "risk_score": 9.5, "confidence": 8.5, "description": "BusyBox ash has an environment variable injection vulnerability, forming a complete attack chain: attackers can pollute the PATH value by setting NVRAM/environment variables → ash fails to perform path normalization or whitelist validation when parsing PATH → the polluted value is directly propagated to command execution functions → malicious binaries are executed via execve. Trigger conditions: 1) Attackers can control PATH settings (e.g., by exploiting vulnerabilities to set NVRAM) 2) Users/scripts execute relative-path commands using ash. Actual impact: Combined with CVE-2021-42373, this can lead to privilege escalation or firmware corruption.", "code_snippet": "// PATHHIDDEN\npcVar12 = getenv(\"PATH\");  // 0x004317c0\npuStack_50 = strdup(pppuVar22[i]);  // HIDDEN\nexecve(puStack_50, ...);  // 0x004319a4", "link_identifiers": ["PATH", "read_line_input", "execve", "puStack_50", "pppuVar22", "getenv"], "notes": "Subsequent verification: 1) Check PATH setting points in firmware startup scripts 2) Analyze whether the NVRAM setting interface is exposed. Related findings: This attack chain complements the env_set-PATH-command_injection entry (located in etc/profile) in the knowledge base. While the latter describes PATH directory permission risks, this discovery reveals the propagation path of PATH value contamination."}
{"name": "cmd-exec-telnetd-argv-overflow", "file_path": "bin/telnetd", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 3.0, "confidence": 5.25, "description": "The main function (0x4015a0) has a missing parameter count validation vulnerability:\n- Specific behavior: The loop operation (0x4016ec) writes fixed strings from the gp+0x5dbc area to the argv[2] position, causing out-of-bounds write when insufficient startup parameters are provided\n- Trigger condition: Launch via command line with fewer than 2 parameters (e.g., `telnetd -l /bin/sh` missing the second parameter)\n- Boundary check: No parameter count verification before directly operating on argv pointer array\n- Security impact: Memory corruption but practical exploitation is limited because: 1) Written data consists of fixed strings ('debug' etc.) and is uncontrollable 2) Firmware typically launches with fixed parameters via scripts", "link_identifiers": ["main", "argv", "gp+0x5dbc", "REDACTED_SENSITIVE_DATA"], "notes": "Verification required: 1) Whether the gp+0x5dbc region could potentially be corrupted 2) Check if the firmware boot script might create scenarios with missing parameters"}
{"name": "hardware_input-inittab-uart_root_shell", "file_path": "etc/inittab", "location": "inittab:3", "risk_score": 9.5, "confidence": 8.75, "description": "inittab configuration::askfirst and ::respawn start a REDACTED_PASSWORD_PLACEHOLDER-privileged /bin/sh bound to /dev/console. Sending a carriage return via physical access to the UART interface grants a REDACTED_PASSWORD_PLACEHOLDER shell. Trigger conditions: 1) Exposed UART pins 2) Matched baud rate 3) Sending any character. No authentication mechanism exists.", "link_identifiers": ["::askfirst", "::respawn", "/dev/console"], "notes": "Hardware design documentation required to confirm UART exposure level"}
{"name": "file_write-rcS-world_writable_dir", "file_path": "etc/inittab", "location": "rcS:8", "risk_score": 3.0, "confidence": 5.0, "description": "The rcS script creates a globally writable directory /var/3G using mkdir -m 0777. Verification confirms: 1) No cron jobs execute files in this directory, 2) No other processes actively use it. Only a directory permission flaw exists, with no complete exploitation chain. Trigger condition: Code execution is only possible when combined with vulnerabilities such as file upload.", "code_snippet": "mkdir -m 0777 -p /var/3G", "link_identifiers": ["/etc/init.d/rcS", "/var/3G"], "notes": "Follow-up recommendations: 1) Conduct dynamic analysis of /var/3G directory usage 2) Verify whether the firmware upgrade mechanism writes to this directory"}
{"name": "analysis-blocked-httpd", "file_path": "bin/httpd", "location": "bin/httpd", "risk_score": 0.0, "confidence": 5.0, "description": "Analysis blocked: Unable to decompile and analyze 'bin/httpd', resulting in missing critical content: 1) HTTP request handling functions and parameter parsing logic 2) Network input parameter names (e.g., query_string) 3) Dangerous operation points (system/exec, etc.) 4) Input validation mechanisms. The absence of this evidence makes tracking data flow and evaluating attack paths unfeasible. As the web service entry point, the interruption of analysis severely impacts the assessment of the network interface attack surface.", "link_identifiers": ["httpd", "handle_request", "query_string", "post_data"], "notes": "Reanalysis should be performed in an environment that supports binary decompilation. Priority verification is recommended for: 1) HTTP header processing functions 2) CGI invocation paths 3) Interactions between NVRAM operations and network parameters"}
{"name": "file_write-rcS-global_dir_creation", "file_path": "etc/init.d/rcS", "location": "etc/init.d/rcS", "risk_score": 3.0, "confidence": 5.0, "description": "Create a globally writable directory /var/3G (permission 0777), allowing attackers to implant malicious files. However, no evidence exists in the firmware that any component reads/executes content from this directory. The actual risk depends on whether privileged processes in the runtime environment utilize this directory. Trigger condition: Requires the presence of dynamically loaded 3G module services that do not verify directory content integrity.", "code_snippet": "mkdir -m 0777 -p /var/3G", "link_identifiers": ["mkdir", "/var/3G", "0777"], "notes": "Dynamic verification required: 1) Runtime behavior of 3G services 2) Whether firmware upgrades involve this directory. Knowledge base contains '/var/3G' related entries, requiring inspection of component interactions (e.g., usb3g.cmd)."}
{"name": "command_execution-rcS-relative_path_mount", "file_path": "etc/init.d/rcS", "location": "etc/init.d/rcS", "risk_score": 2.0, "confidence": 5.0, "description": "The mount command without an absolute path may be affected by the PATH environment variable, but PATH is strictly restricted to /sbin:/bin, and /bin/mount exists. An attacker would need to first tamper with PATH to potentially hijack the command, which has no implementation path in the current file context.", "code_snippet": "mount -t proc proc /proc", "link_identifiers": ["mount", "PATH", "/bin/mount"], "notes": "The knowledge base contains entries related to 'PATH' and 'mount', requiring verification of potential environment variable tampering."}
{"name": "cmd_injection-smb_share_management", "file_path": "bin/smbd", "location": "smbd: (sym._srv_net_share_del) 0x4ceb8c; (sym._srv_net_share_add) 0x4cf558", "risk_score": 9.5, "confidence": 8.75, "description": "High-risk Command Injection Chain (SMB Share Management): Attackers control the share name parameter via the _srv_net_share_del/add functions. This parameter is copied via memcpy without filtering command separators, then directly concatenated into a system command string and executed through smbrun. Trigger condition: Sending a crafted request containing command separators (; | &) to the SMB share management interface. Boundary check: Uses auStack_52c[1024] buffer but only verifies length without filtering dangerous characters. Security impact: Enables remote REDACTED_PASSWORD_PLACEHOLDER privilege command execution (RCE), allowing attackers to gain direct device control through crafted SMB requests.", "link_identifiers": ["_srv_net_share_del", "_srv_net_share_add", "auStack_52c", "memcpy", "snprintf", "smbrun", "SMB", "RPC"], "notes": "Related file: rpc_server_srv_srvsvc_nt.c; Actual triggering requires verification of whether the SMB shared management interface is open; Similar historical vulnerability CVE: CVE-2021-44126"}
{"name": "cmd_injection-print_service", "file_path": "bin/smbd", "location": "smbd: (sym.add_printer_hook) 0x4e6ca8; (sym.delete_printer_hook) 0x4f2114", "risk_score": 9.5, "confidence": 8.5, "description": "High-risk Command Injection Chain (Print Service): The `add_printer_hook`/`delete_printer_hook` functions receive printer name parameters via HTTP/RPC, which are directly concatenated into `lp_addprinter_cmd`/`lp_deleteprinter_cmd` system commands through `snprintf` and ultimately executed by `smbrun`. Trigger condition: Malicious command injection during printer addition/deletion operations. Boundary check: The `auStack_530[1024]` buffer has length restrictions but does not filter metacharacters. Security impact: Remote REDACTED_PASSWORD_PLACEHOLDER privilege command execution can be achieved through the web management interface, allowing attackers to exploit print service functionality to gain system privileges under default configurations.", "link_identifiers": ["add_printer_hook", "delete_printer_hook", "auStack_530", "snprintf", "smbrun", "lp_addprinter_cmd", "lp_deleteprinter_cmd", "spoolss"], "notes": "Verify HTTP/RPC call paths; affected scope includes all devices with print services enabled"}
{"name": "cmd_injection-smb_authentication", "file_path": "bin/smbd", "location": "smbd: (sym.map_REDACTED_PASSWORD_PLACEHOLDER) 0x426a48", "risk_score": 9.0, "confidence": 8.0, "description": "Network Input Command Injection: The map_REDACTED_PASSWORD_PLACEHOLDER function directly concatenates externally supplied REDACTED_PASSWORD_PLACEHOLDERs into system command strings during authentication request processing. Trigger Condition: The REDACTED_PASSWORD_PLACEHOLDER parameter in authentication requests contains command separators. Boundary Check: Uses auStack_448[1024] buffer without content filtering. Security Impact: Command injection via SMB authentication interface allows attackers to trigger arbitrary command execution during the authentication phase.", "link_identifiers": ["sym.map_REDACTED_PASSWORD_PLACEHOLDER", "auStack_448", "popen", "SMB_AUTH"], "notes": "Triggered by the identity authentication process; it is recommended to check the REDACTED_PASSWORD_PLACEHOLDER map configuration in smb.conf"}
{"name": "buffer_overflow-registry_print", "file_path": "bin/smbd", "location": "smbd: (sym._reg_shutdown_ex) 0x4b4344; (sym.delete_printer_hook) 0x4f2114", "risk_score": 7.5, "confidence": 7.0, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["_reg_shutdown_ex", "delete_printer_hook", "auStack_1018", "auStack_428", "pstr_sprintf"], "notes": "The exploitability needs to be verified in conjunction with the specific memory layout; it is recommended to prioritize fixing the command injection vulnerability."}
{"name": "configuration_load-inittab-rcS_initialization", "file_path": "etc/inittab", "location": "etc/inittab", "risk_score": 8.0, "confidence": 8.75, "description": "The inittab file defines system initialization behavior: 1) Executes the /etc/init.d/rcS script during system startup (trigger condition: system boot/reboot). 2) Continuously guards the /bin/sh process (trigger condition: abnormal shell termination). The rcS script, serving as the initialization entry point, lacks integrity verification, allowing attackers to implant malicious code by tampering with it. The persistence feature of /bin/sh can be exploited to maintain unauthorized shell access, achieving privilege persistence.", "link_identifiers": ["::sysinit", "::respawn", "/etc/init.d/rcS", "/bin/sh"], "notes": "Critical attack path starting point: It is recommended to immediately analyze the execution logic of the /etc/init.d/rcS script to check whether it processes externally controllable inputs (such as environment variables, configuration files) or invokes other high-risk components. Related existing finding: /var/3G directory creation issue (Risk 3.0)."}
{"name": "REDACTED_SENSITIVE_DATA", "file_path": "etc/vsftpd.conf", "location": "etc/vsftpd.conf", "risk_score": 8.0, "confidence": 7.75, "description": "Leakage of local user credentials may lead to file upload attacks. Trigger condition: After obtaining valid local user credentials, an attacker can upload malicious files via FTP. Constraint: chroot_local_user=YES restricts user access scope, but failure to set allow_writeable_chroot (default NO) may not fully prevent directory traversal. Security impact: Successful upload of a webshell could result in RCE, requiring verification of actual harm through web directory permission checks.", "link_identifiers": ["local_enable", "write_enable", "chroot_local_user", "allow_writeable_chroot", "/www"], "notes": "Verify whether the user's home directory is mapped to a web-accessible path (e.g., /www); configure the associated web service path."}
{"name": "ftp-config-cmd-injection", "file_path": "etc/vsftpd.conf", "location": "etc/vsftpd.conf", "risk_score": 6.5, "confidence": 7.5, "description": "Unrestricted FTP command sets may be exploited. Trigger condition: Attackers execute dangerous commands (such as SITE EXEC) through legitimate sessions. Constraint: The cmds_allowed parameter is unconfigured, allowing all commands by default. Security impact: Potential execution of system commands or filesystem traversal, with attack escalation possible when combined with write_enable permissions.", "link_identifiers": ["cmds_allowed", "SITE_EXEC"], "notes": "Check whether the vsftpd binary actually supports dangerous commands; correlate with /bin/ftpd function calls."}
{"name": "ftp-config-conn-bypass", "file_path": "etc/vsftpd.conf", "location": "etc/vsftpd.conf", "risk_score": 4.0, "confidence": 6.5, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["max_clients", "idle_session_timeout"], "notes": "Link the service startup parameters in /etc/init.d/rcS"}
{"name": "network_input-ftp-REDACTED_PASSWORD_PLACEHOLDER-execution", "file_path": "etc/inetd.conf", "location": "etc/inetd.conf", "risk_score": 8.0, "confidence": 8.25, "description": "FTP service configuration detected: Executing /bin/ftpd with REDACTED_PASSWORD_PLACEHOLDER privileges. This service is directly exposed to the network and accepts external input. If the ftpd has input validation vulnerabilities (such as buffer overflow), attackers may directly obtain REDACTED_PASSWORD_PLACEHOLDER privileges through malicious FTP requests. Trigger condition: An attacker accesses port 21 of the device and sends specially crafted FTP commands.", "link_identifiers": ["ftp", "stream", "REDACTED_PASSWORD_PLACEHOLDER", "/bin/ftpd", "ftpd"], "notes": "Immediately analyze the input processing logic of /bin/ftpd"}
{"name": "network_input-telnet-login-chain", "file_path": "etc/inetd.conf", "location": "etc/inetd.conf", "risk_score": 9.0, "confidence": 8.75, "description": "Detected Telnet service configuration: Executing /bin/telnetd with REDACTED_PASSWORD_PLACEHOLDER privileges and invoking /bin/login. The -L parameter of telnetd specifies the login program path, creating a dual attack surface. Attackers can: 1) Exploit vulnerabilities in telnetd protocol processing 2) Attack /bin/login through the login process. Trigger condition: Accessing port 23 with malicious telnet data or login credentials.", "link_identifiers": ["telnet", "telnetd", "-L", "/bin/login", "user:REDACTED_PASSWORD_PLACEHOLDER"], "notes": "Parallel analysis of the interaction data streams between /bin/telnetd and /bin/login is required."}
{"name": "network_input-inetd-internal-services", "file_path": "etc/inetd.conf", "location": "etc/inetd.conf", "risk_score": 2.0, "confidence": 4.75, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["internalHIDDEN", "stream", "dgram", "REDACTED_PASSWORD_PLACEHOLDER"]}
{"name": "script-init-rcS", "file_path": "etc/init.d/rcS", "location": "rcS:1-12", "risk_score": 0.0, "confidence": 4.9, "description": "The rcS script only performs static initialization: mounting filesystems, creating directories, and setting the PATH environment variable. All operations use hardcoded parameters (such as '/bin/mount -a') with no external input processing points. The commented /sbin/inetd service is not actually started. Due to the absence of input entry points and dynamic data processing, there are no missing input validations or exploitable paths.", "code_snippet": "PATH=/sbin:/bin\nexport PATH\n/bin/mount -a\nmkdir /var/run\n#/sbin/inetd", "link_identifiers": ["PATH", "export", "/bin/mount", "mkdir", "/sbin/inetd"], "notes": "It is recommended to check the service startup scripts in the /etc/rc.d directory, as the actual network services might be loaded by other mechanisms."}
{"name": "hardcoded-credentials-ppp-pap-secrets", "file_path": "etc/ppp/pap-secrets", "location": "etc/ppp/pap-secrets:0", "risk_score": 8.5, "confidence": 9.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["pap-secrets", "PAP", "authentication", "client", "server", "REDACTED_SENSITIVE_DATA", "IP addresses", "pppd"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "command_injection-dhcp_script-ifconfig", "file_path": "etc/dhcp/dhcp_getdata", "location": "dhcp_getdata:5", "risk_score": 8.5, "confidence": 8.0, "description": "In the DHCP configuration script, the ifconfig command directly uses unvalidated environment variables $interface, $ip, and $subnet. An attacker can inject malicious parameters by spoofing DHCP responses (via malicious server or man-in-the-middle attack). When the script executes 'ifconfig $interface $ip $NETMASK', if the variables contain special characters (such as semicolons), command injection can be achieved. Trigger conditions: 1) The device uses this script to process DHCP responses 2) The attacker controls DHCP traffic. Constraints: Complete lack of input validation and filtering mechanisms. Security impact: Arbitrary command execution can be achieved (e.g., injecting '; rm -rf /'), leading to complete compromise of the device.", "code_snippet": "ifconfig $interface $ip $NETMASK", "link_identifiers": ["interface", "ip", "subnet", "ifconfig", "NETMASK", "RESOLV_CONF", "dns", "router"], "notes": "Attack Path: DHCP Response → Environment Variables → ifconfig Command Injection. The commented DNS handling code (using the $dns variable) poses an equivalent risk if enabled. Verification is required on how the parent dhcpc sets environment variables (potentially involving libdhcp or nvram). Knowledge Base Correlation Clues: There are records of analysis requirements regarding DHCP packet processing (address 0x402114) and the udhcpc component, suggesting cross-verification in subsequent steps."}
{"name": "hardcoded_creds-PPP_auth-chap_secrets", "file_path": "etc/ppp/chap-secrets", "location": "REDACTED_PASSWORD_PLACEHOLDER:0 (HIDDEN)", "risk_score": 8.0, "confidence": 9.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "", "link_identifiers": ["chap-secrets", "PPP", "CHAP", "authentication", "test", "client", "REDACTED_SENSITIVE_DATA", "server"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "network_input-ppp_ipdown-param_injection", "file_path": "etc/ppp/ip-down", "location": "etc/ppp/ip-down:11-13", "risk_score": 4.5, "confidence": 6.0, "description": "The ip-down script has a risk of unfiltered parameter passing: 1) It unconditionally executes /etc/ppp/ip-down.local and passes all parameters ($@); 2) It dynamically constructs the ifdown-post call using the unvalidated $6 parameter (LOGDEVICE). Trigger condition: An attacker needs to control the $6 parameter passed by pppd. Actual impact is limited: a) The ip-down.local file does not exist b) The ifdown-post script is missing. Successful exploitation requires both: 1) Control over the LOGDEVICE parameter 2) The presence of an injectable ifdown-post implementation.", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["$@", "LOGDEVICE", "ip-down.local", "ifdown-post", "ifcfg-${LOGDEVICE}", "$6"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "network_input-ppp-ip-up-LOGDEVICE_path", "file_path": "etc/ppp/ip-up", "location": "etc/ppp/ip-up:8", "risk_score": 8.5, "confidence": 8.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["LOGDEVICE", "$6", "ifcfg-${LOGDEVICE}", "ifup-post", "ipparam"], "notes": "Verify the handling of parameters by ifup-post (requires switching the analysis focus)"}
{"name": "vuln-path_traversal-ppp-ip-up", "file_path": "etc/ppp/ip-up", "location": "etc/ppp/ip-up:8", "risk_score": 7.0, "confidence": 7.5, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["LOGDEVICE", "path traversal", "ifcfg-${LOGDEVICE}"], "notes": "Boundary check is completely missing"}
{"name": "ipc-ppp-ip-up-parameter_chain", "file_path": "etc/ppp/ip-up", "location": "etc/ppp/ip-up:10", "risk_score": 6.0, "confidence": 7.0, "description": "Unfiltered parameters passed to downstream components: Original parameters (\"$@\") are passed when executing ip-up.local. Trigger condition: When ip-up.local exists and is executable. Security impact: Passing unvalidated parameters to downstream scripts may create an exploit chain (e.g., command injection). Note: ip-up.local does not exist in the current firmware.", "code_snippet": "[ -x REDACTED_PASSWORD_PLACEHOLDER.local ] && REDACTED_PASSWORD_PLACEHOLDER.local \"$@\"", "link_identifiers": ["ip-up.local", "\"$@\"", "parameter passing"], "notes": "It is recommended to check whether other firmware versions contain ip-up.local."}
{"name": "telnetd-auth-network_input", "file_path": "bin/telnetd", "location": "sbin/telnetd:0 [make_new_session] [0x0]", "risk_score": 3.0, "confidence": 3.0, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["cmsCli_authenticate", "make_new_session", "msgfd", "/bin/sh", "memcpy"], "notes": "Next steps: 1) Re-analyze the MIPS binary using professional tools like Ghidra; 2) Trace the data flow of the `msgfd` descriptor; 3) Analyze the authentication implementation in the dynamic library libcms_cli.so; 4) Examine the environment variable handling of `/bin/sh`"}
{"name": "command_injection-dhcp_getdata-ifconfig_env", "file_path": "etc/dhcp/dhcp_getdata", "location": "etc/dhcp/dhcp_getdata", "risk_score": 8.8, "confidence": 7.75, "description": "The DHCP client script contains a command injection vulnerability when handling untrusted input. Specific behavior: the script receives network parameters (interface name/IP/subnet) provided by the DHCP server through environment variables and directly concatenates them into the ifconfig command ('ifconfig $interface $ip $NETMASK') without validation. An attacker can craft a malicious DHCP response and inject command separators (e.g., '; rm -rf /') into parameters such as $interface, triggering arbitrary command execution. Trigger conditions: 1) The device operates as a DHCP client 2) Connects to an attacker-controlled DHCP server 3) The server sends specially crafted response packets. Boundary check: Complete lack of input filtering and parameter sanitization mechanisms.", "code_snippet": "ifconfig $interface $ip $NETMASK", "link_identifiers": ["$interface", "$ip", "$subnet", "ifconfig", "NETMASK", "dhcp_getdata"], "notes": "Pending verification: 1) Confirm whether environment variables strictly originate from DHCP responses 2) Check the process in firmware that actually calls this script. Related discovery: A similar vulnerability record already exists in the knowledge base (name=command_injection-dhcp_script-ifconfig), both constituting core risk points in the DHCP attack surface."}
{"name": "attack_chain_dhcp-env_set-verification", "file_path": "etc/dhcp/dhcp_getdata", "location": "HIDDENudhcpcHIDDEN", "risk_score": 7.2, "confidence": 6.25, "description": "To enhance the DHCP command injection attack chain, it is essential to validate the environment variable setting mechanism: 1) How the udhcpc component converts DHCP response parameters (e.g., interface name/IP/subnet) into environment variables 2) Check whether libdhcp or nvram interactions introduce additional contamination sources 3) Analyze input validation flaws in the packet processing function (address 0x402114). Trigger condition: Malicious DHCP responses must be fully parsed and converted into environment variables. Risk impact: If udhcpc has parsing vulnerabilities or fails to filter special characters, the attack surface for command injection could be expanded.", "code_snippet": "N/A (HIDDENudhcpcHIDDEN)", "link_identifiers": ["udhcpc", "dhcp_getdata", "env_set", "NETMASK", "ifconfig", "recvfrom"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "attack_chain_dhcp-packet_parser", "file_path": "etc/dhcp/dhcp_getdata", "location": "0x402114 (udhcpcHIDDEN)", "risk_score": 7.8, "confidence": 5.75, "description": "There is an analysis gap in the DHCP packet parsing phase: Function 0x402114 (recvfrom call chain) fails to validate the length and format when processing raw network input. Potential risks: 1) Buffer overflow (if packet length exceeds expectations) 2) Format confusion attacks (malformed option fields bypassing parameter extraction). Trigger condition: Attacker sends specially crafted DHCP response packets. Constraint: Dynamic verification of boundary check behaviors in firmware libc functions such as inet_aton() is required.", "code_snippet": "N/A (HIDDENIDA ProHIDDEN)", "link_identifiers": ["recvfrom", "inet_aton", "udhcpc", "option", "dhcp_packet"], "notes": "Follow-up actions: 1) Analyze the udhcpc binary using Ghidra 2) Perform fuzz testing on the DHCP message processing flow 3) Cross-reference high-risk functions of the 'network_input' type in the knowledge base"}
{"name": "stack_overflow-network_ftp-init_connection-0x400986", "file_path": "bin/vsftpd", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 9.8, "confidence": 9.25, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["init_connection", "PASS", "strcpy", "dest", "src"], "notes": "Full attack chain: FTP protocol → PASS command → strcpy stack overflow → RCE. Dynamic verification of exploitability is recommended."}
{"name": "buffer_risk-config_logging-0x409e70", "file_path": "bin/vsftpd", "location": "0x00409e70", "risk_score": 8.0, "confidence": 8.5, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["tunable_log_ftp_protocol", "str_append_str", "param_2", "0x437910", "vsf_cmdio_get_cmd_and_arg"], "notes": ""}
{"name": "nvram-command-args-parsing", "file_path": "bin/nvram", "location": "bin/nvram:? [?] ?", "risk_score": 6.5, "confidence": 6.5, "description": "Command execution parameter parsing poses potential boundary risks: 1) Support for undocumented 'getall' command may expose sensitive information 2) 'set' command parsing of 'name=value' without validating equal sign position could trigger memory operation out-of-bounds. Trigger conditions: attacker passes malformed parameters (such as excessively long values or missing equal signs) via CLI/web interface. Actual impact is limited by: a) Unverified security boundaries of underlying nvram library b) Error handling only outputs usage, reducing crash risk. Exploitation probability is medium, requiring dynamic validation of parameter boundaries.", "code_snippet": "HIDDEN", "link_identifiers": ["getall", "set name=value", "argc", "argv", "strncmp", "memcpy", "usage: nvram"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "nvram-dangerous-functions", "file_path": "bin/nvram", "location": "bin/nvram:? [?] ?", "risk_score": 0.0, "confidence": 1.0, "description": "Dangerous functions detected but actual usage cannot be verified: Potentially unsafe functions like strncpy/strsep are present in the file, along with operation points 'nvram_set'/'nvram_get'. Due to missing symbol information, it cannot be confirmed: 1) Whether these functions process user input 2) Whether buffer size validation exists. Security impact currently cannot be assessed.", "code_snippet": "HIDDEN", "link_identifiers": ["strncpy", "strsep", "nvram_set", "nvram_get"], "notes": "nvram_get/nvram_set"}
{"name": "nvram-command-injection-scan", "file_path": "bin/nvram", "location": "bin/nvram:? [?] ?", "risk_score": 0.0, "confidence": 4.5, "description": "No command injection risk detected: A full file scan revealed no system/popen/execv call points or suspicious command strings. This indicates the file does not directly execute external commands, reducing the possibility of command injection through nvram operations.", "code_snippet": "HIDDEN", "link_identifiers": ["sym.imp.system", "sym.imp.popen", "/bin/", "/sbin/"], "notes": "The possibility of being triggered through indirect paths cannot be ruled out"}
{"name": "auth-bruteforce-telnetd", "file_path": "bin/telnetd", "location": "bin/telnetd:0 (unknown) 0x0", "risk_score": 7.5, "confidence": 7.25, "description": "Risk of authentication brute force: When consecutive authentication failures reach the threshold (evidence: 'Authorization failed after trying %d times!!!' string), the system may initiate /bin/sh (evidence: related strings). Trigger condition: An attacker sends invalid credentials until the threshold is triggered. Security impact: Possible authentication bypass to gain shell access. Missing boundary check: No authentication failure counter lock mechanism was found, and the 'Please login after %d seconds' prompt indicates only a time delay penalty.", "link_identifiers": ["cmsCli_authenticate", "fork", "/bin/sh", "Authorization failed", "Please login after %d seconds"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "network-input-telnetd", "file_path": "bin/telnetd", "location": "bin/telnetd:0 (unknown) 0x0", "risk_score": 6.0, "confidence": 6.5, "description": "Unprotected network input point: The read function directly processes telnet protocol data controllable by the client (evidence: function imports and session management strings). Trigger condition: Sending an excessively long malicious packet. Security impact: Potential buffer overflow. Missing boundary checks: No evidence of buffer size definition or input filtering found, keywords like 'make_new_session' indicate data flows directly into session processing logic.", "link_identifiers": ["read", "make_new_session", "accept", "select", "tty"], "notes": "Limitations: 1) Buffer size undetermined 2) Specific dangerous function call chain not traced. Fuzzing test verification recommended. Related finding: telnetd-auth-network_input"}
{"name": "vuln-sym.send_nt_replies-integer_overflow", "file_path": "bin/smbd", "location": "smbd:0x00443b30", "risk_score": 7.0, "confidence": 5.5, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["sym.send_nt_replies", "param_5", "iVar8", "sym.imp.prs_offset", "sym.change_notify_reply", "memcpy"], "notes": "Dynamic verification required: 1) Controllability of prs_offset return value 2) Feasibility of transmitting >2GB data in actual protocols. Related note: The memcpy function has usage records in other files (e.g., /bin/ftpd), requiring inspection of cross-component data flow transmission."}
{"name": "vuln-smbd_process-smb_header_validation", "file_path": "bin/smbd", "location": "smbd:0x00493ae8 & 0x00493d78", "risk_score": 8.5, "confidence": 8.0, "description": "A vulnerability was identified in the smbd_process function regarding SMB protocol handling: failure to verify the minimum packet length (4 bytes) before parsing header fields, leading to: 1) Out-of-bounds memory read (pcVar11[1]-[3]) when length < 4 bytes; 2) Attackers controlling pcStack_58's initial value (constructed from pcVar11 byte combinations) can trigger null pointer or out-of-bounds access through +4 operation. Trigger condition: sending specially crafted SMB packets. Actual impact: may cause sensitive information disclosure (memory contents) or denial of service (program crash), easily exploitable in unauthorized network access scenarios.", "link_identifiers": ["smbd_process", "pcVar11", "pcStack_58", "iStack_5c", "recv_function", "pcStack_48"], "notes": "Verification required: 1) Memory layout of the global buffer *(iVar3 + -0x374) 2) Specific behavior of the pcStack_48 function. Vulnerability verification is recommended through fuzz testing."}
{"name": "network_input-httpd-auth_header_stack_overflow", "file_path": "bin/httpd", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 9.5, "confidence": 9.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["auStack_4e58", "handle_request", "strncpy", "Authorization=", "Cookie:", "REDACTED_SENSITIVE_DATA"], "notes": "Verify the support of the actual device network stack for oversized headers. Follow-up suggestion: Construct a PoC to verify control flow hijacking. Related knowledge base keywords: handle_request, strncpy"}
{"name": "network_input-httpd-uri_path_stack_overflow", "file_path": "bin/httpd", "location": "httpd:0x00408b24-0x00408b34", "risk_score": 9.0, "confidence": 8.25, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "for (; pcVar13 != pcVar14; pcVar13++) {\n  *pcVar19 = *pcVar13;\n  pcVar19++;\n}", "link_identifiers": ["acStack_2748", "handle_request", "pcVar19", "0x00408b24", "URI_PATH"], "notes": "Associated file: /lib/libc.so.0. Need to verify the actual device's HTTP service capability in handling excessively long URIs."}
{"name": "network_input-httpd-escape_char_stack_overflow", "file_path": "bin/httpd", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 8.5, "confidence": 7.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "char acStack_128 [260];\nwhile(...) {\n  if (special_char) {\n    acStack_128[iVar3] = '\\\\';\n    iVar3++;\n  }\n  acStack_128[iVar3] = *pcVar4;\n  iVar3++;\n}", "link_identifiers": ["REDACTED_SENSITIVE_DATA", "acStack_128", "REDACTED_SENSITIVE_DATA", "param_1", "0x0040b860"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "denial_of_service-httpd-wildcard_parsing", "file_path": "bin/httpd", "location": "httpd:0x00407d14", "risk_score": 7.0, "confidence": 6.75, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "if (cVar4 == '*') {\n  ...\n  param_3 = param_3 + -1;", "link_identifiers": ["fcn.00407c2c", "param_3", "*", "0x00407d14"], "notes": "Verify whether handle_request may pass an empty path. While the actual exploitation value is low, there is a stability risk."}
