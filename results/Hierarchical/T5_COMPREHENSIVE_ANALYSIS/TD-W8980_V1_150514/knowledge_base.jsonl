{"name": "configuration_load-dir_permission-var_lock", "file_path": "etc/init.d/rcS", "location": "/etc/init.d/rcS:5-8,12-16,18", "risk_score": 7.0, "confidence": 7.5, "description": "Create globally writable directories (0777 permissions), including /var/lock, /var/log, /var/usbdisk, etc. Attackers can implant malicious files or tamper with logs. If these directories are referenced by the PATH environment variable or cron tasks, privilege escalation may be achieved. Trigger condition: Attackers must have file write capabilities (e.g., via Samba/USB interfaces). Boundary check: No permission restrictions. Security impact: May create persistent backdoors or privilege escalation chains.", "code_snippet": "/bin/mkdir -m 0777 -p /var/lock\n/bin/mkdir -m 0777 -p /var/log\n/bin/mkdir -m 0777 -p /var/usbdisk", "link_identifiers": ["/bin/mkdir", "0777", "/var/lock", "/var/log", "/var/usbdisk", "/var/samba"], "notes": "Verify whether the cron jobs or services execute the files in these directories"}
{"name": "network_input-telnetd_auth-binary", "file_path": "etc/init.d/rcS", "location": "/etc/init.d/rcS:77", "risk_score": 9.0, "confidence": 8.75, "description": "Starting the telnetd service without authentication exposes an unencrypted remote interface. Attackers can directly connect via the network, and if default credentials or binary vulnerabilities (such as buffer overflows) exist, complete device control may be achieved. Trigger conditions: network reachability + vulnerability exploitation. Boundary check: no authentication mechanism. Security impact: provides an initial attack foothold, potentially chaining with other vulnerabilities.", "code_snippet": "telnetd", "link_identifiers": ["telnetd"], "notes": "Analyze the binary vulnerabilities in /bin/telnetd"}
{"name": "hardware_input-kernel_module-usb_storage", "file_path": "etc/init.d/rcS", "location": "/etc/init.d/rcS:42-45,52,56,60-62", "risk_score": 7.5, "confidence": 6.5, "description": "Dynamic loading of kernel modules (e.g., usb-storage.ko) may expose vulnerabilities (e.g., memory corruption) that attackers can exploit via physical USB devices or malicious network packets. Trigger conditions: physical access or specific network protocol interactions. Boundary check: lacks input validation mechanisms. Security impact: may lead to kernel privilege escalation or system crashes.", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["insmod", "usb-storage.ko", "ifxusb_host.ko", "nf_conntrack_pptp.ko"], "notes": "Conduct vulnerability analysis for each .ko file"}
{"name": "ipc-cos_daemon-remote_exec", "file_path": "etc/init.d/rcS", "location": "/etc/init.d/rcS:87", "risk_score": 6.5, "confidence": 5.5, "description": "Start the COS daemon. If this service contains vulnerabilities (such as command injection/buffer overflow), attackers can trigger them through its open interfaces (e.g., network/IPC). Trigger condition: Requires determining the service's listening port or interaction mechanism. Boundary check: Unknown. Security impact: May enable remote code execution.", "code_snippet": "cos &", "link_identifiers": ["cos"], "notes": "Locate and perform reverse engineering on the COS binary file."}
{"name": "configuration_load-user-REDACTED_PASSWORD_PLACEHOLDER-REDACTED_PASSWORD_PLACEHOLDER", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 9.0, "confidence": 9.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_PASSWORD_PLACEHOLDER:$1$$iC.REDACTED_SECRET_KEY_PLACEHOLDER/:0:0:REDACTED_PASSWORD_PLACEHOLDER:/:/bin/sh", "link_identifiers": ["REDACTED_PASSWORD_PLACEHOLDER", "UID=0", "GID=0", "/bin/sh", "REDACTED_SENSITIVE_DATA"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "configuration_load-user-nobody-REDACTED_PASSWORD_PLACEHOLDER", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 7.5, "confidence": 7.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "nobody:*:0:0:nobody:/:/bin/sh", "link_identifiers": ["nobody", "UID=0", "GID=0", "REDACTED_SENSITIVE_DATA"], "notes": "Scan for processes running under the nobody identity in the system; this configuration may be caused by firmware customization errors."}
{"name": "mount-option-var-ramfs", "file_path": "etc/fstab", "location": "fstab:2", "risk_score": 8.0, "confidence": 8.5, "description": "The /var directory is mounted as ramfs without the noexec/nosuid options. The default configuration permits exec and suid permissions, allowing attackers who obtain write access to /var (e.g., through log injection vulnerabilities) to deploy malicious executables or suid privilege escalation programs. Trigger condition: Existence of a file write vulnerability + ability for an attacker to trigger execution. Boundary check: No permission restrictions—any process with write access to /var can exploit this.", "link_identifiers": ["fstab", "/var", "ramfs", "defaults", "exec", "suid"], "notes": "Configuration_load\n\nRequires combination with other vulnerabilities to achieve file writing; it is recommended to subsequently inspect the log handling component."}
{"name": "mount-option-tmp-ramfs", "file_path": "etc/fstab", "location": "fstab:4", "risk_score": 9.0, "confidence": 9.0, "description": "The /tmp directory is mounted as a globally writable path without noexec/nosuid restrictions. Configured with rw permissions and execution allowed, attackers can upload malicious binaries through methods like web uploads and execute them directly. Typical exploitation chain: file upload via network interface → write to /tmp → execute to obtain shell. Constraint: relies on other components to achieve file writing.", "link_identifiers": ["fstab", "/tmp", "ramfs", "defaults", "rw", "exec"], "notes": "configuration_load"}
{"name": "physical_attack-serial_login-chain", "file_path": "etc/inittab", "location": "etc/inittab:2", "risk_score": 9.5, "confidence": 8.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "::askfirst:/sbin/getty -L ttyS0 115200 vt100", "link_identifiers": ["::askfirst", "/sbin/getty", "ttyS0", "REDACTED_SENSITIVE_DATA", "rcS", "REDACTED_SENSITIVE_DATA", "REDACTED_PASSWORD_PLACEHOLDER", "$1$$iC.REDACTED_SECRET_KEY_PLACEHOLDER/"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "configuration_tamper-etc_permissions", "file_path": "etc/inittab", "location": "etc/", "risk_score": 7.0, "confidence": 6.5, "description": "System configuration tampering risk: 17 files in the /etc directory (including inittab) are all set with 777 permissions. Attackers with low-privilege shell access can modify inittab to inject malicious commands (such as reverse shells). Trigger condition: System reboot required after file modification (no evidence of SIGHUP reload or watchdog mechanism found). Security impact: REDACTED_PASSWORD_PLACEHOLDER shell obtained upon reboot. Exploitation probability: Medium (6.0/10). Constraint: Requires initial execution privileges and waiting for system reboot.", "link_identifiers": ["inittab", "rwxrwxrwx", "::askfirst", "reboot"], "notes": "Critical limitation: The init reload mechanism is unverified (recommend analyzing /sbin/init signal handling)"}
{"name": "configuration_load-high_risk_services-etc_services", "file_path": "etc/services", "location": "etc/services", "risk_score": 7.0, "confidence": 7.5, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["telnet", "ftp", "tftp", "shell", "login", "exec", "netbios-ssn", "microsoft-ds", "portmapper", "sunrpc"], "notes": "Pending verification: 1) Confirm service operation through process analysis; 2) Check whether firewall rules restrict access; 3) Test for vulnerabilities in service implementation (e.g., CVE-2021-3156). High-risk services may serve as initial entry points in attack chains. Related finding: /etc/init.d/rcS:77 launches unauthenticated telnetd service (linking_keywords: telnetd). If telnet service is enabled, it forms a complete attack surface."}
{"name": "command_execution-rcS-telnetd-77", "file_path": "etc/init.d/rcS", "location": "etc/init.d/rcS:77", "risk_score": 9.5, "confidence": 9.25, "description": "Directly executing the 'telnetd' command in the system startup script without any authentication parameters (such as -l /bin/login) causes the device to automatically enable an unauthenticated telnet service upon startup. Attackers can directly obtain REDACTED_PASSWORD_PLACEHOLDER shell access by connecting to port 23 over the network. This issue requires no preconditions and can be triggered as long as the device is network-accessible.", "code_snippet": "telnetd", "link_identifiers": ["telnetd"], "notes": "Verify whether /sbin/telnetd supports PIE/RELRO protection; it is recommended to check if the firewall has port 23 open by default; this vulnerability can be exploited to access globally writable directories for privilege persistence (refer to rcS:5-18 findings)."}
{"name": "file_write-rcS-mkdir-5", "file_path": "etc/init.d/rcS", "location": "etc/init.d/rcS:5-18", "risk_score": 8.0, "confidence": 9.0, "description": "The command `mkdir -m 0777` creates 13 globally writable directories (including sensitive paths such as `/var/log` and `/var/run`). After gaining telnet access, attackers can arbitrarily write files in these directories (e.g., replacing dynamic link libraries or planting malicious scripts). Combining this with cron or startup scripts enables persistent attacks. The trigger condition is the attacker first obtaining telnet access.", "code_snippet": "/bin/mkdir -m 0777 -p /var/log\n/bin/mkdir -m 0777 -p /var/run\n...", "link_identifiers": ["mkdir", "0777", "/var/log", "/var/run", "/var/tmp"], "notes": "Analyze whether other services are using these directories; it is recommended to check the ownership configuration of files under /var; this vulnerability relies on initial access provided by an unauthenticated telnet service (see rcS:77 discovery)."}
{"name": "command_execution-telnetd-noauth", "file_path": "etc/init.d/rcS", "location": "rcS:77", "risk_score": 8.5, "confidence": 8.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "telnetd", "link_identifiers": ["telnetd", "rcS:77", "authentication", "REDACTED_SENSITIVE_DATA", "REDACTED_SENSITIVE_DATA"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "file_write-samba-writable", "file_path": "etc/init.d/rcS", "location": "rcS:5-16", "risk_score": 4.0, "confidence": 5.0, "description": "The creation of globally writable directories (e.g., /var/samba/private) poses a theoretical risk of file tampering, though no practical exploitation chain has been identified. Trigger condition: Requires the Samba service to be running and utilizing the directory. Constraint: No smbd startup commands or configuration files have been discovered. Security impact: If the service is activated, attackers could modify authentication files to escalate privileges.", "code_snippet": "/bin/mkdir -m 0777 -p /var/samba/private", "link_identifiers": ["/bin/mkdir", "0777", "/var/samba/private", "smbd", "smb.conf"], "notes": "Critical missing: smbd binary not located. Follow-up recommendation: Search for Samba process startup points"}
{"name": "REDACTED_SENSITIVE_DATA", "file_path": "etc/init.d/rcS", "location": "rcS:17", "risk_score": 9.0, "confidence": 8.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["cp -p", "REDACTED_SENSITIVE_DATA", "REDACTED_SENSITIVE_DATA", "physical_attack", "serial_login"], "notes": "Configuration Load  \n\nEvidence Gap: Serial port authentication implementation not verified. Follow-up Recommendation: Analyze the /bin/login program."}
{"name": "firmware_loading-symlink-hijack", "file_path": "etc/init.d/rcS", "location": "rcS:42-70", "risk_score": 7.0, "confidence": 6.75, "description": "Firmware symbolic link creation (/tmp/ap_upper_wave300.bin) is misaligned with driver loading sequence, posing runtime firmware hijacking risks. Trigger condition: driver dynamically loads firmware using /tmp path. Constraint: driver loading precedes link creation (rcS:42-62). Security impact: redirecting symbolic link to malicious firmware leads to code execution.", "code_snippet": "ln -s /lib/firmware/ap_upper_wave300.bin /tmp/ap_upper_wave300.bin", "link_identifiers": ["ln -s", "/tmp/ap_upper_wave300.bin", "insmod", "ifxusb_host.ko", "firmware_loading"], "notes": "Evidence Gap: The driver's loading logic was not verified through decompilation. Follow-up Recommendation: Analyze the request_firmware calls in the rt2860v2_ap module."}
{"name": "xss-url_management-parentctrl", "file_path": "web/main/parentCtrl.htm", "location": "parentCtrl.htm: initUrlTbl[HIDDEN]", "risk_score": 8.0, "confidence": 8.0, "description": "The stored XSS vulnerability exists in the URL management functionality. When an attacker adds a malicious URL through authentication (doAddUrl function), user input is directly inserted into the page via innerHTML without escaping (initUrlTbl function). The malicious script is triggered when administrators view the parental control page. Trigger conditions: 1) Attacker obtains a low-privilege account 2) Administrator views the page containing malicious entries. Actual impact: Session hijacking or privilege escalation. Constraints: Only affects administrator accounts viewing the page.", "code_snippet": "cell.innerHTML = allUrl[i]; // [HIDDEN]", "link_identifiers": ["doAddUrl", "initUrlTbl", "allUrl", "urlInfo.value", "innerHTML", "urltbl"], "notes": "Verify the filtering effect of $.isdomain(), and it is recommended to check the backend processing of /cgi/info."}
{"name": "network_input-manageCtrl-hostValidation", "file_path": "web/main/manageCtrl.htm", "location": "manageCtrl.htm:79-85 (doSave function)", "risk_score": 8.0, "confidence": 8.0, "description": "The host address input validation has a logical flaw, triggered when entering non-IP non-MAC values in the l_host/r_host fields. Specific manifestations: 1) Validation requires simultaneous satisfaction of both IP and MAC format conditions (impossible requirement) 2) Non-IP inputs incorrectly invoke the $.num2ip($.ip2num()) conversion 3) MAC addresses are forcibly converted to uppercase without format validation. Potential impact: Attackers could inject special characters (such as command injection symbols) causing backend parsing exceptions, potentially leading to memory corruption or configuration injection.", "code_snippet": "arg = $.id(\"l_host\").value;\nif (arg !== \"\" && $.ifip(arg, true) && $.mac(arg, true))\n  return $.alert(ERR_APP_LOCAL_HOST);\nif (!$.ifip(arg, true)) appCfg.localHost = $.num2ip($.ip2num(arg));\nelse appCfg.localHost = arg.toUpperCase();", "link_identifiers": ["l_host", "r_host", "$.ifip", "$.mac", "$.num2ip", "$.ip2num", "appCfg.localHost", "appCfg.remoteHost"], "notes": "The feasibility of injection needs to be verified in conjunction with the /cgi/auth backend."}
{"name": "REDACTED_SENSITIVE_DATA", "file_path": "web/main/manageCtrl.htm", "location": "manageCtrl.htm:68 (doSave function)", "risk_score": 7.5, "confidence": 7.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "if (userCfg.oldPwd)\n  $.act(ACT_CGI, \"/cgi/auth\", null, null, userCfg);", "link_identifiers": ["curPwd", "newPwd", "userCfg", "$.act", "ACT_CGI", "/cgi/auth", "r_http_en", "HTTP_CFG.REDACTED_SECRET_KEY_PLACEHOLDER"], "notes": "The actual risk depends on the HTTPS configuration status."}
{"name": "configuration_load-manageCtrl-hardcodedPorts", "file_path": "web/main/manageCtrl.htm", "location": "manageCtrl.htm:182-191 (REDACTED_SECRET_KEY_PLACEHOLDER function)", "risk_score": 6.0, "confidence": 6.5, "description": "Hardcoded sensitive ports expose attack surfaces, trigger condition: when the REDACTED_SECRET_KEY_PLACEHOLDER function is called during port configuration. Specific ports: 33344, 49152, 49153, 20005, 1900, 7547. Security impact: Attackers can target high-risk services (e.g., TR-069 port 7547) and leverage port conflict logic to conduct service disruption attacks.", "code_snippet": "if (port == 33344 ||\n  port == 49152 ||\n  port == 49153 ||\n  port == 20005 ||\n  port == 1900 ||\n  port == 7547)", "link_identifiers": ["REDACTED_SECRET_KEY_PLACEHOLDER", "33344", "49152", "20005", "7547"]}
{"name": "network_input-manageCtrl-apiEndpoints", "file_path": "web/main/manageCtrl.htm", "location": "manageCtrl.htm:[HIDDEN]doSave/init[HIDDEN]", "risk_score": 6.5, "confidence": 4.75, "description": "Critical API endpoints and configuration operations exposed, identified as: 1) Authentication endpoint /cgi/auth 2) Information endpoint /cgi/info 3) Configuration operations ACT_SET/ACT_GET/ACT_GL acting on HTTP_CFG/APP_CFG/ACL_CFG. Risk point: Hardcoded IPStart/IPEnd as 0.0.0.0 in ACL_CFG configuration (line 141), potentially causing access control failure.", "link_identifiers": ["/cgi/auth", "/cgi/info", "ACT_SET", "ACT_GET", "ACT_GL", "HTTP_CFG", "APP_CFG", "ACL_CFG", "$.act", "IPStart", "IPEnd"], "notes": "Track the backend processing logic for ACL_CFG"}
{"name": "attack_chain-manageCtrl-remoteExploit", "file_path": "web/main/manageCtrl.htm", "location": "[HIDDEN]manageCtrl.htm[HIDDEN]/cgi/auth[HIDDEN]", "risk_score": 8.5, "confidence": 7.5, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["r_http_en", "/cgi/auth", "ACL_CFG", "l_host", "r_host", "userCfg", "HTTP_CFG.REDACTED_SECRET_KEY_PLACEHOLDER", "IPStart", "IPEnd"], "notes": "Prerequisites: 1) Remote management enabled 2) HTTPS not enforced 3) Backend lacks secondary validation for host input"}
{"name": "network_input-wanEdit-ipv6_validation_flaws", "file_path": "web/main/wanEdit.htm", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 7.0, "confidence": 8.5, "description": "The IPv6 address validation function contains three critical flaws: 1) Rejection of RFC-compliant compressed addresses (e.g., '1::') due to incorrect handling of empty segments at line 46 2) Segment validation failure caused by incorrect variable naming at line 68 ('substr1' instead of 'substr2') 3) Inconsistent reserved address range checking (allowing '::2' while blocking FC00::/7). Attackers can bypass validation by submitting malformed IPv6 addresses through the WAN configuration interface, potentially leading to: a) Network stack crash b) ACL rule circumvention c) Unhandled exception triggering. Trigger conditions: Submitting specially formatted addresses during IPv6 static configuration (initStaticIP) or PPPoEv6 configuration (initPPPoEv6) processes.", "link_identifiers": ["REDACTED_SENSITIVE_DATA", "ip6Addr", "regExp", "substr1", "substr2", "indexOf", "parseInt", "initStaticIP", "initPPPoEv6"], "notes": "Verify whether the backend performs duplicate validation of IPv6 addresses. Related files: CGI program handling WAN configuration (likely corresponding to the 'ACT_SET' related records in the knowledge base)."}
{"name": "network_input-wanEdit-form_submission_risk", "file_path": "web/main/wanEdit.htm", "location": "wanEdit.htm:1458 (doSave)", "risk_score": 8.5, "confidence": 9.0, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["doSave", "$.act", "ACT_SET", "wan_iplistarg", "wan_ppplistarg", "REDACTED_PASSWORD_PLACEHOLDER", "pwd", "pppoa_pwd", "WAN_IP_CONN", "WAN_PPP_CONN"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "configuration_load-wanEdit-vlan_validation_safe", "file_path": "web/main/wanEdit.htm", "location": "wanEdit.htm:2437 (enVlanID)", "risk_score": 0.0, "confidence": 5.0, "description": "VLAN configuration handler 'enVlanID' security validation: 1) Parameter 'val' only accepts predefined values (\"ip\", \"dyn_ip\", \"ppp\") 2) No user input processing 3) Logic only controls UI element visibility. No exploitable attack surface.", "link_identifiers": ["enVlanID", "ip_vlan_en", "dyn_ip_vlan_en", "ppp_vlan_en"], "notes": "Security verification passed, attack path can be excluded"}
{"name": "network_input-fwRulesEdit-ruleInjection", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 7.5, "confidence": 8.0, "description": "Risk chain of unfiltered user input constructing firewall rules: 1) Attacker injects malicious content through the ruleName input field (maxlength=15) 2) Frontend JS directly retrieves input values, performing only unimplemented $.isname() format validation 3) All form values are directly assembled into the fwAttrs object without escaping 4) fwAttrs is sent to the backend RULE processing module via $.act request. Trigger condition: User submits rule names containing special characters (e.g., ';' or '<'). Potential impact: If the backend fails to properly handle fwAttrs parameters, it may lead to stored XSS (polluting rule lists) or command injection (triggered during rule execution).", "code_snippet": "fwAttrs.ruleName = $.id(\"ruleName\").value;\nfwAttrs.internalHostRef = ...;\n$.act(ACT_ADD, RULE, null, null, fwAttrs);", "link_identifiers": ["doSave", "ruleName", "$.isname", "fwAttrs", "$.act", "ACT_ADD", "ACT_SET", "RULE", "internalHostRef", "externalHostRef"], "notes": "Need to track the backend RULE processing module to verify actual vulnerabilities. Suggested follow-up analysis: 1) Locate the backend interface (e.g., CGI program) corresponding to $.act 2) Analyze the RULE operation's parsing process for fwAttrs 3) Check the command construction logic of the rule execution component. Related note: ACT_ADD/ACT_SET exist in other configuration modules (e.g., WAN/ACL) but no direct correlation with the RULE module has been found yet."}
{"name": "network_input-usb-xss_volume_name", "file_path": "web/main/usbManage.htm", "location": "www/usbManage.htm:109-110,180-184 (render_volume_list)", "risk_score": 8.5, "confidence": 7.5, "description": "Attack Chain 1: Physical Injection XSS. Trigger Condition: Attacker physically connects a USB device containing a malicious volume name (e.g., `<script>payload</script>`) → Administrator accesses the usbManage.htm page → ACT_GL retrieves the LOGICAL_VOLUME list → volumeList[i].name is directly inserted into the DOM via innerHTML without filtering → XSS is triggered. Constraint: Requires bypassing device metadata generation filters (e.g., udev rules). Security Impact: Session hijacking/full device control.", "code_snippet": "volumeList = $.act(ACT_GL, LOGICAL_VOLUME, null, null);\ncell.innerHTML = volumeList[i].name;", "link_identifiers": ["ACT_GL", "LOGICAL_VOLUME", "volumeList", "name", "innerHTML"], "notes": "Verification required: 1) Filtering mechanism of /bin/usb for volume names 2) ACT_GL backend authorization 3) Related knowledge base HTTPS configuration (unique value in notes field)"}
{"name": "network_input-usb-param_tampering", "file_path": "web/main/usbManage.htm", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 8.0, "confidence": 8.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "$.act(ACT_SET, USB_DEVICE, usbDeviceList[idx].__stack, null, command);", "link_identifiers": ["idx", "__stack", "usbDeviceList", "ACT_SET", "USB_DEVICE", "handleUsb", "handleVolume"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "network_input-telnetd_env_injection-00438cc0", "file_path": "bin/busybox", "location": "busybox:0x00438cc0-0x00438d10", "risk_score": 9.5, "confidence": 8.75, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "0x00438cc0: lw a1, (s1)\n0x00438cc8: jal fcn.0043ae0c\n0x00438ccc: addiu a0, a0, 0x1860  # \"USER\"", "link_identifiers": ["fcn.00438bc0", "USER", "LOGNAME", "HOME", "SHELL", "setenv", "telnetd", "login", "LD_PRELOAD", "rcS:77"], "notes": "Forms a complete attack chain with the knowledge base record 'command_execution-rcS-telnetd-77'. Verification required: 1) Whether the /tmp mount configuration in the firmware allows arbitrary writes 2) Whether login calls LD_PRELOAD"}
{"name": "env_manipulation-login_env_set-00438bc0", "file_path": "bin/busybox", "location": "fcn.00438bc0 (0x00438bc0)", "risk_score": 6.5, "confidence": 6.0, "description": "The login component environment variable handling function (fcn.00438bc0) directly sets USER/TERM variables using externally provided parameters without validating their source. This function is shared with the telnetd vulnerability. If an attacker controls these parameters through other means (e.g., malicious processes), it may affect the authentication process or trigger environment variable dependency vulnerabilities. Trigger conditions: 1) Existence of environment variable injection points (e.g., telnetd vulnerability) 2) The login process being invoked. Actual impact: Privilege escalation or configuration tampering (requires exploitation of additional vulnerabilities).", "code_snippet": "fcn.0043ae0c(\"USER\",*param_3);\nfcn.0043ae0c(\"TERM\",iVar1);", "link_identifiers": ["fcn.00438bc0", "param_3", "USER", "TERM", "getenv", "setenv", "telnetd"], "notes": "Shares a vulnerable function with 'telnetd_env_injection', exposing an attack surface through the login service configuration in /etc/services."}
{"name": "negative_evidence-password_buffer-fcn.0043b8dc", "file_path": "bin/busybox", "location": "fcn.0043b8dc (0x0043b8dc)", "risk_score": 1.0, "confidence": 4.55, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["fcn.0043b8dc", "sym.imp.read", "*0x452ea8", "0x7f"]}
{"name": "unverified_component-kill_ipc-missing_symbols", "file_path": "bin/busybox", "risk_score": 3.0, "confidence": 3.0, "description": "The kill/ipc component cannot be verified due to missing symbols: 1) ipcrm/ipcs functions not located 2) kill/killall functions not visible. Speculative risk: Missing PID verification may lead to process termination, but requires REDACTED_PASSWORD_PLACEHOLDER privileges with no direct evidence of RCE.", "link_identifiers": ["ipcrm", "ipcs", "kill", "killall", "pidof"], "notes": "Dynamic testing is recommended: fuzz the kill command parameters (REDACTED_PASSWORD_PLACEHOLDER privileges required to trigger)."}
{"name": "network_input-www-index.htm-hash_loading", "file_path": "web/index.htm", "location": "index.htm: [HIDDEN]script", "risk_score": 0.5, "confidence": 5.0, "description": "index.htm captures the hash value via location.href.match(/#__(\\w+\\.htm)$/) to load the page. Trigger condition: The URL hash must match the format #__[alphanumeric underscore].htm. Security impact: 1) The regex character set (\\w) restricts filenames to [A-Za-z0-9_], preventing path traversal symbols from being injected; 2) A fixed page (status.htm/qsStart.htm) is loaded when the match fails; 3) The path concatenation vulnerability in $.loadMain cannot be exploited. Actual exploitation probability: 0%.", "code_snippet": "if((ret = location.href.match(/#__(\\w+\\.htm)$/)) && ret[1]) {\n  $.loadMain(ret[1]);\n} else {\n  $.loadMain($.isFD ? \"qsStart.htm\" : \"status.htm\");\n}", "link_identifiers": ["location.href.match", "#__\\w+\\.htm$", "ret[1]", "$.loadMain", "status.htm", "qsStart.htm"], "notes": "Pay attention to other input points: 1) Form submission endpoints 2) API interfaces 3) Environment variable interactions"}
{"name": "configuration_load-OID_Definitions", "file_path": "web/js/oid_str.js", "location": "web/js/oid_str.js", "risk_score": 4.0, "confidence": 4.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "", "link_identifiers": ["WANIPConnection", "ACL", "UsbDevice", "LANDevice", "REDACTED_SECRET_KEY_PLACEHOLDER", "UPnPCfg", "VoiceService", "StorageService", "IGD_DEV_INFO", "WAN_DEV"], "notes": "The following keywords need to be tracked in subsequent analysis: 1) Check whether HTTP handler functions directly use OID as parameters 2) Verify whether input filtering is missing for set operations of critical configuration items such as ACL/WANIPConnection 3) Confirm the permission control mechanism of USB device management interfaces. The current file only provides identifier definitions, and actual risks depend on the backend processing logic for these identifiers."}
{"name": "DOM-XSS-libjs-innerHTML", "file_path": "web/js/lib.js", "location": "lib.js function definitions", "risk_score": 9.0, "confidence": 8.75, "description": "Multiple functions ($.html/$.dhtml/$.append) insert unfiltered user input using innerHTML, resulting in DOM-XSS vulnerabilities. Trigger condition: When externally controllable data such as URL parameters/error messages are passed into these functions, arbitrary JS code can be executed. Impact: Attackers can fully control the web interface. Boundary check: No input filtering or encoding is performed. Particularly dangerous is the $.err() function, which directly constructs HTML using error codes.", "code_snippet": "html: function(elem, value) {\n  if (elem && elem.innerHTML !== undefined){\n    if (value === undefined)\n      return elem.innerHTML;\n    else\n      elem.innerHTML = value;\n  }\n}", "link_identifiers": ["$.html", "$.dhtml", "$.append", "innerHTML", "$.err"], "notes": "The existing knowledge base already contains the keyword \"innerHTML\". It is necessary to verify whether the $.err call point passes in user-controllable data."}
{"name": "RCE-libjs-script_exec", "file_path": "web/js/lib.js", "location": "lib.js function definitions", "risk_score": 9.5, "confidence": 8.5, "description": "The $.script() function executes arbitrary JavaScript code by dynamically creating a <script> tag, equivalent to eval(). When bScript=true, it is used to process AJAX responses, allowing attackers to trigger code execution by tampering with server responses or injecting HTML. Trigger condition: Unvalidated server responses or DOM content passed to $.script(). Impact: Remote code execution.", "code_snippet": "$.script = function(data) {\n  if (data && /\\S/.test(data)) {\n    var script = $.d.createElement('script');\n    script.text = data;\n    $.head.insertBefore(script, $.head.firstChild);\n  }\n}", "link_identifiers": ["$.script", "bScript", "$.io", "script.text"], "notes": "Check all $.io call points using the bScript parameter to verify whether the response is trustworthy. Correlate with network input points."}
{"name": "REDACTED_SENSITIVE_DATA", "file_path": "web/js/lib.js", "location": "lib.js window.$ initialization", "risk_score": 6.0, "confidence": 5.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "window.$ = {\n  magic: 'REDACTED_SECRET_KEY_PLACEHOLDER',\n  // other properties\n}", "link_identifiers": ["magic", "window.$"], "notes": "Track the usage scenarios of this string in the firmware to confirm whether it involves security mechanisms."}
{"name": "Parameter-Injection-libjs-cgi", "file_path": "web/js/lib.js", "location": "lib.js function definitions", "risk_score": 7.5, "confidence": 7.0, "description": "The AJAX parameter construction ($.cgi/$.io) does not validate user input, allowing injection of additional parameters or paths. Trigger condition: Attacker controls the arg/path parameters. Impact: May lead to SSRF or parameter pollution. Boundary check: Direct concatenation of user input. Error handling process directly embeds errno values, which may be exploited.", "code_snippet": "$.cgi = function(path, arg, hook, noquit, unerr) {\n  path = (path ? path : $.curPage.replace(/\\.htm$/, '.cgi')) + (arg ? '?' + $.toStr(arg, '=', '&') : '');\n  // call $.io\n}", "link_identifiers": ["$.cgi", "$.io", "$.ajax", "arg", "path"], "notes": "The CGI endpoints such as '/cgi/auth' associated with the knowledge base may form a complete attack chain."}
{"name": "XSS-Chain-libjs-url_control", "file_path": "web/js/lib.js", "location": "Multiple functions", "risk_score": 8.5, "confidence": 8.25, "description": "DOM manipulation chain with controllable URL parameters: 1) $.refresh() directly uses location.href 2) $.deleteCookie() manipulates document.cookie 3) location.hash is unfiltered. Combined with innerHTML, it can form an XSS attack chain. Trigger condition: User controls URL parameters. Impact: Complete XSS exploitation chain.", "code_snippet": "$.refresh = function(domain, port, frame, page) {\n  location.href = ret[1] + '://' + (domain ? domain : ret[2]) + ... + (page ? '#__' + page.match(/\\w+\\.htm$/) : '');\n}", "link_identifiers": ["$.refresh", "location.href", "$.deleteCookie", "document.cookie", "location.hash"], "notes": "The existing knowledge base contains the keyword '#__\\w+\\.htm$', and it is necessary to verify whether the 'page' parameter originates from the URL."}
{"name": "xss-dom-libjs-refresh", "file_path": "web/index.htm", "location": "web/js/lib.js: [$.refresh, $.html]", "risk_score": 9.0, "confidence": 8.75, "description": "DOM-based XSS vulnerability: Attackers craft malicious URL parameters (such as query strings containing JavaScript code) to trigger the $.refresh() function's processing of location.href, which is directly passed to the innerHTML assignment operation in $.html() without any filtering. Specific trigger conditions: 1) User accesses the crafted malicious URL 2) Page execution reaches the logical path containing the $.refresh() call. The system completely lacks HTML entity encoding or Content Security Policy (CSP) protection for URL parameters, allowing script execution in the victim's browser.", "code_snippet": "$.html: function(elem, value) {... elem.innerHTML = value; ...}", "link_identifiers": ["$.html", "$.dhtml", "innerHTML", "$.refresh", "location.href"], "notes": "Proof of Concept: http://target/page.htm?<script>alert(document.cookie)</script>; Related existing keywords: $.html, innerHTML"}
{"name": "rce-libjs-io-script", "file_path": "web/index.htm", "location": "web/js/lib.js: [$.io]", "risk_score": 9.5, "confidence": 8.25, "description": "Remote Code Execution Vulnerability: When the CGI processor invokes `$.io(..., bScript=true)`, the raw API response data is directly passed to `$.script()` for execution. Attackers can inject malicious code into API responses through man-in-the-middle attacks or server-side vulnerabilities, triggering unconditional script execution. Trigger conditions: 1) Existence of API calls using `bScript=true` 2) Attackers contaminating API response content. The absence of any script content validation or sandbox mechanism creates security risks equivalent to `eval()`.", "code_snippet": "$.io: function(...) { ... success:function(data) { if (s.bScript) $.script(data); ... } ... }", "link_identifiers": ["$.script", "$.io", "bScript", "success callback", "responseText"], "notes": "Audit all CGI processors that set bScript=true when calling $.io; related existing keywords: $.io, $.script"}
{"name": "network_input-virtualServer_htm-doEdit", "file_path": "REDACTED_SENSITIVE_DATA", "location": "virtualServer.htm: doEdit() [HIDDEN]", "risk_score": 8.0, "confidence": 8.25, "description": "The doEdit function directly uses the unvalidated val2 parameter (stack index) to perform configuration modifications. An attacker can exploit this by controlling val2 through a malicious URL to gain unauthorized access to port forwarding rules. Trigger conditions: 1) The user accesses a crafted URL; 2) val2 exceeds stack boundaries; 3) The backend lacks secondary authentication. Impact: Unauthorized modification or deletion of rules may cause service disruption or expose internal networks. Missing boundary check: No validation of val2's index range (0 ≤ val2 < vtlServ_stackIndex).", "code_snippet": "function doEdit(val1, val2) {\n  param[0] = 1;\n  param[1] = val1;\n  param[2] = val2;\n  $.loadMain(\"vtlServEdit.htm\", param);\n}", "link_identifiers": ["doEdit", "val2", "param[2]", "vtlServ_stack", "vtlServ_stackIndex"], "notes": "Verify whether vtlServEdit.htm passes val2 to hazardous operations, and it is recommended to analyze the ACT_SET implementation subsequently."}
{"name": "network_input-virtualServer_htm-doDel", "file_path": "REDACTED_SENSITIVE_DATA", "location": "virtualServer.htm: doDel() [HIDDEN]", "risk_score": 6.5, "confidence": 6.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "for (var i = 0; i < vtlServ_stackIndex; i++) {\n  if (vtlServ_stackType[i] == \"ip\") {\n    $.act(ACT_DEL, WAN_IP_CONN_PORTMAPPING, vtlServ_stack[i], null);\n  }\n}", "link_identifiers": ["doDel", "ACT_DEL", "selEntry", "vtlServ_stackIndex", "WAN_IP_CONN_PORTMAPPING"], "notes": "Audit whether the backend supports transactions, and it is recommended to check the error handling logic of ACT_DEL."}
{"name": "network_input-virtualServer_htm-checkConflict", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 7.0, "confidence": 7.25, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "if ((exPort <= ftpServer.portNumber) && (ftpServer.portNumber <= exPortEnd)) {\n  conflict = true;\n}", "link_identifiers": ["REDACTED_SENSITIVE_DATA", "FTP_SERVER", "externalPort", "X_TPLINK_ExternalPortEnd"], "notes": "Verify the router service configuration file and recommend extending the detection to ports such as SSH/Telnet."}
{"name": "network_input-cwmp_config-doSave", "file_path": "web/main/cwmp.htm", "location": "web/main/cwmp.htm: doSave[HIDDEN]", "risk_score": 8.0, "confidence": 8.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "if ($.id(\"CR_path\").value.charAt(0) != \"/\") {...}\nif ((!$.num($.id(\"CR_port\").value, true)) {...}\n$.act(ACT_SET, MANAGEMENT_SERVER, null, null, cwmpObj);", "link_identifiers": ["doSave", "cwmpObj.URL", "cwmpObj.X_TPLINK_ConnReqPort", "cwmpObj.X_TPLINK_connReqPath", "$.act(ACT_SET)", "MANAGEMENT_SERVER"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "network_input-parentCtrl-doSave", "file_path": "web/main/parentCtrl.htm", "location": "parentCtrl.htm: doSave()[HIDDEN]", "risk_score": 8.5, "confidence": 8.75, "description": "Multiple unvalidated user input points (MAC address, URL, time parameters) were identified, which are directly submitted to the `/cgi/lanMac` backend endpoint through event handlers like `doSave()`. Trigger condition: when a user submits the parental control configuration form. Input values are directly bound to NVRAM variables (e.g., `parentMac`, `urlAddr`), with no frontend validation for MAC format, URL whitelisting, or time range verification, potentially enabling malicious data injection into NVRAM.", "code_snippet": "[HIDDEN]$('#parentMac').val() [HIDDEN] → $.act('/cgi/lanMac', {...})", "link_identifiers": ["doSave", "parentMac", "urlInfo", "timeS", "ACT_CGI", "/cgi/lanMac", "REDACTED_SECRET_KEY_PLACEHOLDER", "urlAddr"], "notes": "The associated keywords 'ACT_CGI'/'doSave' already exist in the knowledge base; verification is required for the backend /cgi/lanMac's handling logic of NVRAM parameters."}
{"name": "network_input-fwRulesEdit-ruleName_xss_vector", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 8.0, "confidence": 8.75, "description": "Network Input Processing Vulnerability: The front-end page collects firewall rule parameters such as ruleName (maxlength=15) and directly submits them to the back-end RULE operation endpoint via the doSave() function. Trigger Condition: An attacker submits malicious rule configurations (e.g., injecting special characters) through HTTP requests. Security Impact: The ruleName parameter lacks content filtering, potentially enabling stored XSS attacks or serving as an injection point to compromise backend services.", "code_snippet": "function doSave(){\n  fwAttrs.ruleName = $.id(\"ruleName\").value;\n  $.act(ACT_ADD, RULE, null, null, fwAttrs);\n}", "link_identifiers": ["ruleName", "doSave", "$.act", "ACT_ADD", "RULE", "fwAttrs"], "notes": "Verify whether the backend processing files for RULE operations (such as CGI programs) filter the ruleName; related knowledge base ACT_GL operations (network_input-manageCtrl-apiEndpoints)."}
{"name": "auth-cleartext-cookie-storage", "file_path": "web/frame/login.htm", "location": "web/frame/login.htm:0 (PCSubWin)", "risk_score": 7.5, "confidence": 9.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["PCSubWin", "Base64Encoding", "document.cookie", "Authorization", "REDACTED_PASSWORD_PLACEHOLDER", "REDACTED_PASSWORD_PLACEHOLDER"], "notes": "Verify whether the backend enforces HTTPS transmission. Attack chain completeness assessment: entry point (form) → propagation (JS concatenation) → dangerous operation (cookie writing), with a high probability of successful exploitation. It is recommended to subsequently track the validation logic of the Authorization cookie on the backend."}
{"name": "REDACTED_SENSITIVE_DATA", "file_path": "web/main/wanEdit.htm", "location": "wanEdit.htm:10-119", "risk_score": 6.5, "confidence": 4.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["REDACTED_SENSITIVE_DATA", "ip6_gateway", "REDACTED_SECRET_KEY_PLACEHOLDER"], "notes": "Correlation Findings: 1) This function defect has been referenced by 'network_input-wanEdit-form_submission_risk' (form validation phase) 2) Verification required whether the backend processing of ip6_gateway in CGI scripts relies on this validation"}
{"name": "xss-dom-banner-htm-dynamic-insert", "file_path": "web/frame/banner.htm", "location": "banner.htm:15-18", "risk_score": 6.0, "confidence": 4.5, "description": "Potential risk of DOM-based XSS exists: 1) Dynamic DOM writing via $.h($.id('mname'), '' + $.desc) 2) Parameters $.desc and $.modelName may be tainted 3) Trigger conditions: a) $.cn=false (non-Chinese environment) b) Tainted source controls $.desc or $.modelName values c) If $.h() does not sanitize input, arbitrary JS execution occurs. Actual impact depends on external JS implementation; successful exploitation could lead to session hijacking/malicious operations.", "code_snippet": "$.h($.id('mname'), '' + $.desc);\n$.h($.id('mnum'), m_str.bannermodel + $.modelName);", "link_identifiers": ["$.h", "$.id", "$.desc", "$.modelName", "m_str.bannermodel"], "notes": "Pending verification: 1) Whether the implementation of $.h() in the parent JS file sanitizes input 2) Whether $.desc/$.modelName is obtained from external inputs via nvram_get/api 3) Complete data flow tracing from contamination sources to parameters"}
{"name": "network_input-usb-idx_oob", "file_path": "web/main/usbManage.htm", "location": "www/usbManage.htm: handleUsb()[HIDDEN]5[HIDDEN], mountUsb()[HIDDEN]3[HIDDEN]", "risk_score": 7.0, "confidence": 9.0, "description": "Unvalidated idx parameter leads to out-of-bounds access of USB devices. Trigger condition: User passes malicious idx values (such as negative or out-of-bounds values) through interface operations. Specific manifestation: The idx directly indexes the usbDeviceList array in handleUsb() and mountUsb() functions without checking idx < usbDeviceList.length. Security impact: Attackers can trigger JavaScript runtime errors causing denial of service (DoS) or access unauthorized memory regions. Exploitation method: Modify the device index parameter in HTTP requests.", "code_snippet": "if (\"Online\" == usbDeviceList[idx].status)", "link_identifiers": ["handleUsb", "mountUsb", "idx", "usbDeviceList"], "notes": "As a precondition of the attack chain (allowing out-of-bounds access to the __stack attribute); it is necessary to verify whether the backend performs secondary validation on idx."}
{"name": "network_input-usb-stack_injection", "file_path": "web/main/usbManage.htm", "location": "www/usbManage.htm: handleUsb()[HIDDEN]20[HIDDEN]", "risk_score": 8.5, "confidence": 7.75, "description": "Unfiltered __stack attribute leads to command injection risk. Trigger condition: Passing a tainted __stack value (e.g., usbDeviceList[idx].__stack) via $.act() call. Specific manifestation: The __stack attribute is directly concatenated into USB_DEVICE operation commands ($.act(ACT_SET, USB_DEVICE, usbDeviceList[idx].__stack)) without any encoding or filtering. Security impact: If __stack contains malicious command separators (e.g., ;, &&), additional operating system commands may be injected. Exploitation method: Controlling USB device naming or combining with idx out-of-bounds vulnerability to taint the __stack attribute.", "code_snippet": "$.act(ACT_SET, USB_DEVICE, usbDeviceList[idx].__stack, null, command)", "link_identifiers": ["__stack", "$.act", "ACT_SET", "USB_DEVICE", "command"], "notes": "Extended Attack Chain ID: network_input-usb-param_tampering; requires tracking the source of the __stack attribute (possibly in backend components)."}
{"name": "network_input-usb-command_tamper", "file_path": "web/main/usbManage.htm", "location": "www/usbManage.htm: REDACTED_SECRET_KEY_PLACEHOLDER[HIDDEN]", "risk_score": 6.5, "confidence": 7.75, "description": "The user-controllable command object attributes are passed without validation. Trigger condition: Malicious command objects (e.g., {enable: 'malicious'}) are passed via $.act(). Specific manifestation: In functions like REDACTED_SECRET_KEY_PLACEHOLDER, command object attributes (enable/force) are directly passed as $.act() parameters. Security impact: Attackers can modify attribute values to disrupt business logic or trigger unintended behaviors (e.g., forcibly mounting malicious devices). Exploitation method: Tampering with the command parameter in AJAX requests.", "link_identifiers": ["command", "enable", "force", "$.act", "REDACTED_SECRET_KEY_PLACEHOLDER"], "notes": "Share the $.act() call point with __stack injection; need to verify the backend processing logic for the command attribute"}
{"name": "network_input-parentCtrl-formInputs", "file_path": "web/main/parentCtrl.htm", "location": "parentCtrl.htm: <input>[HIDDEN]", "risk_score": 8.0, "confidence": 9.25, "description": "Discovered 7 form input points (mac1-4/parentMac, etc.) submitted via HTTP POST to the /cgi/lanMac endpoint. This forms a complete attack chain with previous findings (network_input-parentCtrl-doSave): frontend input (maxlength=17 with no content filtering) → AJAX submission → backend processing of NVRAM variables. Attackers could craft malicious MAC addresses/URL parameters to trigger parameter injection or buffer overflow vulnerabilities.", "code_snippet": "<input name='mac1' maxlength='17' onkeyup='checkMac(this)'>", "link_identifiers": ["parentMac", "mac1", "mac2", "mac3", "mac4", "timeS", "timeE", "urlInfo", "maxlength", "/cgi/lanMac", "ACT_CGI"], "notes": "Associate existing findings: network_input-parentCtrl-doSave (File path: web/main/parentCtrl.htm)"}
{"name": "network_input-parentCtrl-ajaxEndpoint", "file_path": "web/main/parentCtrl.htm", "location": "parentCtrl.htm: JavaScript[HIDDEN]", "risk_score": 9.0, "confidence": 9.5, "description": "The high-risk AJAX endpoint `/cgi/info` handles system information requests. Trigger condition: sending a crafted AJAX request. Potential impact: may leak sensitive device information or serve as a command injection pivot, requiring validation of backend processing logic. Forms a parallel attack surface with the `/cgi/lanMac` endpoint.", "code_snippet": "$.act(ACT_CGI, '/cgi/info', ...)", "link_identifiers": ["ACT_CGI", "/cgi/info", "$.act"], "notes": "Independent addition of endpoints requires tracking the backend CGI program path."}
{"name": "command_execution-parentCtrl-dynamicEval", "file_path": "web/main/parentCtrl.htm", "location": "parentCtrl.htm: JavaScript[HIDDEN]", "risk_score": 7.0, "confidence": 7.25, "description": "setTimeout(\"$.loadHelp();\",100) carries dynamic execution risks when using string parameters. Trigger condition: If an attacker gains control over the $.loadHelp() implementation, arbitrary code execution may occur. Current constraints: The parameter is fixed, but the implementation security of ../js/help.js requires verification.", "code_snippet": "setTimeout(\"$.loadHelp();\",100)", "link_identifiers": ["setTimeout", "$.loadHelp"], "notes": "Verify whether loadHelp() in ../js/help.js is controllable"}
{"name": "xss-usb-dom-01", "file_path": "web/main/usbManage.htm", "location": "usbManage.htm:180,182,184,144", "risk_score": 9.0, "confidence": 8.6, "description": "High-risk DOM-based XSS exploitation chain: Attackers manipulate USB device metadata (such as maliciously crafted volume labels) or hijack backend responses to contaminate properties like volumeList[i].name/fileSystem. When administrators access the USB management page, the contaminated data is directly inserted into innerHTML without filtering (lines 180/182/184), triggering execution of malicious scripts. Trigger conditions: 1) Attacker must control USB device metadata or perform man-in-the-middle response hijacking 2) Administrator accesses /web/main/usbManage.htm. Successful exploitation grants complete control over administrator sessions.", "code_snippet": "cell.innerHTML = volumeList[i].name;  // [HIDDEN]", "link_identifiers": ["volumeList", "name", "fileSystem", "capacity", "innerHTML", "usbDeviceList", "$.act", "ACT_GL"], "notes": "Verify whether the component (e.g., cgibin) that generates the volumeList on the backend sanitizes external inputs. Related file: USB data processing functions in /lib/libshared.so."}
{"name": "tamper-usb-param-01", "file_path": "web/main/usbManage.htm", "location": "usbManage.htm (handleUsb[HIDDEN])", "risk_score": 7.5, "confidence": 7.75, "description": "Parameter Tampering Risk: The `__stack` parameter in dynamic requests (e.g., `usbDeviceList[idx].__stack`) serves as a device unique identifier and is submitted via `$.act(ACT_SET, ...)`. This parameter is not displayed on the frontend but can be tampered with, allowing attackers to modify the `__stack` value to gain unauthorized access to other USB devices. Trigger Condition: A maliciously crafted `__stack` is sent when a user clicks a device operation button. The absence of boundary checks and backend validation fails to verify whether the current user has permission to operate the target device.", "code_snippet": "$.act(ACT_SET, USB_DEVICE, usbDeviceList[idx].__stack, null, command);", "link_identifiers": ["__stack", "$.act", "ACT_SET", "USB_DEVICE", "command.enable", "handleUsb", "handleVolume"], "notes": "__stack format example: '0,1', associated with backend validation: /cgi-bin/usb_controller permission logic"}
{"name": "network_input-portmapping_validation", "file_path": "REDACTED_SENSITIVE_DATA", "location": "www/virtualServer.htm", "risk_score": 7.0, "confidence": 6.25, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "if ((this.externalPort != 0) && (this.X_TPLINK_ExternalPortEnd == 0))\n  cell.innerHTML = this.externalPort;", "link_identifiers": ["externalPort", "X_TPLINK_ExternalPortEnd", "REDACTED_SENSITIVE_DATA", "WAN_IP_CONN_PORTMAPPING", "$.act", "ACT_SET"], "notes": "Need to combine backend CGI verification: 1) Find the CGI program handling the ACT_SET operation 2) Verify the WAN_IP_CONN_PORTMAPPING parameter processing flow 3) Test the implementation of port parameter boundary checks. Related hint: Relevant records for '$.act', 'ACT_SET', 'WAN_IP_CONN_PORTMAPPING' already exist in the knowledge base."}
{"name": "negative_finding-hardcoded_credentials", "file_path": "web/main/parentCtrl.htm", "location": "[HIDDEN]", "risk_score": 0.0, "confidence": 4.75, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "N/A", "link_identifiers": ["REDACTED_SENSITIVE_DATA", "REDACTED_PASSWORD_PLACEHOLDER", "REDACTED_SENSITIVE_DATA"]}
{"name": "negative_finding-dangerous_functions", "file_path": "web/main/parentCtrl.htm", "location": "[HIDDEN]", "risk_score": 0.0, "confidence": 4.5, "description": "No detection of high-risk functions such as eval()/Function(). Evidence: Full-text scan did not reveal any direct code execution functions.", "code_snippet": "N/A", "link_identifiers": ["eval", "Function", "code_execution"]}
{"name": "analysis_task-commonjs_validation", "file_path": "web/main/parentCtrl.htm", "location": "parentCtrl.htm: JavaScript[HIDDEN]", "risk_score": 0.0, "confidence": 5.0, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["../js/common.js", "AJAX", "[HIDDEN]", "ACT_CGI"], "notes": "Correlation Discovery: network_input-parentCtrl-ajaxEndpoint"}
{"name": "analysis_task-cgi_tracing", "file_path": "web/main/parentCtrl.htm", "location": "parentCtrl.htm: CGI[HIDDEN]", "risk_score": 0.0, "confidence": 5.0, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["/cgi/lanMac", "/cgi/info", "CGI[HIDDEN]", "[HIDDEN]"], "notes": "Association Discovery: network_input-parentCtrl-formInputs and network_input-parentCtrl-ajaxEndpoint"}
{"name": "analysis_task-helpjs_inspection", "file_path": "web/main/parentCtrl.htm", "location": "parentCtrl.htm: setTimeout[HIDDEN]", "risk_score": 0.0, "confidence": 5.0, "description": "Task Suggestion 3: Check whether loadHelp() in ../js/help.js is controllable.", "link_identifiers": ["../js/help.js", "loadHelp", "setTimeout", "[HIDDEN]"], "notes": "Association Discovery: command_execution-parentCtrl-dynamicEval"}
{"name": "network_input-setPwd-http_plaintext_password", "file_path": "web/frame/setPwd.htm", "location": "web/frame/setPwd.htm ([HIDDEN])", "risk_score": 8.5, "confidence": 9.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "xmlHttpObj.open(\"POST\", \"http://192.168.1.1/cgi/setPwd?pwd=\" + Base64Encoding($(\"newPwd\").value), true);", "link_identifiers": ["setPwd.htm", "/cgi/setPwd", "/cgi-bin/setPwd", "Base64Encoding", "xmlHttp.open", "pwd=", "newPwd"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "network_input-setPwd-default_admin_credential", "file_path": "web/frame/setPwd.htm", "location": "web/frame/setPwd.htm ([HIDDEN])", "risk_score": 7.0, "confidence": 8.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "function next(){\n  xmlHttpObj.open(\"POST\", \"http://192.168.1.1/cgi/setPwd?pwd=\" + Base64Encoding(\"REDACTED_PASSWORD_PLACEHOLDER\", true));\n}", "link_identifiers": ["next()", "skipBtn", "Base64Encoding(\"REDACTED_PASSWORD_PLACEHOLDER\")", "setSkip", "/cgi/setPwd"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "REDACTED_SENSITIVE_DATA", "file_path": "web/frame/login.htm", "location": "login.htm: JavaScript[HIDDEN]PCSubWin()", "risk_score": 8.0, "confidence": 8.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["Authorization", "Base64Encoding", "document.cookie", "PCSubWin"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "auth-bypass-clientlock", "file_path": "web/frame/login.htm", "location": "login.htm: pageLoad()[HIDDEN]", "risk_score": 6.5, "confidence": 6.25, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "if (authTimes >= 5) {\n  isLocked = true;\n  lockWeb(true);\n  window.setTimeout(function(){...}, 1000);\n}", "link_identifiers": ["isLocked", "authTimes", "forbidTime", "lockWeb"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "xss-modelname-injection", "file_path": "web/frame/login.htm", "location": "login.htm: pageLoad()[HIDDEN]", "risk_score": 6.0, "confidence": 6.25, "description": "Dynamic content injection poses an XSS risk. Trigger condition: The pageLoad() function executes upon page loading. The modelName/modelDesc variables are directly injected into the DOM without filtering. If these values originate from externally controllable inputs (such as NVRAM), a stored XSS attack chain could be constructed. Dangerous operation: Stealing Authorization cookies to achieve account hijacking.", "code_snippet": "deleteCookie(\"Authorization\");\n$(\"mnum\").innerHTML = \"Model No. \" + modelName;", "link_identifiers": ["deleteCookie", "modelName", "modelDesc", "innerHTML"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "xss-network_input-doAddUrl", "file_path": "web/main/parentCtrl.htm", "location": "www/parentCtrl.htm:? (doAddUrl) ?", "risk_score": 8.0, "confidence": 8.0, "description": "The doAddUrl() function contains a stored XSS vulnerability: The user-input urlInfo value is directly inserted into the DOM via innerHTML without any filtering (cell.innerHTML = urlInfo.value). Trigger conditions: 1) Attacker submits a URL containing malicious scripts 2) Administrator adds the URL 3) Administrator views the 'Blocked URLs' list. Successful exploitation could lead to session hijacking, thereby enabling manipulation of device settings.", "code_snippet": "cell.innerHTML = $.id(\"urlInfo\").value;", "link_identifiers": ["doAddUrl", "urlInfo", "innerHTML", "urltbl"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "mac_bypass-configuration_load-doSave", "file_path": "web/main/parentCtrl.htm", "location": "www/parentCtrl.htm:? (doClkSave/doSave) ?", "risk_score": 7.0, "confidence": 6.75, "description": "MAC address validation logic flaw: Incorrect condition judgment in `doClkSave()`'s `$.mac()` verification (error prompt triggered when validation passes). Trigger condition: Submitting specially formatted MAC addresses (e.g., over-length or containing special characters). Combined with `setParentMac()`'s unfiltered copying (`parentMac.value = curPCMac.value`), this may bypass MAC validation and write to NVRAM, affecting firewall rules.", "code_snippet": "if (($.id(\"parentMac\").value != \"\") && ($.mac($.id(\"parentMac\").value, true))) { $.alert(ERR_MAC_FORMAT); }", "link_identifiers": ["doClkSave", "doSave", "$.act", "ACT_SET", "FIREWALL", "parentMac", "curPCMac", "$.mac"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "array_boundary-ipc-doDelUrl", "file_path": "web/main/parentCtrl.htm", "location": "www/parentCtrl.htm:? (doDelUrl) ?", "risk_score": 5.5, "confidence": 5.0, "description": "The `doDelUrl()` array operation lacks boundary checking: it directly uses `delListIndex` to manipulate the `allUrl` array. Trigger condition: After manipulating the array length through techniques like prototype pollution, out-of-bounds access may cause memory corruption. Actual impact depends on the JS engine implementation and may lead to denial of service.", "code_snippet": "delList[delListIndex] = allUrl[i - 1]; delListIndex++;", "link_identifiers": ["doDelUrl", "allUrl", "delList", "delListIndex"], "notes": "Requires exploitation in conjunction with other vulnerabilities, low probability of triggering but exposes code quality issues. Related knowledge base keywords: allUrl (existing)."}
{"name": "network_input-fwRulesEdit-unvalidated_params", "file_path": "REDACTED_SENSITIVE_DATA", "location": "www/fwRulesEdit.htm: doSave()[HIDDEN]", "risk_score": 8.5, "confidence": 8.5, "description": "Risk of Unvalidated Parameter Transmission: The frontend collects eight firewall rule parameters (fwAttrs) and directly submits them via $.act(), with critical parameters such as protocol/direction being entirely user-controllable and unfiltered. Trigger Condition: An attacker crafts a malicious AJAX request or bypasses frontend validation. Actual Impact: If backend validation is lacking, this could lead to protocol injection (e.g., forging ICMP types) or traffic direction confusion (e.g., reversing internal/external network directions). Exploitation Chain: User input → DOM parameters → $.act() submission → backend processing → firewall rule execution.", "link_identifiers": ["protocol", "direction", "fwAttrs", "$.act", "doSave", "RULE", "ACT_SET"], "notes": "Verify the backend CGI's handling of the protocol value: check if only preset values (TCP/UDP/ICMP) are allowed."}
{"name": "network_input-fwRulesEdit-split_vulnerability", "file_path": "REDACTED_SENSITIVE_DATA", "location": "www/fwRulesEdit.htm: showWan()[HIDDEN]", "risk_score": 7.0, "confidence": 8.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "var host = hostList[i].split(':')[1];", "link_identifiers": ["internalHostRef", "externalHostRef", "split", "hostList", "showWan"], "notes": "Subsequent testing should include: submitting host=ATTACK:PAYLOAD:123 to observe the backend parsing behavior."}
{"name": "network_input-fwRulesEdit-opt_control", "file_path": "REDACTED_SENSITIVE_DATA", "location": "www/fwRulesEdit.htm", "risk_score": 6.5, "confidence": 6.5, "description": "Operation identifier control risk: $.mainParam contains the operation type (opt) and rule identifier (stk), but the assignment logic is not exposed. Trigger condition: Tampering with ACT_ADD/ACT_SET constant values. Actual impact: May bypass rule modification permission checks (e.g., changing ACT_SET to ACT_ADD to create unauthorized rules). Constraint: Relies on strict backend validation of opt values.", "link_identifiers": ["$.mainParam", "opt", "stk", "ACT_ADD", "ACT_SET", "RULE"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "subsequent_task-cgi_rule_validation", "file_path": "REDACTED_SENSITIVE_DATA", "location": "[HIDDEN]/sbin/ [HIDDEN] /www/cgi-bin/", "risk_score": 9.0, "confidence": 8.75, "description": "Critical validation task: Analyze the backend CGI program handling RULE operations (located in /sbin or /www/cgi-bin) to verify: 1) Whether the protocol parameter is strictly limited to TCP/UDP/ICMP (preventing protocol injection) 2) Boundary checks for ACT_ADD/ACT_SET operators (preventing unauthorized rule operations) 3) Whether hostList parsing handles malformed colon formats (preventing command injection). Associated frontend exploitation chain: User input → fwRulesEdit.htm → $.act request → CGI parsing → firewall rule execution.", "link_identifiers": ["RULE", "ACT_SET", "protocol", "split", "CGI"], "notes": "Triggered by the frontend risk chain (doSave/showWan in fwRulesEdit.htm). Files requiring verification: binary programs handling ACT_ADD/ACT_SET constants, particularly modules parsing fwAttrs parameters."}
