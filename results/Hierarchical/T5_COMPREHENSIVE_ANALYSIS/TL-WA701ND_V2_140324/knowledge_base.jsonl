{"name": "network_service-httpd-inittab_launch", "file_path": "etc/inittab", "location": "/etc/inittab:? [::sysinit]", "risk_score": 9.5, "confidence": 9.0, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["/usr/bin/httpd", "& (background execution)", "rcS", "::sysinit"], "notes": "Subsequent analysis must examine the input processing logic of /usr/bin/httpd"}
{"name": "env_variable-PATH-rcS_export", "file_path": "etc/inittab", "location": "/etc/init.d/rcS:? [export]", "risk_score": 8.0, "confidence": 7.5, "description": "PATH environment variable hijacking path: The rcS script extends PATH via 'export PATH=$PATH:/etc/ath'. If an attacker gains write access to the /etc/ath directory (e.g., through other vulnerabilities), they can implant malicious programs to hijack legitimate commands. Trigger condition: Any command executed via PATH search (e.g., system scripts calling pathless commands). Constraint: Requires write permissions for the /etc/ath directory. Actual impact: Forms a privilege escalation or persistence attack chain, but requires collaboration with other vulnerabilities.", "link_identifiers": ["PATH", "/etc/ath", "export", "rcS"], "notes": "Verify the permissions and file integrity of the /etc/ath directory"}
{"name": "hardware_interface-getty-serial_login", "file_path": "etc/inittab", "location": "/etc/inittab:? [::respawn]", "risk_score": 6.0, "confidence": 5.5, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["/sbin/getty", "ttyS0", "::respawn"], "notes": "It is recommended that subsequent tasks focus on the analysis of the /sbin/getty file."}
{"name": "attack_chain-rcS_httpd_to_path_hijack", "file_path": "etc/inittab", "location": "HIDDEN: /etc/inittab(HTTPHIDDEN) -> /etc/init.d/rcS(PATHHIDDEN)", "risk_score": 8.5, "confidence": 7.0, "description": "The discovered attack chain path associated with the rcS script: After obtaining initial execution capability through an HTTP service vulnerability (such as httpd command injection), the PATH environment variable hijacking mechanism set by rcS (adding /etc/ath to PATH) can be exploited to achieve privilege escalation. Trigger steps: 1) The attacker executes commands by exploiting the httpd vulnerability; 2) Writes a malicious program to the /etc/ath directory; 3) Waits for the system to execute a pathless command to trigger the malicious program. Constraints: Both the httpd vulnerability and writable permissions for the /etc/ath directory must exist. Actual impact: Forms a complete exploitation chain from the network attack surface to privilege escalation.", "link_identifiers": ["rcS", "/usr/bin/httpd", "PATH", "/etc/ath", "attack_chain"], "notes": "Verification required: 1) Whether httpd has command injection vulnerabilities 2) Default permissions of the /etc/ath directory"}
{"name": "configuration-account-REDACTED_PASSWORD_PLACEHOLDER-uid0", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 9.8, "confidence": 8.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_PASSWORD_PLACEHOLDER:x:0:0:REDACTED_PASSWORD_PLACEHOLDER:/REDACTED_PASSWORD_PLACEHOLDER:/bin/sh", "link_identifiers": ["REDACTED_PASSWORD_PLACEHOLDER", "UID=0", "GID=0", "/REDACTED_PASSWORD_PLACEHOLDER", "/bin/sh"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "configuration-system-accounts-shell", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 7.5, "confidence": 7.0, "description": "The system accounts (sync/shutdown/halt) are configured with non-standard shell paths: sync uses /bin/sync, and shutdown uses /sbin/shutdown. Attackers could modify the authentication methods of these accounts to create covert backdoors. Trigger condition: attackers tamper with account configurations. Boundary check: secure shell paths are not enforced. Security impact: privilege persistence and detection bypass.", "code_snippet": "sync:x:5:0:sync:/bin:/bin/sync", "link_identifiers": ["sync", "shutdown", "halt", "/bin/sync", "/sbin/shutdown", "/sbin/halt"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "configuration-account-ap71-gid0", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 8.0, "confidence": 8.0, "description": "Suspicious account 'ap71' configuration anomaly: UID=500 but GID=0 (REDACTED_PASSWORD_PLACEHOLDER group), home directory /REDACTED_PASSWORD_PLACEHOLDER. Attackers exploiting this account vulnerability may gain REDACTED_PASSWORD_PLACEHOLDER group privileges. Trigger condition: ap71 account compromised. Boundary check: No GID permission isolation. Security impact: Privilege escalation to REDACTED_PASSWORD_PLACEHOLDER group level.", "code_snippet": "ap71:x:500:0:Linux User,,,:/REDACTED_PASSWORD_PLACEHOLDER:/bin/sh", "link_identifiers": ["ap71", "GID=0", "/REDACTED_PASSWORD_PLACEHOLDER", "UID=500"], "notes": "Verify actual permissions required"}
{"name": "REDACTED_SENSITIVE_DATA", "file_path": "etc/shadow", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 9.0, "confidence": 9.0, "description": "Five system accounts (bin, daemon, adm, nobody, ap71) were found configured with empty passwords. Trigger condition: An attacker can directly log in to the system via interfaces such as SSH/Telnet using these account names without credentials. Security impact: The attacker can immediately gain system access for privilege escalation or lateral movement, with the ap71 account requiring special attention to determine if it is a firmware-customized account.", "link_identifiers": ["REDACTED_SENSITIVE_DATA", "bin", "daemon", "adm", "nobody", "ap71"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "weak-authentication-md5-hash-storage", "file_path": "etc/shadow", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 8.5, "confidence": 8.5, "description": "The privileged accounts REDACTED_PASSWORD_PLACEHOLDER and REDACTED_PASSWORD_PLACEHOLDER store passwords using the MD5 hash algorithm identified by $1$. Trigger condition: After obtaining the shadow file (through vulnerabilities or physical access), attackers can perform offline cracking. Security impact: The MD5 algorithm is vulnerable to rainbow table attacks and collision attacks, potentially leading to efficient cracking and the exposure of privileged credentials, thereby granting complete system control.", "link_identifiers": ["REDACTED_SENSITIVE_DATA", "REDACTED_PASSWORD_PLACEHOLDER", "REDACTED_PASSWORD_PLACEHOLDER", "$1$", "MD5"], "notes": "It is recommended to upgrade to stronger hash algorithms such as SHA-256 ($5$) or SHA-512 ($6$). In the attack path: accounts with empty passwords can directly read this configuration after login, enabling offline cracking to form a complete privilege escalation chain."}
{"name": "script-firewall_iptables_stop", "file_path": "etc/rc.d/iptables-stop", "location": "etc/rc.d/iptables-stop", "risk_score": 0.0, "confidence": 5.0, "description": "The script is a fixed operational sequence for clearing iptables firewall rules during system shutdown procedures, with no external input processing logic. Specific characteristics:  \n1) All commands are hardcoded (iptables -F/-X), with no dynamic content generation  \n2) Does not accept any parameters, environment variables, or external data sources  \n3) Only invoked by the init process during system shutdown  \n4) Executes predefined security operations (resetting firewall policies)  \nSecurity impact: No practical exploitation path exists, as the absence of data input points and controllable trigger conditions prevents attackers from interfering with its execution process or injecting malicious commands.", "code_snippet": "", "link_identifiers": ["iptables", "filter", "nat", "INPUT", "OUTPUT", "FORWARD", "PREROUTING", "POSTROUTING"], "notes": "Note: This script runs with REDACTED_PASSWORD_PLACEHOLDER privileges, but its enclosed nature does not pose a threat. It is recommended to subsequently analyze the security of the invocation chain in the init system (e.g., /etc/inittab)."}
{"name": "command_execution-rc_modules-kernel_load", "file_path": "etc/rc.d/rc.modules", "location": "rc.modules:HIDDEN", "risk_score": 0.0, "confidence": 4.9, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["insmod", "test -d", "kver_is_2615", "/lib/modules/2.6.31/kernel/", "/lib/modules/2.6.15/kernel/", "nf_conntrack.ko", "harmony.ko", "wlan_warn.ko"], "notes": "The security of individually loaded modules (e.g., wlan_warn.ko) needs to be analyzed separately, but module risks fall outside the scope of this document's analysis."}
{"name": "configuration-wireless-default_insecure_settings", "file_path": "etc/ath/wsc_config.txt", "location": "wsc_config.txt", "risk_score": 8.5, "confidence": 9.5, "description": "High-risk default security configuration combination: 1) CONFIGURED_MODE=1 places the AP in an unconfigured state 2) USE_UPNP=1 enables the vulnerable UPNP service 3) KEY_MGMT=OPEN implements zero-authentication access 4) ENCR_TYPE_FLAGS=0x1 enforces crackable WEP encryption. Automatically takes effect upon device startup, allowing attackers to access the network without credentials, combined with UPNP vulnerabilities enabling internal network penetration (e.g., NAT bypass).", "link_identifiers": ["CONFIGURED_MODE", "USE_UPNP", "KEY_MGMT", "ENCR_TYPE_FLAGS", "WEP", "default_config"], "notes": "Verify whether the UPnP service implementation (such as miniupnpd) has any known vulnerabilities."}
{"name": "authentication-wps_pin_vulnerability", "file_path": "etc/ath/wsc_config.txt", "location": "wsc_config.txt", "risk_score": 7.0, "confidence": 8.75, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "CONFIG_METHODS=0x84\nSSID=WscAtherosAP", "link_identifiers": ["CONFIG_METHODS", "SSID", "WPS", "REDACTED_SENSITIVE_DATA", "bruteforce"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "REDACTED_SENSITIVE_DATA", "file_path": "etc/ath/wsc_config.txt", "location": "wsc_config.txt", "risk_score": 0.5, "confidence": 5.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["NW_KEY", "UUID", "MAC_ADDRESS", "commented_out"], "notes": "Low-risk item, no further follow-up required"}
{"name": "env_set-PATH-expansion-rcS16", "file_path": "etc/rc.d/rcS", "location": "etc/rcS:16", "risk_score": 6.0, "confidence": 8.0, "description": "The export command adds /etc/ath to PATH (line 16). Attackers can exploit the writability of the /etc/ath directory to implant malicious programs. Trigger conditions: 1) The attacker gains file write permissions 2) System processes execute commands using relative paths. Impact: When other processes invoke commands in PATH, malicious programs may be executed, leading to privilege escalation.", "code_snippet": "export PATH=$PATH:/etc/ath", "link_identifiers": ["PATH", "export", "/etc/ath"], "notes": "Verify the default permissions and writability of the /etc/ath directory; reference the permission records of the /etc/ath directory in the knowledge base."}
{"name": "configuration_load-ramfs-mount-rcS13", "file_path": "etc/rc.d/rcS", "location": "etc/rcS:13-14", "risk_score": 7.5, "confidence": 10.0, "description": "Mount /tmp and /var as ramfs without size limits (lines 13-14). Trigger condition: Automatically executed during system startup. Impact: 1) Attackers writing large files continuously may cause memory exhaustion leading to denial of service 2) The globally writable /tmp directory could be exploited to place malicious scripts or for symlink attacks.", "code_snippet": "mount -t ramfs -n none /tmp\nmount -t ramfs -n none /var", "link_identifiers": ["mount", "/tmp", "/var", "ramfs"]}
{"name": "network_input-httpd-exposure-rcS37", "file_path": "etc/rc.d/rcS", "location": "etc/rcS:37", "risk_score": 9.0, "confidence": 10.0, "description": "Start the httpd service in the background (line 37). Trigger condition: Automatically executed during system startup. Impact: As a network-exposed service, httpd may become a remote attack entry point. Combined with PATH settings, if httpd calls external commands, it could form a command injection chain.", "code_snippet": "/usr/bin/httpd &", "link_identifiers": ["/usr/bin/httpd", "&"], "notes": "Analyze the /usr/bin/httpd binary file to trace network input processing; correlate with background execution records of '&' in the knowledge base"}
{"name": "command_execution-rc_wlan-kernel_arg_injection", "file_path": "etc/rc.d/rc.wlan", "location": "rc.wlan:36-58", "risk_score": 8.0, "confidence": 7.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "if [ \"${DFS_domainoverride}\" != \"\" ]; then\n    DFS_ARGS=\"domainoverride=$DFS_domainoverride $DFS_ARGS\"\nfi", "link_identifiers": ["DFS_domainoverride", "ATH_countrycode", "DFS_ARGS", "PCI_ARGS", "insmod"], "notes": "Verification blocked: Unable to access /etc/ath/apcfg to confirm parameter source and filtering mechanism"}
{"name": "command_execution-rc_wlan-indirect_exec", "file_path": "etc/rc.d/rc.wlan", "location": "rc.wlan:64-70", "risk_score": 5.0, "confidence": 5.25, "description": "Wireless interface shutdown process indirect execution risk: When the 'down' parameter is passed, the script retrieves interface information via iwconfig and executes /etc/ath/killVAP. Trigger condition: Wireless functionality shutdown via system service script invocation. Potential impact: An attacker controlling wireless interface naming or iwconfig output could influence script logic (evidence: unhandled command output exception cases).", "code_snippet": "APS=`iwconfig | grep ath`\nif [ \"${APS}\" != \"\" ]; then\n    /etc/ath/killVAP all\n    exit\nfi", "link_identifiers": ["iwconfig", "killVAP", "APS"], "notes": "Verification blocked: Unable to access /etc/ath/killVAP to assess actual vulnerability"}
{"name": "file_missing-etc_ath_default_wsc_cfg", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 0.0, "confidence": 5.0, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["default_wsc_cfg.txt", "etc/ath/default", "PATH", "attack_chain"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "network_input-ieee802_1x_receive-EAPOL_Key_overflow", "file_path": "sbin/hostapd", "location": "hostapd:0x41600c (sym.ieee802_1x_receive)", "risk_score": 7.0, "confidence": 7.25, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "if (param_3[1] == 3) {\n  (**(loc._gp + -0x7bfc))(..., param_3, uVar6 + 4);\n}", "link_identifiers": ["ieee802_1x_receive", "param_3", "uVar6", "REDACTED_SENSITIVE_DATA", "loc._gp + -0x7bfc"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "configuration_load-hostapd_config_apply_line-SSID_overflow", "file_path": "sbin/hostapd", "location": "hostapd (sym.hostapd_bss_config_apply_line)", "risk_score": 8.0, "confidence": 8.0, "description": "SSID configuration parsing single-byte overflow: The hostapd_config_apply_line function processes the ssid parameter, where an input of exactly 32 bytes triggers a single-byte out-of-bounds write of 0. The boundary check only rejects inputs >32 bytes, but a legitimate 32-byte input causes *(param_1+length+0x7c)=0 to write out of bounds. Trigger condition: Injecting a 32-byte SSID via configuration file/network (e.g., malicious AP configuration). Potential impact: Corrupts heap metadata, enabling RCE when combined with memory layout (hostapd typically runs with high privileges).", "code_snippet": "if (0x1f < iVar1 - 1U) goto error;\n(**(loc._gp + -0x7968))(param_1 + 0x7c, pcVar15, iVar1);\n*(param_1 + *(param_1 + 0xa0) + 0x7c) = 0;", "link_identifiers": ["hostapd_config_apply_line", "ssid", "param_1+0x7c", "param_1+0xa0", "loc._gp + -0x7968", "loc._gp + -0x7a8c"], "notes": "Need to verify the buffer size of param_1+0x7c and the actual triggering method (NVRAM/network configuration). Similar to CVE-2015-1863."}
{"name": "network_input-ieee802_11_mgmt-mgmt_frame_validation", "file_path": "sbin/hostapd", "location": "hostapd:0x41977c (sym.ieee802_11_mgmt)", "risk_score": 5.5, "confidence": 6.0, "description": "Management Frame Parsing Depth Validation Missing: The ieee802_11_mgmt function (0x41977c) only verifies the minimum length of management frames (0x24) without performing deep boundary checks on nested elements within the frame (such as SSID and channel parameters). Attackers can send beacon/probe request frames containing malformed elements to trigger parsing logic errors. Trigger condition: 802.11 management frames with length > 0x24 containing abnormal elements. Actual impact depends on the robustness of the ieee802_11_parse_elems function.", "code_snippet": "if (param_3 < 0x24) { printf(\"too short\"); return; }\nsym.ieee802_11_parse_elems(...);", "link_identifiers": ["ieee802_11_mgmt", "param_2", "param_3", "ieee802_11_parse_elems"], "notes": "It is recommended to perform fuzz testing on the management frame parsing path. Attack vector: Send malformed 802.11 frames → Trigger parsing errors → Service crash"}
{"name": "network_input-ieee802_1x_receive-EAPOL_validation", "file_path": "sbin/hostapd", "location": "hostapd:0x41607c (sym.ieee802_1x_receive)", "risk_score": 6.0, "confidence": 6.0, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["ieee802_1x_receive", "param_4", "param_3[1]", "param_3[4]"], "notes": "Analysis requires integration with functions such as wpa_receive. Attack path: Malicious EAPOL frame → Parsing anomaly → Service instability"}
{"name": "network_input-radius_msg_verify-unverified_radius", "file_path": "sbin/hostapd", "location": "hostapd (sym.radius_msg_verify)", "risk_score": 7.5, "confidence": 4.5, "description": "RADIUS authentication mechanism not verified: The radius_msg_verify function exists but its implementation could not be located, making it impossible to confirm the robustness of security mechanisms such as Authenticator verification. In WPA2-Enterprise environments, attackers may forge RADIUS messages to bypass authentication. Trigger condition: Network man-in-the-middle forging RADIUS responses. Actual impact: Potential unauthorized access to wireless networks.", "link_identifiers": ["radius_msg_verify", "radius_client_handle_data", "Message-Authenticator"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "cmd_injection-topology_parser-fcn00400d0c", "file_path": "sbin/apstart", "location": "fcn.00400d0c:0x400d0c", "risk_score": 9.5, "confidence": 8.5, "description": "High-risk command injection vulnerability: Attackers can execute arbitrary commands by tampering with the topology file content. Specific path: 1) Entry point: Topology file path specified by command-line parameter (param_1) 2) Taint propagation: File content is directly concatenated into command strings (e.g., 'snprintf(\"ifconfig %s down\", user_input)') after parsing by fcn.00400d0c 3) Dangerous operation: Execution of unfiltered commands via system function 4) Trigger condition: dryrun=0 (default value) with existing call mechanism. Actual impact: Obtains REDACTED_PASSWORD_PLACEHOLDER privileges to execute arbitrary commands.", "code_snippet": "(**(loc._gp + -0x7fbc))(auStack_f8,\"ifconfig %s down\",iVar17);\niVar9 = fcn.00400c7c(auStack_f8,0);", "link_identifiers": ["param_1", "fcn.00400d0c", "system", "sprintf", "auStack_f8", "*0x4124b0", "ifconfig_%s_down", "brctl_delbr_%s"], "notes": "Critical gaps: 1) Suspected default path for topology file is /etc/ath/apcfg 2) Need to verify whether HTTP interface has configuration upload functionality 3) Check if nvram_set operation writes topology configuration"}
{"name": "path_traversal-apstart_parameter-0x400d0c", "file_path": "sbin/apstart", "location": "apstart:0x400d0c", "risk_score": 8.0, "confidence": 7.75, "description": "Path Traversal Vulnerability: The topology file path is entirely controlled via command-line parameters (apstart [option] <topology file>), with no path sanitization implemented. Attackers can inject `../` to traverse directories: 1) Only file existence is verified before reading (fopen) 2) Combined with command concatenation operations (e.g., 'snprintf(\"brctl delbr %s\")'), this could lead to path injection-based command execution. Trigger Condition: Attackers can control apstart launch parameters.", "link_identifiers": ["apstart", "<topology file>", "fopen", "snprintf", "brctl_delbr_%s"], "notes": "Pending verification: 1) How startup scripts in /etc/init.d pass paths 2) Default permissions of topology.conf"}
{"name": "file_permission-/sbin/reg", "file_path": "sbin/reg", "location": "sbin/reg", "risk_score": 9.2, "confidence": 9.35, "description": "Incorrect file permission configuration: The permission bits are set to 777 (rwxrwxrwx), allowing any user to modify or replace /sbin/reg. Attackers can implant malicious code to hijack program execution flow. Trigger condition: An attacker obtains arbitrary user privileges (e.g., gaining www-data access through a web vulnerability). Security impact: Combined with register operation vulnerabilities, this forms a complete attack chain (modify program → trigger kernel vulnerability), potentially leading to privilege escalation or system crash.", "link_identifiers": ["reg", "0x89f1", "ioctl", "attack_chain"], "notes": "It is necessary to check whether there are setuid calls to this program in the firmware; related finding: unverified register access in sym.regread@0x004009f0 (via the same ioctl 0x89f1)."}
{"name": "unvalidated_hw_access-sym.regread", "file_path": "sbin/reg", "location": "sym.regread@0x004009f0", "risk_score": 9.5, "confidence": 8.5, "description": "Hardware register unverified access: Controls ioctl(0x89f1) operations through command-line arguments (e.g., `reg '0x1000=0xFFFF'`). The sym.regread function does not validate the param_1 boundary (offset address) or the range of written values. Trigger condition: Malicious parameters passed via web interface/script. Security impact: User-controllable data is directly passed to the kernel driver, potentially causing memory corruption or hardware state tampering. The likelihood of successful exploitation depends on driver implementation.", "code_snippet": "*(iVar4 + 0x14) = auStackX_0;\niVar2 = (*pcVar5)(uVar3,0x89f1,iVar4);", "link_identifiers": ["sym.regread", "param_1", "ioctl", "0x89f1", "argv", "optarg", "strtol", "attack_chain"], "notes": "Requires further analysis: 1) Kernel driver's handling of 0x89f1 2) Scripts calling reg (e.g., /etc/init.d/*); Related finding: File permission issue with /sbin/reg (precondition in attack chain)"}
{"name": "network_input-wpatalk-argv_stack_overflow", "file_path": "sbin/wpatalk", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 9.5, "confidence": 8.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "uVar7 = strlen(*param_1);\nstrncpy(auStack_124, *param_1, uVar7);", "link_identifiers": ["argv", "REDACTED_SENSITIVE_DATA", "auStack_124", "strncpy", "0x402508"], "notes": "Verify whether the www directory CGI calls wpatalk and passes user input"}
{"name": "ipc-wpatalk-response_boundary", "file_path": "sbin/wpatalk", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 8.0, "confidence": 7.25, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "uStack_820 = 0x7ff;\n...\nauStack_81c[uStack_820] = 0;", "link_identifiers": ["REDACTED_SENSITIVE_DATA", "auStack_81c", "uStack_820", "0x7ff", "loc._gp"], "notes": "Verify that the network receive function (loc._gp-0x7f14) enforces a maximum length ≤2047"}
{"name": "env_get-wpatalk-WPA_CTRL_DIR_override", "file_path": "sbin/wpatalk", "location": "wpatalk:0x402dac (fcn.00402d78)", "risk_score": 6.5, "confidence": 8.25, "description": "Environment variable handling logic error: fcn.00402d78 incorrectly overwrites the target buffer with a hardcoded '/var/run' when the WPA_CTRL_DIR environment variable exists. Consequences: 1) Environment variable configuration becomes ineffective 2) Contradicts help documentation 3) Potential bypass of path security controls. Trigger condition: WPA_CTRL_DIR variable set before program launch. Constraint check: Only verifies if path starts with '/'. Potential impact: Combined with path traversal vulnerability, could manipulate IPC socket file location.", "code_snippet": "pcVar2 = getenv(\"WPA_CTRL_DIR\");\nif (pcVar2 != NULL) {\n    strncpy(target_buf, \"/var/run\", 0xfff);", "link_identifiers": ["WPA_CTRL_DIR", "getenv", "fcn.00402d78", "strncpy", "/var/run"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "network_input-wpatalk-auth_logic_bypass", "file_path": "sbin/wpatalk", "location": "wpatalk:0x403148 (main)", "risk_score": 7.0, "confidence": 8.25, "description": "Missing input validation mechanism: The critical comparison function fcn.00400e7c lacks length parameters and boundary checks, while the main function (0x403148) directly passes unfiltered argv parameters. Trigger condition: Passing specially crafted parameters via command line. Potential impacts: 1) Global pointer corruption leading to out-of-bounds memory reads 2) Authentication logic bypass (if comparison results affect permission decisions).", "code_snippet": "iVar1 = fcn.00400e7c(piVar3,\"configthem\");", "link_identifiers": ["fcn.00400e7c", "argv", "main", "0x403148", "0x4161f8"], "notes": "Track the initialization and potential contamination of the global pointer 0x4161f8"}
{"name": "stack_overflow-iptables_xml-0x404ba4", "file_path": "sbin/iptables-multi", "location": "sbin/iptables-multi:0x404ba4", "risk_score": 9.5, "confidence": 9.4, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "puVar16 = param_1 - param_2;\n(**(pcVar20 + -0x7efc))(puVar21,param_2,puVar16);\npuVar21[puVar16] = 0;", "link_identifiers": ["iptables_xml_main", "auStack_2c40", "puVar16", "param_1", "param_2", "strncpy", "fgets", "puVar21"], "notes": "Core Attack Path Validation: Subsequent analysis is required to determine whether the web interface (e.g., /www/cgi-bin/) has open rule upload functionality and to check the DEP/ASLR protection status."}
{"name": "REDACTED_SENSITIVE_DATA", "file_path": "sbin/iptables-multi", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 8.0, "confidence": 7.25, "description": "Kernel Interaction Attack Chain (do_command): The chain_name parameter from argv input is passed to iptc_flush_entries (libiptc.so) after a 30-byte length check. Trigger conditions: 1) Attacker controls command-line parameters (e.g., constructing iptables commands via web management interface) 2) Crafting a 30-byte chain_name 3) Target device's libiptc internal buffer ≤31 bytes. Potential impact: May trigger downstream heap overflow leading to rule table tampering or RCE, but depends on specific libiptc implementation.", "link_identifiers": ["do_command", "chain_name", "iptc_flush_entries", "argv", "pcVar20", "libiptc.so", "0x0040a4f4"], "notes": "Attack path: Network interface → Parameter injection → Kernel module vulnerability. It is recommended to reverse-engineer /lib/libiptc.so to verify buffer design."}
{"name": "off_by_one-iptables_restore_main", "file_path": "sbin/iptables-multi", "location": "sbin/iptables-multi:sym.iptables_restore_main", "risk_score": 4.0, "confidence": 6.5, "description": "Table name terminator unconventional operation (iptables-restore): After strncpy fills a 32-byte buffer (auStack_2c60), explicitly sets uStack_2c40=0. Trigger condition: When table name length=32 bytes, causes a single-byte overflow (writes a controlled zero value). Actual risk: Low, but reflects poor coding practice.", "code_snippet": "(**(loc._gp + -0x7efc))(auStack_2c60,param_1,0x20);\nuStack_2c40 = 0;", "link_identifiers": ["iptables_restore_main", "auStack_2c60", "uStack_2c40", "strncpy", "0x20"]}
{"name": "vuln-chain-WPS-wps_set_supplicant_ssid_configuration", "file_path": "sbin/wpa_supplicant", "location": "wpa_supplicant:0x412398 & 0x4122cc", "risk_score": 9.5, "confidence": 8.5, "description": "High-Risk WPS Protocol Vulnerability Chain: Attackers exploit dual vulnerabilities by controlling configuration data through malicious WPS interactions.  \n1. Command Injection: Unfiltered 'identity' configuration item (pcVar11) passed to execlp for arbitrary command execution (Trigger condition: WPS enabled + protocol handshake).  \n2. Heap Overflow: Controlled arg_2b0h+0x8c pointer supplies an overly long string, causing integer overflow in malloc(len+20) (when len>0xFFFFFFEC), leading to out-of-bounds write via sprintf.  \n\nComplete Attack Path:  \n- Initial Input: 802.11/WPS network packets (fully controllable)  \n- Propagation: eap_get_wps_config parses → writes to param_1 structure → *(param_1+0x90) passed → processed by wps_set_supplicant_ssid_configuration  \n- Dangerous Operations: execlp command execution + sprintf heap overflow  \n- Flaws: No identity string length validation, integer overflow unchecked before malloc", "code_snippet": "HIDDEN：0x412388 lw a0, *(param_1+0x90) ; HIDDEN\n0x41238c jal execlp ; HIDDEN\nHIDDEN：0x4122a8 addiu a0, v0, 0x14 ; malloc(len+20)\n0x4122d0 sprintf(dest, \"%s-NEWWPS\", input) ; HIDDEN", "link_identifiers": ["wps_set_supplicant_ssid_configuration", "execlp", "sprintf", "malloc", "eap_get_wps_config", "WPS-CONFIG", "pcVar11", "arg_2b0h", "param_1", "*(param_1+0x90)"], "notes": "Combined vulnerabilities can achieve RCE: heap overflow corrupts memory layout and triggers command injection to execute shellcode. Verification is required for the default WPS enabled status in the firmware."}
{"name": "REDACTED_SENSITIVE_DATA", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 8.5, "confidence": 8.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["REDACTED_SENSITIVE_DATA", "Restorefactory", "doSubmit", "FORM", "get"], "notes": "Pending verification: 1) Session authentication mechanism of backend processing files (e.g., CGI files with the same name) 2) Default authentication strength of the device. Related files suggested: /web/userRpm/*.cgi"}
{"name": "REDACTED_SENSITIVE_DATA", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SECRET_KEY_PLACEHOLDER.htm: doSubmitHIDDEN", "risk_score": 8.5, "confidence": 9.0, "description": "The firmware update page has a mechanism that can bypass client-side validation: 1) Non-.bin extension files can be uploaded by modifying HTTP requests. 2) The filename length check only applies to the display name (excluding the path), allowing long paths to bypass the 64-character limit. 3) There is no file content validation. If the server endpoint /incoming/Firmware.htm does not implement equivalent checks, an attacker can upload malicious firmware to trigger device control. Trigger condition: Directly construct a multipart/form-data request to submit malformed files.", "code_snippet": "if(tmp.substr(tmp.length - 4) != '.bin') {...}\nif(arr.length >= 64) {...}", "link_identifiers": ["doSubmit", "/incoming/Firmware.htm", "multipart/form-data"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "csrf-network_input-reboot_unauthorized", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 8.5, "confidence": 9.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["doSubmit", "location.href", "SysRebootRpm.htm", "action", "method", "onSubmit", "Reboot", "REDACTED_SENSITIVE_DATA"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "network_input-commonjs-getActionValue", "file_path": "web/dynaform/common.js", "location": "www/js/common.js: (getActionValue)", "risk_score": 7.0, "confidence": 7.75, "description": "The getActionValue function extracts the value at the end of a URL path as input (action_value) through regular expressions, without performing any filtering or length checks. When other pages call this function to process user-controllable URL parameters, it may directly pass unverified data to sensitive operations. Trigger condition: An attacker crafts malicious URL parameters, and the calling page does not implement additional validation.", "link_identifiers": ["getActionValue", "action_value", "RegExp.$1", "location.search"], "notes": "Need to track subsequent calls to this function to confirm whether the return value is used for dangerous operations such as system configuration."}
{"name": "nvram_set-commonjs-configFunctions", "file_path": "web/dynaform/common.js", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 8.0, "confidence": 8.0, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["setWanCfg", "setWlanCfg", "name", "value", "wan_cfg", "wlan_basic_cfg"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "network_input-commonjs-validationFlaws", "file_path": "web/dynaform/common.js", "location": "www/js/common.js:423 (lastipverify), 673 (REDACTED_SECRET_KEY_PLACEHOLDER)", "risk_score": 6.5, "confidence": 7.0, "description": "The verification function has the following vulnerabilities: 1) lastipverify fails to handle leading zeros (e.g., '001' being parsed as 1), which may enable IP spoofing; 2) REDACTED_SECRET_KEY_PLACEHOLDER permits 64-character HEX strings without restricting the character set (only checking length); 3) ipverify allows 0.0.0.0 without filtering internal network addresses. Trigger condition: When an attacker crafts malformed input (such as IP addresses containing leading zeros), it may bypass the verification logic.", "link_identifiers": ["lastipverify", "REDACTED_SECRET_KEY_PLACEHOLDER", "ipverify", "parseInt", "getValLen", "is_ipaddr"], "notes": "The actual impact needs to be evaluated in conjunction with the firmware network stack implementation; it is recommended to check whether these verification functions are reused during NVRAM writes."}
{"name": "configuration_load-remote_management-config_exposure", "file_path": "REDACTED_SENSITIVE_DATA", "location": "HIDDEN:0 [N/A] 0x0", "risk_score": 4.0, "confidence": 8.75, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "N/A (configuration documentation exposure)", "link_identifiers": ["Web Management Port", "Remote Management IP Address", "Virtual Server", "http://202.96.12.8:8080"], "notes": "The actual risk needs to be verified in conjunction with other components:  \n1) Check the authentication mechanism of the login interface  \n2) Analyze the implementation of port conflict handling code  \n3) Confirm whether the IP whitelist verification is strict"}
{"name": "configuration_load-custom.js-static-vars", "file_path": "web/dynaform/custom.js", "location": "web/dynaform/custom.js:1-25", "risk_score": 0.0, "confidence": 5.0, "description": "The file contains only static configuration variable definitions, with no user input processing logic or dynamic execution functionality. No instances found of: 1) User input reception points 2) Data flow propagation paths 3) Dangerous operations (such as eval/DOM manipulation) 4) Missing boundary checks. As a pure configuration script, its defined constant variables (e.g., default_ip) may be referenced by other components, but this file itself poses no security risks.", "link_identifiers": ["str_wps_name_long", "str_wps_name_short", "default_ip", "wireless_ssid_prefix", "getProgressBar"], "notes": "It is necessary to verify the security of using default_ip/wireless_ssid_prefix in conjunction with other components. It is recommended to subsequently analyze the HTML/JS files that reference this configuration (e.g., by searching for keywords using grep)."}
{"name": "configuration_load-firewall-default-state", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 4.0, "confidence": 8.0, "description": "The help documentation describes the factory default enabled state of the SPI firewall. Specific behavior: The SPI firewall is automatically enabled during device initialization, triggered upon the first boot of the device. Potential security impact: If an administrator disables the firewall through the management interface (potentially affected by CSRF or privilege escalation attacks), it will expand the network attack surface, exposing internal services to external scanning/attacks. Exploitation method: Modify firewall configurations by combining with other vulnerabilities (such as unauthorized access).", "code_snippet": "SPI Firewall is enabled by factory default.", "link_identifiers": ["SPI Firewall"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "command_injection-nas_ftp-system_exec", "file_path": "usr/bin/httpd", "location": "httpd:0x4f3354 (system)", "risk_score": 9.5, "confidence": 8.75, "description": "Confirming high-risk command injection vulnerability (CVE-2023-XXXX): An attacker submits an HTTP POST request to the /nas/ftp interface with a 'shareFolderName' parameter containing special characters → fcn.0046536c performs path depth check (only counting the number of '/') → sym.addShareFolder attempts to mount → fails due to malicious name (e.g., ';reboot;') → triggers unfiltered 'system(\"rm -rf %s\")' to execute arbitrary commands. Trigger conditions: 1) Access to the firmware NAS configuration page 2) POST request contains malicious parameter 3) Parameter value includes command separators (; | &). Constraints: Path depth ≤ 3 levels (can be bypassed with '...//'). Security impact: Arbitrary command execution with REDACTED_PASSWORD_PLACEHOLDER privileges (e.g., device reboot, backdoor implantation).", "code_snippet": "0x4f3334: lui a1, 0x53; a1=\"rm -rf %s\"\n0x4f333c: move a2, s1  # s1=HIDDEN\n0x4f3354: jalr t9  # HIDDENsystem", "link_identifiers": ["shareFolderName", "rm -rf %s", "sym.addShareFolder", "fcn.0046536c", "httpGetEnv", "/nas/ftp", "param_1", "auStack_118"], "notes": "Complete attack chain: HTTP → Parameter parsing → Path check → Mount failure branch → Command injection. Related attack scenario: curl -X POST triggers system execution. Urgent fixes required: 1) Sanitize shareFolderName 2) Replace system with secure API."}
{"name": "path_traversal-fcn0046536c-bypass_risk", "file_path": "usr/bin/httpd", "location": "httpd:0x00465a40", "risk_score": 5.0, "confidence": 6.0, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["shareEntire", "pcVar7 == '/'", "auStack_ec8[128]", "0x80"], "notes": "Shares path checking logic with command injection vulnerability (fcn.0046536c). Recommended follow-up analysis: Check whether NAS file operation functions reuse this flaw"}
