{"name": "env_bypass-login-FAILSAFE", "file_path": "bin/login.sh", "location": "login.sh:5", "risk_score": 7.5, "confidence": 7.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["FAILSAFE", "REDACTED_SENSITIVE_DATA", "/bin/ash", "grep"], "notes": "It is necessary to track the mechanism by which the parent process sets $FAILSAFE. Subsequent analysis of /bin/init or related startup scripts is recommended."}
{"name": "file_read-login-shadow", "file_path": "bin/login.sh", "location": "login.sh:5", "risk_score": 3.5, "confidence": 10.0, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["grep", "REDACTED_SENSITIVE_DATA", "REDACTED_SENSITIVE_DATA"], "notes": "Verify script execution permissions; risks are limited if not run as REDACTED_PASSWORD_PLACEHOLDER."}
{"name": "configuration-dropbear-parameter-tampering", "file_path": "etc/init.d/dropbear", "location": "etc/init.d/dropbear: dropbear_start()", "risk_score": 8.0, "confidence": 8.25, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["config_get_bool", "append args", "PasswordAuth", "Interface", "Port", "REDACTED_SENSITIVE_DATA", "dropbear_start"], "notes": "Verify the UCI configuration write permission control mechanism"}
{"name": "command-dropbearkey-integrity", "file_path": "etc/init.d/dropbear", "location": "etc/init.d/dropbear: keygen()", "risk_score": 9.0, "confidence": 6.75, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["keygen", "REDACTED_SENSITIVE_DATA", "rsakeyfile", "dsskeyfile", "dropbearkey -t rsa -f"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "env-internal-definition-safe", "file_path": "etc/init.d/dropbear", "location": "etc/init.d/dropbear: ([HIDDEN])", "risk_score": 1.0, "confidence": 4.5, "description": "Environment variables are only defined within the script:\n- Hardcoded variables such as $NAME/$PROG\n- No external environment variable input processing\n- Constraint: All variable sources are controlled", "link_identifiers": ["NAME=dropbear", "REDACTED_SENSITIVE_DATA", "$initscript"]}
{"name": "nvram-uci-abstraction-safe", "file_path": "etc/init.d/dropbear", "location": "etc/init.d/dropbear: ([HIDDEN])", "risk_score": 0.5, "confidence": 4.0, "description": "No direct NVRAM operations:\n- Configuration is managed via the UCI abstraction layer\n- Constraint: NVRAM interactions are isolated within the UCI system", "link_identifiers": ["config_load", "config_get", "config_get_bool"], "notes": "Verify NVRAM mapping during UCI analysis phase"}
{"name": "command_execution-ipcalc.sh-ARGV1_validation", "file_path": "bin/ipcalc.sh", "location": "ipcalc.sh:19", "risk_score": 7.5, "confidence": 8.5, "description": "CIDR format parsing flaw: When malformed parameters like '/24' are input, substr(ARGV[1],0,0) extracts an empty string causing the ip2int function to malfunction. Attackers controlling ARGV[1] can trigger null pointer exceptions, potentially crashing network services relying on this script. Trigger condition: passing mask parameters without IP prefixes.", "code_snippet": "ipaddr=ip2int(substr(ARGV[1],0,slpos-1))", "link_identifiers": ["ARGV[1]", "substr", "slpos", "ip2int"], "notes": "Locate the component that calls this script (such as DHCP service) to confirm whether the parameters come from the network interface."}
{"name": "command_execution-ipcalc.sh-integer_overflow", "file_path": "bin/ipcalc.sh", "location": "ipcalc.sh:31-35", "risk_score": 8.0, "confidence": 7.5, "description": "Integer overflow risk: The calculation 'end=start+ARGV[4]' lacks validation for addition overflow (e.g., 0xFFFFFFFE+3 causing 32-bit wraparound). Boundary checks fail due to integer wraparound, potentially allocating non-standard IPs (network/broadcast addresses). Trigger condition: Controlling ARGV[4] to specific values causing start+ARGV[4] to exceed 32-bit integer limit.", "code_snippet": "end=start+ARGV[4]\nlimit=or(network,compl(netmask))-1\nif (end>limit) end=limit", "link_identifiers": ["ARGV[4]", "start", "end", "limit", "compl(netmask)"], "notes": "May compromise network isolation policies; actual impact needs to be verified in conjunction with firmware routing components."}
{"name": "command_execution-ipcalc.sh-IP_injection", "file_path": "bin/ipcalc.sh", "location": "ipcalc.sh:9-12", "risk_score": 6.5, "confidence": 9.5, "description": "IP Injection Vulnerability: The ip2int function processes input directly via split without any filtering (non-numeric segments are converted to 0, segments fewer than 4 are padded with 0, and values exceeding 255 are truncated). Attackers can inject malformed IPs (e.g., '192.168.1.999') to cause abnormal network topology calculations. Trigger condition: Direct control over ARGV[1] or ARGV[2] parameters.", "code_snippet": "for (ret=0,n=split(ip,a,\".\"),x=1;x<=n;x++) ret=or(lshift(ret,8),a[x])", "link_identifiers": ["ARGV[1]", "ARGV[2]", "ip2int", "split", "a[x]"], "notes": "It is necessary to check whether the firmware passes IP parameters through environment variables, thereby expanding the attack surface."}
{"name": "command_execution-ipcalc.sh-netmask_validation", "file_path": "bin/ipcalc.sh", "location": "ipcalc.sh:21", "risk_score": 7.0, "confidence": 6.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["ARGV[1]", "substr", "netmask", "compl"], "notes": "It is recommended to subsequently analyze the firmware configuration file to confirm the source of the mask parameters."}
{"name": "configuration_load-luci-indexcache", "file_path": "www/cgi-bin/luci", "location": "www/cgi-bin/luci:3", "risk_score": 6.5, "confidence": 6.0, "description": "In 'www/cgi-bin/luci', a hardcoded cache path '/tmp/luci-indexcache' was discovered. Specific risks include: 1) The fixed path located in the globally writable /tmp directory allows attackers to redirect to sensitive files through symlink attacks 2) Improper cache file permissions (e.g., 666) may lead to unauthorized read/write operations 3) The cache may contain sensitive data such as session tokens. Trigger conditions: a) Cache is automatically created during normal web service operation b) Attackers pre-create symbolic links. Actual impact: May result in privilege escalation or sensitive information disclosure.", "code_snippet": "luci.dispatcher.indexcache = \"/tmp/luci-indexcache\"", "link_identifiers": ["luci.dispatcher.indexcache", "/tmp/luci-indexcache"], "notes": "Pending verification: 1) Permission mode when cache files are created 2) Whether symbolic link protection is implemented 3) Whether cache contents contain user-controllable data"}
{"name": "configuration_load-openvpn-config_injection", "file_path": "etc/init.d/openvpn", "location": "etc/init.d/openvpn: append_params[HIDDEN]", "risk_score": 8.0, "confidence": 7.5, "description": "Unverified UCI Configuration Injection Vulnerability: The script retrieves OpenVPN configuration parameters (e.g., server/up/down) via config_get and writes them directly into configuration files without validation. If an attacker modifies /etc/config/openvpn (e.g., by adding 'push \"script-security 3\"' or 'up /bin/sh' commands through a web vulnerability), remote command execution can be achieved after service restart. Trigger conditions: 1) Attacker gains write access to configuration files 2) Service restart. OpenVPN typically runs as REDACTED_PASSWORD_PLACEHOLDER, resulting in actual RCE impact. Boundary check: No filtering or escaping is performed on the $v value.", "code_snippet": "config_get v \"$s\" \"$p\"\necho \"$p $v\" >> \"/var/etc/openvpn-$s.conf\"", "link_identifiers": ["config_get", "append_params", "server", "up", "down", "/var/etc/openvpn-$s.conf", "push", "service_start"], "notes": "Correlate with CVE-2020-15078 vulnerability pattern; requires verification of write protection mechanism for /etc/config/openvpn"}
{"name": "configuration_load-openvpn-path_hijack", "file_path": "etc/init.d/openvpn", "location": "etc/init.d/openvpn: start_instance[HIDDEN]", "risk_score": 7.0, "confidence": 6.25, "description": "Configuration file path hijacking risk: The `service_start` function calls OpenVPN with a dynamic path `/var/etc/openvpn-$s.conf`. If an attacker controls `$s` (the UCI configuration section name), they could inject path traversal characters or hijack the configuration file. Trigger condition: Tampering with the OpenVPN section name in UCI configuration. Actual impact: Execution of malicious configuration files. Boundary check: `config_foreach` does not validate whether `$s` contains special characters.", "code_snippet": "service_start /usr/sbin/openvpn ... --config \"/var/etc/openvpn-$s.conf\"", "link_identifiers": ["service_start", "config_foreach", "start_instance", "/var/etc/openvpn-$s.conf"], "notes": "Analyze the constraint mechanism of the UCI system on section names."}
{"name": "configuration_load-network-route_injection", "file_path": "etc/init.d/openvpn", "location": "etc/init.d/openvpn: append_access[HIDDEN]", "risk_score": 6.5, "confidence": 6.5, "description": "Network Configuration Unverified Vulnerability: The append_access function directly uses uci get to retrieve network.lan.ipaddr/netmask for generating routing commands without validating the return value format. If an attacker tampers with the network configuration to inject malicious characters, it may impact client routing. Trigger condition: Tampering with /etc/config/network. Actual impact: Client network traffic hijacking.", "code_snippet": "local ipaddr=\"`uci get network.lan.ipaddr`\"\necho \"push \\\"route $network $netmask\\\"\" >> ...", "link_identifiers": ["append_access", "uci get", "network.lan.ipaddr", "network.lan.netmask", "push \"route"], "notes": "It is recommended to analyze the write points of /etc/config/network in subsequent steps."}
{"name": "configuration_load-samba-uci_injection", "file_path": "etc/init.d/samba", "location": "etc/init.d/samba:? (smb_header)", "risk_score": 8.5, "confidence": 8.0, "description": "During Samba initialization, the configuration items such as usbshare.global.svrname, workgroup, and denynames are retrieved via uci_get and directly embedded into sed commands to generate smb.conf without filtering. Attackers can inject line breaks or semicolons by modifying UCI configurations to add malicious Samba configurations (e.g., unauthorized shares). Trigger conditions: 1) The attacker can modify UCI configurations (e.g., via the web interface); 2) The Samba service is restarted. Exploit chain: Pollute configuration items → Generate malicious smb.conf → Samba loads abnormal configurations → Shared permission bypass. Missing boundary checks.", "code_snippet": "sed -e \"s#|NAME|#$hostname#g\" \\\n    -e \"s#|WORKGROUP|#$workgroup#g\" \\\n    -e \"s#|DENY_LOGIN_NAMES|#$denynames#g\" \\\n    /etc/samba/smb.conf.template > /var/etc/smb.conf", "link_identifiers": ["uci_get", "usbshare.global.svrname", "workgroup", "denynames", "smb.conf.template", "sed", "/var/etc/smb.conf"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "command_execution-samba-usbshare_export", "file_path": "etc/init.d/samba", "location": "etc/init.d/samba:? (smb_add_share2)", "risk_score": 7.0, "confidence": 5.75, "description": "The smb_add_share2 function calls the \"usbshare export samba\" command, with the output directly appended to smb.conf. If usbshare contains vulnerabilities or is hijacked, attackers can control the configuration file contents. Trigger conditions: 1) The usbshare program has vulnerabilities 2) Attackers control usbshare input. Dangerous operations: Adding malicious shared directories (such as path traversal) or permission settings by appending unverified content.", "code_snippet": "usbshare export samba -o $tmpfile\ncat $tmpfile >> /var/etc/smb.conf", "link_identifiers": ["smb_add_share2", "usbshare", "export", "samba", "/var/etc/smb.conf", "mktemp"], "notes": "Command execution requires reverse engineering of /usr/sbin/usbshare. Potential entry points: USB device mounting parameters processed by usbshare (externally controllable)."}
{"name": "configuration_load-samba-external_trust", "file_path": "etc/init.d/samba", "location": "etc/init.d/samba:? (smb_header)", "risk_score": 6.0, "confidence": 6.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["network.sh", "network_get_subnet", "pptpd", "localip", "INTERFACES"], "notes": "Check the integrity protection of network.sh. Related threat: attackers modifying critical configuration files for persistent backdoor access."}
{"name": "configuration_load-dnsmasq-uci_injection", "file_path": "etc/init.d/dnsmasq", "location": "etc/init.d/dnsmasq (multiple functions)", "risk_score": 8.0, "confidence": 8.0, "description": "Risk of unfiltered UCI configuration injection detected: The script reads configuration items (such as dhcp_option, server, address, etc.) from /etc/config/dhcp via config_get/config_list_foreach and directly writes them to /var/etc/dnsmasq.conf through xappend without any filtering. Attackers can inject arbitrary dnsmasq configuration directives by tampering with UCI configurations (e.g., through Web interface vulnerabilities). Trigger condition: when the dnsmasq service restarts. Actual impact: may lead to remote code execution (e.g., injecting '--dhcp-script=/malicious.sh') or DNS rebinding attacks (via 'rebind-domain-ok').", "code_snippet": "xappend \"--dhcp-option${force:+-force}=${networkid:+$networkid,}$o\"", "link_identifiers": ["config_get", "config_list_foreach", "xappend", "dhcp_option", "server", "address", "CONFIGFILE"], "notes": "Verify whether the web configuration interface has unfiltered input vulnerabilities."}
{"name": "command_execution-dnsmasq-dhcp_add_inject", "file_path": "etc/init.d/dnsmasq", "location": "etc/init.d/dnsmasq:dhcp_add()", "risk_score": 8.5, "confidence": 7.25, "description": "Command Injection Vulnerability: In the dhcp_add function, the ifname variable (obtained via config_get) is directly concatenated into the udhcpc command without validation. If an attacker controls the ifname in network configuration (e.g., through malicious API calls), they could inject command separators to achieve RCE. Trigger condition: When the service is running with 'dynamicdhcp=1'. Boundary check: The command is only executed when 'force=0', but the force parameter also originates from UCI configuration.", "code_snippet": "udhcpc -n -q -s /bin/true -t 1 -i $ifname >&-", "link_identifiers": ["udhcpc", "ifname", "config_get", "dhcp_add", "force"], "notes": "ifname is typically constrained by network configurations, but vulnerabilities in other services (such as netifd) can be exploited."}
{"name": "file_read-dnsmasq-path_traversal", "file_path": "etc/init.d/dnsmasq", "location": "etc/init.d/dnsmasq:dnsmasq()", "risk_score": 6.0, "confidence": 6.75, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "[ -e \"$hostsfile\" ] && xappend \"--dhcp-hostsfile=$hostsfile\"", "link_identifiers": ["hostsfile", "leasefile", "dhcp-hostsfile", "dhcp-leasefile", "config_get"], "notes": "The actual impact depends on dnsmasq's handling logic for abnormal files."}
{"name": "configuration_load-dnsmasq-rebind_bypass", "file_path": "etc/init.d/dnsmasq", "location": "etc/init.d/dnsmasq:dnsmasq()", "risk_score": 7.0, "confidence": 7.5, "description": "DNS Rebinding Protection Bypass: The rebind_domain configuration item allows whitelisting domains (e.g., '--rebind-domain-ok=attacker.com'). If an attacker controls this configuration, they can bypass the default RFC1918 response filtering and launch attacks against LAN devices through malicious web pages. Trigger condition: 'rebind_protection=1' with service restart.", "code_snippet": "config_list_foreach \"$cfg\" rebind_domain append_rebind_domain", "link_identifiers": ["rebind_domain", "rebind_protection", "append_rebind_domain", "config_list_foreach"], "notes": "Requires interaction with a malicious webpage to trigger, but the exploit chain is complete"}
{"name": "cmd-injection-ftpex-action_add", "file_path": "sbin/ftpex", "location": "sbin/ftpex", "risk_score": 9.0, "confidence": 8.75, "description": "ftpex has a command injection vulnerability. When the action=add parameter is passed, the $port and $mode variables are directly concatenated into system commands (nat add/ftp_access) without any filtering. Attackers can execute arbitrary commands by controlling these parameters (e.g., passing ';reboot;'). Trigger conditions: 1) The script executes with REDACTED_PASSWORD_PLACEHOLDER privileges (confirmed) 2) External callers pass malicious $port or $mode values. The exploitation success rate is extremely high, as the script is globally writable and lacks any filtering mechanisms, potentially leading to complete device compromise.", "code_snippet": "if [ -n \"$mode\" -a \"$mode\" != \"ftp_only\" ]; then\n    nat add ftp { $port }\nfi\nfw ftp_access $port $mode", "link_identifiers": ["$port", "$mode", "nat add", "fw ftp_access", "action=$1", "port=$2", "mode=$3"], "notes": "The actual impact of the vulnerability depends on whether the calling component (e.g., web interface) performs secondary filtering. It is recommended to immediately inspect the implementations of /sbin/nat and /sbin/fw."}
{"name": "boundary-check-ftpex-port_mode", "file_path": "sbin/ftpex", "location": "sbin/ftpex", "risk_score": 7.5, "confidence": 9.0, "description": "Missing boundary checks for critical parameters. The $port parameter, representing the port number, lacks validation for the valid range (1-65535), while $mode only verifies non-empty and 'ftp_only' values. Attackers could input invalid ports (such as 0 or 70000) or abnormal mode values, potentially causing firewall rule anomalies or service crashes. Trigger condition: invoking the script with unconventional parameter values. Combined with the globally writable characteristic, attackers could first modify the script and then trigger it to achieve persistent attacks.", "code_snippet": "local port=$2\nlocal mode=$3\n# if [ $port -ne 21 ]; then... ([HIDDEN])", "link_identifiers": ["port=$2", "mode=$3", "--dport $port"], "notes": "The port validation logic is explicitly commented out, indicating the developer's intentional removal of security checks, with acknowledged risks."}
{"name": "configuration_load-qfprom-version-write", "file_path": "etc/init.d/commit_sysupgrade", "location": "commit_sysupgrade: start[HIDDEN]", "risk_score": 9.0, "confidence": 7.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["REDACTED_SENSITIVE_DATA", "REDACTED_SENSITIVE_DATA", "cmp", "REDACTED_SENSITIVE_DATA", "REDACTED_SENSITIVE_DATA"], "notes": "Requires further analysis: 1) The generation path of the sysupgrade_version file (likely in /lib/upgrade/) 2) The version number verification mechanism in the kernel qfprom driver"}
{"name": "command_execution-emmcblock-dd-write", "file_path": "etc/init.d/commit_sysupgrade", "location": "commit_sysupgrade:14-27", "risk_score": 5.0, "confidence": 5.0, "description": "Risk of /tmp/bootconfig.bin file tampering. Specific manifestation: After the script generates a temporary file via `cat /proc/boot_info/getbinary > /tmp/${bin}.bin`, it directly uses the file for dd writing to a block device. Trigger conditions: 1) Attacker gains REDACTED_PASSWORD_PLACEHOLDER privileges 2) Replaces file content between file generation and dd execution (approximately millisecond-level window). Security impact: Successful tampering could write malicious boot configurations, potentially bricking the device or implanting persistent backdoors. Low probability of exploitation (requires precise timing attack), but could serve as an attack chain component when combined with other vulnerabilities.", "code_snippet": "cat /proc/boot_info/getbinary > /tmp/${bin}.bin\n...\ndd if=/tmp/${bin}.bin of=${emmcblock}", "link_identifiers": ["/tmp/${bin}.bin", "/proc/boot_info/getbinary", "do_flash_emmc", "dd", "emmcblock"], "notes": "Mitigation recommendations: 1) Add file hash verification 2) Use a memory-based file system instead of /tmp"}
{"name": "network_input-luci-form_param_mapping", "file_path": "www/webpages/url_to_json/url_to_json_cx.txt", "location": "/www/cgi-bin/luci:0 (luci_dispatcher) 0x0", "risk_score": 8.0, "confidence": 8.75, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["form=quick_setup", "form=check_router", "form=lang", "form=dlogin", "REDACTED_SENSITIVE_DATA", "form=vercode", "quicksetup.json", "login.json", "region.json", "stok"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "network_input-url_to_json-stok_mapping", "file_path": "www/webpages/url_to_json/url_to_json_szz.txt", "location": "www/webpages/url_to_json/url_to_json_szz.txt", "risk_score": 6.0, "confidence": 6.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "[HIDDEN]", "link_identifiers": ["stok", "form=wan_ipv4_status", "form=wan_ipv6_pppoe", "form=lan_ipv4", "form=setting", "form=led", "form=usbmodem"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "binary_analysis-luci-stok_validation", "file_path": "www/webpages/url_to_json/url_to_json_szz.txt", "location": "www/cgi-bin/luci:0 (entry_point) 0x400000", "risk_score": 9.0, "confidence": 6.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "[HIDDEN]", "link_identifiers": ["stok", "form", "luci_dispatcher", "json_mapping", "system_exec"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "network_input-url_to_json-hardcoded_stok_and_param_injection", "file_path": "www/webpages/url_to_json/url_to_json_ycf.txt", "location": "www/webpages/url_to_json/url_to_json_ycf.txt", "risk_score": 6.0, "confidence": 8.25, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["stok", "form", "serial", "disk.list.json", "usb.acc.json", "account.grid.json", "firmware.set.json"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "command_execution-uhttpd_init_param_injection", "file_path": "etc/init.d/uhttpd", "location": "etc/init.d/uhttpd:0 (append_arg) 0x0", "risk_score": 7.5, "confidence": 6.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "append_arg() {\n  config_get val \"$cfg\" \"$var\"\n  [ -n \"$val\" -o -n \"$def\" ] && append UHTTPD_ARGS \"$opt ${val:-$def}\"\n}", "link_identifiers": ["append_arg", "append_bool", "UHTTPD_ARGS", "config_get", "interpreter", "service_start"], "notes": "Actual exploitation requires: 1) The attacker has obtained REDACTED_PASSWORD_PLACEHOLDER privileges. 2) The presence of an exploitable vulnerability in /usr/sbin/uhttpd. Subsequent reverse engineering of the uhttpd binary is recommended. Related service_start vulnerability chain: Refer to configuration_load-openvpn-config_injection."}
{"name": "command_execution-px5g_input_validation", "file_path": "etc/init.d/uhttpd", "location": "unknown:0 (generate_keys) 0x0", "risk_score": 0.0, "confidence": 0.0, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["generate_keys", "px5g", "commonname", "country", "selfsigned"], "notes": "Shift the analysis focus to /usr/sbin/px5g to proceed with verification"}
{"name": "script-nat-dispatcher", "file_path": "sbin/nat", "location": "sbin/nat ([HIDDEN])", "risk_score": 0.5, "confidence": 4.8, "description": "sbin/nat is the dispatch script for the NAT module, responsible for converting command-line arguments into specific module rules and invoking the implementation scripts under /lib/nat. No logic for directly processing external inputs (such as network data or environment variables) was detected, nor were any command execution or format string vulnerabilities found. The trigger conditions are limited to legitimate command-line calls, with no externally controllable input paths. The security impact is negligible, as this script merely serves as an invocation relay, with actual data processing handled in the /lib/nat implementation files.", "link_identifiers": ["nat_check_mod", "uci_get_state", "nat_${mod}_param_to_rule", "nat_${mod}_target", "/lib/nat/nat_comm.sh", "/lib/nat/nat.sh"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "configuration_load-proftpd-config_injection", "file_path": "etc/init.d/proftpd", "location": "etc/init.d/proftpd:40-60 (start[HIDDEN])", "risk_score": 9.0, "confidence": 9.0, "description": "The ProFTPD startup script contains a configuration injection vulnerability. Specific manifestation: In the start() function, the hostname variable is directly embedded into the configuration file via 'sed -e \"s#|HOSTNAME|#$hostname#g\"'. When $hostname (obtained from uci_get usbshare.global.svrname) contains line breaks followed by malicious commands, ProFTPD will interpret them as valid configuration directives. Trigger conditions: 1) An attacker modifies the usbshare.global.svrname value through the web interface/NVRAM (e.g., setting it to 'malicious_hostname\\nRootLogin on\\n') 2) Restarting the proftpd service. Actual impact: Arbitrary ProFTPD directives can be injected (such as enabling REDACTED_PASSWORD_PLACEHOLDER login or loading malicious modules), leading to unauthorized access or remote code execution.", "code_snippet": "local hostname=\"$(uci_get usbshare.global.svrname)\"\nsed -e \"s#|HOSTNAME|#$hostname#g\" $PROFTPD_CFG_ORIG > $PROFTPD_CFG_FILE", "link_identifiers": ["hostname", "uci_get", "usbshare.global.svrname", "sed", "|HOSTNAME|", "PROFTPD_CFG_FILE", "proftpd.conf", "start()"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "configuration_source-usbshare.svrname-multi_service", "file_path": "etc/init.d/proftpd", "location": "[HIDDEN] ([HIDDEN]/etc/init.d/proftpd[HIDDEN]/etc/init.d/samba)", "risk_score": 9.2, "confidence": 8.5, "description": "The critical configuration item 'usbshare.global.svrname' is used as the hostname source by multiple services (ProFTPD/Samba) without input filtering implemented. When an attacker pollutes this configuration item through the Web/NVRAM interface, it can trigger a chain of vulnerabilities upon service restart: 1) ProFTPD configuration injection (CVE pattern) → unauthorized REDACTED_PASSWORD_PLACEHOLDER access; 2) Samba configuration injection → shared permission bypass. The complete attack chain: single input point pollution → compromise of multiple services.", "link_identifiers": ["usbshare.global.svrname", "uci_get", "multi_service", "configuration_source", "proftpd", "samba"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "configuration_load-firewall-init-etc_init.d_firewall", "file_path": "etc/init.d/firewall", "location": "etc/init.d/firewall:1", "risk_score": 0.0, "confidence": 4.9, "description": "The firewall initialization script serves as a lightweight proxy, loading the core script /lib/firewall/core.sh via the 'fw()' function and executing 'fw_$1' (e.g., fw_start). No evidence found of: 1) direct handling of external inputs (HTTP/API/NVRAM); 2) unvalidated boundary operations; or 3) dangerous command invocation chains. Actual firewall logic (including rule loading and input processing) requires analysis within core.sh.", "code_snippet": "fw() {\n\t. $FW_LIBDIR/core.sh\n\tfw_$1\n}", "link_identifiers": ["fw()", "fw_$1", "REDACTED_SENSITIVE_DATA", "core.sh", "fw_start", "fw_stop"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "script-firewall-fw_dispatcher", "file_path": "sbin/fw", "location": "sbin/fw", "risk_score": 6.0, "confidence": 7.25, "description": "sbin/fw is a firewall control framework shell script that dynamically loads modules from /lib/firewall/ using the 'fw_$cmd' pattern. No directly dangerous operations were found, but it poses potential risks as an input transmission hub: 1) Command line arguments ($1, $2) are passed directly to submodules without validation 2) Submodule implementations may contain hazardous functions. Trigger condition: An attacker controls fw command parameters passed to unverified submodule functions.", "link_identifiers": ["fw_$cmd", "/lib/firewall/", "$1", "$2"], "notes": "Evidence Limitations: Due to tool constraints, the details of parameter passing could not be verified. Subsequent analysis must focus on: 1) Specific modules in the /lib/firewall/ directory 2) The invocation context of the fw command (e.g., HTTP interface or CLI). Relevant Clue: The parameter passing pattern resembles the 'action=$1' format found in the knowledge base."}
{"name": "configuration_load-dropbear-uci-injection", "file_path": "etc/init.d/dropbear", "location": "unknown:0 (dropbear_start[HIDDEN])", "risk_score": 8.5, "confidence": 8.0, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["PasswordAuth", "RootLogin", "BannerFile", "config_get_bool", "append args", "REDACTED_SENSITIVE_DATA"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "REDACTED_SENSITIVE_DATA", "file_path": "etc/init.d/dropbear", "location": "unknown:0 (keygen[HIDDEN])", "risk_score": 6.5, "confidence": 6.0, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["keygen", "/tmp/dropbear", "dropbear_rsa_host_key", "lock /tmp/.switch2jffs", "chmod 0700"], "notes": "Verify the mounting method and permissions of the /tmp directory in the firmware; Note: The location information needs to be supplemented with specific file paths later."}
{"name": "ipc-dropbear-proc-parsing", "file_path": "etc/init.d/dropbear", "location": "unknown:0 (killclients[HIDDEN])", "risk_score": 4.0, "confidence": 4.75, "description": "IPC file system parsing vulnerability: The killclients function uses grep -F to match process paths in /proc/${pid}/stat and splits fields by spaces. Attackers may: 1) Create processes with malicious space-containing paths to evade termination 2) Trigger field parsing errors causing service crashes. However, exploitation requires high privileges (controlling process paths), resulting in limited practical impact.", "link_identifiers": ["killclients", "/proc/${pid}/stat", "grep -F -e \"${PROG}\"", "pidof \"${NAME}\""], "notes": "The actual risk needs to be evaluated in conjunction with the process management mechanism; Note: The location information requires subsequent supplementation of specific file paths."}
{"name": "REDACTED_SENSITIVE_DATA", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 6.0, "confidence": 7.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "guest::2000:65534:guest:/var:/bin/false", "link_identifiers": ["guest", "::", "/bin/false", "REDACTED_SENSITIVE_DATA", "PAM"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "REDACTED_SENSITIVE_DATA", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 8.0, "confidence": 8.25, "description": "The REDACTED_PASSWORD_PLACEHOLDER user has GID=0 (REDACTED_PASSWORD_PLACEHOLDER group), granting it privileged permissions associated with the REDACTED_PASSWORD_PLACEHOLDER group. After gaining control of this account, an attacker could modify files owned by the REDACTED_PASSWORD_PLACEHOLDER group, execute setgid programs, or exploit configuration flaws (such as sudo rules) to escalate privileges. Trigger condition: After obtaining REDACTED_PASSWORD_PLACEHOLDER credentials, a privilege escalation path exists (e.g., improper sudo configuration).", "code_snippet": "REDACTED_PASSWORD_PLACEHOLDER:x:1000:0:REDACTED_PASSWORD_PLACEHOLDER:/var:/bin/false", "link_identifiers": ["REDACTED_PASSWORD_PLACEHOLDER", "GID=0", "REDACTED_SENSITIVE_DATA", "sudoers", "setgid"], "notes": "Check the REDACTED_PASSWORD_PLACEHOLDER privileges in /etc/sudoers; analyze the setgid programs accessible by the REDACTED_PASSWORD_PLACEHOLDER account; verify the file permissions for the REDACTED_PASSWORD_PLACEHOLDER group"}
{"name": "network_input-url_mapping-path_traversal", "file_path": "www/webpages/url_to_json/nat_url_to_json_ljj.txt", "location": "www/webpages/url_to_json/nat_url_to_json_ljj.txt", "risk_score": 8.0, "confidence": 7.75, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["form", "stok", "../", "nat.nat.json", "firmware.set.json"], "notes": "Verification required: Check if the open() call for /cgi-bin/luci filters the path. Follow-up analysis recommendations: 1) Decompile /cgi-bin/luci 2) Search for the actual path of the JSON file"}
{"name": "network_input-admin_interface-exposure", "file_path": "www/webpages/url_to_json/nat_url_to_json_ljj.txt", "location": "www/cgi-bin/luci", "risk_score": 9.0, "confidence": 7.75, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["stok", "/REDACTED_PASSWORD_REDACTED_PASSWORD_PLACEHOLDER", "firmware.set.json", "system.backup.json"], "notes": "Subsequent analysis is required: 1) stok generation algorithm 2) Whether the firmware.set.json processing logic contains command injection vulnerabilities."}
{"name": "configuration_load-json_missing", "file_path": "www/webpages/url_to_json/nat_url_to_json_ljj.txt", "location": "www/webpages/url_to_json", "risk_score": 0.0, "confidence": 5.0, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["www/webpages/url_to_json", "nat.nat.json", "security.firewall.json"], "notes": "Recommendations: 1) Perform global search for missing JSON files 2) Verify firmware version compatibility 3) Analyze other directories (e.g., www/cgi-bin/)"}
{"name": "configuration_load-dnsmasq-dhcp_host_add_injection", "file_path": "etc/init.d/dnsmasq", "location": "dnsmasq:132 dhcp_host_add()", "risk_score": 8.5, "confidence": 8.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "xappend \"--dhcp-host=$macs${networkid:+,net:$networkid}${tag:+,set:$tag}${ip:+,$ip}${name:+,$name},infinite\"", "link_identifiers": ["dhcp_host_add", "xappend", "--dhcp-host", "$macs", "$networkid", "$tag", "$ip", "$name", "config_list_foreach", "uci_get_state"], "notes": "Analyze whether the web configuration interface (e.g., /www/cgi-bin/xxx) exposes UCI write functionality and verify the feasibility of remote triggering."}
{"name": "configuration_load-dnsmasq-xappend_multiline_injection", "file_path": "etc/init.d/dnsmasq", "location": "dnsmasq:13 xappend()", "risk_score": 8.0, "confidence": 7.75, "description": "The xappend function only removes the leading '--' from parameters (${value#--}) without handling line breaks (\\n) or semicolons. When a UCI configuration value contains \\n, it can inject multiple lines of dnsmasq configuration. Trigger conditions: 1) Controlling configuration values containing line breaks 2) Service restart. Actual impact: Full control over dnsmasq behavior, such as adding 'log-queries' to leak DNS queries or 'server=/malicious.com/8.8.8.8' to redirect traffic.", "code_snippet": "xappend() {\n    local value=\"$1\"\n    echo \"${value#--}\" >> $CONFIGFILE\n}", "link_identifiers": ["xappend", "CONFIGFILE", "echo \"${value#--}\" >> $CONFIGFILE", "config_get"], "notes": "Test with the $networkid parameter (allowing longer strings) to verify the feasibility of multi-line injection"}
{"name": "configuration_load-dnsmasq-etc_conf_loading", "file_path": "etc/init.d/dnsmasq", "location": "dnsmasq:205", "risk_score": 7.0, "confidence": 7.5, "description": "The service automatically loads /etc/dnsmasq.conf (if it exists) upon startup, with its contents directly appended to the main configuration without validation. Trigger condition: An attacker gains write access to /etc/dnsmasq.conf. Actual impact: Equivalent to the aforementioned injection but requires higher privileges (typically REDACTED_PASSWORD_PLACEHOLDER).", "link_identifiers": ["--conf-file=/etc/dnsmasq.conf", "xappend", "CONFIGFILE=\"/var/etc/dnsmasq.conf\""]}
{"name": "attack_chain-stok_bypass_path_traversal", "file_path": "www/webpages/url_to_json/nat_url_to_json_ljj.txt", "location": "[HIDDEN]www/cgi-bin/luci → www/webpages/url_to_json", "risk_score": 9.5, "confidence": 7.75, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["stok", "form", "../", "path_traversal", "nat.nat.json"], "notes": "Correlation Findings: network_input-url_to_json-hardcoded_stok_and_param_injection (Hardcoded stok), network_input-url_mapping-path_traversal (Path Traversal), configuration_load-json_missing (Target File)"}
{"name": "attack_chain-stok_bypass_firmware_upload", "file_path": "www/webpages/url_to_json/nat_url_to_json_ljj.txt", "location": "www/cgi-bin/luci", "risk_score": 10.0, "confidence": 7.75, "description": "Complete attack path: Attacker obtains a valid stok (via prediction or session fixation) → accesses the high-risk interface /REDACTED_PASSWORD_REDACTED_PASSWORD_PLACEHOLDER → uploads malicious firmware → triggers complete device control. Critical links: 1) stok protection mechanism failure (binary_analysis-luci-stok_validation) 2) firmware upgrade interface exposure (network_input-admin_interface-exposure) 3) potential command injection risk (requires verification of firmware.set.json processing logic). Trigger probability assessment: 7.0 (dependent on stok strength).", "link_identifiers": ["stok", "/REDACTED_PASSWORD_REDACTED_PASSWORD_PLACEHOLDER", "firmware_upload", "system_exec"], "notes": "Correlation Findings: binary_analysis-luci-stok_validation (Authentication Bypass), network_input-admin_interface-exposure (Interface Exposure)"}
{"name": "configuration_load-uhttpd_dynamic_args_vul", "file_path": "etc/init.d/uhttpd", "location": "etc/init.d/uhttpd: service_start[HIDDEN]", "risk_score": 8.0, "confidence": 8.0, "description": "Dynamic Parameter Construction Vulnerability: The configuration file `/etc/config/uhttpd` is loaded via `config_load`, and the `append_arg`/`append_bool` functions are used to dynamically construct the `UHTTPD_ARGS` startup parameters. Critical parameters such as `interpreter` (CGI interpreter path) and `listen_http(s)` (listening ports) lack validation for path legitimacy or port conflict checks. Attackers tampering with the configuration file can: 1) Modify `interpreter` to point to a malicious interpreter for RCE, or 2) Hijack listening ports to conduct man-in-the-middle attacks. Exploitation requires write permissions to the configuration file (e.g., via NVRAM injection vulnerabilities).", "link_identifiers": ["UHTTPD_ARGS", "append_arg", "append_bool", "config_load", "interpreter", "listen_http", "listen_https", "start_instance"], "notes": "Verify whether the /etc/config/uhttpd configuration file can be modified externally. Related finding: command_execution-uhttpd_init_param_injection (parameter injection risk)."}
{"name": "crypto_weakness-uhttpd_selfsigned_cert", "file_path": "etc/init.d/uhttpd", "location": "etc/init.d/uhttpd: generate_keys[HIDDEN]", "risk_score": 7.5, "confidence": 8.75, "description": "Weak Certificate Generation Mechanism: When listen_https is enabled and UHTTPD_CERT/UHTTPD_KEY certificates do not exist, the system automatically invokes PX5G_BIN to generate an RSA-1024 self-signed certificate. Weak keys are vulnerable to brute-force attacks, potentially leading to HTTPS man-in-the-middle attacks. Trigger conditions: 1) Initial HTTPS service startup 2) Certificate file deletion. No privileged access is required for exploitation, allowing attackers to intercept and decrypt network traffic through sniffing.", "link_identifiers": ["generate_keys", "PX5G_BIN", "listen_https", "UHTTPD_CERT", "UHTTPD_KEY"], "notes": "The actual risk depends on the implementation of PX5G_BIN. Related keywords: px5g (certificate generation tool)."}
{"name": "service_exposure-uhttpd_multi_instance", "file_path": "etc/init.d/uhttpd", "location": "etc/init.d/uhttpd: config_foreach[HIDDEN]", "risk_score": 8.5, "confidence": 7.5, "description": "Service Exposure Expansion: By traversing multi-instance configurations via config_foreach, a single uhttpd process can simultaneously expose multiple entry points for HTTP/HTTPS/CGI. Attack Paths: 1) HTTP parameters -> CGI handler -> command injection 2) API endpoints -> Lua interpreter -> memory corruption. Boundary gaps manifest as missing permission validation for the interpreter and failure to isolate privilege contexts across different instances.", "link_identifiers": ["config_foreach", "UHTTPD_BIN", "service_start", "interpreter"], "notes": "The request processing flow needs to be analyzed in conjunction with the uhttpd main program. Related finding: configuration_load-openvpn-path_hijack (similar configuration traversal risk)."}
{"name": "attack_chain-dnsmasq_config_injection_via_web", "file_path": "etc/init.d/dnsmasq", "location": "[HIDDEN]www/cgi-bin/luci → /etc/config/dhcp → dnsmasq[HIDDEN]", "risk_score": 9.0, "confidence": 7.75, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["stok", "form", "uci_set", "dhcp_host_add", "xappend", "dnsmasq"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "attack_chain-unauth_access_via_dropbear_tamper", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 8.5, "confidence": 7.5, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["dropbear", "PasswordAuth", "guest", "::", "ssh_login", "PAM"], "notes": "To be verified: 1) Whether the /etc/pam.d/sshd file has the nullok parameter enabled 2) The filtering mechanism of the web interface for dropbear configuration"}
{"name": "attack_chain-priv_esc_via_admin_gid0", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 9.0, "confidence": 8.5, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["REDACTED_PASSWORD_PLACEHOLDER", "GID=0", "sudoers", "setgid", "privilege_escalation"], "notes": "To be verified: 1) Permission of /etc/sudoers file 2) List of setgid programs modifiable by REDACTED_PASSWORD_PLACEHOLDER account"}
{"name": "configuration_load-internet_staticip-params", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 7.0, "confidence": 8.5, "description": "This file stores static IP configuration parameters, including multiple externally controllable input points (ipaddr/pri_dns, etc.). When the device connects using a static IP, these parameters are set via the web interface and stored in this file. The main risks are: 1) The parameters exhibit no filtering or validation logic 2) If the program reading this file (e.g., the network daemon) performs no boundary checks on the parameters, it may lead to command injection or buffer overflow. For example, an attacker could tamper with the pri_dns parameter to inject malicious DNS addresses or special characters.", "code_snippet": "'ipaddr': '1.1.1.2', 'pri_dns': '3.3.3.3', 'snd_dns': '4.4.4.4'", "link_identifiers": ["ipaddr", "pri_dns", "snd_dns", "gateway", "mtu", "internet.ipv4.staticip.json", "conntype"], "notes": "Further analysis required: 1) Identify the program reading this file (e.g., /lib/netd) 2) Check whether security filtering is performed during parameter usage 3) Verify if parameters are passed to dangerous functions such as system() or exec()"}
{"name": "configuration_load-system_restore-data_injection_risk", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 1.0, "confidence": 4.75, "description": "The system recovery configuration file only stores operation status identifiers (success/timeout) and a reserved blank data field. The current version does not include: 1) Hard-coded credentials or sensitive data 2) Externally controllable configuration parameters 3) Direct command execution traces. The actual risk depends on how the data field is populated during runtime—if the population process does not validate external inputs, it may create an injection attack vector.", "code_snippet": "", "link_identifiers": ["system.restore.json", "data", "success", "timeout"], "notes": "Verify how the related recovery function (e.g., /bin/restore_tool) reads this file:  \n1) Whether the data field is dynamically populated  \n2) Whether the data source includes external inputs such as network/NVRAM  \n3) Whether input filtering is performed"}
{"name": "configuration_load-system_factory_config-missing", "file_path": "REDACTED_SENSITIVE_DATA", "location": "N/A", "risk_score": 0.5, "confidence": 5.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "N/A", "link_identifiers": ["REDACTED_SENSITIVE_DATA"], "notes": "Two independent verifications confirmed the file does not exist. It is recommended to check other firmware directories such as the REDACTED_PASSWORD_PLACEHOLDER directory or similar configuration files under www/data/. The erroneous path may indicate legacy development issues, but there is no directly exploitable evidence."}
{"name": "credential_storage-plaintext_account_credentials", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 9.0, "confidence": 9.25, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["REDACTED_SENSITIVE_DATA", "confirm", "REDACTED_PASSWORD_PLACEHOLDER", "enable_auth", "REDACTED_PASSWORD_PLACEHOLDER"], "notes": "Verify whether the web server allows direct access to .json files. The 'enable_auth' field may control the authentication switch; if set to false, authentication is completely bypassed. This needs to be combined with a path traversal vulnerability (e.g., network_input-url_mapping-path_traversal) to trigger file access."}
{"name": "crypto-fixed_rsa_exponent_in_password_fields", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 6.5, "confidence": 6.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "\"old_pwd\": [ \"D1E79FF1...\", \"010001\" ]", "link_identifiers": ["old_pwd", "new_pwd", "cfm_pwd", "010001", "rsa_key"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "path-traversal-uci-import", "file_path": "sbin/uci", "location": "sbin/uci:0x98c8", "risk_score": 9.5, "confidence": 9.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "uVar14 = param_2[1];\niVar3 = sym.imp.uci_import(*(iVar1+0x14),*(iVar1+0x18),uVar14);", "link_identifiers": ["uci_import", "import", "path_traversal"], "notes": "Full attack chain: Source of pollution (CLI/web input) → Propagation path (direct parameter passing) → Dangerous operation (REDACTED_PASSWORD_PLACEHOLDER-privileged file access). Verification required: 1) Whether the web interface exposes import functionality 2) Whether uci_import performs secondary filtering internally"}
{"name": "unvalidated-input-uci-set", "file_path": "sbin/uci", "location": "sbin/uci:0x9a14", "risk_score": 8.0, "confidence": 7.75, "description": "Unvalidated Input Passing Risk: User input is copied via strdup and directly passed to uci_set without any length validation or boundary checks throughout the process. If libuci.so's uci_set contains buffer vulnerabilities, attackers could trigger overflow by supplying excessively long parameters. Trigger conditions: 1) Executing a specific uci command branch (case 1) 2) Parameters originate from externally controllable input.", "code_snippet": "case 1:\n    iVar3 = sym.imp.uci_set(*(*0x9c1c+0x14), puVar18+-0xb);", "link_identifiers": ["uci_set", "strdup", "buffer_overflow"], "notes": "Risk shifted to libuci.so, requiring subsequent analysis: 1) Implementation of buffer operations in uci_set 2) Propagation path of tainted data"}
{"name": "configuration_load-usb_ftp-missing_config", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 3.0, "confidence": 7.75, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["usb.ftp.json", "www/webpages/data"], "notes": "Subsequent verification directions: 1) Check FTP-related configurations in the /etc directory 2) Perform reverse engineering on USB/FTP service binaries (such as searching for symbols like 'ftp_server', 'usb_storage', etc.) 3) Examine whether the firmware web interface dynamically generates this configuration"}
{"name": "attack_chain-credential_exfiltration_via_path_traversal", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 9.8, "confidence": 8.75, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["stok", "form", "path_traversal", "REDACTED_PASSWORD_PLACEHOLDER", "REDACTED_SENSITIVE_DATA"], "notes": "Integrated discovery: attack_chain-stok_bypass_path_traversal (initial vulnerability), credential_storage-plaintext_account_credentials (target file). Verification required: 1) Actual login interface location 2) Whether credentials are applicable to multiple services such as SSH/Web."}
{"name": "configuration_core_pattern-leak", "file_path": "etc/init.d/network", "location": "network:19-22", "risk_score": 8.0, "confidence": 8.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["core_pattern", "REDACTED_SENSITIVE_DATA", "ulimit -c unlimited", "netifd", "/tmp", "start"], "notes": "Pending verification: 1) Whether /sbin/netifd handles sensitive data 2) Feasibility of actual crash"}
{"name": "ipc_ubus_reload-unauthenticated", "file_path": "etc/init.d/network", "location": "network:59-61", "risk_score": 7.0, "confidence": 8.25, "description": "The `ubus reload` interface exposes unauthenticated network reset capability: Triggering service reload via `ubus call network reload`. Trigger condition: Any process with UBus access (default ACL unknown). Potential impacts: 1) Denial of service (network disruption) 2) Configuration state anomalies. Exploitation method: Local/remote invocation of reload method. Boundary check: No caller verification within scripts.", "code_snippet": "reload() {\n    ubus call network reload\n}", "link_identifiers": ["ubus call network reload", "reload()", "service_start", "NETWORK_MOD_ID"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "ipc_tfstats_fixed_parameter", "file_path": "etc/init.d/network", "location": "network:55", "risk_score": 0.5, "confidence": 4.95, "description": "Fixed parameter invocation poses no direct injection risk: The stop() function executes `ubus call tfstats delete \"{'ip':'all'}\"`. Trigger condition: Requires REDACTED_PASSWORD_PLACEHOLDER privileges to perform stop operation. Verification: 1) Parameters are hardcoded 2) No user input concatenation 3) No command injection characteristics. Actual impact: Only exploitable if the tfstats service contains vulnerabilities.", "code_snippet": "ubus call tfstats delete \"{'ip': 'all'}\"", "link_identifiers": ["ubus call tfstats delete", "ip", "all", "stop", "procd"], "notes": "It should be noted that if the tfstats service has parsing vulnerabilities (such as buffer overflow), it could still form an exploitation chain."}
{"name": "vulnerability-ubus-ubus_lookup_id_unchecked_param", "file_path": "bin/ubus", "location": "/usr/sbin/ubus:0x8ed0", "risk_score": 7.0, "confidence": 4.0, "description": "ipc  \n\nImportant: Your response must contain only the translated English text. Do not add any introductory phrases, explanations, or Markdown formatting like ```.  \n\nThe text is \"ipc\".  \n\nipc  \n\nThe ubus_lookup_id parameter validation vulnerability: At address 0x8ed0, r4[0] is directly used as the name parameter for ubus_lookup_id without length verification. Trigger conditions: 1) The attacker controls the memory content of r4[0]. 2) The second parameter of the function ≠ 3. Potential impact: Buffer overflow may lead to RCE (CVSS 9.0). Constraints: The data source has not been verified for external controllability, making it impossible to confirm the actual attack path.", "code_snippet": "ldr r1, [r4]\nadd r2, var_14h\nbl sym.imp.ubus_lookup_id", "link_identifiers": ["ubus_lookup_id", "r4[0]", "sym.imp.ubus_lookup_id"], "notes": "Dynamic verification required: 1) Whether r4[0] receives external data via ubus API 2) Reachability of vulnerability function calls"}
{"name": "vulnerability-ubus-blobmsg_add_json_unchecked", "file_path": "bin/ubus", "location": "/usr/sbin/ubus:0x8f28", "risk_score": 7.0, "confidence": 4.0, "description": "JSON Parsing Unverified Vulnerability: At 0x8f28, r4[8] is directly passed to blobmsg_add_json_from_string without syntax/size validation. Trigger Conditions: 1) Control over r4[8] content 2) Second function parameter = 3. Potential Impact: Malformed JSON may cause heap overflow (CVSS 9.5). Constraints: Data source untraceable, libblobmsg_json version unknown.", "code_snippet": "add r0, r7, 0x44\nldr r1, [r4, 8]\nbl sym.imp.blobmsg_add_json_from_string", "link_identifiers": ["blobmsg_add_json_from_string", "r4[8]", "sym.imp.blobmsg_add_json_from_string"], "notes": "Follow-up directions: 1) Analyze /lib/libblobmsg_json.so 2) Monitor luci-ubus communication data flow"}
{"name": "attack_chain-ubus_luci_interface", "file_path": "bin/ubus", "location": "[HIDDEN]: www/cgi-bin/luci → /usr/sbin/ubus", "risk_score": 8.0, "confidence": 5.0, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["luci_dispatcher", "ubus_lookup_id", "blobmsg_add_json_from_string", "stok", "form", "ipc"], "notes": "Follow-up verification directions: 1) Dynamically trace the parameter passing process when luci calls ubus 2) Check whether luci performs boundary checks on the data passed to ubus"}
{"name": "network_input-login-stok_hardcoded", "file_path": "REDACTED_SENSITIVE_DATA", "location": "login.json", "risk_score": 9.5, "confidence": 8.75, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["stok", "password1", "REDACTED_SENSITIVE_DATA", "010001"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "configuration_load-login-auth_bypass", "file_path": "REDACTED_SENSITIVE_DATA", "location": "login.json", "risk_score": 7.0, "confidence": 7.25, "description": "Configuration conflict in authentication switch: allow_login=false indicates login is disabled, but logined_user=User111 and errorcode3=login failed show authentication is actually enabled. Trigger condition: crafting special requests to bypass state validation. Missing boundary check: configuration state is not synchronized with runtime state. Security impact: authentication bypass leads to unauthorized access. Exploitation method: injecting valid session identifiers when in disabled state.", "code_snippet": "\"allow_login\": false,\n\"logined_user\": \"User111\",\n\"errorcode3\": \"login failed\"", "link_identifiers": ["allow_login", "logined_user", "logined_host", "errorcode3"], "notes": "Reverse authentication state machine implementation logic"}
{"name": "network_input-login-path_traversal", "file_path": "REDACTED_SENSITIVE_DATA", "location": "login.json", "risk_score": 6.5, "confidence": 6.25, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "\"dst_webpath\": \"/userrpm/xxx.html\"", "link_identifiers": ["dst_webpath", "/userrpm/xxx.html"], "notes": "Verify the target CGI's path parsing logic"}
{"name": "network_input-login-session_leak", "file_path": "REDACTED_SENSITIVE_DATA", "location": "login.json", "risk_score": 5.5, "confidence": 5.5, "description": "Session information leakage: Sensitive fields such as logined_ip/logined_mac combined with the enable_rec=true configuration may expose user privacy. Trigger condition: Accessing the session history interface. Boundary check missing: Sensitive fields are not desensitized. Security impact: User geolocation leakage/session hijacking. Exploitation method: Stealing MAC/IP for man-in-the-middle attacks.", "code_snippet": "\"logined_remote\": \"\",\n\"enable_rec\": true", "link_identifiers": ["logined_remote", "logined_ip", "logined_mac", "enable_rec"], "notes": "Confirm the log storage path and access control permissions."}
{"name": "association-auth_bypass_to_crypto_weakness", "file_path": "REDACTED_SENSITIVE_DATA", "location": "[HIDDEN]: login.json + REDACTED_PASSWORD_PLACEHOLDER", "risk_score": 8.0, "confidence": 6.75, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "N/A ([HIDDEN])", "link_identifiers": ["stok", "password1", "010001", "old_pwd", "new_pwd", "cfm_pwd"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "association-path_traversal_to_privilege_escalation", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 9.0, "confidence": 7.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "N/A ([HIDDEN])", "link_identifiers": ["dst_webpath", "REDACTED_SENSITIVE_DATA", "REDACTED_PASSWORD_PLACEHOLDER", "GID=0", "old_pwd", "new_pwd", "stok"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "credential_storage-pppoe_plaintext", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 7.5, "confidence": 7.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["pppoe_password", "basic.internet.pppoe.json", "REDACTED_SENSITIVE_DATA", "internet.ipv4.pppoe.json"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "parameter_validation-network_config", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 7.0, "confidence": 6.75, "description": "The network configuration parameters lack runtime validation: parameters such as mtu/static_ip/dyn_dns are stored as raw strings (e.g., mtu='1260'). Trigger condition: when the service program directly uses unvalidated values. Security impact: 1) Low MTU values are vulnerable to fragmentation attacks; 2) Invalid IPs may cause network service disruptions; 3) Risk of DNS hijacking. Constraints: Implementation must be tied to the service program, with current evidence showing parameters are stored without validation.", "code_snippet": "\"mtu\": \"1260\",\n\"static_ip\": \"5.5.5.5\"", "link_identifiers": ["mtu", "static_ip", "dyn_pridns", "internet.ipv4.pppoe.json"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "network_input-frame_basic-external_json_loading", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 4.0, "confidence": 7.5, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["menuGoTo", "menu.basic.json", "load"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "network_input-admin_administration-pwd_change", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 9.0, "confidence": 8.25, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["ACC_PWD_URL_NEW", "REDACTED_SENSITIVE_DATA", "old_pwd", "new_pwd", "cfm_pwd", "pwdProxy"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "network_input-admin_administration-pwd_recovery", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 8.5, "confidence": 7.75, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["ACC_REC_URL_NEW", "enable_rec", "smtp", "enable_auth", "REDACTED_PASSWORD_PLACEHOLDER", "REDACTED_SENSITIVE_DATA"], "notes": "Check whether the server implements whitelist filtering for SMTP parameters"}
{"name": "network_input-admin_administration-remote_management", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 8.0, "confidence": 7.25, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["ACC_REMOTE_URL_NEW", "lanProxy", "ipaddr", "port", "enable"], "notes": "Analyze whether the server verifies the remote management configuration permissions."}
{"name": "network_input-firmware_upload-UPGRADE_URL_NEW", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 9.0, "confidence": 4.5, "description": "High-risk firmware upload interface exposed: 1) Frontend receives firmware files via the '/REDACTED_PASSWORD_REDACTED_PASSWORD_PLACEHOLDER?form=upgrade' endpoint 2) Only verifies .bin extension, lacks content signature validation 3) Error handling exposes backend check logic (file size/content errors). Trigger condition: Attackers can craft malicious .bin files to trigger unverified processing flow. Security impact: Can implant persistent backdoors leading to complete device compromise.", "code_snippet": "$(\"#firmware-setting\").form('submit',{operation:\"firmware\"}, function(){...});", "link_identifiers": ["image", "UPGRADE_URL_NEW", "/REDACTED_PASSWORD_REDACTED_PASSWORD_PLACEHOLDER?form=upgrade", "file size exceeds", "file content error", "operation:'firmware'"], "notes": "Verify backend processing of the 'image' parameter: 1) Missing signature validation 2) Temporary file path traversal risk 3) Firmware unpacking command injection; Related command execution point: operation:'fwup_check'"}
{"name": "command_execution-fwup_check-err_flash", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 9.5, "confidence": 4.0, "description": "Command execution risk at the underlying level: 1) The fwup_check operation is directly linked to system commands 2) Error codes indicate dangerous operations such as flash/reboot. Trigger condition: Malicious firmware files trigger abnormal processes. Security impact: Persistent attacks can be achieved through command injection.", "code_snippet": "if(errcode.indexOf(\"flash\") != -1){...}", "link_identifiers": ["operation:'fwup_check'", "err_flash", "err_reboot", "result_proxy.write"], "notes": "Focus on checking parameter pollution in backend flash_write/reboot command calls; related input source: /REDACTED_PASSWORD_REDACTED_PASSWORD_PLACEHOLDER?form=upgrade"}
{"name": "heap_overflow-ubus_message_parser-fcn00008f08", "file_path": "sbin/ubusd", "location": "fcn.00008f08:0x8f64", "risk_score": 9.2, "confidence": 8.65, "description": "Negative length parameter triggers heap overflow: When an attacker sends a crafted UBus message via Unix socket (param_3=0 and param_2<0), the vulnerability path in fcn.00008f08 is triggered. calloc allocates a minimal heap block based on the signed param_2+20 (e.g., 0 bytes when param_2=-20), but memcpy interprets param_2 as an unsigned large integer (up to 4GB), writing excessive data to puVar2+5. Constraints: 1) param_1≠0 provides the tainted source; 2) calloc returns a non-NULL pointer. Security impact: Full control over heap corruption range, enabling arbitrary code execution when combined with heap feng shui.", "code_snippet": "if (param_3 == 0) {\n  iVar1 = param_2 + 0x14;\n  puVar2 = (uint *)sym.imp.calloc(1, iVar1);\n  if (param_1 != 0) {\n    sym.imp.memcpy(puVar2 + 5, param_1, param_2);\n  }\n}", "link_identifiers": ["fcn.00008f08", "param_2", "param_3", "memcpy", "calloc", "puVar2", "UBus"], "notes": "Trigger steps: 1) Establish connection to /var/run/ubus.sock; 2) Construct message with param_2=-1, param_3=0; 3) Populate param_1 with shellcode. Requires subsequent verification: behavior of calloc(0) on target system."}
{"name": "REDACTED_SENSITIVE_DATA", "file_path": "sbin/ubusd", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 9.0, "confidence": 8.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "if (param_1 + 0 == 0) {\n  uVar3 = rev_bytes(*(param_2 + 0x10));\n  puVar1 = **0x991c;\n  sym.imp.memcpy(puVar4 + 5, puVar1, uVar3);\n}", "link_identifiers": ["REDACTED_SENSITIVE_DATA", "uVar3", "memcpy", "puVar4", "calloc", "blob_put", "0x991c"], "notes": "Attack Vector: Requires access to Unix socket. Missing Mitigation Verification: No seccomp or NX protection detected."}
{"name": "REDACTED_SENSITIVE_DATA", "file_path": "sbin/ubusd", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 9.0, "confidence": 8.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "if (param_1 + 0 == 0) {\n  uVar3 = rev_bytes(*(param_2 + 0x10));\n  puVar1 = **0x991c;\n  sym.imp.memcpy(puVar4 + 5, puVar1, uVar3);\n}", "link_identifiers": ["REDACTED_SENSITIVE_DATA", "uVar3", "memcpy", "puVar4", "calloc", "blob_put", "0x991c", "UBus"], "notes": "Attack Vector: Requires access to Unix socket. Belongs to the same UBus message processing vulnerability as fcn.00008f08. Missing mitigation verification: No seccomp or NX protection detected."}
{"name": "static-doc-helpjs-en_US", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 0.2, "confidence": 4.9, "description": "The static help file contains English explanatory text for the router configuration pages, organized in a hierarchical structure. The file does not include executable code, user input processing mechanisms, or sensitive credentials. External references are limited to OpenVPN official documentation links. There are no boundary checks or input validation mechanisms since it does not process any external input. Security impact: The file itself does not constitute an attack surface and cannot be triggered or exploited by external input.", "link_identifiers": ["OPEN_VPN_GUIDE", "FIRMWARE", "OPEN_VPN", "PPTP_VPN", "$.su.CHAR.HELP"], "notes": "Need to check whether there are vulnerabilities in the actual VPN implementation code (not this file). It is recommended that subsequent analysis focus on dynamic script files such as executable components in the 'www/cgi-bin/' directory."}
{"name": "network_input-js_encrypt-padding_validation", "file_path": "REDACTED_SENSITIVE_DATA", "location": "encrypt.js:3", "risk_score": 7.0, "confidence": 8.5, "description": "The RSA encryption function $.su.encrypt(val, param) contains two critical flaws: 1) It employs a non-standard nopadding scheme that violates PKCS#1 standards, potentially causing incompatibility with backend decryption logic; 2) Insufficient input length validation, where exceeding the modulus size merely triggers a warning while continuing processing, possibly leading to encryption errors or data truncation. Trigger condition: An attacker-controlled val parameter containing oversized data (> modulus bit length/8) or carefully crafted malformed data. Actual impact: May cause abnormal encrypted data, potentially creating a padding oracle attack surface when combined with backend decryption errors.", "code_snippet": "if(val.length > len) { alert('RSA[HIDDEN]!'); } \n// [HIDDEN]", "link_identifiers": ["$.su.encrypt", "val", "param", "nopadding", "RSASetPublic", "n", "e"], "notes": "It is necessary to analyze the actual input source in conjunction with the page calling this function. It is recommended to trace the HTML files referencing this JS under the ../webpages/ directory."}
{"name": "network_input-js_random-weak_entropy", "file_path": "REDACTED_SENSITIVE_DATA", "location": "encrypt.js:567-589", "risk_score": 5.5, "confidence": 5.75, "description": "The random number generator has an environment-dependent vulnerability: 1) Modern browsers use window.crypto.getRandomValues, 2) Older Netscape browsers fall back to Math.random. When running on IE<11 or outdated mobile browsers, the ARC4 pseudo-random number generator lacks sufficient entropy and may be predictable. Trigger condition: An attacker lures users into submitting sensitive data in compatibility mode/on outdated browsers. Actual impact: Reduces encryption strength, potentially allowing partial plaintext recovery through random number prediction.", "code_snippet": "if(window.crypto && window.crypto.getRandomValues) {\n  // [HIDDEN]\n} else {\n  // [HIDDEN]\n}", "link_identifiers": ["SecureRandom", "ARC4init", "window.crypto.getRandomValues", "Math.random", "navigator.appName"], "notes": "The actual risk depends on the minimum browser version supported by the firmware, and the firmware documentation needs to be verified."}
{"name": "network_input-js_crypto-exposed_impl", "file_path": "REDACTED_SENSITIVE_DATA", "location": "encrypt.js:13-1024", "risk_score": 2.0, "confidence": 5.25, "description": "Network input exposed internal algorithm details: 1) Contains complete BigInteger implementation with Montgomery modular reduction optimization 2) Exposes exponentiation logic through functions like bnModPowInt. While no direct vulnerabilities exist, this increases attack surface analysis complexity. Potential risk: If related math library vulnerabilities exist (e.g., timing side channels), they could be exploited, though precise attacks are difficult to implement in JS environments.", "link_identifiers": ["BigInteger", "Montgomery", "bnModPowInt", "am1", "am2", "am3", "dbits"]}
{"name": "authentication_bypass-md5_collision_risk", "file_path": "REDACTED_SENSITIVE_DATA", "location": "md5.js ([HIDDEN]: $.su.md5)", "risk_score": 7.5, "confidence": 7.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["ascii.lastIndexOf", "update", "entree.charAt", "digestBits", "0xFF", "login.json", "REDACTED_PASSWORD_PLACEHOLDER", "REDACTED_SENSITIVE_DATA"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "algorithm_flaw-integer_overflow_boundary", "file_path": "REDACTED_SENSITIVE_DATA", "location": "md5.js ([HIDDEN]: shl1)", "risk_score": 4.0, "confidence": 5.25, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["shl1", "REDACTED_SENSITIVE_DATA", "integer", "REDACTED_SENSITIVE_DATA"], "notes": "The actual impact is limited, with a lower priority than the character mapping issue."}
{"name": "algorithm_risk-nonstandard_md5_impl", "file_path": "REDACTED_SENSITIVE_DATA", "location": "md5.js", "risk_score": 5.5, "confidence": 7.25, "description": "Non-standard Algorithm Implementation Risk: Contains complete MD5 round functions (FF/GG/HH/II) but employs custom basic operations instead of native JavaScript operations, increasing deviation from standard implementation. Trigger Condition: Any hash computation operation. Security Impact: Unexpected behavior at the algorithmic level may compromise system security, particularly during interactions with other systems.", "link_identifiers": ["FF", "GG", "HH", "II", "transform", "REDACTED_SENSITIVE_DATA"], "notes": "Suggested follow-up testing for hash collision probability"}
{"name": "xss-dom-locale-changeType", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 7.0, "confidence": 7.5, "description": "Unfiltered DOM operations lead to potential XSS vulnerabilities. In the $.su.locale.changeType function, the lanType parameter is directly concatenated into HTML strings (used for dynamically creating <script> and <link> tags) without any sanitization. Attackers can trigger XSS by controlling the locale parameter (e.g., injecting 'onerror=malicious_code()'). Trigger conditions: 1) Existence of backend vulnerabilities allowing unauthorized modification of locale values in lan.json 2) Users accessing pages containing malicious locale settings. Successful exploitation could result in arbitrary JavaScript code execution in victims' browsers, with risks including session hijacking or device control.", "code_snippet": "$(\"head\").append(\"<script id=\\\"lan-js\\\" type=\\\"text/javascript\\\" src=\\\"\"+URL_JS+\" \\\"></script>\");", "link_identifiers": ["$.su.locale.changeType", "lanType", "URL_JS", "URL_CSS", "URL_HELP", "$(\"head\").append"], "notes": "Verify the filtering mechanism of the backend /cgi-bin interface for the locale parameter and the write permission control of lan.json. Suggested follow-up analysis: 1) lan.json generation logic 2) CGI interface for setting locale."}
{"name": "hardcoded-path-cgi-endpoints", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 5.0, "confidence": 6.0, "description": "Hard-coded sensitive API endpoints exposed. The file explicitly defines privileged interface paths `/cgi-bin/luci/;stok=` and `/cgi-bin/ozker/;stok=`, which are typically high-risk operation entry points for CGI. Although the current stok processing is commented out (with an empty string value), exposing these paths may assist attackers in identifying attack surfaces. The actual risk is limited by: 1) stok tokens being inactive 2) no direct evidence indicating vulnerabilities in these interfaces. Attackers may attempt unauthorized access to these paths for privilege escalation.", "code_snippet": "$.su.url.subs = \"/cgi-bin/luci/;stok=\";\n$.su.url.ozkersubs = \"/cgi-bin/ozker/;stok=\";", "link_identifiers": ["$.su.url.subs", "$.su.url.ozkersubs", "$.su.url.stok", "/cgi-bin/luci/", "/cgi-bin/ozker/"], "notes": "The actual security of these interfaces needs to be analyzed in conjunction with other firmware components (such as CGI binaries). Subsequent checks should include: 1) The generation and validation logic of stok 2) The executable files of /cgi-bin/luci and /cgi-bin/ozker."}
{"name": "attack_chain-cgi_hardcoded_path_and_param_injection", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 8.0, "confidence": 7.75, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["/cgi-bin/luci/", "stok", "form", "serial", "disk.list.json", "$.su.url.subs"], "notes": "Correlation Findings: 1) hardcoded-path-cgi-endpoints (path exposure) 2) network_input-url_to_json-hardcoded_stok_and_param_injection (parameter injection). To be verified: Whether the actual processing logic of /cgi-bin/luci protects against path traversal (refer to location: www/webpages/url_to_json/url_to_json_ycf.txt)."}
{"name": "vulnerable-library-www-jquery-min-js", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 7.2, "confidence": 7.75, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "/*! jQuery v1.10.0 ... */", "link_identifiers": ["jQuery v1.10.0", ".html()", ".append()", "CVE-2012-6708", "CVE-2015-9251"], "notes": "Follow-up recommendations: 1) Analyze HTML/JS files in 'www/webpages' that call this library 2) Check if $.ajax() calls pass unfiltered parameters to /cgi-bin interfaces 3) Verify whether firmware contains jQuery vulnerability mitigation measures"}
{"name": "vulnerability_chain-xss_locale_dependency", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 5.0, "confidence": 5.0, "description": "DOM-based XSS vulnerability (xss-dom-locale-changeType) exploitation relies on undiscovered backend vulnerabilities: attackers must first tamper with the locale value in lan.json. Current knowledge base lacks: 1) input points for modifying locale (e.g., CGI interfaces) 2) lan.json generation mechanism. Complete attack chain is currently unfeasible and requires further verification: a) whether /cgi-bin/luci exposes locale setting functionality b) lan.json write permission controls. Risk rating reduced from 7.0 (requires preconditions) to 5.0 (currently not directly exploitable).", "link_identifiers": ["locale", "lan.json", "$.su.locale.changeType", "XSS"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "command_execution-firewall_init-param_injection", "file_path": "etc/init.d/firewall", "location": "etc/init.d/firewall: multiple locations", "risk_score": 7.5, "confidence": 7.0, "description": "The firewall startup script forwards operations to core.sh via 'fw $1'. If an attacker controls the $1 parameter of the init system (e.g., by injecting 'start;malicious_command'), arbitrary commands can be executed. Vulnerability conditions: 1) The init system does not filter parameter separators; 2) core.sh does not securely parse parameters. Potential impact: Privilege escalation through the service management interface.", "link_identifiers": ["fw()", "start()", "stop()", "restart()", "$1", "core.sh"], "notes": "Verify the parameter passing mechanism of the init system and the parsing logic of core.sh"}
{"name": "env_get-firewall_init-lib_hijacking", "file_path": "etc/init.d/firewall", "location": "etc/init.d/firewall: FW_LIBDIR declaration", "risk_score": 5.0, "confidence": 5.25, "description": "The script dynamically loads the library via '. $FW_LIBDIR/core.sh'. If an attacker modifies FW_LIBDIR (e.g., setting it to /tmp), they could load a malicious core.sh to achieve privilege escalation. Vulnerability conditions: 1) Other components can control FW_LIBDIR; 2) The path is not validated. The firmware defaults to hardcoding /lib/firewall, but actual risk depends on the variable control chain.", "link_identifiers": ["FW_LIBDIR", "core.sh", "lib/firewall"], "notes": "Check all components that modify FW_LIBDIR"}
{"name": "command_execution-netifd-init6-0xa95c", "file_path": "sbin/netifd", "location": "netifd:0xa95c (fcn.0000a95c)", "risk_score": 8.5, "confidence": 8.0, "description": "High-risk command injection vulnerability: The entry.init6 function retrieves a list of files matching /etc/init.d/network.* via glob, then directly concatenates the filename (param_1) into a command string for execution (popen). Attackers can create malicious filenames (e.g., `network.;reboot;`) to trigger arbitrary command execution. Trigger condition: Requires write permissions to the /etc/init.d/ directory. Security impact: Achieves system-level RCE with CVSS score ≥8.8.", "code_snippet": "sprintf(iVar10, \"%s '' dump\", param_1);\niVar10 = popen(iVar10, \"r\");", "link_identifiers": ["fcn.0000a95c", "param_1", "popen", "glob", "/etc/init.d/network.*"], "notes": "Verify the default permissions of the /etc/init.d directory"}
{"name": "command_execution-netifd-run_script-0x00431f20", "file_path": "sbin/netifd", "location": "netifd:0x00431f20 run_script", "risk_score": 8.5, "confidence": 8.5, "description": "SCRIPT environment variable command injection: run_script() directly executes the path specified by the environment variable SCRIPT, only verifying file executability (access). Attackers can execute arbitrary scripts by contaminating the SCRIPT variable (e.g., through DHCP events). Trigger condition: controlling DHCP service or process environment. Security impact: achieves RCE.", "link_identifiers": ["run_script", "SCRIPT", "execvp", "access"]}
{"name": "memory_corruption-ubus-0xf51c", "file_path": "sbin/netifd", "location": "sbin/netifd:0xf51c", "risk_score": 8.5, "confidence": 8.5, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["REDACTED_SENSITIVE_DATA", "blobmsg_parse", "iVar1", "UCI[HIDDEN]"]}
{"name": "path_injection-netifd-ubus-0x0042a8d0", "file_path": "sbin/netifd", "location": "netifd:0x0042a8d0", "risk_score": 6.0, "confidence": 8.0, "description": "IFNAME Path Injection: handle_interface_event() constructs a ubus path (network.interface.%s) using an unfiltered IFNAME environment variable. Attackers can inject path traversal characters (e.g., ../../) to disrupt communication. Trigger condition: Network interface state change event.", "link_identifiers": ["handle_interface_event", "IFNAME", "ubus_notify", "network.interface.%s"]}
{"name": "file_write-netifd-DEBUG_LOG-0x0042c110", "file_path": "sbin/netifd", "location": "netifd:0x0042c110", "risk_score": 5.5, "confidence": 6.25, "description": "DEBUG_LOG Arbitrary File Write: write_debug_log() uses the unfiltered DEBUG_LOG environment variable to control log paths. Attackers can achieve arbitrary file writes through path traversal (e.g., ../etc/config). Trigger condition: Setting the DEBUG_LOG environment variable.", "link_identifiers": ["write_debug_log", "DEBUG_LOG", "fopen"]}
{"name": "command_execution-hotplug-0x12ee8", "file_path": "sbin/netifd", "location": "sbin/netifd:0x12ee8", "risk_score": 7.0, "confidence": 5.75, "description": "Hotplug Script Execution Risk: Execution via function pointer call to /sbin/hotplug-call (modifiable by the -h parameter). If an attacker controls the path or function pointer, it may lead to RCE. Trigger conditions: modifying boot parameters or memory corruption.", "link_identifiers": ["hotplug-call", "fcn.00012eb8", "blx r0", "-h"]}
{"name": "configuration_load-dropbear-config-validation", "file_path": "etc/init.d/dropbear", "location": "etc/init.d/dropbear ([HIDDEN]: dropbear_start)", "risk_score": 7.5, "confidence": 6.5, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["config_get", "append_ports", "BannerFile", "rsakeyfile", "dsskeyfile"], "notes": "Analyze the dropbear binary verification mechanism to confirm the actual impact."}
{"name": "command_execution-dropbear-privileged-ops", "file_path": "etc/init.d/dropbear", "location": "etc/init.d/dropbear ([HIDDEN]: keygen, killclients)", "risk_score": 5.0, "confidence": 5.75, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["keygen", "REDACTED_SENSITIVE_DATA", "killclients", "service_start", "SERVICE_PID_FILE"]}
{"name": "configuration_tamper-dropbear-attack-surface", "file_path": "etc/init.d/dropbear", "location": "etc/init.d/dropbear ([HIDDEN]: start_service)", "risk_score": 6.5, "confidence": 5.75, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["config_load", "${NAME}", "REDACTED_SENSITIVE_DATA", "PasswordAuth"], "notes": "The attack chain needs to be formed by combining vulnerabilities in other services."}
{"name": "configuration_load-basic_security_wrapper-etc_init.d_basic_security", "file_path": "etc/init.d/basic_security", "location": "etc/init.d/basic_security: [HIDDEN]", "risk_score": 0.0, "confidence": 4.5, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["fw_$1", "ac()", "START=46", "AC_LIBDIR=/lib/basic_security", "core.sh", "fw_start", "fw_stop", "/lib/firewall/core.sh"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "network_input-validate-$.su.vtype", "file_path": "REDACTED_SENSITIVE_DATA", "location": "su.js:716 (validate[HIDDEN])", "risk_score": 6.5, "confidence": 5.5, "description": "The input validation function ($.su.vtype) is called at user input points for IP/domain name/numbers, etc. (lines 627/631/644/648/361), but only performs regex matching without including output escaping. If the validated data is output to the DOM via .html() or innerHTML by other components, attackers can bypass validation and trigger XSS by crafting special characters (e.g., <svg onload=alert(1)>). Trigger conditions: 1) Associated files contain unescaped DOM output points; 2) The validation function returns true for malicious input. Actual impact depends on the implementation of associated files, with no direct output points currently identified in this file.", "code_snippet": "$.su.vtype.prototype.validate = function(value){\n  if (this.regex){\n    resultReg = this.regex.test(value); // [HIDDEN]\n    ...", "link_identifiers": ["$.su.vtype", "$.su.vtype.prototype.validate", "input.val()", ".html(", "innerHTML"], "notes": "It is necessary to track other files that call $.su.vtype to verify whether data flows to DOM output functions. The escape function $.su.func.escapeHtml exists but is not enforced. Related finding: The Menu component (su.js:1125) may perform unsanitized DOM operations using data validated by this function, forming an XSS exploitation chain."}
{"name": "network_input-menu-$.su.Menu", "file_path": "REDACTED_SENSITIVE_DATA", "location": "su.js:1125-1312 (Menu[HIDDEN])", "risk_score": 8.0, "confidence": 7.75, "description": "The menu loader ($.su.Menu) retrieves external JSON data via $.ajax, then constructs HTML (inHTML variable) through string concatenation in the success callback, and inserts it into the DOM via container.append($(inHTML)). This operation is equivalent to innerHTML and does not use textContent or explicit sanitization. If an attacker controls the JSON file pointed to by settings.data (e.g., through path traversal or configuration tampering), malicious scripts can be injected into the JSON to trigger XSS. Trigger conditions: 1) Control of the settings.data parameter 2) JSON contains unfiltered HTML tags. The current file does not expose settings.data to external input, but the component design presents an exploitable pattern.", "code_snippet": "var inHTML = '<div class=\"menu-item\">' + item.name + '</div>'; // [HIDDEN]\ncontainer.append($(inHTML)); // [HIDDEN]DOM[HIDDEN]", "link_identifiers": ["settings.data", "$.ajax", "success: function(data)", "inHTML[HIDDEN]", "container.append($(inHTML))"], "notes": "Follow-up analysis should include: 1) Whether the file initializing the Menu component sets settings.data from URL parameters 2) Whether the JSON file is located in a writable directory. This constitutes the critical link in the actual exploitable XSS chain. Related discovery: If the validation function ($.su.vtype) returns unescaped data that's used by this component, XSS can be triggered directly by bypassing validation."}
{"name": "directory-missing-www", "file_path": "www/webpages/url_to_json/url_to_json_szz.txt", "location": "[HIDDEN]:0 ([HIDDEN]) 0x0", "risk_score": 0.0, "confidence": 5.0, "description": "Failed to parse the specified file as the 'www' directory structure does not exist in the firmware. Multiple verifications: 1) Executing 'ls -l www' returned Exit Code 2, confirming the directory is missing. 2) The target file path is completely inaccessible. This indicates: 1) The firmware may use non-standard web directory naming. 2) The path provided by the user does not match the actual firmware structure.", "link_identifiers": ["www", "webpages", "url_to_json_szz.txt"], "notes": "Conflict with existing keywords 'www/webpages/data' and 'www/webpages/url_to_json' in the knowledge base. Recommendations: 1) Revalidate the effectiveness of findings containing these keywords 2) Use 'find / -type d -name htdocs' to locate actual web directories 3) Prioritize analysis of high-risk directories such as /sbin and /etc"}
{"name": "path-traversal-http-param-to-json-mapping", "file_path": "www/webpages/url_to_json/url_to_json_ycf.txt", "location": "www/webpages/url_to_json/url_to_json_ycf.txt", "risk_score": 7.5, "confidence": 8.25, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["form", "stok", "serial", "wireless.region.json", "disk.list.json", "usb.acc.json", "qos.status.json", "syslog.mail.json", "account.testmail.json", "/cgi-bin/luci"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "inconsistency-www-path", "file_path": "www/webpages/url_to_json/url_to_json_szz.txt", "location": "[HIDDEN]:0 ([HIDDEN]) 0x0", "risk_score": 3.0, "confidence": 4.75, "description": "The knowledge base contains multiple records of 'www' paths (e.g., 'www/cgi-bin/luci'), but firmware verification confirms the 'www' directory does not actually exist. This discrepancy indicates: 1) Existing www-related findings may be based on incorrect path assumptions 2) The credibility of these findings needs to be reevaluated.", "link_identifiers": ["www", "path_inconsistency", "web_directory"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "network_input-url_mapping-stok_form_param_injection", "file_path": "www/webpages/url_to_json/nat_url_to_json_ljj.txt", "location": "www/webpages/url_to_json/nat_url_to_json_ljj.txt", "risk_score": 7.5, "confidence": 8.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["stok", "form", "nat.nat.json", "security.firewall.json", "upnp.rule.json", "ddns.json", "access.enable.json"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "jquery-evalJSON-arbitrary-code-execution", "file_path": "REDACTED_SENSITIVE_DATA", "location": "jquery.json-2.4.min.js: $.evalJSON[HIDDEN]", "risk_score": 9.0, "confidence": 6.0, "description": "The internal implementation of the `$.evalJSON` function contains a high-risk arbitrary code execution vulnerability: When the native `JSON.parse` is disabled in the environment (e.g., in older embedded JS engines), this function directly executes `eval('('+str+')')`. If the caller passes unvalidated external input (e.g., HTTP request parameters), it may lead to remote code execution. Trigger conditions: 1) The runtime environment lacks native JSON support (probability < 2%); 2) There exists a call site that passes tainted data into the `str` parameter. Boundary check: No input filtering or structural validation is performed. The actual risk is constrained by three factors: environment compatibility, paths for tainted data input, and attacker control capability.", "code_snippet": "$.evalJSON=typeof JSON==='object'&&JSON.parse?JSON.parse:function(str){return eval('('+str+')');};", "link_identifiers": ["$.evalJSON", "str", "eval", "JSON.parse", "www", "cgi-bin"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "jquery-secureEvalJSON-filter-bypass", "file_path": "REDACTED_SENSITIVE_DATA", "location": "jquery.json-2.4.min.js: $.secureEvalJSON[HIDDEN]", "risk_score": 6.0, "confidence": 4.75, "description": "The `$.secureEvalJSON` filtering mechanism has design flaws: it attempts to sanitize input through regex replacement (`/\\\\[\"\\\\/bfnrtu]/g`) and structural checks (`/^[\\],:{}\\s]*$/`), but can be bypassed via Unicode encoding (e.g., `\\u0028`) or JSFuck techniques. Trigger conditions: 1) The caller uses this function instead of `$.evalJSON`; 2) The input is carefully crafted to bypass filtering. Actual impact is limited by native JSON support in the environment, but arbitrary code execution can occur if trigger conditions are met.", "code_snippet": "var filtered=str.replace(/\\\\[\"\\\\\\/bfnrtu]/g,'@').replace(...);\nif(/^[\\],:{}\\s]*$/.test(filtered)){return eval('('+str+')');}", "link_identifiers": ["$.secureEvalJSON", "filtered", "replace", "test", "/^[\\],:{}\\s]*$/"], "notes": "Historical bypass case: Injecting `]{}};alert(1);//` can bypass regex checks. POC to be tested for verification in actual firmware environment."}
{"name": "critical-file-missing-dropbear-config", "file_path": "www/webpages/url_to_json/url_to_json_szz.txt", "location": "[HIDDEN]:0 ([HIDDEN]) 0x0", "risk_score": 7.0, "confidence": 8.5, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["dropbear", "PasswordAuth", "attack_chain", "ssh_login"], "notes": "Urgent Action Items: 1) Locate the dropbear configuration file in the actual firmware (possible path: /etc/dropbear.conf) 2) Verify the default state of PasswordAuth 3) Check the modification permissions of this configuration through the Web/NVRAM interface"}
{"name": "critical-file-missing-sudoers", "file_path": "www/webpages/url_to_json/url_to_json_szz.txt", "location": "[HIDDEN]:0 ([HIDDEN]) 0x0", "risk_score": 8.0, "confidence": 8.75, "description": "The knowledge base lacks analysis records for the /etc/sudoers file, preventing verification of the core step (REDACTED_PASSWORD_PLACEHOLDER user modifying sudoers rules) in the attack chain 'attack_chain-priv_esc_via_admin_gid0'. This gap casts doubt on the feasibility of the privilege escalation path (risk_level=9.0).", "link_identifiers": ["sudoers", "privilege_escalation", "REDACTED_PASSWORD_PLACEHOLDER", "GID=0"], "notes": "Urgent action items: 1) Locate the sudoers file in the actual firmware (possible path: /etc/sudoers.d/REDACTED_PASSWORD_PLACEHOLDER) 2) Verify file permissions and default rules 3) Check sudo privileges for the REDACTED_PASSWORD_PLACEHOLDER account"}
{"name": "www-js-widget", "file_path": "REDACTED_SENSITIVE_DATA", "location": "widget.js", "risk_score": 0.0, "confidence": 4.9, "description": "widget.js, as a pure client-side UI component library, does not implement any HTTP request handling or sensitive interface calls. Its core functionalities include: 1) Form component rendering and event handling (e.g., click/keyboard events) 2) UI state management (setValue/getValue) 3) Placeholder validation functions (validate always returns true). Since it lacks external input points (such as URL parameter parsing) and dangerous operations (like command execution), this file does not contain any complete exploitation chain that could be triggered by attackers. All data processing is confined to browser DOM operations and cannot affect system state.", "link_identifiers": ["$.su.Widget", "setValue", "getValue", "validate", "setError", "form.form(\"submit\")"], "notes": "Follow-up analysis directions: 1) Examine the HTML file that calls this component (e.g., locate server-side scripts through the form's action attribute) 2) Analyze other JavaScript files in the www directory (especially scripts handling AJAX requests) 3) Review CGI binaries or Node.js server-side scripts"}
{"name": "service_behavior-dnsmasq-dhcp_script_execution", "file_path": "etc/init.d/dnsmasq", "location": "etc/init.d/dnsmasq:start() → dnsmasq[HIDDEN]", "risk_score": 9.0, "confidence": 4.5, "description": "Confirm the execution mechanism of the '--dhcp-script' parameter when the dnsmasq service starts: 1) The service startup script (/etc/init.d/dnsmasq) uses the xappend function to write UCI configuration items (such as dhcp.script) or '--dhcp-script=path' from /etc/dnsmasq.conf into the CONFIGFILE (/var/etc/dnsmasq.conf). 2) The dnsmasq main process parses this file upon startup and executes the script specified by the parameter. 3) Trigger conditions: when the service restarts or the configuration reloads. Actual risk: Attackers can achieve arbitrary command execution through configuration injection (such as tampering with dhcp.script).", "link_identifiers": ["--dhcp-script", "xappend", "CONFIGFILE", "dnsmasq", "dhcp.script"], "notes": "Associated Vulnerability: configuration_load-dnsmasq-uci_injection"}
{"name": "attack_chain-openvpn-config_injection_rce", "file_path": "etc/init.d/openvpn", "location": "init.d/openvpn: append_params[HIDDEN]", "risk_score": 9.0, "confidence": 8.25, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "config_get v \"$s\" \"$p\"\n[ -n \"$v\" ] && append_param \"$s\" \"$p\" && echo \" $v\" >> \"/var/etc/openvpn-$s.conf\"", "link_identifiers": ["client_connect", "append_param", "config_get", "/var/etc/openvpn-$s.conf", "service_start", "UCI"], "notes": "Critical Constraint: File permissions for /etc/config/openvpn not verified. Related knowledge base notes: 'Associated with CVE-2020-15078 vulnerability pattern', 'Requires verification of write protection mechanism for /etc/config/openvpn'"}
{"name": "path_traversal-openvpn-dynamic_config_path", "file_path": "etc/init.d/openvpn", "location": "init.d/openvpn: start_instance[HIDDEN]", "risk_score": 6.0, "confidence": 5.5, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["start_instance", "/var/etc/openvpn-$s.conf", "s", "UCI_section"], "notes": "Defense measure: Add `s=$(basename \"$s\")` before path concatenation. Related finding: 'configuration_load-openvpn-path_hijack'"}
{"name": "privilege_escalation-openvpn-missing_user_validation", "file_path": "etc/init.d/openvpn", "location": "init.d/openvpn: start_instance[HIDDEN]", "risk_score": 7.5, "confidence": 7.25, "description": "Missing Access Control Risk:\n1. Vulnerability Point: Service always starts as REDACTED_PASSWORD_PLACEHOLDER without validating the 'user' field in configuration\n2. Attack Vector: Tampering with configuration to set invalid users (e.g., 'user malicious')\n3. Impact: Potential privilege escalation when combined with local OpenVPN vulnerabilities (e.g., CVE-2020-11810)\n\nExploitability: 6.0/10 (requires existence of secondary vulnerabilities)", "link_identifiers": ["start_instance", "service_start", "user", "/usr/sbin/openvpn"], "notes": "Associated CVE: CVE-2020-11810 (Authentication Bypass). Related knowledge base note: 'Related service_start vulnerability chain'."}
{"name": "command_execution-pptpd-start_smbacc_injection", "file_path": "etc/init.d/pptpd", "location": "etc/init.d/pptpd:72 (start)", "risk_score": 8.5, "confidence": 8.0, "description": "High-risk Command Injection Vulnerability (start function)\n- Specific manifestation: The $smbacc parameter is directly concatenated into the fw command execution without filtering\n- Trigger condition: An attacker modifies the samba_access value (e.g., ';reboot;') via the UCI configuration interface and restarts the service\n- Boundary check: Complete lack of input validation and filtering mechanisms\n- Security impact: Forms a complete attack chain (configuration pollution → service restart → arbitrary command execution)\n- Exploitation method: Inject malicious configurations by combining Web interface/XSRF vulnerabilities to trigger execution", "code_snippet": "config_get smbacc \"pptpd\" \"samba_access\"\nfw pptp_access $smbacc", "link_identifiers": ["start", "config_get", "smbacc", "samba_access", "fw", "pptpd"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "credential_injection-pptpd-setup_login_chap", "file_path": "etc/init.d/pptpd", "location": "etc/init.d/pptpd:17-22 (setup_login)", "risk_score": 8.0, "confidence": 8.25, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["setup_login", "config_get", "REDACTED_PASSWORD_PLACEHOLDER", "REDACTED_SENSITIVE_DATA", "CHAP_SECRETS", "PAP_SECRETS", "/etc/config/pptpd"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "race_condition-pptpd-setup_config_tocotu", "file_path": "etc/init.d/pptpd", "location": "etc/init.d/pptpd:33-34 (setup_config)", "risk_score": 7.5, "confidence": 6.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "mkdir -p /var/etc\ncp /etc/pptpd.conf $CONFIG", "link_identifiers": ["setup_config", "mkdir", "cp", "CONFIG", "/var/etc/pptpd.conf"], "notes": "The actual risk depends on the /tmpfs feature and requires evaluation in conjunction with the boot sequence."}
{"name": "config_injection-pptpd-setup_config_remoteip", "file_path": "etc/init.d/pptpd", "location": "etc/init.d/pptpd:38-41 (setup_config)", "risk_score": 6.0, "confidence": 6.0, "description": "Configuration Parameter Injection Risk (setup_config function)\n- Specific manifestation: User-controlled remoteip/localip directly written to configuration file\n- Trigger condition: Injecting additional commands via UCI (e.g., 'remoteip 10.0.0.1\\nplugin malicious.so')\n- Boundary check: No configuration format validation mechanism\n- Security impact: May trigger pptpd parsing vulnerabilities or load malicious modules\n- Exploitation method: Injecting line breaks to add illegal configuration commands", "code_snippet": "[ -n \"$remoteip\" ] && echo \"remoteip  $remoteip\" >> $CONFIG", "link_identifiers": ["config_get", "localip", "remoteip", "CONFIG", "pptpd.conf"], "notes": "Analyze the robustness of the configuration parser in /usr/sbin/pptpd"}
{"name": "attack_path-uci_to_command_injection", "file_path": "etc/init.d/pptpd", "location": "multiple: /etc/config/pptpd → /etc/init.d/pptpd", "risk_score": 9.0, "confidence": 9.0, "description": "Attack Path: UCI Configuration Pollution → Command Injection  \n- Steps:  \n  1. Attacker modifies the samba_access field in /etc/config/pptpd (value: ';telnetd -l /bin/sh;')  \n  2. Triggers service restart via '/etc/init.d/pptpd restart'  \n  3. The start() function executes 'fw pptp_access ;telnetd -l /bin/sh;'  \n  4. System activates telnet backdoor service  \n- Feasibility: High (only requires configuration modification privileges)  \n- Criticality Score: 9.0", "link_identifiers": ["attack_path_uci_command_chain", "command_execution-pptpd-start_smbacc_injection", "UCI[HIDDEN]", "samba_access", "pptpd"], "notes": "Associated vulnerability: command_execution-pptpd-start_smbacc_injection"}
{"name": "attack_path-credential_injection_to_vpn", "file_path": "etc/init.d/pptpd", "location": "multiple: /etc/config/pptpd → REDACTED_PASSWORD_PLACEHOLDER", "risk_score": 8.5, "confidence": 9.0, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["attack_path_uci_credential_chain", "credential_injection-pptpd-setup_login_chap", "UCI[HIDDEN]", "CHAP_SECRETS", "pptpd"], "notes": "Associated vulnerability: credential_injection-pptpd-setup_login_chap"}
{"name": "recommendation-pptpd-start_smbacc_filter", "file_path": "etc/init.d/pptpd", "location": "etc/init.d/pptpd:72 (start)", "risk_score": 0.0, "confidence": 4.75, "description": "Emergency Fix Recommendation: Command Injection Vulnerability in start() Function  \n- Fix Method: Implement strict filtering for $smbacc (recommend using shlex.quote or equivalent mechanism)  \n- Verification Points: 1) Test filtering effectiveness against special characters ';', '&', '|' 2) Verify malicious configurations cannot execute commands after service restart 3) Ensure filtering does not disrupt legitimate configuration formats", "link_identifiers": ["command_execution-pptpd-start_smbacc_injection", "smbacc", "input_sanitization", "pptpd"], "notes": "Associated vulnerability: command_execution-pptpd-start_smbacc_injection"}
{"name": "recommendation-pptpd-setup_login_printf", "file_path": "etc/init.d/pptpd", "location": "etc/init.d/pptpd:17-22 (setup_login)", "risk_score": 0.0, "confidence": 4.75, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["credential_injection-pptpd-setup_login_chap", "CHAP_SECRETS", "printf", "credential_sanitization"], "notes": "Related vulnerability: credential_injection-pptpd-setup_login_chap"}
{"name": "recommendation-pptpd-setup_config_install", "file_path": "etc/init.d/pptpd", "location": "etc/init.d/pptpd:33-34 (setup_config)", "risk_score": 0.0, "confidence": 4.25, "description": "Recommendations for Fixing Race Condition Vulnerabilities\n- Fix Method: Replace the mkdir + cp combination with 'install -D /etc/pptpd.conf $CONFIG'\n- Verification Points: 1) Test whether symbolic link attacks are prevented 2) Verify the creation behavior of install when the target directory does not exist 3) Check if permission inheritance is correct", "link_identifiers": ["race_condition-pptpd-setup_config_tocotu", "TOCTOU", "atomic_operation", "install_command"], "notes": "Associated vulnerability: race_condition-pptpd-setup_config_tocotu"}
{"name": "recommendation-global_followup_actions", "file_path": "etc/init.d/pptpd", "location": "global", "risk_score": 0.0, "confidence": 4.0, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["UCI_config_audit", "pptpd_parser_analysis", "attack_chain_validation"], "notes": "In-depth validation requirements covering all pptpd-related vulnerabilities"}
{"name": "configuration_load-nat-enable_switch", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 1.0, "confidence": 7.5, "description": "The NAT function master switch (enable:off) is located in the configuration file. Enabling it alone does not expose services:  \n1) It must be combined with virtualServer.json configuration for specific port forwarding to pose a threat.  \n2) The attack requires two steps: tampering with enable to \"on\" + configuring malicious forwarding rules.  \n3) Web interface modification permissions are unverified (requires analysis in conjunction with the ACC_REMOTE_URL_NEW endpoint).", "code_snippet": "{\"enable\":\"off\"}", "link_identifiers": ["enable"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "remote_code_execution-uhttpd_interpreter_injection", "file_path": "etc/init.d/uhttpd", "location": "etc/init.d/uhttpd:0 (service_start)", "risk_score": 9.0, "confidence": 7.75, "description": "The interpreter parameter injection vulnerability in the uhttpd service leads to remote code execution. Specific manifestations: 1) The startup script retrieves the user-configured interpreter path via config_get; 2) The path value is directly concatenated into the UHTTPD_ARGS parameter (using the '-i' option) without any filtering or whitelist validation; 3) It is passed to the uhttpd main process for execution via service_start. Trigger condition: An attacker modifies the interpreter configuration (e.g., setting it to /bin/sh) through the web interface/NVRAM and restarts the service. Boundary check: Completely absent, allowing arbitrary paths to be specified. Security impact: Achieves remote code execution (RCE), with the exploit chain being: configuration write → service restart → accessing a malicious endpoint to trigger command execution.", "link_identifiers": ["interpreter", "config_get", "UHTTPD_ARGS", "-i", "service_start", "uhttpd"], "notes": "Subsequent verification is required to check whether the configuration modification interface (such as the web management backend) has unauthorized access vulnerabilities. Related findings: command_execution-uhttpd_init_param_injection, configuration_load-uhttpd_dynamic_args_vul, service_exposure-uhttpd_multi_instance"}
{"name": "cryptographic_failure-cert_key_handling_flaws", "file_path": "etc/init.d/uhttpd", "location": "etc/init.d/uhttpd: generate_keys[HIDDEN]", "risk_score": 8.0, "confidence": 7.0, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["UHTTPD_CERT", "UHTTPD_KEY", "generate_keys", "keyout", "bits", "days", "px5g"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "parameter_injection-generate_keys_subject_manipulation", "file_path": "etc/init.d/uhttpd", "location": "etc/init.d/uhttpd: generate_keys[HIDDEN]", "risk_score": 6.5, "confidence": 5.5, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["generate_keys", "config_get", "country", "state", "commonname", "-subj", "PX5G_BIN"], "notes": "Subsequent analysis is required for the /bin/px5g program to verify the processing logic of the -subj parameter."}
{"name": "configuration_load-system_factory_template", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 0.5, "confidence": 5.25, "description": "The file serves as a configuration template for factory reset, but the data field is empty and contains no actual configuration values. No hardcoded credentials, debug switches, or security policy override points were detected. This file may only be dynamically populated when the system performs a factory reset operation, but in its static state: 1) There is no sensitive data that can be directly exploited externally 2) No parameter boundary check issues exist 3) No direct attack entry points are present. Triggering actual risks requires: a) An attacker being able to tamper with the template file b) The system failing to verify template integrity during the reset operation.", "link_identifiers": ["system.factory.json", "data", "comments", "backup", "REDACTED_PASSWORD_PLACEHOLDER"], "notes": "Track backup/restore functionality implementation: 1) Inspect components that generate actual configurations (e.g., REDACTED_PASSWORD_PLACEHOLDER) 2) Verify template loading mechanism during restore operations 3) Analyze for potential template injection vulnerabilities"}
{"name": "info_leak-firmware_config-status", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 2.0, "confidence": 8.9, "description": "This JSON file is a firmware upgrade status record file, containing read-only information such as firmware version, hardware model, and upgrade progress. The file does not process any external input, all fields are static values with no data validation requirements. Main security impacts: 1) Exposes precise firmware version (3.13.31) and hardware model (WDR3600), allowing attackers to search for known vulnerabilities 2) The 'ops':'upload' status indicates the system is currently in firmware upgrade mode, potentially increasing the attack surface. Trigger condition: The information can be read by accessing the file path through the web interface.", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["firmware_version", "hardware_version", "ops", "totaltime", "currenttime", "is_default"], "notes": "Recommend analyzing in conjunction with the firmware upload handler under /cgi-bin/: 1) Version information disclosure may reduce exploit difficulty 2) Check if the firmware upload feature has unauthorized access or signature verification flaws. Related keywords reference: firmware_upload, /cgi-bin/luci, /REDACTED_PASSWORD_REDACTED_PASSWORD_PLACEHOLDER"}
{"name": "attack_chain-stok_bypass_firmware_upload", "file_path": "REDACTED_SENSITIVE_DATA", "location": "www/cgi-bin/luci", "risk_score": 10.0, "confidence": 8.35, "description": "Full attack path: Attacker obtains a valid stok (through prediction or session fixation) → leverages firmware version information (firmware.set.json) to identify known vulnerabilities → accesses the high-risk interface /REDACTED_PASSWORD_REDACTED_PASSWORD_PLACEHOLDER → uploads malicious firmware → triggers complete device takeover. New element: The exposed version information (3.13.31/WDR3600) in firmware.set.json reduces the difficulty of vulnerability exploitation, while the 'ops':'upload' status may potentially expand the attack surface.", "link_identifiers": ["stok", "/REDACTED_PASSWORD_REDACTED_PASSWORD_PLACEHOLDER", "firmware_upload", "system_exec", "firmware_version", "hardware_version"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "info_leak-firmware_config-status", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 3.0, "confidence": 8.9, "description": "This JSON file is a firmware upgrade status log, containing read-only information such as firmware version, hardware model, and upgrade progress. The file does not process any external input, all fields are static values with no data validation requirements. Main security impacts: 1) Exposes precise firmware version (3.13.31) and hardware model (WDR3600), allowing attackers to search for known vulnerabilities 2) The 'ops':'upload' status indicates the system is currently in firmware upgrade mode, potentially increasing the attack surface. Trigger condition: The information can be read by accessing this file path through the web interface.", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["firmware_version", "hardware_version", "ops", "totaltime", "currenttime", "is_default"], "notes": "Attack chain: attack_chain-stok_bypass_firmware_upload (as a prerequisite for vulnerability exploitation). Verification recommendations: 1) Examine the firmware signature verification logic in /cgi-bin/luci 2) Audit the stok generation mechanism"}
{"name": "configuration_load-samba-anonymous_write", "file_path": "etc/config/samba", "location": "etc/config/samba:7-11 (config sambashare)", "risk_score": 8.5, "confidence": 9.0, "description": "The Samba share configuration allows anonymous users to perform write operations on the /mnt directory. Trigger condition: When an attacker sends a request via the SMB protocol (445/tcp), they can upload/modify files without credentials due to the lack of invalid users restrictions and failure to enforce a minimum protocol version (SMB1 vulnerability). Boundary flaw consequence: If the /mnt directory contains system scripts, authentication files, or executable programs, malicious files can be implanted to achieve remote code execution or information leakage. Full exploitation chain requires verification of: 1) Samba service operational status, 2) Contents of the /mnt directory, 3) Whether files are executed through integrated cron/web services.", "code_snippet": "config sambashare\n    option name 'mnt'\n    option path '/mnt'\n    option read_only 'no'\n    option guest_ok 'yes'", "link_identifiers": ["sambashare", "guest_ok", "path", "/mnt", "samba_service"], "notes": "Verification required: 1) Confirm Samba service running status through process analysis 2) Analyze specific contents of /mnt directory 3) Check whether SMBv1 protocol is enabled by default. Related clues: Knowledge base contains keywords such as 'samba', 'smb.conf.template', which may involve other Samba configuration components. Unresolved items: enable status/passdb_backend/min_protocol configurations need to be verified through init scripts."}
{"name": "configuration_load-system-ntp_server_injection", "file_path": "etc/config/system", "location": "etc/config/system:8", "risk_score": 7.5, "confidence": 7.0, "description": "A potential attack path was identified in the etc/config/system file: The 'server' list parameter (list server) in the NTP client configuration accepts external input without format validation. Attackers could inject malicious NTP server addresses by tampering with the configuration file (e.g., via unauthorized configuration update vulnerabilities). Trigger conditions: 1) NTP client service enabled 2) Malicious server responds with forged NTP packets. Successful exploitation could lead to: time offset attacks (affecting certificate validation), NTP reflection attack pivoting, or service denial. Constraints: Requires device reboot or ntpd service restart for configuration to take effect.", "link_identifiers": ["config timeserver ntp", "list server", "option enable_server"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "configuration_load-system-hostname_timezone_second_order", "file_path": "etc/config/system", "location": "etc/config/system:2-4", "risk_score": 3.0, "confidence": 5.5, "description": "The system basic configuration section includes parameters such as hostname and timezone, which can be modified through the management interface. While there are no direct vulnerabilities, if other components (such as the logging system) fail to properly filter these values, they may serve as secondary attack vectors. Trigger condition: unfiltered output points utilizing these parameters exist (e.g., web interfaces or log files).", "link_identifiers": ["config system", "option hostname", "option timezone"]}
{"name": "file_not_found-account_credential_missing", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 0.0, "confidence": 5.0, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["REDACTED_PASSWORD_PLACEHOLDER", "www/webpages/data", "credential_storage"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "configuration_load-firewall-redirect_commented", "file_path": "etc/config/firewall", "location": "etc/config/firewall:87-93,101-107", "risk_score": 2.0, "confidence": 5.0, "description": "Port forwarding feature is disabled but configuration examples exist: All redirect configurations (e.g., TCP/UDP port forwarding) are commented out. If the administrator uncomments these without restricting source IPs (e.g., option src '*'), internal services (such as SSH/HTTP) may become exposed to the WAN side. Currently, there is no actual risk, but the potential exists for configuration errors to introduce vulnerabilities. Trigger condition: Administrator manually uncomments the configuration and restarts the firewall service.", "link_identifiers": ["config redirect", "option src", "src_dport", "dest_ip", "dest_port"], "notes": "Check if /etc/firewall.user contains uncommented redirection rules"}
{"name": "network_input-firewall-dhcp_renew_rule", "file_path": "etc/config/firewall", "location": "etc/config/firewall:12-18 (zone), 22-28 ([HIDDEN])", "risk_score": 1.5, "confidence": 6.5, "description": "WAN zone strict traffic control: Default policy drops all inbound traffic (option input DROP), only allowing DHCPv4 lease renewal requests (Allow-DHCP-Renew rule). This rule restricts: source zone=WAN, protocol=UDP, destination port=68, address family=IPv4. ICMP rule is commented out to further reduce attack surface. Trigger condition: Attacker spoofs DHCP renewal request packets (requires same subnet access).", "link_identifiers": ["config zone", "option name wan", "option input DROP", "config rule", "Allow-DHCP-Renew", "option dest_port 68", "option proto udp"], "notes": "Disabling ICMP may impact network diagnostics but enhances security."}
{"name": "configuration_load-firewall-restricted_accept", "file_path": "etc/config/firewall", "location": "etc/config/firewall:22-28 ([HIDDEN]), 35-118 ([HIDDEN])", "risk_score": 1.0, "confidence": 5.0, "description": "No broad ACCEPT rules: All active rules explicitly restrict protocols/ports (e.g., DHCP rules limit UDP/68). Example ACCEPT rules without source IP restrictions (such as \"option target ACCEPT + option src '*'\") are commented out, effectively preventing unauthorized access. Trigger condition: Administrator enables commented-out permissive rule templates.", "link_identifiers": ["config rule", "option target ACCEPT", "option src", "option dest_port"]}
{"name": "configuration_analysis-firewall-static_config", "file_path": "etc/config/firewall", "location": "etc/config/firewall", "risk_score": 0.0, "confidence": 5.0, "description": "Static configuration with no dynamic references: All parameters are hardcoded values (e.g., `option dest_port 68`), with no environment variable/NVRAM references in the form of `$VAR` or `${VAR}` detected. Eliminates possibility of altering firewall behavior through environment variable injection. Trigger condition: Not applicable (no controllable input points).", "link_identifiers": [], "notes": "The custom script path /etc/firewall.user may contain dynamic references and requires separate analysis."}
{"name": "configuration_load-usb_acc_hardcoded_credential", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 7.5, "confidence": 7.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["usb.acc.json", "REDACTED_PASSWORD_PLACEHOLDER", "account", "REDACTED_SENSITIVE_DATA", "confirm", "REDACTED_PASSWORD_PLACEHOLDER"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "configuration_load-usb_acc_permission_escalation", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 6.0, "confidence": 7.5, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["usb.acc.json", "data"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "attack_chain-samba_config_pollution_to_rce", "file_path": "etc/config/samba", "location": "[HIDDEN] (etc/init.d/proftpd + etc/init.d/samba + etc/config/samba)", "risk_score": 9.5, "confidence": 7.75, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "[HIDDEN]\n1. etc/init.d/proftpd: uci_get → [HIDDEN]\n2. etc/init.d/samba: usbshare export → [HIDDEN]smb.conf\n3. etc/config/samba: guest_ok=yes → [HIDDEN]", "link_identifiers": ["usbshare.global.svrname", "smb_add_share2", "sambashare", "/mnt", "attack_chain"], "notes": "Dependency verification: 1) Web interface filtering mechanism for usbshare.global.svrname 2) Whether the /mnt directory contains cron tasks/web executable directories 3) Reverse analysis of the usbshare program to confirm command injection feasibility. Associated findings: configuration_source-usbshare.svrname, command_execution-samba-usbshare_export, configuration_load-samba-anonymous_write"}
{"name": "configuration_load-virtual_server-port_forwarding", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 6.0, "confidence": 8.0, "description": "The virtual server configuration file defines two sets of port forwarding rules:  \n1) TCP external port 2770 forwarded to 192.168.1.1:21 (enabled)  \n2) UDP external port range 21-45 forwarded to internal port 21 (disabled).  \n\nTrigger condition: Forwarding activates when external access reaches the configured external_port.  \n\nSecurity impact: If the external_port range values are unverified (e.g., allowing full openness of 0-65535) or protocol types are unfiltered, it may lead to port abuse; if the ipaddr field is externally controlled, it could result in redirection attacks.", "code_snippet": "{\n\t\"external_port\": \"21-45\",\n\t\"ipaddr\": \"192.168.1.1\",\n\t\"internal_port\": \"21\",\n\t\"protocol\": \"UDP\",\n\t\"enable\": \"off\"\n}", "link_identifiers": ["virtualServer.json", "external_port", "internal_port", "protocol", "enable", "ipaddr"], "notes": "Track the consuming components of this file: 1) Which service loads this configuration 2) Whether the configuration is modified via the web interface 3) Whether boundary checks are performed during external_port range parsing (e.g., verifying min_port < max_port when splitting 21-45). Related knowledge base notes: Verify whether components such as /etc/init.d/fw, /lib/nat/nat_comm.sh, /lib/nat/nat.sh, /lib/firewall/core.sh load this configuration."}
{"name": "network_input-lan_interface-exposed_eth0", "file_path": "etc/config/network", "location": "etc/config/network: config interface 'lan'[HIDDEN]", "risk_score": 7.2, "confidence": 7.9, "description": "The LAN interface directly exposes the eth0 physical device with a static IP of 192.168.1.1 and lacks firewall rule protection. Trigger condition: an attacker gains access to the LAN or through a misconfigured WAN port. Missing boundary checks: no ACL filtering rules are configured. Security impact: directly exposing the physical layer interface of the device allows unauthorized network access, potentially serving as the initial entry point for buffer overflow or service vulnerability exploitation. Exploitation method: scanning open services on 192.168.1.1 to launch attacks.", "code_snippet": "config interface lan\n    option ifname   eth0\n    option proto   static\n    option ipaddr  192.168.1.1", "link_identifiers": ["lan", "eth0", "ipaddr", "192.168.1.1", "ifname", "proto static"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "configuration_load-uhttpd-multiple_attack_surfaces", "file_path": "etc/config/uhttpd", "location": "etc/config/uhttpd", "risk_score": 8.0, "confidence": 9.4, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "list listen_http\t0.0.0.0:80\nlist listen_https\t0.0.0.0:443\noption cgi_prefix\t/cgi-bin\nconfig cert px5g\n\toption bits\t1024\noption max_requests 3\noption script_timeout 120\noption rfc1918_filter 1", "link_identifiers": ["listen_http", "listen_https", "cgi_prefix", "px5g", "bits", "max_requests", "script_timeout", "rfc1918_filter"], "notes": "Subsequent analysis must include: 1) Input processing logic of actual CGI scripts in the /www/cgi-bin directory 2) Verification of whether weak certificates are actually deployed 3) Testing the DoS effect of max_requests"}
{"name": "attack_chain-uhttpd_cgi_jquery_evalJSON_rce", "file_path": "etc/config/uhttpd", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 8.5, "confidence": 4.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "N/A ([HIDDEN])", "link_identifiers": ["cgi-bin", "$.evalJSON", "attack_chain", "RCE"], "notes": "Verification steps: 1) Whether the actual CGI script returns a page containing jQuery 2) Whether HTTP parameters are directly passed into $.evalJSON"}
{"name": "attack_chain-virtual_server_fw_command_injection", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 8.0, "confidence": 7.0, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["virtualServer.json", "fw", "core.sh", "command_execution", "port_forwarding", "attack_chain"], "notes": "Urgent verification items: 1) Decompile /lib/firewall/core.sh to analyze virtualServer.json loading logic 2) Test injection of special characters in ipaddr/external_port fields 3) Check permission controls for modifying virtualServer.json via Web interface"}
{"name": "network_input-textbox-validation_chain", "file_path": "REDACTED_SENSITIVE_DATA", "location": "textbox.js:199/244/314, form.js:283", "risk_score": 8.5, "confidence": 8.25, "description": "The frontend form handling has a chain of validation flaws: the validation logic of the textbox control entirely relies on external vtype/validator implementations (textbox.js:199), causing validation to fail when callers do not define them correctly. Additionally, length checks are explicitly commented out (textbox.js:244), and the setValue method directly injects unfiltered values (textbox.js:314). Trigger conditions: 1) The form is not configured with vtype/validator. 2) Submitting excessively long or malicious script-containing input. Security impact: Attackers can craft malicious input to bypass frontend validation and submit it to backend APIs via proxy.write (form.js:283), forming an XSS or injection attack chain.", "code_snippet": "// textbox.js[HIDDEN]\nif (vtype && vtype.isVtype === true){...}\n/* lengthCheck[HIDDEN] */\nme.val(value);\n\n// form.js[HIDDEN]\nproxy.write(...);", "link_identifiers": ["vtype", "validator", "setValue", "proxy.write", "lengthCheck", "val"], "notes": "Track the vtype validation mechanism in the associated knowledge base ($.su.vtype). Need to trace the backend path (e.g., /cgi-bin/luci) submitted by proxy.write to complete the attack chain assessment."}
{"name": "network_input-textbox-hint_xss", "file_path": "REDACTED_SENSITIVE_DATA", "location": "textbox.js:80", "risk_score": 7.0, "confidence": 6.75, "description": "XSS vulnerability in hint attribute: The textbox directly concatenates unescaped hint attribute into HTML during initialization (textbox.js:80). Trigger condition: When the hint value contains user-controllable data (e.g., dynamically obtained from backend). Security impact: Attackers can inject arbitrary scripts by contaminating the hint attribute, leading to DOM-based XSS execution during form rendering.", "code_snippet": "inHTML += \"<input class=\\\\\\\"text-hint\\\\\\\" value=\\\\\\\"\"+this.hint+\"\\\\\\\" tabindex=\\\\\\\"-1\\\\\\\"/>\"", "link_identifiers": ["hint", "inHTML", "text-container"], "notes": "It is necessary to confirm whether the hint attribute originates from externally controllable sources such as NVRAM/backend APIs."}
{"name": "[REDACTED_PASSWORD]", "file_path": "etc/shadow", "location": "etc/shadow:7", "risk_score": 9.0, "confidence": 10.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "guest::0:0:99999:7:::", "link_identifiers": ["guest", "shadow", "[REDACTED_PASSWORD]", "authentication", "UID", "login_bypass"], "notes": "Verify guest account permissions: 1) Whether it is in the sudoers list 2) Accessible SUID programs 3) Network service exposure. Related hint: The keyword 'guest' already has relevant findings in the knowledge base (such as login interface analysis)."}
{"name": "REDACTED_SENSITIVE_DATA", "file_path": "etc/shadow", "location": "etc/shadow:1,6", "risk_score": 7.5, "confidence": 7.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_PASSWORD_PLACEHOLDER:x:0:0:99999:7:::\nREDACTED_PASSWORD_PLACEHOLDER:x:0:0:99999:7:::", "link_identifiers": ["REDACTED_PASSWORD_PLACEHOLDER", "REDACTED_PASSWORD_PLACEHOLDER", "x", "UID=0", "REDACTED_SENSITIVE_DATA", "privileged_account", "hash_cracking"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "REDACTED_SENSITIVE_DATA", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 8.5, "confidence": 8.0, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["guest", "::", "REDACTED_SENSITIVE_DATA", "ssh_login", "telnet", "PAM", "/bin/false", "PasswordAuth"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "association-admin_gid0_privilege_escalation_ref", "file_path": "REDACTED_SENSITIVE_DATA", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 6.0, "confidence": 6.5, "description": "The REDACTED_PASSWORD_PLACEHOLDER account has an abnormal GID=0 configuration record, associated with the existing attack chain (attack_chain-priv_esc_via_admin_gid0). This configuration grants the REDACTED_PASSWORD_PLACEHOLDER user REDACTED_PASSWORD_PLACEHOLDER group privileges, enabling privilege escalation when trigger conditions are met (such as the presence of a sudoers write vulnerability or a setgid program flaw).", "link_identifiers": ["REDACTED_PASSWORD_PLACEHOLDER", "GID=0", "privilege_escalation", "sudoers", "setgid"], "notes": "See attack chain record attack_chain-priv_esc_via_admin_gid0; To be supplemented: SUID/SGID file analysis results"}
{"name": "hardware_input-ttyHSL1-shell_activation", "file_path": "etc/inittab", "location": "etc/inittab:3", "risk_score": 7.0, "confidence": 9.0, "description": "Physical attack path: The attacker sends arbitrary characters via the ttyHSL1 serial port to trigger the launch of /bin/ash, obtaining an unauthenticated interactive shell. Trigger condition: Physical access to the device's serial interface. Due to the inability to analyze evidence from /bin/ash, this path presents unknown risks: 1) Shell escape character handling mechanism unclear 2) Environment variable parsing vulnerabilities to be investigated 3) Privilege escalation potential unevaluated.", "code_snippet": "ttyHSL1::askfirst:/bin/ash --login", "link_identifiers": ["ttyHSL1", "askfirst", "/bin/ash"], "notes": "The attributes of /bin/ash must be directly verified through firmware unpacking. Subsequent analysis should include: 1) Security boundaries of the serial port driver 2) SUID permission settings of ash"}
{"name": "ipc-rcS-uhttpd_command_chain", "file_path": "etc/inittab", "location": "init.d/rcS:7 | init.d/uhttpd:32", "risk_score": 9.0, "confidence": 7.25, "description": "System startup attack chain: The attacker injects the $2 parameter through the debugging interface to trigger rcS re-execution (e.g., trigger condition: init process debug mode). The unfiltered $2 parameter is passed to service scripts like uhttpd via rcS line 7 `$i $2`, exploiting the command injection vulnerability in uhttpd's generate_keys function (concatenating the commonname configuration item) to achieve remote code execution. Full path: untrusted input → rcS parameter → uhttpd configuration → px5g command execution.", "code_snippet": "[ -x $i ] && $i $2 2>&1\n$PX5G_BIN selfsigned -der ... -subj /C=\"${country:-DE}\"/.../CN=\"${commonname:-OpenWrt}\"", "link_identifiers": ["::sysinit", "/etc/init.d/rcS", "$2", "run_scripts", "generate_keys", "commonname", "px5g", "UHTTPD_ARGS"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "network_input-uhttpd-config_injection", "file_path": "etc/inittab", "location": "init.d/uhttpd:32", "risk_score": 9.5, "confidence": 8.5, "description": "Independent Attack Path: The attacker modifies the commonname parameter in the uhttpd configuration via the web interface (requiring a configuration write vulnerability). When the uhttpd service restarts, the generate_keys function directly concatenates the tainted value to execute px5g, achieving command injection. This path does not rely on rcS parameter passing, making the trigger condition more explicit.", "code_snippet": "$PX5G_BIN selfsigned -der ... -subj /C=\"${country:-DE}\"/.../CN=\"${commonname:-OpenWrt}\"", "link_identifiers": ["generate_keys", "commonname", "px5g", "config_get", "/etc/config/uhttpd"], "notes": "Subsequent analysis must include: 1) The configuration protection mechanism of /etc/config/uhttpd 2) Whether px5g has parameter injection vulnerabilities"}
{"name": "network_input-cbi_dom_unfiltered", "file_path": "REDACTED_SENSITIVE_DATA", "location": "cbi.js:102-143", "risk_score": 8.0, "confidence": 9.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "var obj = document.getElementById(field);\nvalue = t.value; // [HIDDEN]118\nvalue = t.checked ? value : ''; // [HIDDEN]126", "link_identifiers": ["document.getElementById", "document.REDACTED_SECRET_KEY_PLACEHOLDER", "value", "cbi_d_checkvalue"], "notes": "Correlate with backend interfaces (e.g., www/cgi-bin/luci) for data processing logic validation; Related knowledge base ID: network_input-url_to_json-hardcoded_stok_and_param_injection"}
{"name": "network_input-cbi_ajax_raw", "file_path": "REDACTED_SENSITIVE_DATA", "location": "cbi.js:528-538", "risk_score": 7.5, "confidence": 9.25, "description": "The AJAX request transmits raw form data using the Request object. Trigger condition: Intercept the default form submission behavior to send an XHR request. Constraint: Relies on backend validation of parameters. Security impact: Attackers can directly construct malicious requests to bypass the frontend interface. Exploitation method: Tampering with request parameters (e.g., injecting command separators) to trigger backend vulnerabilities.", "code_snippet": "event.element().request({\n  onSuccess: win,\n  onFailure: fail\n});", "link_identifiers": ["Request", "event.element()", "onSuccess", "onFailure"], "notes": "It is recommended to analyze the actual request parameter format and backend receiving point through packet capture; related knowledge base ID: command_execution-pptpd-start_smbacc_injection"}
{"name": "network_input-cbi_validators_bypass", "file_path": "REDACTED_SENSITIVE_DATA", "location": "cbi.js:13-202", "risk_score": 7.0, "confidence": 9.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "cbi_validators: {\n  'integer': function() { return this.match(/^-?[0-9]+$/) },\n  'ipaddr': function() { /* IP[HIDDEN] */ }\n}", "link_identifiers": ["cbi_validators", "cbi_validate_field", "cbi-input-invalid"], "notes": "Verify whether the backend performs duplicate checks; related knowledge base ID: configuration_load-dnsmasq-uci_injection"}
{"name": "command_execution-ipcalc.sh-input_validation_chain", "file_path": "bin/ipcalc.sh", "location": "ipcalc.sh:[HIDDEN]Awk[HIDDEN]", "risk_score": 3.0, "confidence": 8.0, "description": "The ipcalc.sh script contains input validation flaws: 1) Fails to validate octet value ranges (0-255) in IP addresses 2) Doesn't verify CIDR suffix range (0-32) 3) Lacks non-numeric character filtering. Trigger condition: Attacker passes malformed parameters (e.g., '192.168.1.300/33') through script callers (like web interfaces or shell scripts). Actual impacts: a) Integer overflow causing incorrect subnet mask calculations (compl/rshift operations) b) Erroneous network configuration output c) Potential configuration errors or service disruptions if downstream components (e.g., network configuration scripts) rely on this output without secondary validation. Exploitation requires: Attacker-controlled input parameters and output usage in sensitive operations.", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["ARGV[1]", "substr(ARGV[1],slpos+1)", "ip2int", "compl", "rshift", "int2ip", "start", "end"], "notes": "Follow-up analysis required: 1) Components in the firmware that invoke ipcalc.sh (e.g., CGI scripts under the www directory) 2) Whether the network configuration process uses the script's output 3) Verify if malformed output could lead to command injection or configuration overwrite. Related findings: command_execution-ipcalc.sh-ARGV1_validation, command_execution-ipcalc.sh-IP_injection, command_execution-ipcalc.sh-netmask_validation"}
{"name": "command_execution-reset_to_factory-mtd_erase_chain", "file_path": "sbin/reset_to_factory_settings.sh", "location": "sbin/reset_to_factory_settings.sh:15", "risk_score": 6.0, "confidence": 5.75, "description": "The script performs a factory reset operation: 1) Identifies the rootfs_data partition by reading /proc/mtd 2) Uses the 'mtd -r erase' command to forcibly erase the partition and reboot the device 3) Has no external input interfaces (does not accept parameters or environment variables) 4) Trigger condition: Must be executed with REDACTED_PASSWORD_PLACEHOLDER privileges 5) Security impact: Attackers with REDACTED_PASSWORD_PLACEHOLDER access can achieve persistent damage (denial of service) through this script, as the erase operation is irreversible and has no confirmation process.", "code_snippet": "ROOTFS_PART=$(grep rootfs_data /proc/mtd |cut -f4 -d' ')\nrun_ramfs \". /lib/functions.sh; include /lib/upgrade; sync; mtd -r erase ${ROOTFS_PART}\"", "link_identifiers": ["ROOTFS_PART", "rootfs_data", "mtd", "erase", "/proc/mtd", "run_ramfs"], "notes": "Analysis in conjunction with upper-layer calling components (e.g., web interfaces) is required: 1) Check whether unauthorized CGI scripts calling this script exist in the www directory 2) Verify permission controls when other services invoke this script 3) As the endpoint of the attack chain, this script requires privilege escalation through NVRAM/API entry points to be triggered."}
{"name": "network_input-www_index_redirect_login_exposure", "file_path": "www/index.html", "location": "www/index.html:[HIDDEN]", "risk_score": 1.5, "confidence": 10.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "[HIDDEN]", "link_identifiers": ["/webpages/login.html", "meta http-equiv", "refresh"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "command_execution-sysupgrade-backup_restore_path_traversal", "file_path": "sbin/sysupgrade", "location": "sysupgrade:110-136", "risk_score": 9.0, "confidence": 8.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "tar c${TAR_V}zf \"$conf_tar\" -T \"$CONFFILES\"\ntar -C / -x${TAR_V}zf \"$CONF_RESTORE\"", "link_identifiers": ["CONF_BACKUP", "CONF_RESTORE", "do_save_conffiles", "tar", "add_uci_conffiles"], "notes": "Verify the permission entry for invoking sysupgrade (e.g., web interface)"}
{"name": "configuration_load-sysupgrade-remote_config_injection", "file_path": "sbin/sysupgrade", "location": "sysupgrade:149-168", "risk_score": 7.5, "confidence": 7.25, "description": "Configuration loading vulnerability. Specific manifestations: The -f parameter accepts external URLs or file paths, downloading to CONF_TAR via get_image. When SAVE_CONFIG=1, the configuration is extracted and applied. Attackers controlling the CONF_IMAGE source can inject malicious configurations. Trigger conditions: 1) Attacker can hijack CONF_IMAGE resources 2) Platform does not verify configuration integrity. Boundary checks: No validation of downloaded content signatures or sources. Security impact: Potential for backdoor implantation or system configuration modification, requiring network hijacking capability.", "code_snippet": "get_image \"$CONF_IMAGE\" \"cat\" > \"$CONF_TAR\"\nexport SAVE_CONFIG=1", "link_identifiers": ["CONF_IMAGE", "get_image", "SAVE_CONFIG", "CONF_TAR", "platform_check_image"], "notes": "Analyze the download verification mechanism of get_image in /lib/upgrade"}
{"name": "file_write-sysupgrade-tempfile_race_condition", "file_path": "sbin/sysupgrade", "location": "sysupgrade:30-31", "risk_score": 6.5, "confidence": 6.5, "description": "Temporary file race condition risk. Specific manifestation: Fixed path /tmp/sysupgrade.* is used to store temporary files. An attacker could modify the content between file creation and extraction to inject malicious configurations. Trigger conditions: 1) Attacker has write permission to /tmp 2) Can predict file operation timing. Boundary check: Atomic operations or random filenames are not used. Security impact: Combined with low-privilege vulnerabilities could lead to privilege escalation.", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["CONFFILES", "CONF_TAR", "/tmp/sysupgrade.conffiles", "/tmp/sysupgrade.tgz"], "notes": "It is recommended to use mktemp to generate random temporary file paths"}
{"name": "env_bypass-login-FAILSAFE", "file_path": "bin/login.sh", "location": "login.sh:3-9", "risk_score": 8.0, "confidence": 8.0, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["FAILSAFE", "REDACTED_SENSITIVE_DATA", "REDACTED_SENSITIVE_DATA", "authentication_bypass"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "credential_validation-login-shadow_passwd", "file_path": "bin/login.sh", "location": "login.sh:3-4", "risk_score": 2.0, "confidence": 5.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["REDACTED_SENSITIVE_DATA", "REDACTED_SENSITIVE_DATA", "grep", "authentication"], "notes": "It has a complementary defensive relationship with the FAILSAFE bypass vulnerability (env_bypass-login-FAILSAFE): When this mechanism is active, the FAILSAFE bypass may become the sole attack vector. It is necessary to check whether grep could potentially be hijacked via PATH."}
{"name": "path_traversal-uci-f_option_processing", "file_path": "sbin/uci", "location": "sbin/uci:main:0x8f3c", "risk_score": 8.5, "confidence": 7.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "if (iVar1 == 0x66) {\n    iVar1 = sym.imp.fopen(*puVar10, *0x9014);", "link_identifiers": ["sym.imp.fopen", "option_f_processing", "fopen"], "notes": "Dynamic verification required: 1) Test '../' sequence filtering 2) Check permission settings of uci services in /etc/init.d/. Related knowledge base note: 'Defense measure: Add `s=$(basename \"$s\")` before path concatenation'."}
{"name": "memory_corruption-uci-argv_integer_overflow", "file_path": "sbin/uci", "location": "REDACTED_SENSITIVE_DATA", "risk_score": 7.0, "confidence": 6.25, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["strtoul", "argv", "uci_parse_argument"], "notes": "REDACTED_SENSITIVE_DATA"}
{"name": "race_condition-uci-global_context_access", "file_path": "sbin/uci", "location": "sbin/uci:0x9c1c", "risk_score": 5.5, "confidence": 4.5, "description": "The global context pointer (0x9c1c) is accessed without protection in multiple functions, potentially leading to race conditions. Trigger condition: concurrent execution of uci commands by multiple processes modifying shared state. Actual impact depends on firmware's concurrency model, may cause memory corruption or data inconsistency.", "link_identifiers": ["0x9c1c", "global context"], "notes": "Verification required: 1) Whether concurrent invocation scenarios exist in the firmware 2) Check the mutex implementation. Related knowledge base note: 'race_condition-pptpd-setup_config_tocotu'"}
{"name": "buffer_overflow-ubusd-fcn000090a0", "file_path": "sbin/ubusd", "location": "fcn.000090a0:0x90a0, 0x90ec", "risk_score": 9.0, "confidence": 8.25, "description": "High-risk buffer overflow vulnerability: The function fcn.000090a0, serving as a callback for uloop_fd_add, directly uses sym.imp.read at addresses 0x90a0 and 0x90ec to read network data. Critical issues: 1) The main loop reading (param_1, param_2, param_3) does not validate the relationship between param_3 and the target buffer; 2) The conditional branch reading (unaff_r6 + uVar4, 0xc - uVar4) only verifies uVar4<0xc without checking buffer boundaries. Trigger condition: When this function is activated by the uloop event loop to process socket data, an attacker can trigger heap/stack overflow by sending an oversized packet through /var/run/ubus.sock, potentially leading to arbitrary code execution.", "code_snippet": "iVar2 = sym.imp.read(param_1, param_2, param_3);\niVar2 = sym.imp.read(*(unaff_r4 + 4), unaff_r6 + uVar4, 0xc - uVar4);", "link_identifiers": ["fcn.000090a0", "sym.imp.read", "param_1", "param_2", "param_3", "unaff_r6", "uloop_fd_add", "/var/run/ubus.sock"], "notes": "Requires further verification: 1) Actual permissions of /var/run/ubus.sock 2) Feasibility of memory layout control after overflow"}
{"name": "permission_misconfig-ubusd-socket_creation", "file_path": "sbin/ubusd", "location": "ubusd:0x8cbc (fcn.00008c38)", "risk_score": 7.5, "confidence": 6.5, "description": "REDACTED_SENSITIVE_DATA", "code_snippet": "sym.imp.unlink(uVar3);\niVar1 = sym.imp.usock(0x8500,uVar3,0);", "link_identifiers": ["fcn.00008c38", "usock", "/var/run/ubus.sock", "unlink", "0x8d00", "0x8500", "uloop_init"], "notes": "Further analysis required: 1) Whether the usock implementation includes path length checks 2) The umask setting in the firmware startup script. Forms a complete attack chain with the buffer overflow vulnerability (buffer_overflow-ubusd-fcn000090a0): permission flaws allow attackers to access the socket and trigger overflow."}
{"name": "buffer_overflow-ubusd-fcn000090a0", "file_path": "sbin/ubusd", "location": "fcn.000090a0:0x90a0, 0x90ec", "risk_score": 9.0, "confidence": 8.25, "description": "High-risk buffer overflow vulnerability: The function fcn.000090a0, serving as a callback for uloop_fd_add, directly uses sym.imp.read at addresses 0x90a0 and 0x90ec to read network data. Critical issues: 1) The main loop reading (param_1, param_2, param_3) does not validate the relationship between param_3 and the target buffer; 2) The conditional branch reading (unaff_r6 + uVar4, 0xc - uVar4) only verifies uVar4<0xc without checking buffer boundaries. Trigger condition: When this function is activated by the uloop event loop to process socket data, an attacker can trigger heap/stack overflow by sending an oversized packet through /var/run/ubus.sock, potentially enabling arbitrary code execution.", "code_snippet": "iVar2 = sym.imp.read(param_1, param_2, param_3);\niVar2 = sym.imp.read(*(unaff_r4 + 4), unaff_r6 + uVar4, 0xc - uVar4);", "link_identifiers": ["fcn.000090a0", "sym.imp.read", "param_1", "param_2", "param_3", "unaff_r6", "uloop_fd_add", "/var/run/ubus.sock"], "notes": "Requires further verification: 1) Actual permissions of /var/run/ubus.sock 2) Feasibility of memory layout control after overflow"}
{"name": "permission_misconfig-ubusd-socket_creation", "file_path": "sbin/ubusd", "location": "ubusd:0x8cbc (fcn.00008c38)", "risk_score": 7.5, "confidence": 6.5, "description": "Potential permission configuration flaw: The main function (fcn.00008c38) when creating a UNIX socket: 1) retrieves a fixed path '/var/run/ubus.sock' via global pointer 0x8d00; 2) calls unlink() to delete old files; 3) binds using usock(0x8500, path, 0). Critical issue: No explicit file permission settings (e.g., chmod), relying on default umask values. Trigger condition: When the default umask permissions are overly permissive (e.g., allowing global read/write), local or remote attackers (via other services) can directly access this socket. Combined with the aforementioned buffer overflow vulnerability, this forms a complete attack chain.", "code_snippet": "sym.imp.unlink(uVar3);\niVar1 = sym.imp.usock(0x8500,uVar3,0);", "link_identifiers": ["fcn.00008c38", "usock", "/var/run/ubus.sock", "unlink", "0x8d00", "0x8500", "uloop_init"], "notes": "Further analysis required: 1) Whether the usock implementation includes path length checks 2) umask settings in firmware startup scripts. Forms a complete attack chain with the buffer overflow vulnerability (buffer_overflow-ubusd-fcn000090a0): permission flaws allow attackers to access sockets and trigger overflow."}
{"name": "null_ptr_dereference-ubus-argv_chain", "file_path": "bin/ubus", "location": "fcn.00008d60:0x8d60, fcn.0000896c:0x896c", "risk_score": 8.0, "confidence": 8.0, "description": "The ubus client contains a null pointer dereference vulnerability triggered by command-line arguments. Specific behavior: 1) The user passes tainted data (param_3) via command-line argument (argv[1]); 2) It is directly transmitted without boundary checks in fcn.00008d60; 3) Through a function pointer chain (0x8b50→0x8b3c→0x114d4→0x114c4), it ultimately calls a NULL address (0x11460). Trigger condition: An attacker must locally execute `ubus call [malicious argument]`, where the argument must satisfy the param_2==1 validation. Security impact: Causes process crash (DoS), with potential arbitrary code execution under specific memory layouts. Exploitation probability is medium: Requires local access, but commonly occurs through command execution permissions obtained via web vulnerabilities.", "code_snippet": "uVar1 = (**(0 + 0x114c4))(param_1,uVar1,*0x8d84,0);  // [HIDDEN]\nldr pc, [lr, 8]!  // [HIDDEN]", "link_identifiers": ["param_3", "argv", "fcn.00008d60", "fcn.0000896c", "0x8b50", "0x8b3c", "0x114d4", "0x114c4", "0x11460"], "notes": "Pending further verification: 1) Dynamic testing of crash conditions; 2) Checking whether the associated service (rpcd) exposes remote trigger paths; 3) Analyzing firmware memory protection mechanisms (ASLR/NX). Related lead: An argv-related integer overflow vulnerability exists in sbin/uci (record name: 'memory_corruption-uci-argv_integer_overflow')."}
{"name": "configuration_load-netifd-args_leak", "file_path": "sbin/netifd", "location": "netifd:0xa5fc", "risk_score": 7.0, "confidence": 7.25, "description": "Configuration load parameters pose a risk of sensitive information leakage: 1) The -l/-d options control log levels and debug mode 2) openlog calls do not filter sensitive data 3) If attackers inject parameters through vulnerable scripts (e.g., /etc/init.d/network), they may obtain internal debugging information. Trigger condition: When netifd starts with contaminated parameters. Security impact: Disclosure of network configuration details or internal states, providing intelligence for subsequent attacks.", "link_identifiers": ["sym.imp.getopt", "sym.imp.openlog", "-l", "-d", "/etc/init.d/network"], "notes": "Check whether the startup script calling netifd contains command injection vulnerabilities; it may form an exploit chain with UBus interface vulnerabilities."}
{"name": "ipc-ubus-network_interface", "file_path": "sbin/netifd", "location": "[HIDDEN]", "risk_score": 8.5, "confidence": 7.5, "description": "The UBus interface 'network.interface' is exposed but lacks permission verification: 1) ubus_add_object registers the interface during initialization 2) No evidence of ACL check code found 3) Combined with the ubus_send_event notification mechanism, attackers may tamper with network configurations through unauthorized UBus calls. Trigger condition: Attacker accesses the local UBus bus. Security impact: Network configuration tampering may lead to denial of service or man-in-the-middle attacks.", "link_identifiers": ["ubus_add_object", "network.interface", "ubus_send_event"], "notes": "Runtime permission control must be validated through dynamic analysis; it may be triggered by vulnerabilities in the /etc/init.d/network script."}
{"name": "ipc-netlink-callback_risk", "file_path": "sbin/netifd", "location": "netifd:0x1883c", "risk_score": 4.0, "confidence": 4.5, "description": "Potential risks in netlink callback pointer:  \n1) Global pointer *0x18958 points to invalid address 0x1820c  \n2) nl_cb_set may pass an invalid function pointer  \n3) Uninitialized pointer during runtime could cause NULL pointer dereference.  \nTrigger condition: When kernel sends RTMGRP_LINK multicast messages.  \nSecurity impact: Low probability crash, but pointer initialization logic requires verification.", "link_identifiers": ["nl_cb_set", "*0x18958", "RTMGRP_LINK"], "notes": "Runtime verification of pointer values required; independent risk point"}
{"name": "network_input-busybox-telnetd_multiple_risks", "file_path": "bin/busybox", "location": "bin/busybox", "risk_score": 7.5, "confidence": 7.0, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["BusyBox_1.19.4", "telnetd", "ash", "env", "setuid", "setgid", "CVE-2011-2716"], "notes": "Verification steps: 1) Check the enabled status of telnetd in /etc/inetd.conf 2) Analyze the startup script invocation parameters 3) Scan for CVE-2011-2716 characteristics (recv() without pkt length validation)"}
{"name": "cmd_injection-opkg-execvp_0x18ec8", "file_path": "bin/opkg", "location": "bin/opkg:0x18ec8", "risk_score": 9.0, "confidence": 8.25, "description": "High-risk command injection chain: In function fcn.00018e50(0x18ec8), commands are executed via execvp with parameters dynamically constructed using the format string '%s %s' (address 0x0001eb31). The parameter source is user input (package name), lacking filtering validation. Attackers can inject command separators through malicious package names (e.g., 'pkg;rm -rf /'). Trigger condition: Passing tainted parameters during operations like opkg remove. Security impact: Arbitrary command execution with REDACTED_PASSWORD_PLACEHOLDER privileges, leading to complete device control.", "code_snippet": "sym.imp.execvp(**(puVar8 + -0x10),*(puVar8 + -0x10));", "link_identifiers": ["execvp", "fcn.00018e50", "param_1", "fcn.0000f5a0", "remove"], "notes": "Correlate with fcn.0000d388 to confirm the user input point"}
{"name": "env_pollution-opkg-PKG_ROOT_0x13890", "file_path": "bin/opkg", "location": "bin/opkg:0x13890", "risk_score": 9.5, "confidence": 8.75, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["PKG_ROOT", "setenv", "fcn.000137ec", "opkg_remove_cmd", "REDACTED_SENSITIVE_DATA", "fcn.0001621c"], "notes": "Complete attack path: External input → Global data pollution → Environment variable setting → Script execution → Path traversal"}
{"name": "path_traversal-opkg-OFFLINE_ROOT_0x1077c", "file_path": "bin/opkg", "location": "bin/opkg:0x1077c", "risk_score": 8.5, "confidence": 9.25, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["OFFLINE_ROOT", "getenv", "REDACTED_SENSITIVE_DATA", "creat64", "mkdtemp"], "notes": "Standalone vulnerability, can be triggered without any additional conditions"}
{"name": "proxy_hijack-opkg-http_proxy_0xc904", "file_path": "bin/opkg", "location": "bin/opkg:0xc904", "risk_score": 7.0, "confidence": 7.0, "description": "Proxy Configuration Pollution Risk: In fcn.0000c834 (0xc904), the http_proxy is set via setenv, with its value sourced from a global structure (*0xce88). If an attacker pollutes this structure (e.g., through a buffer overflow), a man-in-the-middle attack can be achieved. Trigger Condition: The global structure must be initialized and an unlink operation must succeed.", "link_identifiers": ["http_proxy", "setenv", "fcn.0000c834", "*0xce88", "unlink"], "notes": "Requires combination with other vulnerabilities for exploitation, recommended to check the initialization function fcn.0000a6c8"}
{"name": "configuration_load-uhttpd-start_instance_command_injection", "file_path": "etc/init.d/uhttpd", "location": "etc/init.d/uhttpd: line 45-120", "risk_score": 8.0, "confidence": 7.75, "description": "The uhttpd service startup process dynamically constructs command-line arguments (UHTTPD_ARGS) through the start_instance function, entirely relying on the /etc/config/uhttpd configuration file. If an attacker modifies the configuration file, they can control: 1) The listening port (-p/-s) to achieve unauthorized access, 2) The CGI interpreter path (-i) to cause command injection, and 3) The certificate file path (-C/-K) to enable MITM attacks. Trigger condition: The attacker must have write permissions to the configuration file (e.g., through configuration vulnerabilities or file system vulnerabilities).", "link_identifiers": ["start_instance", "UHTTPD_ARGS", "config_load", "config_foreach", "-i", "-p", "-s", "/etc/config/uhttpd"], "notes": "Association Discovery: network_input-uhttpd-config_injection (certificate parameter injection). Verification required: 1) Modifiability of /etc/config/uhttpd 2) Parameter validation in the main program"}
{"name": "configuration_load-uhttpd-append_arg_boundary_violation", "file_path": "etc/init.d/uhttpd", "location": "etc/init.d/uhttpd: line 13-43", "risk_score": 7.0, "confidence": 7.75, "description": "The parameter handling functions (append_arg/append_bool) lack effective boundary checks when reading configuration values via config_get: 1) Port range is not validated 2) File paths are not normalized 3) CGI interpreter paths are not sanitized for special characters. Attackers could inject malicious paths or port numbers to cause service disruptions or directory traversal, with actual impact depending on the validation robustness of the uhttpd main program.", "link_identifiers": ["append_arg", "append_bool", "config_get", "config_get_bool", "listen_http", "interpreter"]}
{"name": "cryptography-uhttpd-weak_cert_default", "file_path": "etc/init.d/uhttpd", "location": "etc/init.d/uhttpd: line 25-43", "risk_score": 7.5, "confidence": 8.6, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["generate_keys", "PX5G_BIN", "selfsigned", "bits", "commonname", "UHTTPD_KEY"], "notes": "Correlation discovery: network_input-uhttpd-config_injection. Analysis required for /usr/sbin/px5g implementation."}
{"name": "network_input-luci-cgi_delegation", "file_path": "www/cgi-bin/luci", "location": "www/cgi-bin/luci", "risk_score": 0.0, "confidence": 4.75, "description": "REDACTED_SENSITIVE_DATA", "link_identifiers": ["luci.sgi.cgi.run"], "notes": "REDACTED_SENSITIVE_DATA"}
