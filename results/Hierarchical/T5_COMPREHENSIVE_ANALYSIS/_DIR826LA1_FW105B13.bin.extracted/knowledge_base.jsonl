{"name": "static-file-support_men.asp", "file_path": "www/support_men.asp", "location": "www/support_men.asp:0", "risk_score": 0.0, "confidence": 5.0, "description": "The file 'support_men.asp' is a purely static HTML page. Comprehensive analysis confirms: 1) No ASP server-side code exists, with no HTTP parameter acquisition points (e.g., Request.QueryString) 2) No dangerous operation calls (exec/ShellExecute, etc.) 3) JavaScript functions only handle text localization without receiving external input. Therefore, this file cannot serve as an initial input point for attack paths and contains no exploitable security vulnerabilities.", "link_identifiers": ["support_men.asp", "show_words", "document.write"], "notes": "It is necessary to shift the analysis to other dynamic files (such as *.asp/*.cgi) to identify the initial entry points. Subsequent analysis should focus on: 1) ASP files containing form processing 2) CGI binary programs 3) Scripts involving NVRAM operations."}
{"name": "[SECRET_VALUE]", "file_path": "www/tools_vct.asp", "location": "www/tools_vct.asp (JavaScript[HIDDEN])", "risk_score": 7.5, "confidence": 8.0, "description": "Network input risk: The user-controlled ping_ipaddr/ping6_ipaddr parameters are only validated for non-empty values before being submitted to ping.ccp. Trigger condition: When the user clicks the Ping button, frontend JavaScript directly concatenates the input value as 'ccp_act=ping_v4&ping_addr=' + user input. Boundary check missing: No IP format validation, special character filtering, or length restrictions. Security impact: If ping.ccp uses system()/exec() to execute ping commands, attackers could achieve command injection by injecting special characters like ;, $(), etc.", "code_snippet": "arg: 'ccp_act=ping_v4&ping_addr='+$('#ping_ipaddr').val()", "link_identifiers": ["ping_ipaddr", "ping6_ipaddr", "check_ip", "ajax_submit", "ping.ccp", "ping_v4", "ccp_act", "ping_addr", "check_ipv6_ip"], "notes": "[SECRET_VALUE]"}
{"name": "[SECRET_VALUE].asp-devModeChange", "file_path": "www/back.asp", "location": "back.asp: devModeChange[HIDDEN]", "risk_score": 7.0, "confidence": 7.75, "description": "Client-side redirect vulnerability: When the URL parameter event=devModeChange is present, the new_ip parameter value is directly concatenated into redirect_target ('http://' + new_ip) without any validation, and executed via window.location.href for redirection. Attackers can craft malicious URLs (e.g., back.asp?event=devModeChange&new_ip=phishing.site) to trick users into clicking, leading to redirection to phishing sites. Trigger conditions: 1) User accesses the maliciously crafted URL 2) Triggers the devModeChange function (requires user interaction/click). Security impact: May lead to phishing attacks or man-in-the-middle attacks, risk level medium (requires social engineering coordination).", "code_snippet": "function devModeChange(){\n  var new_ip = getUrlEntry(\"new_ip\");\n  redirect_target = \"http://\" + new_ip;\n}", "link_identifiers": ["devModeChange", "new_ip", "getUrlEntry", "redirect_target", "window.location.href"], "notes": "Need to verify the implementation of getUrlEntry in public.js; the vulnerability requires user interaction to trigger; no dangerous server-side operations were found. Unresolved issues: 1) No direct invocation of Request object observed 2) No system command/NVRAM operations 3) No boundary check for new_ip parameter. Follow-up recommendations: 1) Analyze the security of getUrlEntry in public.js 2) Check the redirection patterns in other ASP files."}
{"name": "[SECRET_VALUE]", "file_path": "www/tools_syslog.asp", "location": "www/tools_syslog.asp", "risk_score": 6.0, "confidence": 7.25, "description": "On the system log configuration page (tools_syslog.asp), the sys_server parameter (system log server address) entered by the user is obtained through client-side JavaScript with a maximum length limit of 15 characters. Trigger condition: when the user enables system logging (sel_sys_enable.checked=true) and submits the form. The parameter value is concatenated into the CCP request parameter ([SECRET_VALUE].1.0.0.0) and sent to get_set.ccp. Constraints: client-side IP format validation (check_address) and LAN IP conflict check (check_LAN_ip), but no evidence of server-side validation exists. Potential security impact: if get_set.ccp fails to properly handle this parameter, it may lead to command injection or buffer overflow (e.g., when exceeding the 15-character limit). Attackers could bypass client-side validation by directly crafting malicious CCP requests.", "link_identifiers": ["sys_server", "[SECRET_VALUE].1.0.0.0", "do_submit", "get_config_obj", "check_address", "check_LAN_ip", "sel_sys_enable"], "notes": "Analyze the get_set.ccp file to verify the processing logic of the [SECRET_VALUE] parameter. Client-side validation can be bypassed; it is recommended to inspect the server-side filtering mechanism for CCP requests."}
{"name": "[SECRET_VALUE]", "file_path": "www/storage.asp", "location": "www/storage.asp:0 [add_user, send_request]", "risk_score": 7.0, "confidence": 8.25, "description": "[SECRET_VALUE]", "link_identifiers": ["wfa_enable", "http_remote_port", "REDACTED_PASSWORD_PLACEHOLDER", "[SECRET_VALUE]", "get_set.ccp", "igdStorage_Enable_", "[SECRET_VALUE]"], "notes": "It is necessary to analyze and confirm whether there is a command injection risk in NVRAM operations by combining get_set.ccp."}
{"name": "[SECRET_VALUE]", "file_path": "www/storage.asp", "location": "www/storage.asp:0 [browser_folder]", "risk_score": 6.5, "confidence": 6.5, "description": "[SECRET_VALUE]", "code_snippet": "path_content = $('#folder_path').val();\nif(path_content.indexOf('\\\\') != -1) { alert(...) }", "link_identifiers": ["folder_path", "req_subfolder", "browser_folder", "get_path"], "notes": "The actual vulnerability depends on the parsing of get_path in the backend web_access.ccp and requires further verification."}
{"name": "network_input-storage-csrf", "file_path": "www/storage.asp", "location": "www/storage.asp:0 [send_request, edit_rule]", "risk_score": 8.0, "confidence": 9.0, "description": "The frontend relies on the login_Info variable to control write operations but lacks CSRF protection. Attackers can forge requests to modify storage access rules (e.g., enabling remote access). Trigger condition: tricking authenticated users into visiting malicious pages. High success probability, can form an exploitation chain with other vulnerabilities.", "link_identifiers": ["login_Info", "send_request", "edit_rule"], "notes": "Limited in isolation but capable of amplifying the impact of other vulnerabilities"}
{"name": "[SECRET_VALUE]", "file_path": "www/tools_schedules.asp", "location": "tools_schedules.asp (JavaScript send_request[HIDDEN])", "risk_score": 7.5, "confidence": 8.0, "description": "User input parameters (name/time/day, etc.) are submitted via a form to the send_request() function. The frontend only validates length and whitespace without filtering special characters. After URL encoding, the parameters are used to construct a CCP request sent to get_set.ccp. Trigger condition: An attacker submits form data containing malicious scripts/command characters. Constraints: Frontend validation can be bypassed, and the actual vulnerability effectiveness depends on get_set.ccp's handling logic for CCP requests. Security impact: If the backend lacks sufficient filtering, it may lead to stored XSS (when rule names are echoed back) or configuration injection (modifying device scheduling rules). Exploitation method: Craft malicious schedule names embedded with JS code or system commands.", "code_snippet": "function send_request(){\n  if (get_by_id(\"name\").value.length <= 0){\n    alert(get_words('GW_SCHEDULES_NAME_INVALID'));\n  }\n  get_by_id(\"schRule_RuleName_\").value = urlencode(get_by_id(\"name\").value);\n  get_by_id(\"schRule_SelectedDays_\").value = check_day();\n  // [HIDDEN]get_set.ccp", "link_identifiers": ["name", "all_week", "day0", "day1", "day2", "day3", "day4", "day5", "day6", "start_hour", "end_hour", "send_request", "get_set.ccp", "schRule_RuleName_", "schRule_SelectedDays_"], "notes": "Analyze the get_set.ccp to verify the backend processing logic; frontend urlencode cannot defend against XSS (when the value is displayed after HTML decoding)."}
{"name": "network_input-schedules-csrf", "file_path": "www/tools_schedules.asp", "location": "tools_schedules.asp (JavaScript del_row[HIDDEN])", "risk_score": 6.5, "confidence": 8.0, "description": "The plan deletion function (del_row()) performs permission checks but lacks CSRF protection. The inst parameter is directly concatenated into the request URL to trigger the deletion operation in get_set.ccp. Trigger condition: Authenticated users are tricked into visiting a malicious link (containing the inst parameter). Constraints: Requires the user to be in an authenticated state and to click the link. Security impact: Attackers can delete arbitrary plan rules, leading to service disruption (e.g., firewall rule failures). Exploitation method: Sending malicious URLs via phishing emails or XSS attacks.", "code_snippet": "function del_row(row, i){\n  if(login_Info!= \"w\") return;\n  var param = {\n    url: \"get_set.ccp\",\n    arg: \"ccp_act=del&num_inst=1&oid_1=IGD_ScheduleRule_i_&inst_1=1.\"+inst.substr(1,1)+\".0.0.0\"\n  };\n  get_config_obj(param);\n}", "link_identifiers": ["del_row", "inst_1", "IGD_ScheduleRule_i_", "usedSchd", "get_config_obj"], "notes": "[SECRET_VALUE]"}
{"name": "network_input-tools_admin.asp-http_parameter_injection", "file_path": "www/tools_admin.asp", "location": "www/tools_admin.asp ([HIDDEN])", "risk_score": 8.5, "confidence": 3.5, "description": "[SECRET_VALUE]", "link_identifiers": ["[SECRET_VALUE]", "admPass2", "hostname", "remote_enable", "send_request", "get_set.ccp", "adminCfg_SystemName_", "[SECRET_VALUE]"], "notes": "[SECRET_VALUE]"}
{"name": "[SECRET_VALUE]", "file_path": "www/tools_admin.asp", "location": "[HIDDEN] ([HIDDEN]: config_val/config_str_multi)", "risk_score": 8.0, "confidence": 4.0, "description": "NVRAM operation path exposed: Sensitive configuration items such as [SECRET_VALUE] can be read and written through the config_val() and get_config_obj() functions. Trigger condition: Automatically executed during page loading or configuration saving. Constraints: Requires administrator privileges to trigger the operation. Security impact: Attackers could exploit CSRF or session hijacking to tamper with remote management settings, enabling unauthorized access paths.", "link_identifiers": ["config_val", "config_str_multi", "get_config_obj", "[SECRET_VALUE]", "[SECRET_VALUE]", "param.arg"], "notes": "[SECRET_VALUE]"}
{"name": "[SECRET_VALUE]", "file_path": "www/tools_admin.asp", "location": "[HIDDEN] ([HIDDEN]: check_varible/is_ascii)", "risk_score": 7.0, "confidence": 3.25, "description": "Input validation flaw: The client employs basic filtering using is_ascii/is_quotes but fails to detect special characters such as line breaks and command separators. Trigger condition: Directly sending malformed HTTP requests. Constraint: The server may implement additional validation. Security impact: Combined with implementation vulnerabilities in get_set.ccp, this could enable multi-stage attack chains (e.g., command injection via the hostname parameter).", "link_identifiers": ["check_varible", "is_ascii", "is_quotes", "remote_http_management_port", "hostname"], "notes": "Combination risk with Discovery 1: Input bypassing client-side filtering may be processed by get_set.ccp"}
{"name": "[SECRET_VALUE]", "file_path": "www/storage_WFA_1_00.asp", "location": "www/storage_WFA_1_00.asp:0 (save_append)", "risk_score": 7.0, "confidence": 7.0, "description": "[SECRET_VALUE]", "code_snippet": "if(path_content == '\\\\' || (path_content.indexOf('\\\\') != -1)) {\n  alert(addstr(get_words(MSG056), '\\\\');\n  return;\n}", "link_identifiers": ["save_append", "folder_path", "path_content", "get_set.ccp", "web_access.ccp", "DataArray", "[SECRET_VALUE]"], "notes": "Verify the server-side file 'www/web_access.ccp' for path normalization processing. It is recommended to subsequently analyze this file to confirm whether full path filtering is implemented."}
{"name": "[SECRET_VALUE]", "file_path": "www/storage_WFA_1_00.asp", "location": "www/storage_WFA_1_00.asp:0 (add_user)", "risk_score": 4.0, "confidence": 6.0, "description": "[SECRET_VALUE]", "code_snippet": "submitData += \"&[SECRET_VALUE].1.\"+(user_idx)+\".0.0=\"+REDACTED_PASSWORD_PLACEHOLDER[j].split(\"/\")[1];", "link_identifiers": ["add_user", "REDACTED_PASSWORD_PLACEHOLDER", "[SECRET_VALUE]", "send_request", "check_port_use"], "notes": "The risk level depends on HTTPS configuration. No missing boundary checks or buffer overflows were detected."}
{"name": "[SECRET_VALUE]", "file_path": "sbin/smbd", "location": "smbd:0x1c8f0 sym.process_smb_request", "risk_score": 9.0, "confidence": 8.75, "description": "In the process_smb_request function, there is a flaw in the boundary check for smb_req->path: it only verifies if the length is >255 (unsigned comparison). When path_len=256, the strcpy operation to a fixed stack buffer results in a 1-byte overflow. Attackers can craft a specially designed SMB request to overwrite the return address and achieve RCE. Trigger condition: sending a malicious SMB request with a path length of exactly 256 bytes.", "code_snippet": "if (smb_req->path_len > 255) { ... }\nstrcpy(dest, src);", "link_identifiers": ["smb_req->path", "smb_req->path_len", "strcpy", "process_share", "SMB_COM_OPEN"]}
{"name": "[SECRET_VALUE]", "file_path": "sbin/smbd", "location": "smbd:0x28f10 sym.handle_nttrans", "risk_score": 9.5, "confidence": 9.0, "description": "In the handle_nttrans function, the client_param input is insufficiently filtered (only checking for ; and |) before being concatenated into a system() command. Attackers can inject arbitrary commands through $() or backticks (e.g., `client_param=127.0.0.1 & touch /tmp/pwn`). Trigger condition: sending an NT transaction request containing malicious client_param.", "code_snippet": "snprintf(command, ... , client_param);\nsystem(command);", "link_identifiers": ["get_client_param", "client_param", "system", "snprintf", "handle_nttrans"], "notes": "Verify whether it is a known vulnerability through the CVE database; it is recommended to check the implementation of the filtering function in lib/system.c."}
{"name": "static-www-support_tools.asp", "file_path": "www/support_tools.asp", "location": "www/support_tools.asp:0 (static)", "risk_score": 0.0, "confidence": 5.0, "description": "[SECRET_VALUE]", "link_identifiers": ["support_tools.asp", "show_words", "document.write", "public.js"], "notes": "Suggested follow-up analysis: 1) Check if the referenced JS files (public.js/pandoraBox.js) contain client-side vulnerabilities 2) Proceed to analyze server-side logic in other ASP files (e.g., tools_admin.asp)"}
{"name": "[SECRET_VALUE]", "file_path": "www/tools_system.asp", "location": "tools_system.asp: JavaScript function loadConfirm", "risk_score": 8.5, "confidence": 8.5, "description": "The file upload functionality has a validation flaw: it only verifies the file extension as .bin without implementing content validation or server-side verification. Attackers can craft malicious .bin files to trigger configuration restoration operations.  \n\nTrigger conditions:  \n1) The attacker possesses administrator privileges (dev_info.login_info == 'w');  \n2) A malicious file with a .bin extension is uploaded.  \n\nIf the backend cfg_op.ccp processing logic contains vulnerabilities (e.g., command injection), it could lead to RCE.  \n\nConstraints: Client-side JS validation must be bypassed (requests can be directly constructed).  \n\nImpact: Forms a complete attack chain of 'malicious file upload → configuration restoration → command execution.' Success probability depends on the existence of backend vulnerabilities.", "code_snippet": "var file_name=get_by_id(\"file\").value;\nvar ext_file_name=file_name.substring(file_name.lastIndexOf('.')+1,file_name.length);\nif (ext_file_name!=\"bin\"){\n  alert(get_words('rs_intro_1'));\n  return false;\n}", "link_identifiers": ["loadConfirm", "file", "ext_file_name", "bin", "send_submit", "form1", "cfg_op.ccp", "ccp_act=load"], "notes": "It is necessary to verify the processing logic of 'ccp_act=load' in cfg_op.ccp: 1) whether it directly uses uploaded file contents to execute system commands; 2) whether NVRAM operations are affected by unverified file contents. Subsequent analysis of the 'cfg_op.ccp' file is recommended."}
{"name": "[SECRET_VALUE]", "file_path": "www/tools_system.asp", "location": "tools_system.asp: JavaScript functions restoreConfirm & confirm_reboot", "risk_score": 6.5, "confidence": 7.5, "description": "High-risk operations lack CSRF protection: Restore factory settings (restoreConfirm) and reboot (confirm_reboot) only check administrator privileges without verifying the request source. Attackers can construct CSRF attacks to induce administrators to trigger device reset. Trigger condition: Administrator accesses a malicious page while logged in. Constraint: Requires tricking the administrator into clicking a malicious link. Impact: Causes device configuration to be cleared or service interruption, with success probability depending on browser security policies.", "link_identifiers": ["restoreConfirm", "confirm_reboot", "dev_info.login_info", "form3", "form6", "ccp_act=restore", "ccp_act=reboot"], "notes": "A comprehensive check of the CSRF protection mechanism is required: 1) Verify the presence of anti-CSRF tokens; 2) Confirm whether critical operations validate the Referer header. It is recommended to scan all ASP files for form submission logic."}
{"name": "[SECRET_VALUE]", "file_path": "www/tools_firmw.asp", "location": "pandoraBox.js: get_router_info()", "risk_score": 7.0, "confidence": 8.75, "description": "NVRAM Sensitive Information Exposure Risk: The get_router_info() function retrieves device configuration data (including sensitive fields such as hw_ver/fw_ver/login_info/cli_mac) from misc.ccp and directly outputs it to an HTML page without any filtering. Attackers can access this page to obtain device fingerprints and MAC addresses, facilitating targeted attacks. If the data returned by config_val() is compromised (e.g., via NVRAM injection), it may trigger stored XSS. Trigger condition: The vulnerability is automatically executed when users access the /tools_firmw.asp page.", "code_snippet": "function get_router_info() {\n  return {\n    'login_info': config_val(\"login_Info\"),\n    'cli_mac': config_val(\"cli_mac\")\n  };\n}", "link_identifiers": ["get_router_info", "misc.ccp", "config_val", "login_Info", "cli_mac", "document.write"], "notes": "nvram_get"}
{"name": "Unverified-FirmwareUpload", "file_path": "www/tools_firmw.asp", "location": "tools_firmw.asp: HTML form", "risk_score": 6.0, "confidence": 6.5, "description": "Unverified file upload endpoint: The frontend form directly submits the filename to fwupgrade.ccp, performing only null checks ($('#file').val()). Attackers can upload malicious firmware files, enabling firmware tampering by exploiting backend vulnerabilities. Trigger condition: User selects a file and clicks the upload button. Actual risk depends on fwupgrade.ccp's validation mechanism (currently unverifiable due to missing file).", "code_snippet": "<input type=file id=file name=file size=\"30\">\n$('#form1').submit();", "link_identifiers": ["file", "form1", "fwupgrade.ccp", "send_request", "CCP_SUB_UPLOADFW"], "notes": "[SECRET_VALUE]"}
{"name": "[SECRET_VALUE]", "file_path": "www/tools_email.asp", "location": "www/tools_email.asp: do_submit()[HIDDEN]", "risk_score": 8.5, "confidence": 8.0, "description": "Unfiltered HTTP Parameter Injection: Attackers can inject malicious data by tampering with parameters such as log_email_server/log_email_port when administrators configure email settings. Trigger conditions: 1) The attacker must obtain an administrator session (e.g., via XSS); 2) The email function must be enabled; 3) SMTP configurations containing special characters must be submitted. Missing Constraint Checks: Only port range validation (0-65535) is performed, without filtering meta-characters. Security Impact: By constructing system requests through param.arg, remote code execution may be achieved in the backend get_set.ccp.", "code_snippet": "param.arg += '&[SECRET_VALUE].1.0.0.0='+$('#log_email_server').val()", "link_identifiers": ["log_email_server", "log_email_port", "do_submit", "get_config_obj", "param.arg", "[SECRET_VALUE]"], "notes": "The actual RCE risk depends on the handling of [SECRET_VALUE] in get_set.ccp, which requires further analysis."}
{"name": "[SECRET_VALUE]", "file_path": "www/tools_email.asp", "location": "www/tools_email.asp: send_request()[HIDDEN]", "risk_score": 6.5, "confidence": 8.5, "description": "Network Input Validation Flaws: 1) Port verification (check_integer) only validates numerical ranges without filtering special characters; 2) Email field (log_email_sender) lacks RFC-compliant format validation. Trigger Conditions: Submitting port numbers containing special characters or malformed email addresses. Security Impact: May cause server parsing errors or buffer overflows, allowing attackers to trigger abnormal behaviors through malformed inputs.", "code_snippet": "if (!check_integer(get_by_id(\"log_email_port\").value, 0, 65535)) {\n  alert(get_words('te_SMTPSv_Port_alert'));\n  return false;\n}", "link_identifiers": ["check_integer", "log_email_port", "log_email_sender", "send_request", "check_mail"], "notes": "Regular expression filtering needs to be added, as the current vulnerability exploitation relies on backend parser characteristics."}
{"name": "NVRAM-Pollution-to-XSS-Chain", "file_path": "www/tools_firmw.asp", "location": "[HIDDEN]www/tools_admin.asp → www/tools_firmw.asp", "risk_score": 9.0, "confidence": 8.0, "description": "[SECRET_VALUE]", "code_snippet": "[HIDDEN]1[HIDDEN]:\n[[HIDDEN]tools_admin.asp]\nconfig_val('[SECRET_VALUE]', req_param('arg'))\n\n[HIDDEN]2[HIDDEN]:\n[[HIDDEN]tools_firmw.asp]\ndocument.write(config_val('login_Info'))", "link_identifiers": ["config_val", "param.arg", "document.write", "login_Info", "[SECRET_VALUE]"], "notes": "[SECRET_VALUE]"}
{"name": "env-set-injection-uenv-main", "file_path": "bin/uenv", "location": "[SECRET_VALUE]", "risk_score": 6.0, "confidence": 8.0, "description": "The environment variable setting operation is vulnerable to injection. When executing `uenv set [name] [value]`, the program directly calls setenv() with command-line arguments without filtering special characters in name/value (only checking for '=' in the name). Attackers can inject environment variables containing special characters (e.g., `uenv set PATH 'malicious_path'`). Trigger condition: attacker must have ability to execute uenv commands (typically requiring shell access). Security impact: disrupts environment variable parsing, but effect is limited to current process session (as no MTD persistent write is triggered), unable to directly cause firmware-level persistent attacks.", "code_snippet": "(**(iVar2 + -0x7fac))(puStackX_4[2],puStackX_4[3]); // [HIDDEN]argv[HIDDEN]", "link_identifiers": ["setenv", "argv[2]", "argv[3]", "puStackX_4"], "notes": "[SECRET_VALUE]"}
{"name": "mtd-path-overflow-uenv-main", "file_path": "bin/uenv", "location": "bin/uenv:? (main) 0x00400f24", "risk_score": 3.0, "confidence": 4.25, "description": "The MTD device path construction has a buffer management flaw. The program uses sprintf to format the device path (/dev/mtdblockX), where X comes from an 8-byte stack buffer (auStack_20). The target buffer size is not validated, and if the global path buffer is smaller than 17 bytes ('/dev/mtdblock' + 8 bytes + null), it may lead to overflow. Trigger condition: /proc/mtd returns an excessively long device number (requires tampering with the /proc pseudo filesystem, typically needing REDACTED_PASSWORD_PLACEHOLDER privileges). Security impact: Theoretical stack overflow risk, but actual triggering requires privileged conditions and no direct path for controlling overflow data has been identified.", "code_snippet": "(**(iVar2 + -0x7fa8))(*(iVar2 + -0x7f68), \"_dev_mtdblock_s\", auStack_20);", "link_identifiers": ["sprintf", "auStack_20", "/dev/mtdblock", "*(iVar2 + -0x7f68)"], "notes": "The size of the target buffer *(iVar2-0x7f68) is not validated; actual risk is constrained by the difficulty of tampering with /proc/mtd. Related point: Inspect MTD device operation functions (e.g., erase/write)."}
{"name": "Firmware-Upload-Chain-Gap", "file_path": "www/tools_firmw.asp", "location": "[HIDDEN]: fwupgrade.ccp", "risk_score": 5.0, "confidence": 4.5, "description": "[SECRET_VALUE]", "link_identifiers": ["fwupgrade.ccp", "CCP_SUB_UPLOADFW", "file", "send_request"], "notes": "evidence_gap"}
{"name": "[SECRET_VALUE]", "file_path": "bin/gpio", "location": "bin/gpio:0x401320 (gpio_set_led)", "risk_score": 1.5, "confidence": 8.9, "description": "[SECRET_VALUE]", "code_snippet": "uStack_28 = atoi(*(param_2 + 8));\nif (0x1f < uStack_28) { /* [HIDDEN] */ }", "link_identifiers": ["gpio_set_led", "atoi", "ioctl", "/dev/gpio"], "notes": "The defect is effectively controlled by the defense mechanism. Recommendations: 1) Verify the fault tolerance of the GPIO driver against abnormal ioctl parameters; 2) Check the handling of other parameter boundaries."}
{"name": "file_read-gpio-permission", "file_path": "bin/gpio", "location": "bin/gpio", "risk_score": 0.5, "confidence": 5.0, "description": "The file permissions are set to 777 but the setuid bit is not configured, maintaining the current user's privileges during execution and preventing direct privilege escalation.", "code_snippet": "[HIDDEN]", "link_identifiers": ["gpio"]}
{"name": "[SECRET_VALUE]", "file_path": "bin/gpio", "location": "bin/gpio", "risk_score": 0.2, "confidence": 4.75, "description": "No high-risk vulnerability characteristics detected: 1) No command execution functions (system/execv); 2) printf uses fixed formats; 3) All ioctl calls are protected by parameter checks.", "code_snippet": "[HIDDEN]", "link_identifiers": ["ioctl", "printf", "system"]}
{"name": "[SECRET_VALUE]", "file_path": "bin/miniupnpd", "location": "service/miniupnpd ([HIDDEN])", "risk_score": 8.5, "confidence": 8.0, "description": "miniupnpd has three core attack surfaces: 1) The HTTP/SOAP parser (TCP port 5000) processes user-controlled Content-Length/SOAPAction headers; 2) NVRAM get/set operations performed through the UPnP command interface may be affected by tainted environment variables; 3) SSDP multicast responses (UDP port 1900) handling M-SEARCH requests. Trigger conditions: sending crafted packets to the corresponding ports or tampering with NVRAM values. Security impact: unvalidated input may lead to command injection/buffer overflow, requiring dynamic verification of specific exploit chains.", "link_identifiers": ["Content-Length", "SOAPAction", "M-SEARCH", "upnp", "nvram_get", "nvram_set"], "notes": "[SECRET_VALUE]"}
{"name": "[SECRET_VALUE]", "file_path": "bin/miniupnpd", "location": "/lib/libc.so.0", "risk_score": 5.0, "confidence": 3.5, "description": "The uClibc library (libc.so.0) contains unverified security risks. Trigger conditions: If stack protection is disabled during compilation (-fno-stack-protector) or dangerous functions (strcpy/sprintf) are not hardened, it may be triggered by buffer operations in miniupnpd. Actual impact depends on: 1) specific version of libc 2) boundary check implementation of memory operation functions 3) overwritability of GOT table.", "link_identifiers": ["libc.so.0", "ld-uClibc.so.0", "strcpy", "sprintf"], "notes": "Extract /lib/libc.so.0 for: 1) Stack protection mechanism verification 2) Disassembly of strcpy/sprintf functions 3) GOT table overwrite feasibility analysis"}
{"name": "network_input-www_reboot.asp-open_redirect", "file_path": "www/reboot.asp", "location": "www/reboot.asp:? (back) ?", "risk_score": 8.5, "confidence": 9.4, "description": "Open Redirect Vulnerability: Attackers can craft a URL containing a malicious newIP parameter (e.g., /reboot.asp?newIP=attacker.com) to redirect users to any arbitrary domain after the 60-second countdown. Trigger conditions: 1) User accesses the malicious link 2) Page completes the countdown. The REDACTED_PASSWORD_PLACEHOLDER cause lies in the gup() function's failure to validate the newIP format, which is directly concatenated with location.protocol and passed to window.location.assign().", "code_snippet": "function back(){\n  var newIP = gup(\"newIP\");\n  if(newIP!=\"\")\n    window.location.assign(location.protocol+\"//\"+newIP+\"/\"+redirectPage);\n}", "link_identifiers": ["gup", "newIP", "window.location.assign", "location.protocol", "redirectPage", "back"], "notes": "Actual impact: 1) Phishing attacks 2) Expanding the attack surface by exploiting XSS vulnerabilities. Need to check whether other ASP files use the same redirection pattern."}
{"name": "network_input-www_reboot.asp-gup_validation", "file_path": "www/reboot.asp", "location": "www/reboot.asp:? (gup) ?", "risk_score": 7.0, "confidence": 7.5, "description": "Missing input validation: The gup() function only escapes square bracket characters and fails to filter special characters (e.g., : / # ?). When the return value is used for DOM operations or URL construction (such as controlling .ip_info display), it may lead to XSS vulnerabilities. Trigger condition: An attacker injects parameter values containing JS code.", "code_snippet": "function gup(name){\n  name = name.replace(/[\\[]/,\"\\\\\\[\").replace(/[\\]]/,\"\\\\\\]\");\n  var regexS = \"[\\\\?&]\"+name+\"=([^&#]*)\";\n  ...\n  return results[1];\n}", "link_identifiers": ["gup", "regex.exec", "window.location.href", "name.replace"], "notes": "Although the msg parameter is not directly utilized, the missing validation pattern may exist in other parameters."}
{"name": "[SECRET_VALUE]", "file_path": "bin/miniupnpd", "location": "[HIDDEN]bin/miniupnpd → www/tools_firmw.asp", "risk_score": 8.0, "confidence": 6.75, "description": "The complete NVRAM contamination attack chain: The attacker manipulates parameters such as [SECRET_VALUE] through NVRAM write operations (nvram_set) in miniupnpd. The contaminated data is then read by the config_val() function in the web interface, triggering a stored XSS via document.write on the tools_firmw.asp page. Trigger steps: 1) Exploit miniupnpd vulnerabilities (e.g., SOAP request injection) to write malicious NVRAM values 2) Induce the administrator to visit the /tools_firmw.asp page. Practical exploitation probability: Medium (depends on miniupnpd vulnerability exploitation + administrator interaction)", "link_identifiers": ["nvram_set", "config_val", "[SECRET_VALUE]", "document.write", "upnp"], "notes": "[SECRET_VALUE]"}
{"name": "xss-tools_ddns-288", "file_path": "www/tools_ddns.asp", "location": "tools_ddns.asp:288-350", "risk_score": 8.5, "confidence": 8.5, "description": "Complete attack chain of Stored XSS: The attacker injects a malicious script (e.g., `<script>alert(1)</script>`) through the 'hostnamev6' field. When an administrator accesses the tools_ddns.asp page, the paintDNSTable function directly outputs the unencoded DataArray.HostName, leading to script execution. Trigger conditions: 1) Attacker submits malicious hostname 2) Administrator views DDNS configuration page. Boundary checks only validate character types (check_client_name) but fail to filter HTML symbols, with security impacts enabling session hijacking/device control.", "code_snippet": "contain += \"<tr><td><center><input type=checkbox...></center></td><td><center>\" + DataArray[i].Name +\"</td>...\"", "link_identifiers": ["hostnamev6", "DataArray", "paintDNSTable", "save_reserved", "get_config_obj", "ddnsListCfg_HostName_"], "notes": "Complete attack chain formation: Frontend input → JS storage → DOM rendering. Verification: No secondary filtering on the server side (evidence: direct concatenation in paramForm.arg)."}
{"name": "ci-tools_ddns-523", "file_path": "www/tools_ddns.asp", "location": "tools_ddns.asp:523", "risk_score": 7.0, "confidence": 5.75, "description": "Potential server-side command injection chain: User-controlled DataArray.Name/IP is sent to get_set.ccp (parameter names ddnsListCfg_HostName_/Yiaddr_) via get_config_obj. If the server-side fails to securely handle parameters (e.g., directly concatenating system commands), command injection may occur. Trigger condition: submitting a hostname containing special characters (;|$). Current evidence shows complete parameter transmission but requires validation of get_set.ccp's processing logic.", "code_snippet": "paramForm.arg += \"&ddnsListCfg_HostName_\"+instStr+\"=\"+DataArray[i].Name;", "link_identifiers": ["get_config_obj", "paramForm.arg", "ddnsListCfg_HostName_", "ddnsListCfg_Yiaddr_", "get_set.ccp"], "notes": "[SECRET_VALUE]"}
{"name": "iv-tools_ddns-300", "file_path": "www/tools_ddns.asp", "location": "tools_ddns.asp:300-308,407-440", "risk_score": 6.0, "confidence": 8.25, "description": "Input validation flaws: 1) IPv6 validation (check_ipv6_symbol/check_ipv6_address) only verifies format compliance without filtering special characters 2) Hostname validation (check_client_name) excludes numeric prefixes but permits dangerous symbols like <>'\\\" 3) Null value checks (check_form) fail to cover XSS-critical fields. Inadequate boundary validation enables exploitation of the aforementioned vulnerabilities.", "code_snippet": "if (!check_client_name(reserved_name) || _isNumeric(reserved_name)){\n  alert(get_words('DDNS_HOST_ERROR'));\n  return false;\n}", "link_identifiers": ["check_ipv6_symbol", "check_client_name", "check_form", "save_reserved", "check_varible"]}
{"name": "[SECRET_VALUE]", "file_path": "www/tools_ddns.asp", "location": "get_set.ccp ([HIDDEN])", "risk_score": 9.0, "confidence": 8.25, "description": "Critical Attack Surface Exposure: get_set.ccp serves as a unified parameter handler for multiple frontend modules (tools_ddns/tools_email/tools_syslog, etc.). User-controlled inputs are passed to the param.arg parameter via get_config_obj and ultimately executed in get_set.ccp. If this file contains command injection or buffer overflow vulnerabilities, it could form a cross-module unified attack chain. Trigger Condition: An attacker contaminates any associated frontend parameter (e.g., hostnamev6/log_email_server) and triggers a configuration save operation. Security Impact: A single vulnerability point could lead to complete device compromise.", "link_identifiers": ["get_set.ccp", "get_config_obj", "param.arg", "ccp_act", "ddnsListCfg_HostName_", "[SECRET_VALUE]"], "notes": "[SECRET_VALUE]"}
{"name": "[SECRET_VALUE]", "file_path": "bin/bulkUpgrade", "location": "bin/bulkUpgrade:upgrade_firmware@0x401648", "risk_score": 9.5, "confidence": 9.15, "description": "Command injection vulnerability: Attackers inject malicious commands by controlling command-line arguments (e.g., '-f'). Trigger conditions: 1) The program is invoked in the form of '-f [value]'; 2) [value] contains command separators (e.g., ';'). The program uses sprintf to directly concatenate 'system(\"fwUpgrade %s\")' without filtering or escaping the input, allowing attackers to execute arbitrary system commands.", "link_identifiers": ["upgrade_firmware", "system", "sprintf", "fwUpgrade", "param_1", "-f"], "notes": "Exploitation chain: User input → Command-line parameter parsing → sprintf command concatenation → system execution. Need to verify whether the web interface exposes this call."}
{"name": "[SECRET_VALUE]", "file_path": "bin/bulkUpgrade", "location": "bin/bulkUpgrade:main@0x4022d0", "risk_score": 7.0, "confidence": 8.5, "description": "WLAN Domain Setting Tampering Vulnerability: An attacker can modify wireless configurations by injecting arbitrary values within 6 bytes via the '-wdm' parameter. Trigger conditions: 1) The program is invoked with '-wdm [value]'; 2) The length of [value] ≤ 6 bytes. The program uses strncpy to copy parameters to a fixed buffer without validating content validity, potentially compromising network policies.", "link_identifiers": ["setenv_wlan_domain", "-wdm", "strncpy", "[HIDDEN]"], "notes": "Analyze the internal implementation of setenv_wlan_domain to assess the actual impact."}
{"name": "[SECRET_VALUE]", "file_path": "bin/bulkUpgrade", "location": "bin/bulkUpgrade:upgrade_language@0x4011bc", "risk_score": 8.5, "confidence": 7.75, "description": "Stack Buffer Overflow Vulnerability (upgrade_language): An attacker triggers stack overflow by controlling the param_1 input. Trigger condition: param_1 length exceeds 1023 bytes. The program uses indirect function calls (**(gp-0x7f30)) to copy data into a 1024-byte stack buffer auStack_428 without boundary checks, allowing return address overwrite for code execution.", "link_identifiers": ["upgrade_language", "param_1", "auStack_428", "gp-0x7f30"], "notes": "Track the source of param_1 (suspected HTTP request parameter)."}
{"name": "[SECRET_VALUE]", "file_path": "bin/bulkUpgrade", "location": "bin/bulkUpgrade:0x4016e8, 0x401b9c", "risk_score": 9.0, "confidence": 8.75, "description": "Stack Buffer Overflow Vulnerability (upgrade_firmware): An attacker triggers overflow via excessively long filenames. Trigger condition: param_1 length + fixed string > 1024 bytes. Two sprintf calls (0x4016e8, 0x401b9c) directly format external parameters into the 1024-byte stack buffer auStack_468, leading to critical control flow hijacking.", "link_identifiers": ["upgrade_firmware", "param_1", "auStack_468", "sprintf"], "notes": "Shares parameter sources with command injection vulnerabilities and can be combined to improve reliability."}
{"name": "[SECRET_VALUE]", "file_path": "bin/flash", "location": "[SECRET_VALUE]", "risk_score": 8.5, "confidence": 8.0, "description": "A high-risk vulnerability chain was discovered in 'bin/flash': attackers can trigger a single-byte out-of-bounds write in the flash_write function through command-line arguments. Specific path: 1) The '-w' option controls param_2 (write value) 2) Other options (e.g., '-f') indirectly affect param_1 (offset) 3) In the flash_write function, unvalidated offset calculation leads to out-of-bounds write. Trigger condition: attackers must be able to execute the flash command and control parameter values. Actual impact: may corrupt critical memory structures leading to device crash or privilege escalation, with high risk level.", "code_snippet": "[SECRET_VALUE]", "link_identifiers": ["flash_write", "main", "param_1", "param_2", "s4", "s6", "getopt", "argv", "optarg"], "notes": "To be verified subsequently: 1) Complete assignment path of param_1 2) Specific memory impact of out-of-bounds write 3) Whether the firmware execution environment restricts command line access (related to 'argv[2]' in the knowledge base)"}
{"name": "[SECRET_VALUE]", "file_path": "usr/hotplug", "location": "hotplug:9,13,16", "risk_score": 9.0, "confidence": 8.0, "description": "High-risk command injection vulnerability: Attackers can achieve arbitrary command execution with REDACTED_PASSWORD_PLACEHOLDER privileges by manipulating the contents of the /var/run/usbmount2.pid file (e.g., writing '123;reboot') and triggering a USB event. Trigger conditions: 1) PID file content is controllable (requires verification of write permissions) 2) Physical/simulated USB event. Core constraint: The usbmount2 service runs the kill command with REDACTED_PASSWORD_PLACEHOLDER privileges.", "code_snippet": "usbmount2_pid=\"`cat /var/run/usbmount2.pid`\"\nkill -USR1 $usbmount2_pid", "link_identifiers": ["usbmount2_pid", "/var/run/usbmount2.pid", "kill -USR1", "ACTION"], "notes": "[SECRET_VALUE]"}
{"name": "path_hijack-kill_command", "file_path": "usr/hotplug", "location": "hotplug:15", "risk_score": 6.5, "confidence": 6.5, "description": "Environment Variable Dependency Risk: The kill command does not use an absolute path, relying on the runtime PATH variable. If PATH is tampered with by other vulnerabilities (e.g., via malicious rc scripts), an attacker could replace it with a malicious kill program to achieve privilege persistence. Trigger Conditions: 1) PATH variable is controllable 2) Requires coordination with a vulnerability trigger mechanism.", "link_identifiers": ["kill", "PATH"], "notes": "Associated with the knowledge base notes field: 'Requires integration with environment variable usage scenarios... locate the env_get operation'. Suggested fix: Use the absolute path /bin/kill"}
{"name": "[SECRET_VALUE]", "file_path": "www/tools_time.asp", "location": "www/tools_firmw.asp:0 (unknown)", "risk_score": 9.5, "confidence": 8.75, "description": "[SECRET_VALUE]", "link_identifiers": ["fwupgrade.ccp", "CCP_SUB_UPLOADFW", "file", "send_request", "tools_firmw.asp"], "notes": "Reverse analyze the CGI binaries in the sbin directory (e.g., grep -r 'CCP_SUB_UPLOADFW' ../sbin). Note the associated keywords: CCP_SUB_UPLOADFW/fwupgrade.ccp/file/send_request."}
{"name": "[SECRET_VALUE]", "file_path": "www/tools_time.asp", "location": "tools_firmw.asp:0 (unknown)", "risk_score": 7.0, "confidence": 7.75, "description": "NVRAM Contamination Risk Chain (Risk Level 7.0): Triggering the removeLang operation via send_rm_lang_pack() in tools_firmw.asp modifies NVRAM values such as has_lang_pack. Attackers can craft CSRF requests (trigger condition: luring users to click or cross-site requests). Potential impacts: 1) Disruption of system localization configurations 2) If NVRAM parameters are used for access control, may lead to privilege escalation.", "link_identifiers": ["removeLang", "has_lang_pack", "lang_ver", "config_val", "form5", "lang_upgrade.ccp"], "notes": "Verify input filtering for the backend NVRAM_set operation. Note the associated existing keyword: config_val"}
{"name": "[SECRET_VALUE]", "file_path": "www/tools_time.asp", "location": "www/tools_system.asp:87-118", "risk_score": 6.0, "confidence": 8.5, "description": "[SECRET_VALUE]", "link_identifiers": ["restoreConfirm", "confirm_reboot", "form3", "form6", "dev_info.login_info"], "notes": "The actual exploitability needs to be evaluated in conjunction with identity authentication mechanisms. Note the association with existing keywords: form3/form6."}
{"name": "Firmware-Upload-Chain-Gap", "file_path": "www/tools_time.asp", "location": "[HIDDEN]: fwupgrade.ccp", "risk_score": 5.0, "confidence": 4.5, "description": "[SECRET_VALUE]", "link_identifiers": ["fwupgrade.ccp", "CCP_SUB_UPLOADFW", "file", "send_request"], "notes": "Top-priority gap: Directly linked to the discovery '[SECRET_VALUE]', addressing it could elevate the risk level to 9.5+."}
{"name": "[SECRET_VALUE]", "file_path": "bin/mii_mgr", "location": "mii_mgr:0x4009c0 ([HIDDEN]), 0x4009f4 ([HIDDEN]), 0x400bf0 ([HIDDEN])", "risk_score": 9.0, "confidence": 9.25, "description": "The attacker can fully control the request type parameter (s3 register value) of ioctl(SIOCSMIIREG) through command-line arguments. Specific trigger condition: when executing 'mii_mgr', maliciously constructing the second parameter value (argv[2]), which is converted by strtol and directly stored at the sp+0x20 stack location, then loaded into the s3 register and passed as the a1 parameter to the ioctl call (0x400bf0). There is no boundary checking or filtering mechanism throughout the process. The probability of successful exploitation depends on: 1) The kernel driver's handling logic for SIOCSMIIREG requests 2) Whether the attacker can construct values that trigger kernel memory corruption. Actual security impacts may include arbitrary kernel code execution or privilege escalation.", "code_snippet": "0x4009c0: sw v0, 0x20(sp)  ; [HIDDEN]\n0x4009f4: move a1, s3     ; [HIDDEN]ioctl[HIDDEN]\n0x400bf0: jalr v0         ; ioctl(SIOCSMIIREG)[HIDDEN]", "link_identifiers": ["argv[2]", "sp+0x20", "s3", "a1", "SIOCSMIIREG", "ioctl", "0x4009c0", "0x4009f4", "0x400bf0"], "notes": "[SECRET_VALUE]"}
{"name": "[SECRET_VALUE]", "file_path": "usr/sbin/hotplug_misc.sh", "location": "hotplug_misc.sh:18", "risk_score": 8.5, "confidence": 8.25, "description": "Unvalidated Path Traversal Vulnerability: In the AFTERMNT event handling branch, the DEVPATH environment variable is directly concatenated into the configuration file path (${DEVPATH}/smb.dir.conf) without path normalization or boundary checks. An attacker can forge a hotplug event (e.g., USB device insertion) and control DEVPATH (e.g., setting it to '../../../etc') to overwrite critical system configuration files. Combined with the smbd service loading mechanism, this could lead to remote code execution (RCE). Trigger conditions: 1) A device hotplug event triggers ACTION='AFTERMNT' 2) The attacker controls the DEVPATH value.", "code_snippet": "$SMBCONF -c \"${DEVPATH}/smb.dir.conf\" -d \"/etc/samba/smb.def.conf\"", "link_identifiers": ["DEVPATH", "sxsambaconf", "smb.dir.conf", "AFTERMNT", "SMBCONF", "smbd"], "notes": "Verify whether smbd is running with REDACTED_PASSWORD_PLACEHOLDER privileges; together with findings 2 and 3, this forms a complete attack chain: control DEVPATH → write malicious configuration → trigger service restart → RCE"}
{"name": "[SECRET_VALUE]", "file_path": "usr/sbin/hotplug_misc.sh", "location": "hotplug_misc.sh:22-27", "risk_score": 7.0, "confidence": 7.25, "description": "Command execution risk in service management: 1) The command \"killall smbd\" uses a fixed process name, allowing attackers to deploy a malicious process with the same name in advance to cause denial of service. 2) The smbd startup depends on the content of /tmp/smb.dir.conf, which is entirely controlled by attackers through DEVPATH. No filtering is applied to the configuration file content, enabling privilege escalation by injecting malicious smb.conf parameters (e.g., log file = |malicious command). Trigger condition: The attack is triggered when an attacker successfully writes malicious configuration and causes the smbd service to restart.", "code_snippet": "killall smbd\n$SMBD -s \"/etc/samba/smb.conf\" -D", "link_identifiers": ["killall", "smbd", "smb.dir.conf", "SMBD", "grep path", "DEVPATH"]}
{"name": "[SECRET_VALUE]", "file_path": "usr/sbin/hotplug_misc.sh", "location": "hotplug_misc.sh:6-34", "risk_score": 5.5, "confidence": 6.25, "description": "[SECRET_VALUE]", "code_snippet": "case \"$ACTION\" in\n...\n#ln -s $STORAGEPATH /tmp/storage", "link_identifiers": ["ACTION", "STORAGEPATH", "ln -s", "grep path", "case", "smb.dir.conf"], "notes": "The current risk is low as the code is commented out, but firmware updates could potentially activate this functionality; shares the smb.dir.conf control point with Discovery 1."}
{"name": "[SECRET_VALUE]", "file_path": "usr/sbin/hotplug_kill.sh", "location": "hotplug_kill.sh:13", "risk_score": 8.5, "confidence": 8.5, "description": "Unconditional service termination vulnerability exists: When the script is executed with REDACTED_PASSWORD_PLACEHOLDER privileges and the $1 parameter is 'stop', it directly executes the 'killall smbd' command to terminate the Samba service. This operation lacks permission verification or parameter filtering mechanisms, allowing attackers to cause a denial of service by controlling the $1 parameter. Trigger conditions: 1) The calling process has REDACTED_PASSWORD_PLACEHOLDER privileges 2) $1='stop'. Actual impact: If this script is invoked by a network service (e.g., responding to external events via the hotplug mechanism), it could form a remote attack chain leading to critical service interruption. Related finding: The knowledge base's ACTION-related vulnerability ([SECRET_VALUE]) indicates that hotplug events can be exploited, and combining these could enable a 'command injection + denial of service' compound attack.", "code_snippet": "\"stop\" )\n\tkillall smbd", "link_identifiers": ["ACTION", "$1", "killall", "smbd", "stop", "hotplug"], "notes": "Attack Chain Verification: Shares the ACTION trigger mechanism with the [SECRET_VALUE] vulnerability in the usr/hotplug file. If an attacker controls USB events (e.g., inserting a malicious device), it can simultaneously trigger command injection and service termination."}
{"name": "[SECRET_VALUE]", "file_path": "usr/sbin/hotplug_kill.sh", "location": "hotplug_kill.sh:6-10", "risk_score": 3.0, "confidence": 5.5, "description": "The parameter validation mechanism has design flaws: 1) The DIRTY parameter ($2) is validated ([ $DIRTY = 1 ]) in the ACTION='start' branch but no actual operation is performed 2) The historical validation code in the ACTION='stop' branch is commented out (#Tin Remark). This indicates incomplete input processing logic, and if the commented code is enabled in the future, it may introduce unvalidated 'killall ftpd' operations. The current risk is limited, but it reveals code maintenance issues.", "code_snippet": "[SECRET_VALUE]", "link_identifiers": ["DIRTY", "$2", "if [ $DIRTY = 1 ]", "#Tin Remark"], "notes": "[SECRET_VALUE]"}
{"name": "[SECRET_VALUE]", "file_path": "sbin/udhcpc", "location": "udhcpc:0x004055bc sym.add_option_string", "risk_score": 9.5, "confidence": 8.65, "description": "High-risk stack buffer overflow vulnerability (CWE-787). Specific manifestations: 1) Type confusion in sym.add_simple_option, where a character variable address is passed as a structure pointer; 2) Integer overflow risk in the boundary check 'iVar1 + *(param_2+1)+3 < 0x240' within sym.add_option_string; 3) memcpy uses attacker-controlled length *(param_2+1)+2 for copying. Trigger condition: Craft a malicious DHCP OFFER packet to make the formatter function write negative values (e.g., 0xFFFFFFFF) into auStack_66[2..5]. Exploitation method: Negative length value bypasses check → memcpy performs out-of-bounds write to global buffer → Control program execution flow.", "code_snippet": "[SECRET_VALUE]", "link_identifiers": ["sym.add_option_string", "sym.add_simple_option", "param_2", "param_3", "auStack_66", "0x240", "formatter", "memcpy", "*(param_2+1)"], "notes": "Vulnerability Chain: DHCP OFFER → recvfrom → add_simple_option → add_option_string → Out-of-Bounds Write. Requires verification of global buffer layout and formatter implementation; correlates with existing param_2 data flow in knowledge base."}
{"name": "[SECRET_VALUE]", "file_path": "sbin/udhcpc", "location": "udhcpc:0x0040346c (ACK[HIDDEN])", "risk_score": 7.5, "confidence": 8.5, "description": "[SECRET_VALUE]", "link_identifiers": ["ncc_sync.script", "auStack_3b8", "-s", "option12", "option15"], "notes": "The actual risk depends on the secure implementation of ncc_sync.script; shares the DHCP input source with Finding 1"}
{"name": "[SECRET_VALUE]", "file_path": "sbin/udhcpc", "location": "udhcpc:0x406140 sym.end_option", "risk_score": 8.5, "confidence": 7.5, "description": "Out-of-bounds memory access vulnerability (CWE-125). Specific manifestation: In sym.end_option, 'pcVar1 = param_1 + iVar2' does not validate the offset, and 'iVar2 = iVar2 + pcVar1[1] + 2' may cause out-of-bounds access. Trigger condition: Controlling the param_1 buffer content through a malicious DHCP RENEW packet. Exploitation method: Constructing an abnormal option sequence → triggering send_renew → kernel_packet → end_option call chain → achieving out-of-bounds read/write operations.", "code_snippet": "pcVar1 = param_1 + iVar2;\nif (*pcVar1 == '\\0') {...} else { iVar2 = iVar2 + pcVar1[1] + 2; }", "link_identifiers": ["sym.end_option", "param_1", "pcVar1", "iVar2", "sym.send_renew", "sym.kernel_packet"], "notes": "The maximum DHCP packet length limitation may affect vulnerability exploitation; shares the protocol processing framework with Discovery 1."}
{"name": "[SECRET_VALUE]", "file_path": "sbin/dnsmasq", "location": "dnsmasq:0 (sym.answer_request) 0x407798", "risk_score": 9.8, "confidence": 8.5, "description": "A heap overflow vulnerability exists in the DNS response 'T' type resource record processing due to unsafe strcpy usage: when sym.cache_get_name returns unvalidated external input, it is directly copied to a fixed-size buffer using strcpy. Trigger condition: attacker sends malicious DNS response packets containing long domain names (>255 bytes), leading to heap corruption due to lack of boundary checks. Remote code execution is possible (requires bypassing ASLR/NX), with high exploitation probability (80%).", "link_identifiers": ["sym.answer_request", "sym.cache_get_name", "strcpy", "t", "DNS[HIDDEN]"], "notes": "The vulnerability pattern corresponds to CVE-2017-13704, with the attack surface being port 53/UDP."}
{"name": "[SECRET_VALUE]", "file_path": "sbin/dnsmasq", "location": "dnsmasq:0 (add_resource_record) 0x4065a4", "risk_score": 9.2, "confidence": 8.85, "description": "The `add_resource_record` function contains a heap overflow vulnerability in `memcpy`: the length of the 't' type resource record received via `recvfrom` is not validated, allowing `memcpy` to exceed heap allocation boundaries. Trigger condition: A single malformed DNS request can trigger the issue with no prior validation. This may lead to remote code execution with a 90% attack success rate.", "link_identifiers": ["add_resource_record", "memcpy", "recvfrom", "resourcerec", "DNS_RCODE_NOERROR"]}
{"name": "[SECRET_VALUE]", "file_path": "sbin/dnsmasq", "location": "dnsmasq:0 (handle_dns) 0x0040a5d8", "risk_score": 9.0, "confidence": 9.15, "description": "The handle_dns function has a DNS query name buffer overflow vulnerability: it directly memcpy's externally input dns->name to a fixed buffer, relying solely on the MAXDNAME constant without runtime validation. Trigger condition: sending a query name exceeding 255 bytes causes stack overflow. Can be remotely exploited to achieve code execution (requires bypassing memory protections).", "code_snippet": "memcpy(name, dns->name, strlen(dns->name));", "link_identifiers": ["dns->name", "memcpy", "NAME_MAX", "handle_dns", "MAXDNAME"], "notes": "Pattern corresponding to CVE-2020-25681 vulnerability"}
{"name": "[SECRET_VALUE]", "file_path": "sbin/dnsmasq", "location": "dnsmasq:0 (dhcp_parser) 0x0041b220", "risk_score": 6.5, "confidence": 7.0, "description": "DHCP packet option parsing flaw: Although the basic length of udp_len is checked, the logical consistency between option_type and option_len is not verified. Trigger condition: Crafting malformed option fields to make option_len exceed the actual data length, causing service crash (denial of service).", "link_identifiers": ["dhcp_packet", "option_len", "udp_len", "DHCP_OPTIONS_MAX"]}
{"name": "[SECRET_VALUE]", "file_path": "sbin/dnsmasq", "location": "dnsmasq:0 (sym.receive_query) 0x40dd64", "risk_score": 3.0, "confidence": 4.75, "description": "Hardcoded system command execution: receive_query invokes system(\"killall mini_httpd\") with fixed parameters and no input contamination path. Trigger condition: specific DNS query logic, only causing termination of mini_httpd process (denial of service).", "link_identifiers": ["sym.receive_query", "system", "killall", "mini_httpd"]}
{"name": "[SECRET_VALUE]", "file_path": "sbin/dnsmasq", "location": "dnsmasq:0 (sym.reply_query) 0x40e058", "risk_score": 3.0, "confidence": 4.75, "description": "Hardcoded system command execution: The reply_query function invokes system(\"killall mini_httpd\") with fixed parameters and no input contamination path. Trigger condition: Specific DNS query logic, only causing termination of the mini_httpd process (denial of service).", "link_identifiers": ["sym.reply_query", "system", "killall", "mini_httpd"]}
{"name": "[SECRET_VALUE]", "file_path": "bin/fwUpgrade", "location": "[SECRET_VALUE]", "risk_score": 9.0, "confidence": 8.35, "description": "High-risk stack buffer overflow vulnerability. Specific manifestation: The main function directly copies argv[1] to a 128-byte stack buffer (address fp+0x20) via strcpy without length validation. Calculated: The return address is located at fp+0xac, with an exact offset of 140 bytes. Trigger condition: An attacker passes a string longer than 140 bytes via command-line argument. Security impact: 1) Stack protection mechanism is not enabled (no __stack_chk_fail reference) 2) Return address can be overwritten to achieve arbitrary code execution 3) Combined with the program's 777 permissions, can lead to privilege escalation.", "code_snippet": "0x004005a0: lw a1, 4(v1) # argv[1]\n0x004005a4: lw t9, strcpy\n0x004005ac: jalr t9", "link_identifiers": ["main", "argv", "strcpy", "fp+0x20", "fp+0xac", "__stack_chk_fail", "fwUpgrade"], "notes": "[SECRET_VALUE]"}
{"name": "[SECRET_VALUE]", "file_path": "bin/fwUpgrade", "location": "[SECRET_VALUE]", "risk_score": 9.8, "confidence": 8.75, "description": "[SECRET_VALUE]", "code_snippet": "(**(iVar1 + -0x7f34))(auStack_108,*(iVar1 + -0x7fe0) + 0x70f0,*auStackX_0);", "link_identifiers": ["[SECRET_VALUE]", "param_1", "system", "mtd_write", "Kernel_RootFS", "fwUpgrade"], "notes": "Attack Path: Triggered by passing malicious parameters through a command injection vulnerability in the bulkUpgrade program (bin/bulkUpgrade)"}
{"name": "permission_config-fwUpgrade", "file_path": "bin/fwUpgrade", "location": "fwUpgrade", "risk_score": 8.7, "confidence": 9.0, "description": "High-risk permission configuration vulnerability. Specific manifestations: 1) The fwUpgrade file has permissions set to 777 (rwxrwxrwx). 2) The setuid bit is not configured. Trigger condition: When an attacker gains low-privilege shell access. Security impact: 1) Allows any user to directly execute high-risk programs. 2) Can be replaced with a malicious version. 3) Combined with the aforementioned vulnerabilities, forms a local privilege escalation chain.", "link_identifiers": ["fwUpgrade", "file_permission", "setuid"], "notes": "Full Privilege Escalation Chain: Low-privileged user → Exploits 777 permission to execute fwUpgrade → Triggers stack overflow/command injection vulnerability → Gains REDACTED_PASSWORD_PLACEHOLDER access. Must correlate with bulkUpgrade vulnerability ([SECRET_VALUE])."}
{"name": "[SECRET_VALUE]", "file_path": "bin/pppoe-server", "location": "pppoe-server:0x405160 (processPADR), 0x404ba4 ([SECRET_VALUE])", "risk_score": 8.0, "confidence": 8.75, "description": "Complete Attack Chain 1: Network Input Pollution of PPPD Execution Parameters. Trigger Condition: Attacker sends a malicious PADR packet (PPPoE Discovery Phase). Propagation Path: 1) receivePacket receives raw data 2) processPADR directly copies MAC address to session structure 3) [SECRET_VALUE] formats parameters via sprintf 4) execv executes pppd. Security Impact: MAC address is unverified, potentially usable for session hijacking or as a stepping stone to inject pppd parameters (requires validation of pppd processing logic). Boundary Check: No MAC verification mechanism in processPADR.", "code_snippet": "", "link_identifiers": ["sym.receivePacket", "sym.processPADR", "sym.[SECRET_VALUE]", "param_1", "param_2", "sprintf", "execv", "/bin/pppd"], "notes": "Future validation directions: 1) pppd's handling of MAC parameters 2) sprintf buffer size constraints"}
{"name": "[SECRET_VALUE]", "file_path": "bin/pppoe-server", "location": "pppoe-server:0x40201c (fcn.0040201c)", "risk_score": 9.2, "confidence": 8.25, "description": "Complete Attack Chain 2: Configuration File Parsing Heap Overflow Vulnerability.  \nTrigger Condition: Tampering with /etc/ppp/pppoe-server-options (default 644 permissions).  \nPropagation Path:  \n1) fopen reads the configuration file  \n2) fgets loads a 512-byte stack buffer  \n3) sscanf parses IP format  \n4) Index out-of-bounds during loop writing to global structure.  \nSecurity Impact: By crafting malformed IP sequences (e.g., overly long strings), adjacent memory can be overwritten to achieve arbitrary code execution.  \nBoundary Check: Loop index iVar8 lacks upper limit validation, and global structure size is unconstrained.", "code_snippet": "", "link_identifiers": ["fcn.0040201c", "fopen", "fgets", "sscanf", "iVar8", "auStack_240", "/etc/ppp/pppoe-server-options"], "notes": "Associated with CVE-2006-4304; requires dynamic verification: 1) Size of the NumSessionSlots global variable 2) Overflow offset calculation"}
{"name": "[SECRET_VALUE]", "file_path": "bin/dhcp6s", "location": "dhcp6s:0x409fc4 (dhcp6_vbuf_copy)", "risk_score": 9.0, "confidence": 8.75, "description": "The dhcp6_vbuf_copy function contains a high-risk stack overflow vulnerability: an attacker can control the length parameter of memcpy (a2 register), triggering the vulnerability when length > the target stack buffer size (sp+0x1314). Trigger condition: sending a DHCPv6 packet to UDP port 547 with a length field greater than the actual data. Security impact: can overwrite the return address to achieve RCE or cause service crash, CVSS estimated ≥8.1.", "code_snippet": "0x00409fbc: lw a2, (s0)\n0x00409fc4: jalr t9", "link_identifiers": ["dhcp6_vbuf_copy", "memcpy", "a2", "sp+0x1314", "recvmsg", "param_2"], "notes": "Full attack chain: network input → recvmsg → structure parsing → unverified length → memcpy stack overflow"}
{"name": "[SECRET_VALUE]", "file_path": "bin/dhcp6s", "location": "dhcp6s:0x40d8a8 (dhcp6_set_options)", "risk_score": 8.8, "confidence": 7.75, "description": "The function dhcp6_set_options poses a risk of unvalidated length copy: the memcpy length parameter is derived from s4+0xec (a parsed packet value) without boundary checks against the target buffer (s0). Trigger condition: processing maliciously crafted DHCPv6 packets. Security impact: heap/stack buffer overflow may lead to RCE, requiring analysis of the s4 register contamination path to assess actual exploitation complexity.", "code_snippet": "0x40d8a4: lw a2, 0xec(s4)\n0x40d8a8: jalr t9", "link_identifiers": ["dhcp6_set_options", "memcpy", "s4", "0xec", "s0", "a2"], "notes": "Track the source of the s4 register (recommend analyzing dhcp6_parse_options)"}
{"name": "[SECRET_VALUE]", "file_path": "bin/dhcp6s", "location": "dhcp6s:0x4180d0 (lease_address)", "risk_score": 6.5, "confidence": 7.5, "description": "The `lease_address` function has a fixed-length copy risk: it uses a 16-byte fixed-length `memcpy` without verifying the actual size of the source buffer (`param_1`). Trigger condition: the caller passes a buffer smaller than 16 bytes. Security impact: out-of-bounds read may lead to sensitive information disclosure or program crash.", "code_snippet": "0x4180d4: move a1, s1\n0x4180d8: addiu a2, zero, 0x10", "link_identifiers": ["lease_address", "memcpy", "param_1", "0x10", "a2"], "notes": "Verify whether the source of param_1 is influenced by external input"}
{"name": "[SECRET_VALUE]", "file_path": "sbin/udhcpd", "location": "udhcpd:0 [sendACK] 0x00405e68", "risk_score": 10.0, "confidence": 9.25, "description": "sendACK function command injection vulnerability. Trigger condition: When server_config.script_path configuration is enabled, an attacker can craft a malicious DHCP ACK packet's hostname option (0x0c) which, after being formatted by snprintf, is directly passed to system() for execution. Boundary checks are completely absent, with no filtering or length validation performed on the hostname. Security impact: Remote attackers can achieve arbitrary command execution with REDACTED_PASSWORD_PLACEHOLDER privileges, forming a complete exploitation chain (network input → parsing → system command execution).", "link_identifiers": ["sendACK", "system", "hostname", "option 0x0c", "server_config.script_path", "snprintf"], "notes": "Verify whether the DISCOVER/OFFER processing flow has the same vulnerability; check the default configuration status of script_path"}
{"name": "[SECRET_VALUE]", "file_path": "sbin/udhcpd", "location": "udhcpd:0 [arpping] 0x4023fc", "risk_score": 9.0, "confidence": 8.25, "description": "Stack overflow vulnerability in the arpping function. Trigger condition: A local attacker modifies the 'server' field in /etc/udhcpd.conf to exceed 14 bytes and restarts the service, causing stack overflow via strcpy(sp+0x20) during ARP request processing. Boundary check: No length validation mechanism exists. Security impact: Enables arbitrary code execution or denial of service.", "link_identifiers": ["arpping", "server", "strcpy", "/etc/udhcpd.conf", "check_ip"], "notes": "Confirm the exact size of the sp+0x20 buffer; analyze write permission control for configuration files."}
{"name": "[SECRET_VALUE]", "file_path": "sbin/udhcpd", "location": "udhcpd:0 [read_interface] 0x4072b0", "risk_score": 9.0, "confidence": 8.25, "description": "Stack overflow vulnerability in the `read_interface` function. Trigger condition: Tampering with the 'interface' field in `/etc/udhcpd.conf` exceeding 16 bytes causes overflow during service initialization via `strcpy(auStack_40)`. Boundary check: Completely absent. Security impact: Local privilege escalation leading to arbitrary code execution.", "link_identifiers": ["read_interface", "interface", "strcpy", "server_config", "/etc/udhcpd.conf"], "notes": "Verify the stack structure of auStack_40; review the loading logic of other configuration items"}
{"name": "[SECRET_VALUE]", "file_path": "sbin/udhcpd", "location": "udhcpd:0 [add_lease] 0x404b54", "risk_score": 8.5, "confidence": 7.75, "description": "add_lease function heap overflow vulnerability. Trigger condition: When processing malicious DHCP DISCOVER/OFFER packets, a hostname field exceeding 64 bytes causes strcpy/strncpy to overflow heap memory. Boundary check: strncpy truncation mechanism fails. Security impact: RCE achieved by corrupting heap structure through specially crafted network packets.", "link_identifiers": ["add_lease", "hostname", "DISCOVER", "OFFER", "strcpy", "strncpy"], "notes": "Confirm heap allocation size; Trace the full path of hostname resolution"}
{"name": "[SECRET_VALUE]", "file_path": "sbin/udhcpd", "location": ".rodata:0 [unknown] 0x004080f4", "risk_score": 6.0, "confidence": 8.0, "description": "DHCP option processing risk. Hardcoded 'option' strings detected, indicating the program directly handles DHCP option data. Boundary check: No evidence of input validation. Security impact: Option data may serve as an input vector for the aforementioned vulnerabilities (e.g., sendACK command injection).", "link_identifiers": ["option", "udhcpd.conf", "static_lease", "max_leases"], "notes": "Decompile and analyze the input processing logic of functions such as get_option"}
{"name": "[SECRET_VALUE]", "file_path": "usr/sbin/hotplugd", "location": "usr/sbin/hotplugd:0 [hotplugd_handler] 0x0", "risk_score": 8.5, "confidence": 8.0, "description": "A high-risk command injection vulnerability has been discovered: 1) hotplugd constructs the command '/sbin/dosfsck -M&devpath(%s)' via snprintf() when responding to device hot-plug events, where '%s' is directly taken from the DEVPATH environment variable; 2) There are no input filtering or boundary checking mechanisms; 3) The trigger condition is device plug/unplug events (ACTION events); 4) An attacker can forge the DEVPATH variable (e.g., ';malicious_command;') to inject arbitrary commands, which will be executed with REDACTED_PASSWORD_PLACEHOLDER privileges when a device is inserted.", "link_identifiers": ["DEVPATH", "dosfsck", "system", "snprintf", "ACTION", "devpath"], "notes": "Attack Path: Control DEVPATH environment variable → Trigger hotplug event → Malicious commands executed via system(). Verification required: 1) How the kernel sets DEVPATH; 2) Feasibility of physical device spoofing."}
{"name": "[SECRET_VALUE]", "file_path": "usr/sbin/hotplugd", "location": "/etc/silex/nas.conf:0 [config_loader] 0x0", "risk_score": 5.0, "confidence": 6.75, "description": "Potential attack surface identified: The content of the configuration file /etc/silex/nas.conf is directly assigned to the SHAREPATH environment variable (via setenv call) without filtering. Although not directly used for command execution in this analysis, this globally exposed variable could potentially be exploited by other components.", "link_identifiers": ["SHAREPATH", "setenv", "/etc/silex/nas.conf"], "notes": "It is recommended to follow up on the usage of SHAREPATH in other components (such as mount scripts)."}
{"name": "[SECRET_VALUE]", "file_path": "usr/sbin/jcpd", "location": "usr/sbin/jcpd: (sym.jcpd_run) 0x407ac0", "risk_score": 10.0, "confidence": 10.0, "description": "High-risk stack overflow vulnerability (CVE-2023-XXXX): In the sym.jcpd_run function, recvfrom uses a 40-byte stack buffer (auStack_78) but allows receiving up to 510 bytes of data. When an attacker sends a UDP packet >40 bytes, critical stack variables (iStack_38, puStack_34) and the return address can be overwritten. Trigger conditions: 1) Attacker accesses the UDP port of jcpd service 2) Sends malicious packet >40 bytes 3) No authentication required. Actual security impact: Remote Code Execution (RCE), CVSS score 10.0. Boundary checks are completely absent, with no length validation mechanism whatsoever.", "code_snippet": "recvfrom(iVar4, auStack_78, 0x1FE, 0, ...); // [HIDDEN]40B vs [HIDDEN]510B", "link_identifiers": ["sym.jcpd_run", "recvfrom", "auStack_78", "iStack_38", "puStack_34", "UDP"], "notes": "Coverage: Stack area from rsp-0x78 to rsp-0x30 (including return address). Verification recommendations: 1) Service port number 2) System ASLR protection status"}
{"name": "oob_read-jcpd-puVar17_offset", "file_path": "usr/sbin/jcpd", "location": "usr/sbin/jcpd: (sym.jcpd_run) 0x407ac0", "risk_score": 7.5, "confidence": 8.5, "description": "OOB read vulnerability: In the same function, when the received packet length is ≥88 bytes, the code accesses puVar17[0x2a] (offset 84 bytes), resulting in an out-of-bounds read. Trigger conditions: 1) Same UDP access path 2) Sending specially crafted packets with length ≥88 bytes. Security impact: 1) Leakage of sensitive stack memory information (such as return addresses, register values) 2) Assisting in bypassing ASLR 3) Service crash (DoS). Missing boundary check: Failure to verify the relationship between received length and fixed offset access.", "link_identifiers": ["puVar17", "0x2a", "uVar8", "recvfrom", "OOB_read"], "notes": "forming an exploitation chain with stack overflow vulnerabilities (information leak → ASLR bypass → RCE)"}
{"name": "vul_chain-jcpd_udp_rce", "file_path": "usr/sbin/jcpd", "location": "usr/sbin/jcpd: (sym.jcpd_run) 0x407ac0", "risk_score": 9.5, "confidence": 9.25, "description": "Complete Attack Path Assessment: 1) Initial Entry Point: UDP network interface of jcpd service 2) Propagation Path: Malicious data → stored in stack buffer via recvfrom → used directly without length validation 3) Dangerous Operation: Stack overflow leading to control flow hijacking. Trigger Steps: Single UDP packet transmission. Success Probability: High (no authentication required, standard network access sufficient to trigger).", "link_identifiers": ["jcpd", "UDP", "recvfrom", "stack_overflow"]}
{"name": "[SECRET_VALUE]", "file_path": "usr/sbin/jcpd", "location": "unknown: (sym.sxstrg_get_storage_list)", "risk_score": 0.0, "confidence": 4.5, "description": "The stack overflow in the hotplugd service (sym.sxstrg_get_storage_list) from the original report has been ruled out: the buffer size of 208 bytes matches the receive length limit, with robust loop boundary checking (26 iterations * 8 bytes each).", "link_identifiers": ["sym.sxstrg_get_storage_list", "acStack_f8", "iVar6", "0xd0"], "notes": "The verified buffer matches the receive limit, with no actual overflow risk."}
{"name": "[SECRET_VALUE]", "file_path": "[SECRET_VALUE]", "location": "[SECRET_VALUE]:0x403d3c (sym.sxstrg_get_storage_list)", "risk_score": 7.8, "confidence": 8.5, "description": "A heap overflow vulnerability triggered by USB device input. When an attacker inserts a malicious USB device, the hotplugd service passes the device descriptor to sym.sxstrg_get_storage_list(0x403d3c). This function fails to validate bounds when reading 208 bytes into the acStack_f8 stack buffer. A subsequent strcpy operation using this buffer as the source data results in a heap overflow due to insufficient space reserved for the null terminator in the dynamically allocated destination buffer. Trigger condition: Physical insertion of a specially crafted USB device. Actual impact: Controlled heap corruption enables arbitrary code execution. Full attack chain: Physical USB device -> hotplugd -> sxusbport_main -> sxstrg_get_storage_list -> strcpy heap corruption.", "link_identifiers": ["hotplugd", "sym.sxstrg_get_storage_list", "acStack_f8", "sxusbport_main", "strcpy", "USB"], "notes": "Dynamic verification required: 1) Feasibility of USB descriptor injection 2) Heap layout control techniques"}
{"name": "command-injection-ipc-mount", "file_path": "[SECRET_VALUE]", "location": "[SECRET_VALUE]:0x004046b0 (sxstorage_mount), hotplugd:0x4077d0 (snprintf), hotplugd:0x4077fc (execl)", "risk_score": 9.0, "confidence": 8.25, "description": "The command injection chain triggered by IPC parameter passing. [SECRET_VALUE] transmits externally controllable mount point paths to the hotplugd service via the IPC mechanism (strncpy copies 0x7c bytes) of sxstorage_mount/sxstorage_umount. hotplugd uses snprintf to concatenate unfiltered inputs to construct the '/bin/tar cf %s *' command, which is ultimately executed via execl(\"/bin/sh\", \"-c\", command). Trigger condition: attackers control the mount point path through hotplug events or network APIs (such as NAS management interfaces). Actual impact: injecting ; or $(...) sequences enables arbitrary command execution. Full attack chain: network API/USB storage device -> [SECRET_VALUE] IPC -> hotplugd command concatenation -> execl execution.", "link_identifiers": ["sxstorage_mount", "sxstorage_umount", "sxipc_send_srv", "hotplugd", "execl", "snprintf", "/bin/tar", "/bin/sh", "IPC"], "notes": "[SECRET_VALUE]"}
{"name": "[SECRET_VALUE]", "file_path": "sbin/mini_httpd", "location": "mini_httpd:0x00407b40 (doAPIPage)", "risk_score": 9.0, "confidence": 9.0, "description": "[SECRET_VALUE]", "link_identifiers": ["GetFile", "path_sfilename_s", "doAPIPage", "sprintf", "auStack_9ac8"], "notes": "[SECRET_VALUE]"}
{"name": "[SECRET_VALUE]", "file_path": "sbin/mini_httpd", "location": "mini_httpd:0x404cc8 (fcn.00404cc8)", "risk_score": 9.5, "confidence": 8.5, "description": "High-risk file upload chain: 1) The fcn.00404cc8 function fails to filter the filename= parameter when processing multipart/form-data requests. 2) User-controllable filenames are concatenated with the /var/www path via snprintf. 3) Uploaded files become directly accessible via HTTP. Trigger condition: Craft a malicious POST request to upload a .PHP file. Impact: If PHP interpreter is enabled, remote code execution (RCE) can be achieved.", "link_identifiers": ["multipart_form_data", "fcn.00404cc8", "filename=", "Content-Disposition", "snprintf", "cgipat", "/var/www"], "notes": "[SECRET_VALUE]"}
{"name": "[SECRET_VALUE]", "file_path": "sbin/wdg.sh", "location": "wdg.sh:1-33", "risk_score": 0.0, "confidence": 4.9, "description": "[SECRET_VALUE]", "code_snippet": "#!/bin/sh\nCONF_FILE=/etc/watchdog.conf\necho \"file = /var/log/messages\" >> $CONF_FILE\necho \"max-load-1 = 24\" >> $CONF_FILE\necho \"watchdog-device = /dev/watchdog\" >> $CONF_FILE", "link_identifiers": ["CONF_FILE", "/etc/watchdog.conf", "echo", "max-load-1", "min-memory", "watchdog-device", "pidfile", "/var/log/messages", "/var/run/syslogd.pid"], "notes": "The file has no attack surface. It is recommended to check whether the startup components (such as /etc/init.d) that call this script have configuration injection risks, or to analyze other dynamic components that may manipulate watchdog.conf."}
{"name": "dos-script-service-control", "file_path": "sbin/opt.local", "location": "sbin/opt.local", "risk_score": 6.0, "confidence": 6.5, "description": "The script receives external input via the positional parameter $1 (action), but strictly restricts it to a whitelist of start/stop/restart using a case statement. When an illegal command is entered, only help information is displayed, preventing bypass of validation. In the stop/restart branches, kill -9 is used to forcibly terminate the 'mydlink-watch-dog.sh' and 'signalc' processes. If an attacker can invoke the script and pass stop/restart parameters (subject to permission verification), they could cause a denial of service, but cannot execute arbitrary commands or file operations.", "link_identifiers": ["action=$1", "case $action in", "kill -9", "killall -9", "mydlink-watch-dog.sh", "signalc"], "notes": "Practical exploitation requires combining with privilege escalation vulnerabilities. It is recommended to verify the permission controls of the parent component calling this script."}
{"name": "[SECRET_VALUE]", "file_path": "sbin/accel-pptp.sh", "location": "accel-pptp.sh:24-25", "risk_score": 8.0, "confidence": 8.5, "description": "The script directly writes unvalidated parameters ($1-$5) into the /etc/options.pptp configuration file. An attacker can inject malicious configurations (such as adding additional commands) by controlling the [SECRET_VALUE] or PPTP_PASSWORD parameters. Trigger condition: When any component calling this script (e.g., a web interface) fails to filter user input. Boundary checks are entirely absent, and special characters are not escaped. This may lead to the PPTP service parsing malicious configurations or privilege escalation.", "code_snippet": "[SECRET_VALUE]", "link_identifiers": ["[SECRET_VALUE]", "PPTP_PASSWORD", "PPTP_FILE", "options.pptp", "$1", "$2"], "notes": "Track the parent component (e.g., /www/cgi-bin/) that calls this script to confirm the parameter source. Related keywords: $1, $2"}
{"name": "[SECRET_VALUE]", "file_path": "sbin/accel-pptp.sh", "location": "accel-pptp.sh:35", "risk_score": 6.5, "confidence": 7.5, "description": "The arithmetic operation does not validate the input type and directly performs an expr operation on $5 (PPTP_OPTIME). An attacker passing non-numeric values could cause command execution errors, compromising service availability. Trigger condition: The component controlling the PPTP_OPTIME parameter lacks input filtering. No type checking or exception handling mechanisms are in place.", "code_snippet": "PPTP_OPTIME=`expr $PPTP_OPTIME \\* 60`", "link_identifiers": ["PPTP_OPTIME", "expr", "$5"]}
{"name": "[SECRET_VALUE]", "file_path": "sbin/accel-pptp.sh", "location": "accel-pptp.sh:6-16", "risk_score": 7.5, "confidence": 8.75, "description": "The global input validation mechanism is missing. The script only checks the number of parameters (lines 6-9) without performing any filtering or sanitization on the contents of parameters $1-$5. Attackers could attempt injection attacks using special characters (such as ;, $, ()). Trigger condition: Any parameter source component contains user-controllable input points.", "code_snippet": "if [ ! -n \"$5\" ]; then\n  echo \"insufficient arguments!\"\n  exit 0\nfi\n[SECRET_VALUE]=\"$1\"", "link_identifiers": ["$1", "$2", "$3", "$4", "$5"]}
{"name": "[SECRET_VALUE]", "file_path": "sbin/mdb_test.sh", "location": "sbin/mdb_test.sh", "risk_score": 8.0, "confidence": 8.5, "description": "The script uses the 'mdb set' command to configure sensitive settings (REDACTED_PASSWORD_PLACEHOLDER/attr_0-attr_9), accepting input values containing special characters (%23%24%25%26) without any filtering or length validation. Attackers could hijack the 'mdb' command by manipulating the $PATH environment variable or exploit potential vulnerabilities in 'mdb' implementation to trigger unauthorized configuration changes. Trigger conditions include: controlling script execution environment variables or leveraging input validation flaws in mdb itself.", "code_snippet": "[SECRET_VALUE]", "link_identifiers": ["REDACTED_PASSWORD_PLACEHOLDER", "attr_0", "attr_9", "mdb set", "PATH", "factory_reset", "fw_upgrade", "register_st", "mdb"], "notes": "Critical risks transferred to the 'mdb' command:  \n1) Immediate analysis of the /sbin/mdb binary is recommended  \n2) Verify boundary validation for NVRAM write operations  \n3) Validate the invocation path of privileged commands (factory_reset/reboot)  \nAssociated attack chain: PATH environment variable hijacking (refer to knowledge base entry 'path_hijack-kill_command') may amplify the impact of this vulnerability"}
{"name": "[SECRET_VALUE]", "file_path": "sbin/factory_reset", "location": "sbin/factory_reset", "risk_score": 8.5, "confidence": 9.0, "description": "The script unconditionally executes a factory reset operation via 'echo 1 > /proc/load_default'. The trigger condition is direct script execution, resulting in complete device configuration reset (denial-of-service attack). No input validation, boundary checks, or permission controls exist, with a forced 10-second wait before exit after operation. Potential security impact: attackers can directly trigger device reset if they obtain script execution privileges.", "code_snippet": "echo 1 > /proc/load_default\nsleep 10\nexit 0", "link_identifiers": ["/proc/load_default", "load_default", "echo"], "notes": "Analyze whether the parent component calling this script (such as the reset function of the web interface) has unauthorized access or command injection vulnerabilities."}
{"name": "[SECRET_VALUE]", "file_path": "sbin/factory_reset", "location": "sbin/factory_reset", "risk_score": 2.0, "confidence": 5.5, "description": "The script does not implement any parameter handling mechanism: it does not use positional parameters like $1/$2, does not read environment variables, and lacks conditional branching logic. As a standalone component, it has no direct external input points, but as a high-risk operation endpoint, its invocation context may introduce attack surfaces.", "code_snippet": "echo 1 > /proc/load_default\nsleep 10\nexit 0", "link_identifiers": ["exit 0"], "notes": "Recommended follow-up analysis: 1) Locate the process calling this script; 2) Examine the kernel processing logic in /proc/load_default"}
{"name": "[SECRET_VALUE]", "file_path": "sbin/hotplug", "location": "/sbin/hotplug:[HIDDEN]", "risk_score": 8.5, "confidence": 8.0, "description": "Path traversal vulnerability: The $1 parameter is directly concatenated into the directory path (${DIR}/$1/) without path normalization or boundary checks. An attacker can escape the /etc/hotplug.d directory by supplying a malicious $1 value (e.g., '../../../etc') and execute .hotplug scripts at arbitrary locations. Trigger condition: Controlling the $1 parameter when invoking hotplug. Actual impact depends on the calling context, but the vulnerability itself presents a complete data flow: $1 → path concatenation → script execution.", "link_identifiers": ["$1", "DIR", "${DIR}/$1/", "/etc/hotplug.d"], "notes": "Verify the defined value of DIR (which may come from environment variables or fixed paths); associate with the discovery of the existing '$1' keyword in the knowledge base"}
{"name": "[SECRET_VALUE]", "file_path": "sbin/hotplug", "location": "/sbin/hotplug:[HIDDEN]", "risk_score": 8.0, "confidence": 7.0, "description": "Command injection vulnerability: Executing commands through unquoted variables (test -x $I && $I $1). The $1 parameter does not filter special characters (such as ; & |), allowing attackers to inject additional commands. For example, $1='; reboot;' would cause the system to reboot. Trigger condition: Controlling the $1 parameter or the .hotplug script filename. Dangerous operation path: $1 → command concatenation → shell interpreter execution.", "link_identifiers": ["$I", "$1", "$I $1", "test -x"], "notes": "Practical exploitation requires controlling $1 or writing a malicious .hotplug file; related to the existing '$1' keyword discovery in the knowledge base."}
{"name": "[SECRET_VALUE]", "file_path": "sbin/mydlink-watch-dog.sh", "location": "sbin/mydlink-watch-dog.sh:10-15", "risk_score": 8.5, "confidence": 6.0, "description": "Unvalidated external parameter $1 is directly used in dangerous commands: 1) killall -9 $1 2) launching processes via /mydlink/$1 or /opt/$1. Attackers can inject malicious parameters (e.g., '; rm -rf /') to achieve command injection. Trigger condition: passing tainted parameters when calling the script. Security impact: arbitrary command execution or firmware corruption. Need to verify whether $1 originates from untrusted sources such as network/NVRAM.", "code_snippet": "killall -9 $1\nif [ -f /mydlink/$1 ]; then\n  /mydlink/$1 > /dev/null 2>&1 &", "link_identifiers": ["$1", "killall", "/mydlink/$1", "/opt/$1"], "notes": "Critical follow-up tasks: 1) Search for files calling this script 2) Verify if $1 originates from untrusted sources like network/NVRAM. Related keywords: killall, $1"}
{"name": "[SECRET_VALUE]", "file_path": "sbin/fw_upgrade", "location": "fw_upgrade:3-4", "risk_score": 9.0, "confidence": 8.75, "description": "The fw_upgrade script contains an arbitrary file write vulnerability due to unvalidated input: 1) It accepts externally provided tar file paths via command-line argument $1 2) Directly executes 'tar -xf $1 -C /mydlink/' without path normalization or filtering of $1 3) Lacks boundary checking mechanisms, allowing attackers to construct paths containing '../' sequences for directory traversal 4) Immediately executes reboot after extraction, activating any malicious written files. Actual security impact: Attackers controlling the $1 parameter can overwrite arbitrary system files (e.g., /etc/init.d startup scripts), achieving persistent attacks combined with the reboot mechanism.", "code_snippet": "tar -xf $1 -C /mydlink/\nreboot", "link_identifiers": ["$1", "tar", "/mydlink/", "reboot", "mydlink-watch-dog.sh"], "notes": "Attack Chain Verification: 1) Correlation with command_execution vulnerability in sbin/mydlink-watch-dog.sh: Malicious files written to /mydlink/ can be automatically executed 2) Need to confirm how the process calling fw_upgrade (e.g., httpd component) sets $1 3) Permission check for /mydlink/ directory"}
{"name": "[SECRET_VALUE]", "file_path": "sbin/fw_upgrade", "location": "fw_upgrade:3-4 & mydlink-watch-dog.sh:10-15", "risk_score": 9.5, "confidence": 8.75, "description": "[SECRET_VALUE]", "link_identifiers": ["$1", "/mydlink/", "reboot", "mydlink-watch-dog.sh", "attack_chain"], "notes": "Correlation Discovery: [SECRET_VALUE] + [SECRET_VALUE]. Pending Verification: 1) How the web interface passes the $1 parameter 2) Permission settings of the /mydlink/ directory 3) Execution context permissions of malicious scripts"}
{"name": "command-injection-eth.sh-SetMac", "file_path": "sbin/eth.sh", "location": "eth.sh: (SetMac[HIDDEN])", "risk_score": 9.5, "confidence": 8.75, "description": "High-risk command injection vulnerability: The user-controlled $2 parameter (MAC/SN value) is embedded into a backtick command execution environment via the `echo $2 | awk` construct. Attackers can inject shell metacharacters (e.g., `;id`) to execute arbitrary commands. Trigger conditions: 1) Attacker controls the $2 parameter of the SetMac function (e.g., via web interface MAC address configuration); 2) Parameter contains valid command separators. Boundary checks are entirely absent, with the flash command directly executing tainted data. High-risk exploitation chain: tainted input → command injection → REDACTED_PASSWORD_PLACEHOLDER privilege escalation.", "code_snippet": "flash -w 0x40028 -o `echo $2 | awk '{ print substr($0,0,2)}'`", "link_identifiers": ["SetMac", "$2", "awk", "substr", "flash -w", "echo"], "notes": "Exploiting the vulnerability requires locating the entry point (e.g., web interface). Shares data flow with discovery ID: input-truncation-eth.sh-SetMac [$2→flash -w]. Recommendations: 1) Replace backticks with $() structure 2) Filter input using printf '%s' \"$2\""}
{"name": "input-truncation-eth.sh-SetMac", "file_path": "sbin/eth.sh", "location": "eth.sh: (SetMac[HIDDEN])", "risk_score": 4.0, "confidence": 5.5, "description": "Input truncation vulnerability: When the length of $2 is less than the position specified by substr, awk returns an empty string, causing a flash write of a null value. This may corrupt the MAC address storage structure, but requires specific conditions to trigger (e.g., configuring an extremely short MAC address). The risk is relatively low compared to command injection.", "link_identifiers": ["substr", "awk", "$2", "flash -w"], "notes": "Verify the fault tolerance of the flash program against empty inputs. Associated data flow found with ID: command-injection-eth.sh-SetMac."}
{"name": "[SECRET_VALUE]", "file_path": "www/login.asp", "location": "login.asp: check()[HIDDEN]", "risk_score": 9.0, "confidence": 10.0, "description": "[SECRET_VALUE]", "code_snippet": "[SECRET_VALUE]", "link_identifiers": ["log_pass", "[SECRET_VALUE]", "check()", "form1", "login.ccp", "submit_button_flag"], "notes": "[SECRET_VALUE]"}
{"name": "[SECRET_VALUE]", "file_path": "www/login.asp", "location": "login.asp: encode_base64()[HIDDEN]", "risk_score": 2.0, "confidence": 10.0, "description": "[SECRET_VALUE]", "code_snippet": "[SECRET_VALUE]", "link_identifiers": ["encode_base64()", "map1", "[SECRET_VALUE]", "log_pass"], "notes": "Security mechanism design flaw, recommend removing redundant encoding logic to reduce attack surface"}
{"name": "[SECRET_VALUE]", "file_path": "www/tools_admin.asp", "location": "www/tools_admin.asp:329", "risk_score": 7.0, "confidence": 8.5, "description": "[SECRET_VALUE]", "code_snippet": "if ($(\"#[SECRET_VALUE]\").val().length <= '5'){\n\talert(get_words('limit_pass_msg'));\n\treturn false;\n}", "link_identifiers": ["[SECRET_VALUE]", "admPass2", "check_varible", "limit_pass_msg", "is_ascii"], "notes": "The feasibility of an actual brute-force attack needs to be analyzed in conjunction with the login interface; the related keywords '[SECRET_VALUE]' and 'admPass2' have appeared in historical findings."}
{"name": "[SECRET_VALUE]", "file_path": "www/tools_admin.asp", "location": "www/tools_admin.asp:223-243", "risk_score": 6.5, "confidence": 7.25, "description": "Remote Management Port Conflict Detection Logic Flaw: The port check function chg_rm_port() only compares against fixed values 8080/8090 (lines 223-243), failing to verify whether the port is occupied by other high-risk services (e.g., SSH). Attackers could trick users into setting conflicting ports, resulting in service denial. Trigger condition: When users enable remote management and modify ports, attackers inject malicious port values through HTTP parameters.", "code_snippet": "if ((chk_port == '8080') || ((chk_port == rmgr_port) && (rmgr_port!='0'))) {\n\t$('#remote_http_management_port').val(\"8090\");\n}", "link_identifiers": ["chg_rm_port", "remote_http_management_port", "rmgr_port", "rmgr_ports", "[SECRET_VALUE]"], "notes": "Verify how get_set.ccp handles port parameters; the associated keyword '[SECRET_VALUE]' has appeared in historical findings."}
{"name": "[SECRET_VALUE]", "file_path": "www/tools_admin.asp", "location": "www/tools_admin.asp:280-288", "risk_score": 8.0, "confidence": 6.0, "description": "The access control filtering rule is at risk of XSS: The add_option() function directly outputs array_filter_name when dynamically generating options (lines 280-288), without performing HTML encoding on the user-input filter rule names. Attackers can store XSS payloads by setting malicious rule names. Trigger condition: Malicious scripts are executed when administrators view the remote management page.", "code_snippet": "for (var i = 0; i < obj; i++){\n\tdocument.write(\"<option value=\" + inst.charAt(2) + \">\" + nam[i] + \"</option>\");\n}", "link_identifiers": ["add_option", "array_filter_name", "remote_inbound_filter", "document.write"], "notes": "Need to confirm whether the filtering rule name is set through other interfaces; the associated keyword 'document.write' has appeared in historical findings."}
{"name": "[SECRET_VALUE]", "file_path": "www/tools_admin.asp", "location": "[HIDDEN]www/tools_admin.asp → get_set.ccp → login.ccp", "risk_score": 9.0, "confidence": 8.0, "description": "[SECRET_VALUE]", "link_identifiers": ["[SECRET_VALUE]", "get_set.ccp", "login_Info", "REDACTED_PASSWORD_PLACEHOLDER"], "notes": "Constructed based on historical discovery correlations; verification required: 1) the processing logic of get_set.ccp for [SECRET_VALUE]; 2) the authentication protection mechanism of login.ccp"}
{"name": "attack-chain-account-takeover", "file_path": "www/storage.asp", "location": "www/storage.asp: add_user()[HIDDEN]", "risk_score": 8.5, "confidence": 9.0, "description": "[SECRET_VALUE]", "link_identifiers": ["add_user", "[SECRET_VALUE]", "pwd1", "[SECRET_VALUE]", "REDACTED_PASSWORD_PLACEHOLDER", "CCP[HIDDEN]"], "notes": "[SECRET_VALUE]"}
{"name": "attack-chain-dos", "file_path": "www/storage.asp", "location": "www/storage.asp: send_request()[HIDDEN]", "risk_score": 7.0, "confidence": 7.5, "description": "Denial-of-Service Attack Chain: Injecting non-numeric values (e.g., '80a') via wa_http_port parameter → parseInt conversion yields NaN → Bypasses check_integer range validation → Conflict detection logic anomaly. Trigger condition: Submitting malformed port values when remote management is enabled. Actual impact: Causes abnormal termination of web services.", "link_identifiers": ["send_request", "wa_http_port", "parseInt", "check_integer", "ac_alert_invalid_port", "[SECRET_VALUE]"], "notes": "Associate the remote management port configuration, the actual impact needs to be combined with the service restart mechanism."}
{"name": "attack-chain-path-traversal", "file_path": "www/storage.asp", "location": "www/storage.asp: save_append()[HIDDEN]", "risk_score": 9.0, "confidence": 8.0, "description": "[SECRET_VALUE]", "link_identifiers": ["edit_rule", "save_append", "Access_path", "[SECRET_VALUE]", "[SECRET_VALUE]", "MSG056"], "notes": "Critical Gap: The path resolution logic in web_access.ccp is unverified; it is recommended to prioritize analysis of this file."}
{"name": "dom-xss-addstr-multi_vector", "file_path": "wa_www/public.js", "location": "public.js:638,1523,1542", "risk_score": 8.5, "confidence": 8.5, "description": "The DOM-based XSS vulnerability exists in the addstr() function. Unvalidated external inputs flow directly into dangerous functions through three vectors: 1) gateway_ipaddr_1 (from network configuration) injecting alert(), 2) obj_S (language strings) injecting document.write, and 3) obj_name (LAN IP validation) injecting into the DOM. Trigger condition: attackers inject malicious JS through HTTP parameters or forged network responses (e.g., DHCP/NTP). Impact: execution of arbitrary code in the router's web context, granting full control of the user interface.", "code_snippet": "638: alert(addstr(msg[NOT_SAME_DOMAIN], obj_word, gateway_ipaddr_1));\n1523: obj_D[i] = addstr(obj_S[i], replace_msg.arguments[1]);", "link_identifiers": ["addstr", "gateway_ipaddr_1", "obj_S", "obj_name", "alert", "document.write"], "notes": "Verify the server-side handling of the obj_S parameter. Related function: network configuration processing logic (LAN/WAN settings). Exploitation chain association: may trigger IP validation bypass vulnerability (see check_address)."}
{"name": "[SECRET_VALUE]", "file_path": "wa_www/public.js", "location": "public.js:714-760", "risk_score": 8.0, "confidence": 8.0, "description": "The IP validation bypass vulnerability exists in check_address(). By controlling the number of parameters (1-3), critical checks can be bypassed: 1) Passing only my_obj skips mask_obj/ip_obj validation 2) Passing two parameters skips ip_obj validation. Trigger condition: Attacker submits malformed form data (e.g., omitting IP field). Impact: Allows setting illegal IPs (broadcast/network addresses), compromising network isolation.", "code_snippet": "if (check_address.arguments.length >= 2 && mask_obj != null){...}\nif (check_address.arguments.length == 3 && ip_obj != null){...}", "link_identifiers": ["check_address", "arguments.length", "mask_obj", "ip_obj", "check_lan_setting"], "notes": "Exploitation Chain: Malicious scripts injectable via DOM XSS vulnerability (addstr function) can automatically trigger malformed form submissions. Call Point: LAN/WAN configuration (lines 632-634)"}
{"name": "[SECRET_VALUE]", "file_path": "wa_www/public.js", "location": "public.js:1400-1410", "risk_score": 7.5, "confidence": 8.75, "description": "[SECRET_VALUE]", "code_snippet": "function create_wep_key128(passpharse, pharse_len){\n    for(var i=0;i<64;i++){\n        pseed2 += passpharse.substring(i % pharse_len, 1);\n    }\n    return calcMD5(pseed2).substring(0,26).toUpperCase();\n}", "link_identifiers": ["create_wep_key128", "passpharse", "pseed2", "calcMD5", "toUpperCase", "wep_def_key"], "notes": "[SECRET_VALUE]"}
{"name": "[SECRET_VALUE]", "file_path": "usr/sbin/hotplug_misc.sh", "location": "hotplug_misc.sh:18", "risk_score": 8.5, "confidence": 8.0, "description": "Path Traversal Vulnerability: The DEVPATH environment variable is directly concatenated without filtering in the AFTERMNT event handling (${DEVPATH}/smb.dir.conf). An attacker can forge a USB hotplug event to manipulate DEVPATH into paths like '../../../etc', potentially overwriting system configurations such as /etc/smb.conf. Trigger condition: Physical/simulated USB insertion + setting ACTION='AFTERMNT'. Boundary checks are entirely absent, and exploitation success depends on smbd permissions (known to run as REDACTED_PASSWORD_PLACEHOLDER).", "link_identifiers": ["DEVPATH", "ACTION", "AFTERMNT", "smb.dir.conf"], "notes": "Attack chain starting point. Requires physical access or hot-plug simulation capability, but enables direct control of SMB configuration upon exploitation."}
{"name": "[SECRET_VALUE]", "file_path": "usr/sbin/hotplug_misc.sh", "location": "hotplug_misc.sh:22-27", "risk_score": 9.0, "confidence": 8.25, "description": "Command execution chain: Forcefully terminate the service via `killall smbd`, and load a compromised `smb.conf` upon service restart. Attackers can inject malicious commands in the configuration (e.g., `log file=|malicious_command`). Trigger condition: Automatically activated after successfully overwriting `smb.conf`. Absence of boundary checks combined with `smbd` running with REDACTED_PASSWORD_PLACEHOLDER privileges significantly amplifies the impact.", "link_identifiers": ["killall", "smbd", "smb.dir.conf"], "notes": "Command execution. A critical link in the vulnerability chain. Dependent on prior path traversal vulnerabilities, yet provides RCE capability."}
{"name": "[SECRET_VALUE]", "file_path": "usr/sbin/hotplug_misc.sh", "location": "hotplug_misc.sh:6-34", "risk_score": 6.0, "confidence": 6.75, "description": "ACTION variable not validated: The environment variable ACTION is directly used in case branch selection without filtering illegal values. Attackers can set unconventional ACTION values to attempt activating unused code paths (such as symbolic link creation). Trigger condition: Controlling the ACTION variable of hotplug events.", "link_identifiers": ["ACTION"], "notes": "Potential attack surface expansion point. It is recommended to review the ACTION validation logic of all hot-plug scripts."}
{"name": "[SECRET_VALUE]", "file_path": "usr/sbin/jcpd", "location": "usr/sbin/jcpd:0x407ac0 (sym.jcpd_run)", "risk_score": 10.0, "confidence": 9.25, "description": "High-risk stack overflow vulnerability: The jcpd_run function uses a 40-byte stack buffer (auStack_78) to receive UDP data, but recvfrom allows a maximum input of 510 bytes. There is no length validation or boundary checking. An attacker can overwrite the return address and achieve RCE by sending a malicious packet exceeding 40 bytes. Trigger conditions: 1) Access UDP port 19541 2) Send constructed data exceeding 40 bytes 3) No authentication required. Actual impact: A single packet transmission can complete control flow hijacking, forming a complete attack chain (UDP input → buffer overflow → RCE).", "link_identifiers": ["recvfrom", "UDP", "auStack_78", "jcpd_run", "stack_overflow", "0x4C55"], "notes": "Port 19541 is bound in the main function (offset -0x7db4), verifying network input as the initial attack surface."}
{"name": "[SECRET_VALUE]", "file_path": "usr/sbin/jcpd", "location": "usr/sbin/jcpd:0x407ac0 (sym.jcpd_run)", "risk_score": 7.5, "confidence": 8.5, "description": "OOB Read Auxiliary Vulnerability: When receiving UDP packets ≥88 bytes, puVar17[0x2a] causes out-of-bounds access leading to stack memory leakage. Trigger condition: Sending specially crafted packets ≥88 bytes. Actual impact: Assists in bypassing ASLR, forming an exploit chain with stack overflow vulnerabilities to increase RCE success rate.", "link_identifiers": ["recvfrom", "OOB_read", "puVar17", "jcpd_run"]}
{"name": "[SECRET_VALUE]", "file_path": "usr/sbin/jcpd", "location": "usr/sbin/jcpd:0x00407f3c (jcpd_run)", "risk_score": 8.5, "confidence": 6.5, "description": "Dynamic Command Execution Risk: The registered command handler function is invoked via a function pointer (*puVar13[2]). Trigger Conditions: 1) Sending a network request matching the registered command. 2) Vulnerabilities exist in the handler function. Boundary Check: Only the command string is validated (strcmp), with no validation of handler function parameters. Security Impact: If the registered function (e.g., registered via jcpd_register_commands) contains vulnerabilities, it may lead to a secondary RCE chain.", "link_identifiers": ["jcpd_run", "puVar13", "jcpd_register_commands", "param_2", "param_3", "*(param_1 + 0x34)"], "notes": "Track the jcpd_register_commands call chain (recommend subsequent analysis of registration functions and processing modules)"}
{"name": "[SECRET_VALUE]", "file_path": "usr/sbin/jcpd", "location": "usr/sbin/jcpd:0x00407f3c (jcpd_run)", "risk_score": 5.0, "confidence": 5.0, "description": "Potential log injection risk: Unregistered command triggers logging (**(iVar20 + -0x7e78)), with externally controllable parameter (puStack_34). Trigger condition: Sending an unregistered command. Security impact: If the logging function contains a format string vulnerability, it may lead to information disclosure or memory corruption.", "link_identifiers": ["jcpd_run", "puStack_34", "*(iVar20 + -0x7e78)", "str.[SECRET_VALUE]"], "notes": "Verify whether the log function implementation (offset -0x7e78) contains a format string vulnerability"}
{"name": "path-traversal-hotplug-param1", "file_path": "sbin/hotplug", "location": "/sbin/hotplug:4", "risk_score": 8.5, "confidence": 8.0, "description": "Path Traversal Vulnerability: Attackers can execute .hotplug scripts in arbitrary directories by injecting path traversal sequences (such as '../') through controlling the $1 parameter. Trigger Conditions: 1) The attacker controls the value of the $1 parameter. 2) A malicious .hotplug script exists in the target directory. Missing Boundary Check: $1 is directly concatenated into the path (${DIR}/$1/) without any filtering. Security Impact: Combined with script write permissions, arbitrary command execution can be achieved. Exploitation Method: Forge $1='../../etc' to execute /etc/*.hotplug.", "link_identifiers": ["$1", "DIR", "${DIR}/$1/", "*.hotplug"], "notes": "Pending verification: 1) Whether the kernel hotplug mechanism exposes the $1 control interface (related to $1 findings in the knowledge base) 2) Write permissions for the /etc/hotplug.d directory (related to file write-type findings)"}
{"name": "unsafe-script-exec-hotplug", "file_path": "sbin/hotplug", "location": "/sbin/hotplug:6", "risk_score": 7.0, "confidence": 8.5, "description": "Unsafe Script Execution Mechanism: The .hotplug script is executed directly via `$I $1`, relying on the file's own shebang or executable permissions. If a malicious script lacks a shebang, the execution behavior is determined by the current shell, expanding the attack surface. Trigger Condition: An attacker implants a specially crafted .hotplug script. Boundary Check: Only verifies file executability (test -x), without validating content safety. Security Impact: Can combine with path traversal vulnerabilities to exploit different interpreter features for code execution escape.", "link_identifiers": ["test -x", "$I $1", ".hotplug"], "notes": "It is recommended to conduct a subsequent analysis of the specific implementation of scripts under the /etc/hotplug.d/ directory (related to the .hotplug findings), and verify whether the script write points are controllable."}
{"name": "[SECRET_VALUE]", "file_path": "sbin/hotplug", "location": "N/A", "risk_score": 7.5, "confidence": 7.0, "description": "Hotplug vulnerability attack surface remains unclear: The triggering of path traversal (path-traversal-hotplug-param1) and script execution (unsafe-script-exec-hotplug) vulnerabilities depends on the external controllability of the $1 parameter, but current analysis has not determined the source of $1. Known correlation points: 1) Kernel hotplug events may pass $1 through device attributes. 2) Userspace services (e.g., udev) may trigger hotplug calls. Security impact: If $1 can be controlled via network/USB interfaces, it forms a high-risk remote attack chain.", "link_identifiers": ["hotplug", "$1", "[HIDDEN]", "udev"], "notes": "analysis_status"}
{"name": "[SECRET_VALUE]", "file_path": "[SECRET_VALUE]", "location": "[SECRET_VALUE]:0x4046e0", "risk_score": 9.5, "confidence": 8.75, "description": "The sxstorage_mount function contains a stack buffer overflow vulnerability. Specific manifestation: strncpy copies the externally provided device name (param_1) to a 124-byte stack buffer (auStack_114) with a fixed copy length of 0x7c (124 bytes), failing to reserve space for the null terminator. Trigger condition: An attacker passes a device name ≥124 bytes via the `sxmount mount` command. Exploitation method: Carefully crafted overflow data can overwrite the return address to achieve arbitrary code execution. Constraint: Requires passing argv parameters through sxmount_main.", "code_snippet": "strncpy(auStack_114, param_1, 0x7c);", "link_identifiers": ["sxstorage_mount", "param_1", "auStack_114", "strncpy", "sxmount_main", "argv"], "notes": "Pollution source: command line argument argv[2]. Related command: sxmount. Verification suggestion: dynamic testing with excessively long device name input."}
{"name": "[SECRET_VALUE]", "file_path": "[SECRET_VALUE]", "location": "[SECRET_VALUE]:0x4053cc", "risk_score": 7.5, "confidence": 7.0, "description": "The sxipc_create function has a path traversal vulnerability. Specific manifestation: the external path parameter (param_1) is directly used for stat/open operations without sanitization. Trigger condition: an attacker injects a path containing '../' through the IPC call chain (such as sxstrg_get_storage_list). Exploitation method: combining with the path template '/tmp/sxipc/ipc-%s.sock' to access arbitrary files. Constraint: requires control over IPC communication parameters.", "code_snippet": "iVar2 = stat(param_1, &stack_buffer);", "link_identifiers": ["sxipc_create", "param_1", "stat", "open", "sxipc_create_clientipc", "sxstrg_get_storage_list"], "notes": "Verify the controllability of parameters for associated functions such as sxstrg_get_usb_storage_info."}
{"name": "[SECRET_VALUE]", "file_path": "[SECRET_VALUE]", "location": "[SECRET_VALUE]:0x403004", "risk_score": 9.0, "confidence": 7.75, "description": "The sxsambaconf function contains a format string vulnerability. Specific manifestation: Unvalidated USB device information is directly passed to snprintf. Trigger conditions: 1) Connecting a malicious USB device 2) Executing `[SECRET_VALUE] sxsambaconf`. Exploitation method: Forging device information to inject %n for arbitrary memory write. Constraints: Requires REDACTED_PASSWORD_PLACEHOLDER privileges to execute.", "code_snippet": "snprintf(auStack_e78, 1024, str_template, device_info);", "link_identifiers": ["sxsambaconf", "str.commentDevice__s____s_s__n", "auStack_150", "acStack_56c", "hotplugd", "snprintf"], "notes": "Attack Chain: USB Device → hotplugd → sxsambaconf. Verification of the hotplugd data transfer mechanism is required."}
{"name": "[SECRET_VALUE]", "file_path": "[SECRET_VALUE]", "location": "[SECRET_VALUE]:0x004034b0", "risk_score": 8.0, "confidence": 7.75, "description": "The sxnotify_main function has a compound file operation vulnerability. Specific manifestations: The user path (iStack_30) received by the -p parameter is directly passed to fopen, and fread reads the content into a 1024-byte stack buffer (auStack_837). Trigger condition: `[SECRET_VALUE] sxnotify -p [malicious path]`. Exploitation methods: a) Path traversal to read sensitive files b) Files >1024 bytes causing stack overflow. Constraints: Requires command-line parameter control.", "code_snippet": "[SECRET_VALUE]", "link_identifiers": ["sxnotify_main", "fopen", "fread", "auStack_837", "iStack_30", "-p"], "notes": "Verify the actual buffer size of auStack_837 (possibly <1024 bytes)."}
{"name": "[SECRET_VALUE]", "file_path": "[SECRET_VALUE]", "location": "[SECRET_VALUE]:0x403d24", "risk_score": 8.5, "confidence": 7.75, "description": "The sxstrg_get_storage_list function contains an IPC heap overflow vulnerability. Specific manifestation: recvfrom receives network data into a 208-byte stack buffer (acStack_f8), then copies it to a heap buffer using strcpy without validating data format or length. Trigger condition: sending IPC packets exceeding 208 bytes or lacking termination characters. Exploitation method: crafting malicious packets to achieve heap overflow. Constraint: requires access to the IPC communication interface.", "code_snippet": "recvfrom(sock, acStack_f8, 208, 0, ...);\nstrcpy(heap_buf, acStack_f8);", "link_identifiers": ["sxstrg_get_storage_list", "sxipc_receive", "recvfrom", "acStack_f8", "strcpy"], "notes": "Check whether the firmware exposes IPC to the network interface. Related function: sxstrg_get_usb_storage_info."}
{"name": "[SECRET_VALUE]", "file_path": "sbin/watchdog", "location": "sbin/watchdog:0x401648 (main)", "risk_score": 8.5, "confidence": 7.75, "description": "A high-risk stack buffer overflow vulnerability has been identified: In the main function at address 0x401648, sprintf uses the format string 'int=%d alive=%s realtime=%s', where the 'alive=%s' parameter originates from the global variable devname (obtained from the 'watchdog-device' entry in the configuration file /etc/watchdog.conf). The target buffer is located at sp+0x46 on the stack with 58 bytes of available space. Calculations indicate that when the length of devname exceeds 29 bytes (the fixed portion of the format string occupies 29 bytes), it will cause a stack buffer overflow. An attacker could manipulate the configuration file to set an excessively long 'watchdog-device' value, triggering the vulnerability upon watchdog service restart, potentially overwriting the return address to achieve arbitrary code execution (the process runs with REDACTED_PASSWORD_PLACEHOLDER privileges).", "code_snippet": "[SECRET_VALUE]", "link_identifiers": ["sprintf", "devname", "watchdog-device", "/etc/watchdog.conf", "main"], "notes": "The actual utilization requires the following conditions: 1) The /etc/watchdog.conf file must be writable; 2) The watchdog service must be restarted to trigger parsing. Recommendations: Check configuration file permissions; dynamically validate overflow length; confirm ASLR/PIE protection status."}
{"name": "[SECRET_VALUE]", "file_path": "sbin/watchdog", "location": "/etc/watchdog.conf:0", "risk_score": 7.0, "confidence": 8.25, "description": "Input processing chain identified: Untrusted input is passed through the 'watchdog-device' item in the configuration file /etc/watchdog.conf → stored in the global variable devname → passed to the dangerous function sprintf. Validation mechanism flaws: 1) No length restriction on configuration items (fgets only limits a single line to 80 bytes, but the 'watchdog-device' value can span multiple lines) 2) No regular expression validation or length check performed on the device path.", "link_identifiers": ["config_file", "fgets", "watchdog-device", "devname", "sprintf"], "notes": "Associated Exploit Chain: File Write Vulnerability/CGI Vulnerability → Modify Configuration File → Trigger Watchdog Overflow"}
{"name": "logic_risk-watchdog_priority", "file_path": "sbin/watchdog", "location": "/etc/watchdog.conf:0", "risk_score": 5.0, "confidence": 5.25, "description": "Potential logical risks identified: 1) The 'priority' configuration item controls sched_setscheduler calls, where incorrect settings may lead to DoS. 2) The 'watchdog-device' path is used for open operations without validation, potentially enabling arbitrary file access. However, constraints exist: device paths must comply with kernel requirements, and priority configuration requires REDACTED_PASSWORD_PLACEHOLDER privileges.", "link_identifiers": ["priority", "sched_setscheduler", "open", "watchdog-device"]}
{"name": "[SECRET_VALUE]", "file_path": "sbin/udhcpc", "location": "udhcpc:0x40577c sym.add_simple_option", "risk_score": 8.0, "confidence": 7.25, "description": "DHCP option handling has a memory leak vulnerability: When processing non-0x0f type options, the sym.add_simple_option function forcibly converts the externally passed param_3 pointer into a 4-byte local variable address, and then sym.add_option_string uses *(param_2+1)+2 as the length parameter to perform memory copying. If an attacker controls the option length field in the DHCP packet to set an excessively large value, it can lead to out-of-bounds reading of process memory data. Trigger conditions: 1) The attacker sends a crafted DHCP packet, 2) The packet contains a non-0x0f type option, 3) The option length field is maliciously set. Successful exploitation could leak sensitive information such as authentication credentials.", "code_snippet": "if (param_2 != '\\x0f') {\n    param_3 = &uStack_20;\n}\n(**(iVar6 + -0x7e28))(auStack_66, param_3);", "link_identifiers": ["sym.add_simple_option", "sym.add_option_string", "param_2", "param_3", "uStack_20", "*(param_2+1)+2", "DHCP option"], "notes": "Verification required: 1) Whether param_3 originates from network input 2) DHCP message parsing entry function 3) Actual memory layout. Related keywords: sym.receivePacket (DHCP entry)"}
{"name": "[SECRET_VALUE]", "file_path": "sbin/udhcpc", "location": "udhcpc:0x404000 sym.run_script", "risk_score": 8.5, "confidence": 8.25, "description": "[SECRET_VALUE]", "code_snippet": "(**(iVar22 + -0x7f5c))(piVar8+iVar19, \"ip\", param_1+0x10);\n(**(iVar22 + -0x7e48))(uVar9,uVar9,param_2,0,env_array);", "link_identifiers": ["run_script", "execle", "environ", "client_config.script", "ncc_sync.script", "DHCP response", "interface", "ip", "PATH"], "notes": "[SECRET_VALUE]"}
{"name": "[SECRET_VALUE]", "file_path": "usr/sbin/hotplug_kill.sh", "location": "hotplug_kill.sh:11-14", "risk_score": 6.5, "confidence": 6.0, "description": "When $1='stop', unconditionally execute killall smbd to terminate the Samba service. Trigger conditions: 1) The hotplugd daemon handles storage device unmount events 2) The system has dirty pages (DIRTY=1) or ignores dirty pages (DIRTY=0). Attack path: An attacker forcibly creates dirty pages on a storage device and removes it through physical operation → triggers hotplugd to call the script → passes the 'stop' parameter → terminates critical services. Actual impact: Denial of Service attack (CWE-400), but exploitation requires physical access to the device and depends on dirty page status.", "code_snippet": "\"stop\" )\n#\tif [ $DIRTY = 1 ]; then\n\t\tkillall smbd", "link_identifiers": ["$1", "killall", "smbd", "hotplugd", "com_umount", "/proc/meminfo", "dirty page", "DIRTY"], "notes": "Follow-up recommendations: 1) Analyze whether the dirty page checking logic of hotplugd can be compromised 2) Check if network interfaces can simulate device removal events. Related findings: Parameter validation flaws (see [SECRET_VALUE]) may lower the attack threshold. Limitations: Physical access requirements reduce exploitability."}
{"name": "[SECRET_VALUE]", "file_path": "usr/sbin/hotplug_kill.sh", "location": "hotplug_kill.sh:5,8,13", "risk_score": 3.0, "confidence": 5.5, "description": "The parameter validation mechanism has design flaws: The DIRTY parameter ($2) is checked in the 'start' branch but no actual operation is performed, while the DIRTY check in the 'stop' branch is commented out. The absence of boundary checks renders the parameter validation logic ineffective. Although no direct vulnerability currently exists, this exposes the overall fragility of the hotplug mechanism and could potentially be exploited to expand the attack surface.", "code_snippet": "DIRTY=$2\n...\nif [ $DIRTY = 1 ]; then", "link_identifiers": ["DIRTY", "$2", "hotplugd", "boundary_check"], "notes": "Potential risks of the commented code should be analyzed in conjunction with firmware change history. This defect, combined with the service termination vulnerability ([SECRET_VALUE]), forms the foundation of an attack chain."}
{"name": "[SECRET_VALUE]", "file_path": "sbin/mini_httpd", "location": "[SECRET_VALUE]", "risk_score": 9.5, "confidence": 8.5, "description": "[SECRET_VALUE]", "link_identifiers": ["api_name=UploadFile", "filename", "path", "/var/tmp/usb/%s", "Cannot open file to save", "upload_source", "volid"], "notes": "[SECRET_VALUE]"}
{"name": "[SECRET_VALUE]", "file_path": "sbin/mini_httpd", "location": "multiple_components", "risk_score": 10.0, "confidence": 8.25, "description": "Full attack chain: Attacker uploads malicious file via HTTP API (exploiting path traversal vulnerability) → Overwrites system files to trigger firmware upgrade process → Executes fw_upgrade via command injection vulnerability → Decompresses malicious archive to achieve secondary file writing → Contaminates startup script → Achieves persistent RCE after device reboot. Critical components: 1) File upload vulnerability provides initial write capability 2) fw_upgrade vulnerability enables filesystem penetration 3) mydlink-watch-dog vulnerability delivers final command execution. Trigger conditions: No physical access required, pure network attack achieves complete device control.", "link_identifiers": ["api_name=UploadFile", "fw_upgrade", "[SECRET_VALUE]", "mydlink-watch-dog.sh", "tar", "reboot", "network_input"], "notes": "Prerequisite verification: 1) The /mydlink/ directory permissions must allow write access by the web user 2) The invocation mechanism of fw_upgrade must be exposed to the network 3) The device reboot cycle must fall within the attack window. Related vulnerabilities: [SECRET_VALUE] + [SECRET_VALUE] + [SECRET_VALUE] + [SECRET_VALUE]"}
{"name": "[SECRET_VALUE]", "file_path": "sbin/smbd", "location": "smbd:0x4ba470 (sym.reply_sesssetup_and_X)", "risk_score": 7.0, "confidence": 6.75, "description": "[SECRET_VALUE]", "link_identifiers": ["parse_negTokenTarg", "reply_sesssetup_and_X", "SPNEGO", "NTLMSSP", "recvfrom", "(**(iVar6 + -0x64dc))", "aiStack_510"], "notes": "Follow-up recommendations: 1) Reverse engineer the validation function corresponding to the 0x64dc offset 2) Test the parsing behavior of malformed SPNEGO tokens; Related findings: The knowledge base contains multiple vulnerabilities caused by receiving unverified network input via recvfrom (such as JCPD stack overflow, dnsmasq heap overflow, etc.)"}
{"name": "[SECRET_VALUE]", "file_path": "sbin/dnsmasq", "location": "dnsmasq:0x40a240 (recv_dhcp_packet)", "risk_score": 8.5, "confidence": 5.5, "description": "In the DHCP packet processing function recv_dhcp_packet(), the content of option 43 field is concatenated into shell commands (executed via my_system) without sufficient validation, posing a command injection risk. Trigger condition: Requires lease_update_script feature to be enabled and client sending malicious option fields. Potential impact: RCE (Remote Code Execution). Due to missing symbol table, the default state of lease_update_script and validation mechanism of calling path cannot be confirmed.", "link_identifiers": ["recv_dhcp_packet", "option_43", "lease_update_script", "my_system"], "notes": "[SECRET_VALUE]"}
{"name": "[SECRET_VALUE]", "file_path": "sbin/dnsmasq", "location": "sbin/dnsmasq:0x40df70 sym.reply_query", "risk_score": 7.0, "confidence": 7.75, "description": "In the DNS request handling function reply_query(), after receiving network data via recvfrom, only the minimum length (>11 bytes) is verified without checking the maximum length limit. The buffer pointer and size are derived from offsets 0x88 and 0x84 in the global configuration structure. Potential impact: buffer overflow. Since the initialization of the configuration structure cannot be traced, it cannot be confirmed whether the buffer size is fixed or influenced by external configurations.", "code_snippet": "if ((0xb < iVar2) && ((*puVar10 >> 0x17 & 1) != 0)) {...}", "link_identifiers": ["sym.reply_query", "sym.imp.recvfrom", "*(*piVar13 + 0x88)", "*(*piVar13 + 0x84)"], "notes": "Dynamic analysis is required to confirm: 1) The initialization source of the global configuration structure 2) The actual allocated buffer size 3) Whether it is affected by the /etc/dnsmasq.conf configuration"}
{"name": "[SECRET_VALUE]", "file_path": "usr/sbin/hotplugd", "location": "hotplugd:0x004025e0 (main)", "risk_score": 7.0, "confidence": 7.5, "description": "The DEVPATH environment variable handling poses a risk: The program sets DEVPATH (value sourced from stack variables) via function pointers as a hotplug core parameter passed by the kernel for device paths. Without implemented boundary checks or filtering logic, attackers controlling this variable through malicious USB devices may cause path traversal or command injection (requires validation by subsequent components). Trigger condition: Occurs during device hotplug events. Security impact: Medium-high severity (7.0), potentially serving as the initial input point for multi-stage attacks.", "code_snippet": "", "link_identifiers": ["DEVPATH", "setenv", "auStack_1594", "**(iVar4 + -0x7e50)"], "notes": "Track the usage of DEVPATH in hotplug scripts via KBQuery"}
{"name": "[SECRET_VALUE]", "file_path": "usr/sbin/hotplugd", "location": "hotplugd:0x004024c0 (main)", "risk_score": 6.0, "confidence": 6.0, "description": "Dynamic configuration file path construction risk: The program uses functions like snprintf to dynamically construct paths such as '/etc/silex_nas.conf' without implementing path sanitization. Attackers could potentially alter program behavior by tampering with NVRAM or injecting directory traversal sequences. Trigger condition: Configuration loading during program initialization. Security impact: Medium severity (6.0), with actual risk dependent on file write permissions and content validation mechanisms.", "code_snippet": "", "link_identifiers": ["/etc/silex_nas.conf", "/etc/sysconfig", "system.conf", "snprintf", "**(iVar4 + -0x7ce8)"], "notes": "It is recommended to check the ACL permissions of the target file and the content verification logic"}
{"name": "[SECRET_VALUE]", "file_path": "sbin/bulkagent", "location": "bulkagent:0x4023d4 update_HWinfo", "risk_score": 9.8, "confidence": 9.25, "description": "High-risk Remote Command Injection Vulnerability (TLV_0x8001): An attacker sends a TLV network packet of type 0x8001, where the payload is directly passed as a parameter to 'sprintf(auStack_48, \"uenv set HW_BOARD_MODEL %s\", param_2)'. Due to the lack of length checks (the fixed string occupies 25 bytes, leaving only 39 bytes in the 64-byte buffer) and content filtering (meta-characters such as ;|$ are not sanitized), this leads to: 1) Buffer overflow (when payload exceeds 39 bytes) 2) Command injection (arbitrary command concatenation if the payload contains semicolons). Trigger condition: A single unauthenticated network packet. Actual impact: Full device control (risk score 9.8).", "code_snippet": "sprintf(auStack_48, \"uenv set HW_BOARD_MODEL %s\", param_2);\nsystem(auStack_48);", "link_identifiers": ["TLV_0x8001", "sym.update_HWinfo", "param_2", "sprintf", "system", "auStack_48", "HW_BOARD_MODEL"], "notes": "Complete attack chain: network input → sprintf concatenation → system execution. Firmware stack protection status needs to be confirmed."}
{"name": "[SECRET_VALUE]", "file_path": "sbin/bulkagent", "location": "bulkagent:0x401f58 (main)", "risk_score": 10.0, "confidence": 8.5, "description": "Firmware Corruption Vulnerability (Service Termination Logic): When the main loop exits (e.g., due to network disconnection), it unconditionally executes 'mtd_write erase /dev/mtd4'. Trigger Conditions: Attacker sends a TCP RST packet or exhausts service resources. Actual Impact: Critical partition erasure leading to permanent device bricking. Risk Score 10.0 due to: 1) No recovery mechanism 2) Reliable trigger 3) No authentication required.", "link_identifiers": ["main", "system", "mtd_write erase /dev/mtd4", "/dev/mtd4", "0x401f58"], "notes": "Confirm the functionality of the /dev/mtd4 partition (may contain bootloader)"}
{"name": "unauth_reboot-UDP8004", "file_path": "sbin/bulkagent", "location": "[SECRET_VALUE]", "risk_score": 9.0, "confidence": 9.75, "description": "Unauthorized Reboot Vulnerability (UDP 0x8004): Sending a single-byte packet of type 0x8004 to UDP port 56831 sets the global flag g_reboot_flag=1, triggering system('reboot'). Missing boundary check: No validation of packet length/source. Trigger condition: Single spoofed UDP packet. Actual impact: Denial of Service (forced device reboot), exploitation probability 10.0.", "link_identifiers": ["g_reboot_flag", "0x8004", "UDP 56831", "0x0040209c", "reboot"], "notes": "Complete Attack Chain: Network Input → Tainted Mark → Dangerous Operation"}
{"name": "[SECRET_VALUE]", "file_path": "sbin/bulkagent", "location": "main @ 0x401dec", "risk_score": 9.0, "confidence": 8.25, "description": "Verification Failure Command Injection (TLV_0x8106): When the firmware upgrade package verification fails, the command 'rm %s%s' is constructed using unfiltered network data. The filename (auStack_4e0) is directly derived from attacker-controlled packets without filtering special characters. Trigger condition: Send a TLV packet of type 0x8106 with an incorrect checksum. Actual impact: Arbitrary command execution (Risk 9.0).", "link_identifiers": ["auStack_4e0", "rm %s%s", "TLV:0x8106", "system", "checksum_ERROR"], "notes": "Verify whether pcVar19 points to the system function"}
{"name": "[SECRET_VALUE]", "file_path": "bin/dhcp6c", "location": "dhcp6c:0x41c5ec (sip_processing)", "risk_score": 9.5, "confidence": 8.75, "description": "High-risk Remote Command Execution Vulnerability Chain: Arbitrary Command Injection Achieved by Controlling SIP Server Address (new_sip_servers) via DHCPv6 Response. Trigger Conditions: 1) Attacker sends malicious DHCPv6 response; 2) Device runs dhcp6c client. Trigger Steps: a) Forge SIP server address containing command separator (e.g., `;reboot`) b) Address converted via duid_to_str and concatenated into environment variables c) execve executes /etc/dhcp6c_script with polluted environment variables, triggering command execution. Boundary Check: Complete lack of string filtering and length validation. Security Impact: Direct device control acquisition (requires script execution permissions), high exploitation probability.", "code_snippet": "uVar2 = duid_to_str(piVar9+3,0);\nsprintf(buffer,\"new_sip_servers=%s\",uVar2);\nexecve(script_path,args,piStack_2c);", "link_identifiers": ["sym.client6_script", "new_sip_servers", "duid_to_str", "execve", "/etc/dhcp6c_script", "sprintf", "param_4"], "notes": "Associated with CVE-2023-24615; shares the new_sip_servers processing point with the fourth discovery"}
{"name": "[SECRET_VALUE]", "file_path": "bin/dhcp6c", "location": "dhcp6c:client6_script", "risk_score": 9.0, "confidence": 8.5, "description": "OPTION_AFTR_NAME Stack Overflow Full Attack Chain: Triggering client6_script stack buffer overflow via DHCPv6 response. Trigger conditions: 1) Attacker controls DHCPv6 response; 2) Contains an aftr_name option exceeding 256 bytes. Trigger steps: a) Data stored in auStack_1a0 buffer after packet parsing b) Copy operation (**(iStack_1b8 + -0x7bc0)) causes out-of-bounds write c) Overwrites return address to control EIP. Boundary check: No length validation. Security impact: Enables arbitrary code execution, extremely high risk level. Exploit constraints: Requires bypassing stack protection mechanisms (e.g., ASLR), medium complexity for MIPS architecture exploitation.", "code_snippet": "(**(iStack_1b8 + -0x7bc0))(puVar11,uVar2,...,uVar7);", "link_identifiers": ["client6_script", "OPTION_AFTR_NAME", "aftr_name", "auStack_1a0", "iStack_30", "uVar7", "recvmsg"], "notes": "Requires coordination with ROP chain development; dynamic testing of crash offset is recommended."}
{"name": "[SECRET_VALUE]", "file_path": "bin/dhcp6c", "location": "dhcp6c:0x0040f778 (get_duid)", "risk_score": 8.5, "confidence": 7.75, "description": "DUID File Handling Compound Vulnerability Chain: Heap memory corruption triggered by manipulating the /var/dhcp6c_duid file. Trigger conditions: 1) Attacker writes malformed DUID file (first 2 bytes < 10); 2) dhcp6c service restarts. Trigger steps: a) File length uStack_130 read without validation b) Integer underflow (uStack_130-10) causes out-of-bounds copy operation c) Heap overflow overwrites adjacent memory structures. Boundary checks: Missing file length validation and integer underflow protection. Security impact: Controlled heap overflow enables code execution. Exploitation method: Combined with web interface file upload for persistent attacks.", "code_snippet": "(**(iStack_138 + -0x7c34))(puVar3 + 10, auStack_128, uStack_130 - 10);", "link_identifiers": ["get_duid", "uStack_130", "puVar3", "/var/dhcp6c_duid", "fread", "iStack_138 + -0x7c34", "param_2"], "notes": "Associated Attack Surface: Web File Upload Interface"}
{"name": "[SECRET_VALUE]", "file_path": "bin/dhcp6c", "location": "dhcp6c:0x41c5ec (sip_processing)", "risk_score": 8.0, "confidence": 7.25, "description": "[SECRET_VALUE]", "link_identifiers": ["new_sip_servers", "iVar13", "0x4c", "**(iStack_1b8 + -0x7e44)", "puVar18", "malloc"], "notes": "Share the processing point of new_sip_servers with the first discovery; heap fuzzing verification required."}
{"name": "vuln-oob_read-sym.[SECRET_VALUE]", "file_path": "bin/miniupnpd", "location": "bin/miniupnpd:0x411a08 (sym.[SECRET_VALUE])", "risk_score": 9.0, "confidence": 8.75, "description": "High-risk OOB Read Vulnerability: When processing the SOAPAction header, if the header does not contain a '#' delimiter and has an abnormal length, the length calculation iStack_10=param_3-(iStack_20-param_2) produces a negative value. This negative value is directly passed to syslog(\"%.*s\"), resulting in an out-of-bounds memory read. Trigger condition: Sending a malformed SOAPAction header (without # and with a length that causes iStack_20>param_2+param_3). Actual impact: 1) Sensitive information leakage (reading process memory) 2) Service crash (DoS) 3) CVSSv3 estimated score of 8.2. Exploit chain: Network request → recv() buffer → fcn.00408b04 parsing → sym.[SECRET_VALUE] processing → dangerous syslog call.", "code_snippet": "(**(iStack_28 + -0x7e8c))(5,*(iStack_28 + -0x7fe4) + 0x3ecc,iStack_10,iStack_20); // syslog[HIDDEN]", "link_identifiers": ["sym.[SECRET_VALUE]", "SOAPAction", "iStack_10", "iStack_20", "param_2", "param_3", "syslog", "SoapMethod: Unknown: %.*s", "Content-Length", "upnp", "nvram_get", "nvram_set"], "notes": "Verification in actual firmware environment required: 1) Whether syslog implementation is restricted 2) Specific behavior of negative value processing 3) Scope of information leakage. Related attack surface record: [SECRET_VALUE]."}
{"name": "risk-stack_overflow-sym.iptc_init", "file_path": "bin/miniupnpd", "location": "bin/miniupnpd:0x42c67c (sym.iptc_init)", "risk_score": 2.0, "confidence": 3.0, "description": "Potential stack overflow risk: The strcpy operation in the sym.iptc_init function copies the external parameter arg_b8h to a 152-byte stack buffer. Trigger condition: Attacker controls arg_b8h and supplies data exceeding 152 bytes. However, analysis is hindered by: 1) Failure to trace the call chain 2) Inability to confirm whether arg_b8h is controlled by network input. Current evidence is insufficient, thus not classified as a valid vulnerability for now.", "link_identifiers": ["sym.iptc_init", "arg_b8h", "strcpy", "sp+0x20"], "notes": "Follow-up recommendations: 1) Manual reverse call chain analysis 2) Check supporting scripts/config files. Note: The keyword 'sp+0x20' is related to the mii_mgr vulnerability ([SECRET_VALUE]) but appears in a different context."}
{"name": "[SECRET_VALUE]", "file_path": "sbin/mdb", "location": "sbin/mdb:0x400df8", "risk_score": 9.5, "confidence": 8.5, "description": "Confirmed high-risk remote code execution attack vector: The attacker controls the mdb connection to a malicious server through command-line parameters (e.g., `mdb --connect 192.168.1.100`). Once the connection is established, the malicious server can trigger a stack buffer overflow in ncc_socket_recv by sending >4 bytes of data. The overflow occurs at address 0x400df8 in the main function, where a fixed 4-byte stack buffer (auStack_14) is used but allows receiving 260 bytes of data. Successful exploitation can overwrite the return address to achieve arbitrary code execution. Trigger conditions: 1) Attacker can control mdb execution parameters; 2) Network access to the malicious server is available. Actual impact: Combined with the exposure of firmware network services, this command execution could potentially be indirectly triggered through web interfaces/scripts.", "link_identifiers": ["ncc_socket_recv", "auStack_14", "main", "sp+0x3c", "ncc_socket_connect", "param_2", "iStack_20"], "notes": "Chain completeness verification: 1) Confirmation of input point (command line arguments) controllability 2) Clarity of propagation path (network connection) 3) Validation of dangerous operations (stack overflow). To be supplemented: 1) Check NX/DEP protection 2) Search for ROP chain 3) Test actual crash POC"}
{"name": "[SECRET_VALUE]", "file_path": "sbin/mdb", "location": "sbin/mdb", "risk_score": 3.0, "confidence": 5.0, "description": "Medium-risk Parameter Injection Path Downgrade: The value parameter of the mdb set command is passed to downstream functions without thorough validation. However, the critical processing function ChkString(0x400984) only performs null checks and does not implement buffer operations. No dangerous function calls such as strcpy were identified. Current evidence indicates that this path cannot directly lead to memory corruption, with risks limited to the level of logical vulnerabilities.", "link_identifiers": ["mdb set", "value", "ChkString", "obj.StrMapMdbAct"]}
{"name": "[SECRET_VALUE]", "file_path": "sbin/mdb", "location": "sbin/mdb_test.sh", "risk_score": 4.0, "confidence": 3.5, "description": "[SECRET_VALUE]", "link_identifiers": ["file_permission", "mdb_test.sh", "[SECRET_VALUE]", "/etc/init.d"], "notes": "[SECRET_VALUE]"}
{"name": "[SECRET_VALUE]", "file_path": "bin/dhcp6c", "location": "[HIDDEN]", "risk_score": 7.0, "confidence": 7.0, "description": "Critical Attack Chain Gap: The exploitation of the heap overflow vulnerability in DUID file processing ([SECRET_VALUE]) relies on the attacker's ability to write to the /var/dhcp6c_duid file. However, the current knowledge base does not identify any file upload or write vulnerabilities that could achieve this objective. A complete attack path requires: 1) the presence of a web interface or network service permitting writes to the target file; 2) controllable write content; and 3) file permissions allowing the dhcp6c process to read the file. Security Impact: The absence of an initial write vulnerability prevents remote triggering of this heap overflow.", "link_identifiers": ["/var/dhcp6c_duid", "file_write", "web_upload", "attack_chain"], "notes": "analysis_gap\n\nRelated to [SECRET_VALUE]; subsequent analysis should prioritize identifying file write vulnerabilities"}
