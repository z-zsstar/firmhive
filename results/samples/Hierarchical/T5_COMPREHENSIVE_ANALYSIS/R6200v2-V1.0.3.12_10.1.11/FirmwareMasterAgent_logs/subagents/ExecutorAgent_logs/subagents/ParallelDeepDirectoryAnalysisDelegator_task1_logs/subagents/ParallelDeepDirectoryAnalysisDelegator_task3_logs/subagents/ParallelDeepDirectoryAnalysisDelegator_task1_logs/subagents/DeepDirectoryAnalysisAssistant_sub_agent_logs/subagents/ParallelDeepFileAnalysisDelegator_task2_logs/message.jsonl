{"role": "system", "content": "\n你是一个专门的文件分析代理。你的任务是深入分析当前指定的文件并提供详细的、有证据支持的分析结果。请专注于当前焦点文件或当前特定任务。当你认为你的分析已完成或无法进一步推进时，继续下一个任务或结束任务。\n\n**工作原则：**\n-   **基于证据**：所有分析都必须基于从工具获取的实际证据；禁止无根据的猜测。\n-   **结果验证**：批判性地评估委托子任务（例如函数分析）返回的结果，并始终验证其真实性和可靠性，以防止虚假结果污染最终结论。\n\n**工作流程：**\n1.  **理解任务**：专注于当前分析文件的特定任务，并充分参考用户的整体要求。注意，如果任务与当前分析焦点不匹配，你需要停止分析并及时向用户反馈。不要执行跨目录分析。\n2.  **执行分析**：确保你的分析有足够的深度。对于复杂任务，将其分解为多个具有明确目标和步骤的子任务，并合理地按顺序或并行调用分析助手或工具。选择最合适的工具或助手来获取证据。对于复杂的调用链，使用 `FunctionAnalysisDelegator` 并提供详细的污点信息和上下文。谨慎使用某些工具，避免结果过长导致分析失败，例如 `strings` 工具。\n3.  **完成并报告**：完成分析后，使用 `finish` 动作并严格按照以下格式提交最终报告。\n\n**最终响应要求**：\n*   回答与当前任务相关的所有问题，你的响应必须有完整的证据。不要遗漏任何有效信息。\n*   用具体证据支持所有发现，并如实报告任何证据不足或困难。\n\n每个发现必须包含以下**核心字段**：\n- **`description`**：对发现的详细描述，必须包括：\n* **完整且可验证的攻击链**：从攻击者可控源到危险汇聚点的具体污点传播路径，每一步都有证据支持。\n* **精确的触发条件**：到达易受攻击代码路径所需的确切条件。\n* **可利用性分析**：清楚说明*为什么*这是可利用的（例如，缺少清理、逻辑缺陷）。\n\n- **`link_identifiers`**：特定的 NVRAM 或 ENV 变量名、文件路径、IPC 套接字路径和自定义共享函数符号。\n- **`location`**：代码汇聚点或关键逻辑的精确位置。\n- **`code_snippet`**：返回完整的相关代码片段，展示漏洞。\n- **`risk_score`**：风险评分（0.0-10.0）。**只有具有经过验证的完整攻击链和明确安全影响的发现才能得分 >= 7.0。**\n- **`confidence`**：对发现准确性和可利用性分析的置信度（0.0-10.0）。**得分 >= 8.0 需要从源到汇聚点的完整、可验证的攻击链。**\n- **`notes`**：供人工分析师参考。包括：需要进一步验证的假设、相关文件或函数、后续分析的建议方向。\n\n#### 关键原则：\n- **可利用性是必须的**：只报告实际可利用的发现。理论上的弱点或不良实践（如使用 `strcpy`）是不够的，除非你能证明它们会导致漏洞。\n- **需要完整路径**：部分或推测性路径（\"如果...可能存在漏洞\"）是不可接受的。你必须提供完整、经过验证的链。\n- **证据优于推测**：所有声明都必须由工具的证据支持。如果缺少证据，请明确说明。不要猜测。\n\n*   在 'action' 字段中选择工具或 'finish'，并在 'action_input' 中提供参数或最终响应。\n\n\n当前可用工具：\n- Name: get_context_info\n  Description: 获取当前分析任务的上下文信息，例如正在分析的文件或目录。\n  Parameters (JSON Schema format):\n{\n  \"type\": \"object\",\n  \"properties\": {},\n  \"required\": []\n}\n\n- Name: execute_shell\n  Description: 在当前目录（lzo）中执行只读 shell 命令。\n    **警告：** 此工具严格限制在当前工作目录内。所有文件操作不得引用父目录或任何其他目录。建议使用 `file` 工具在当前目录内进行探索和识别。\n    **注意：** 所有命令都在当前目录中执行。所有路径参数应相对于当前目录。禁止包含 '/' 或 '..' 的路径。\n    支持的命令：file, find, strings, grep, head, tail, readelf, cat, sort, ls。\n    禁止输出重定向（'>'、'>>'）、命令链接和目录更改。\n  Parameters (JSON Schema format):\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"command\": {\n      \"type\": \"string\",\n      \"description\": \"要执行的 shell 命令。命令将在 'lzo' 目录中执行。命令中的所有路径应相对于此目录。\"\n    }\n  },\n  \"required\": [\n    \"command\"\n  ]\n}\n\n- Name: r2\n  Description: \n    与 Radare2 交互式会话交互以分析当前二进制文件。注意，此工具会自动为当前分析焦点文件建立并维护 r2 会话。\n\n    主要功能：\n    - 发送 Radare2 命令并获取输出\n    - 会话状态在调用之间保持（对于同一文件）\n    - 支持使用 r2ghidra 插件进行反编译：\n    * 使用 `pdg` 命令反编译函数\n    * 提供类似 C 的伪代码输出\n    \n    \n  Parameters (JSON Schema format):\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"command\": {\n      \"type\": \"string\",\n      \"description\": \"Command to interact directly with Radare2\"\n    }\n  },\n  \"required\": [\n    \"command\"\n  ]\n}\n\n- Name: TaskDelegator\n  Description: 助手可以与文件交互以执行特定的文件分析任务。使用场景：当你需要单步任务的分析结果后再决定下一个分析任务时。\n  Parameters (JSON Schema format):\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"task\": {\n      \"type\": \"string\",\n      \"description\": \"要执行的子任务的详细描述。请指定分析对象。\"\n    },\n    \"run_in_background\": {\n      \"type\": \"boolean\",\n      \"description\": \"是否在后台运行此任务。\",\n      \"default\": false\n    }\n  },\n  \"required\": [\n    \"task\"\n  ]\n}\n\n- Name: ParallelTaskDelegator\n  Description: 每个助手可以与文件交互，并行执行多个文件分析子任务。使用场景：1. 当复杂任务需要分解为多个独立的子任务时。2. 子任务之间没有严格的执行顺序依赖。3. 建议对大规模和复杂任务并行执行多个子任务，提高分析效率。\n  Parameters (JSON Schema format):\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"tasks\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\",\n        \"description\": \"要执行的子任务的详细描述。每个任务描述都是独立的，应指定分析对象。\"\n      },\n      \"description\": \"要分配给子代理并行执行的独立任务描述列表。\"\n    },\n    \"run_in_background\": {\n      \"type\": \"boolean\",\n      \"description\": \"是否在后台运行此任务。\",\n      \"default\": false\n    }\n  },\n  \"required\": [\n    \"tasks\"\n  ]\n}\n\n**后台执行和任务调度**：\n- 在 action_input 中设置 `run_in_background: true` 可异步运行任务。\n- 后台任务完成时，结果会自动注入。\n- 当需要后台结果才能继续时，使用 'wait' 动作。\n\n调度策略（避免遗漏和重复，最大化效率）：\n1. 识别独立任务，如果不立即需要结果，在后台启动它们。\n2. 在后台任务并行运行时继续其他工作。\n3. 当依赖任务需要后台结果时使用 'wait'。\n4. 在脑海中跟踪所有启动的后台任务以避免重复。\n5. 在 'finish' 之前，确保所有后台任务都已完成并整合结果。\n\n响应格式要求：\n\n你必须以严格的 JSON 格式响应。不要在 JSON 对象之外添加任何其他文本。\n不要使用 markdown 格式（如 ```json）。直接输出单个 JSON 对象。\n\n响应必须是符合以下模式的有效 JSON 对象：\n\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"thought\": {\n      \"type\": \"string\",\n      \"description\": \"在这里逐步思考。分析当前情况、目标、可用工具和对话历史。决定是调用工具还是使用 'finish' 动作提供最终答案。\"\n    },\n    \"action\": {\n      \"type\": \"string\",\n      \"description\": \"选择下一个动作。必须是可用工具名称之一、'wait' 或 'finish'。\"\n    },\n    \"action_input\": {\n      \"oneOf\": [\n        {\n          \"type\": \"object\"\n        },\n        {\n          \"type\": \"string\"\n        }\n      ],\n      \"description\": \"工具调用的参数或最终响应。如果 action 是工具名称，提供该工具所需的参数（通常是对象）；如果是 'finish'，使用 'final_response' 作为 action_input 的键提供最终响应（通常是包含字符串的对象）。\"\n    },\n    \"status\": {\n      \"type\": \"string\",\n      \"enum\": [\n        \"continue\",\n        \"complete\"\n      ],\n      \"description\": \"必须是 'continue'（如果选择了工具）或 'complete'（如果选择了 'finish'）。\"\n    }\n  },\n  \"required\": [\n    \"thought\",\n    \"action\",\n    \"action_input\",\n    \"status\"\n  ]\n}\n\n"}
{"role": "user", "content": "用户初始请求：\n对固件进行全面的安全分析。核心目标是识别并报告从不可信输入点到危险操作的完整、可行且**实际可利用**的攻击链。分析必须关注具有明确可利用性证据的漏洞，而不是理论缺陷。\n1. **输入点识别**：识别所有潜在的不可信输入源，包括但不限于网络接口（HTTP、API、套接字）、IPC、NVRAM/环境变量等。\n2. **数据流追踪**：追踪不可信数据在系统内的传播路径，并分析是否存在缺少适当验证、过滤或边界检查的过程。\n3. **组件交互分析**：关注组件之间的交互（例如 `nvram` get/set、IPC 通信），观察外部可控数据如何在系统内流动并影响其他组件。\n4. **利用链评估**：对于发现的每个潜在攻击链，评估其触发条件、重现步骤以及成功利用的概率。**只有找到完整且可验证的链时，发现才是有效的。**\n5. **最终输出**：报告应清楚地描述攻击者最有可能成功利用的攻击路径和安全漏洞。\n\n当前任务：\n专注于分析文件 'lzodefs.h' 的内容，寻找可利用的信息和线索。"}
{"role": "assistant", "content": "{\n  \"thought\": \"当前任务是分析文件 'lzodefs.h'，寻找可利用的信息和线索。'lzodefs.h' 可能是一个头文件，定义宏、常量或函数原型，可能与 LZO 压缩库相关。为了基于证据分析，我需要先使用 execute_shell 工具读取文件内容，然后检查是否有任何安全相关的定义，如缓冲区操作、宏可能导致的漏洞等。由于是头文件，它可能不直接包含完整的攻击链，但我必须验证是否有线索。\",\n  \"action\": \"execute_shell\",\n  \"action_input\": {\n    \"command\": \"cat lzodefs.h\"\n  },\n  \"status\": \"continue\"\n}"}
{"role": "user", "content": "工具：execute_shell\n参数：{\"command\": \"cat lzodefs.h\"}\n结果：\n 退出代码：0\n标准输出：\n/* lzodefs.h -- architecture, OS and compiler specific defines\n\n   This file is part of the LZO real-time data compression library.\n\n   Copyright (C) 2011 Markus Franz Xaver Johannes Oberhumer\n   Copyright (C) 2010 Markus Franz Xaver Johannes Oberhumer\n   Copyright (C) 2009 Markus Franz Xaver Johannes Oberhumer\n   Copyright (C) 2008 Markus Franz Xaver Johannes Oberhumer\n   Copyright (C) 2007 Markus Franz Xaver Johannes Oberhumer\n   Copyright (C) 2006 Markus Franz Xaver Johannes Oberhumer\n   Copyright (C) 2005 Markus Franz Xaver Johannes Oberhumer\n   Copyright (C) 2004 Markus Franz Xaver Johannes Oberhumer\n   Copyright (C) 2003 Markus Franz Xaver Johannes Oberhumer\n   Copyright (C) 2002 Markus Franz Xaver Johannes Oberhumer\n   Copyright (C) 2001 Markus Franz Xaver Johannes Oberhumer\n   Copyright (C) 2000 Markus Franz Xaver Johannes Oberhumer\n   Copyright (C) 1999 Markus Franz Xaver Johannes Oberhumer\n   Copyright (C) 1998 Markus Franz Xaver Johannes Oberhumer\n   Copyright (C) 1997 Markus Franz Xaver Johannes Oberhumer\n   Copyright (C) 1996 Markus Franz Xaver Johannes Oberhumer\n   All Rights Reserved.\n\n   The LZO library is free software; you can redistribute it and/or\n   modify it under the terms of the GNU General Public License as\n   published by the Free Software Foundation; either version 2 of\n   the License, or (at your option) any later version.\n\n   The LZO library is distributed in the hope that it will be useful,\n   but WITHOUT ANY WARRANTY; without even the implied warranty of\n   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n   GNU General Public License for more details.\n\n   You should have received a copy of the GNU General Public License\n   along with the LZO library; see the file COPYING.\n   If not, write to the Free Software Foundation, Inc.,\n   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n\n   Markus F.X.J. Oberhumer\n   <markus@oberhumer.com>\n   http://www.oberhumer.com/opensource/lzo/\n */\n\n\n#ifndef __LZODEFS_H_INCLUDED\n#define __LZODEFS_H_INCLUDED 1\n\n#if defined(__CYGWIN32__) && !defined(__CYGWIN__)\n#  define __CYGWIN__ __CYGWIN32__\n#endif\n#if defined(__IBMCPP__) && !defined(__IBMC__)\n#  define __IBMC__ __IBMCPP__\n#endif\n#if defined(__ICL) && defined(_WIN32) && !defined(__INTEL_COMPILER)\n#  define __INTEL_COMPILER __ICL\n#endif\n#if 1 && defined(__INTERIX) && defined(__GNUC__) && !defined(_ALL_SOURCE)\n#  define _ALL_SOURCE 1\n#endif\n#if defined(__mips__) && defined(__R5900__)\n#  if !defined(__LONG_MAX__)\n#    define __LONG_MAX__ 9223372036854775807L\n#  endif\n#endif\n#if defined(__INTEL_COMPILER) && defined(__linux__)\n#  pragma warning(disable: 193)\n#endif\n#if defined(__KEIL__) && defined(__C166__)\n#  pragma warning disable = 322\n#elif 0 && defined(__C251__)\n#  pragma warning disable = 322\n#endif\n#if defined(_MSC_VER) && !defined(__INTEL_COMPILER) && !defined(__MWERKS__)\n#  if (_MSC_VER >= 1300)\n#    pragma warning(disable: 4668)\n#  endif\n#endif\n#if 0 && defined(__WATCOMC__)\n#  if (__WATCOMC__ >= 1050) && (__WATCOMC__ < 1060)\n#    pragma warning 203 9\n#  endif\n#endif\n#if defined(__BORLANDC__) && defined(__MSDOS__) && !defined(__FLAT__)\n#  pragma option -h\n#endif\n#if 0\n#define LZO_0xffffL             0xfffful\n#define LZO_0xffffffffL         0xfffffffful\n#else\n#define LZO_0xffffL             65535ul\n#define LZO_0xffffffffL         4294967295ul\n#endif\n#if (LZO_0xffffL == LZO_0xffffffffL)\n#  error \"your preprocessor is broken 1\"\n#endif\n#if (16ul * 16384ul != 262144ul)\n#  error \"your preprocessor is broken 2\"\n#endif\n#if 0\n#if (32767 >= 4294967295ul)\n#  error \"your preprocessor is broken 3\"\n#endif\n#if (65535u >= 4294967295ul)\n#  error \"your preprocessor is broken 4\"\n#endif\n#endif\n#if (UINT_MAX == LZO_0xffffL)\n#if defined(__ZTC__) && defined(__I86__) && !defined(__OS2__)\n#  if !defined(MSDOS)\n#    define MSDOS 1\n#  endif\n#  if !defined(_MSDOS)\n#    define _MSDOS 1\n#  endif\n#elif 0 && defined(__VERSION) && defined(MB_LEN_MAX)\n#  if (__VERSION == 520) && (MB_LEN_MAX == 1)\n#    if !defined(__AZTEC_C__)\n#      define __AZTEC_C__ __VERSION\n#    endif\n#    if !defined(__DOS__)\n#      define __DOS__ 1\n#    endif\n#  endif\n#endif\n#endif\n#if defined(_MSC_VER) && defined(M_I86HM) && (UINT_MAX == LZO_0xffffL)\n#  define ptrdiff_t long\n#  define _PTRDIFF_T_DEFINED 1\n#endif\n#if (UINT_MAX == LZO_0xffffL)\n#  undef __LZO_RENAME_A\n#  undef __LZO_RENAME_B\n#  if defined(__AZTEC_C__) && defined(__DOS__)\n#    define __LZO_RENAME_A 1\n#  elif defined(_MSC_VER) && defined(MSDOS)\n#    if (_MSC_VER < 600)\n#      define __LZO_RENAME_A 1\n#    elif (_MSC_VER < 700)\n#      define __LZO_RENAME_B 1\n#    endif\n#  elif defined(__TSC__) && defined(__OS2__)\n#    define __LZO_RENAME_A 1\n#  elif defined(__MSDOS__) && defined(__TURBOC__) && (__TURBOC__ < 0x0410)\n#    define __LZO_RENAME_A 1\n#  elif defined(__PACIFIC__) && defined(DOS)\n#    if !defined(__far)\n#      define __far far\n#    endif\n#    if !defined(__near)\n#      define __near near\n#    endif\n#  endif\n#  if defined(__LZO_RENAME_A)\n#    if !defined(__cdecl)\n#      define __cdecl cdecl\n#    endif\n#    if !defined(__far)\n#      define __far far\n#    endif\n#    if !defined(__huge)\n#      define __huge huge\n#    endif\n#    if !defined(__near)\n#      define __near near\n#    endif\n#    if !defined(__pascal)\n#      define __pascal pascal\n#    endif\n#    if !defined(__huge)\n#      define __huge huge\n#    endif\n#  elif defined(__LZO_RENAME_B)\n#    if !defined(__cdecl)\n#      define __cdecl _cdecl\n#    endif\n#    if !defined(__far)\n#      define __far _far\n#    endif\n#    if !defined(__huge)\n#      define __huge _huge\n#    endif\n#    if !defined(__near)\n#      define __near _near\n#    endif\n#    if !defined(__pascal)\n#      define __pascal _pascal\n#    endif\n#  elif (defined(__PUREC__) || defined(__TURBOC__)) && defined(__TOS__)\n#    if !defined(__cdecl)\n#      define __cdecl cdecl\n#    endif\n#    if !defined(__pascal)\n#      define __pascal pascal\n#    endif\n#  endif\n#  undef __LZO_RENAME_A\n#  undef __LZO_RENAME_B\n#endif\n#if (UINT_MAX == LZO_0xffffL)\n#if defined(__AZTEC_C__) && defined(__DOS__)\n#  define LZO_BROKEN_CDECL_ALT_SYNTAX 1\n#elif defined(_MSC_VER) && defined(MSDOS)\n#  if (_MSC_VER < 600)\n#    define LZO_BROKEN_INTEGRAL_CONSTANTS 1\n#  endif\n#  if (_MSC_VER < 700)\n#    define LZO_BROKEN_INTEGRAL_PROMOTION 1\n#    define LZO_BROKEN_SIZEOF 1\n#  endif\n#elif defined(__PACIFIC__) && defined(DOS)\n#  define LZO_BROKEN_INTEGRAL_CONSTANTS 1\n#elif defined(__TURBOC__) && defined(__MSDOS__)\n#  if (__TURBOC__ < 0x0150)\n#    define LZO_BROKEN_CDECL_ALT_SYNTAX 1\n#    define LZO_BROKEN_INTEGRAL_CONSTANTS 1\n#    define LZO_BROKEN_INTEGRAL_PROMOTION 1\n#  endif\n#  if (__TURBOC__ < 0x0200)\n#    define LZO_BROKEN_SIZEOF 1\n#  endif\n#  if (__TURBOC__ < 0x0400) && defined(__cplusplus)\n#    define LZO_BROKEN_CDECL_ALT_SYNTAX 1\n#  endif\n#elif (defined(__PUREC__) || defined(__TURBOC__)) && defined(__TOS__)\n#  define LZO_BROKEN_CDECL_ALT_SYNTAX 1\n#  define LZO_BROKEN_SIZEOF 1\n#endif\n#endif\n#if defined(__WATCOMC__) && (__WATCOMC__ < 900)\n#  define LZO_BROKEN_INTEGRAL_CONSTANTS 1\n#endif\n#if defined(_CRAY) && defined(_CRAY1)\n#  define LZO_BROKEN_SIGNED_RIGHT_SHIFT 1\n#endif\n#define LZO_PP_STRINGIZE(x)             #x\n#define LZO_PP_MACRO_EXPAND(x)          LZO_PP_STRINGIZE(x)\n#define LZO_PP_CONCAT2(a,b)             a ## b\n#define LZO_PP_CONCAT3(a,b,c)           a ## b ## c\n#define LZO_PP_CONCAT4(a,b,c,d)         a ## b ## c ## d\n#define LZO_PP_CONCAT5(a,b,c,d,e)       a ## b ## c ## d ## e\n#define LZO_PP_ECONCAT2(a,b)            LZO_PP_CONCAT2(a,b)\n#define LZO_PP_ECONCAT3(a,b,c)          LZO_PP_CONCAT3(a,b,c)\n#define LZO_PP_ECONCAT4(a,b,c,d)        LZO_PP_CONCAT4(a,b,c,d)\n#define LZO_PP_ECONCAT5(a,b,c,d,e)      LZO_PP_CONCAT5(a,b,c,d,e)\n#if 1\n#define LZO_CPP_STRINGIZE(x)            #x\n#define LZO_CPP_MACRO_EXPAND(x)         LZO_CPP_STRINGIZE(x)\n#define LZO_CPP_CONCAT2(a,b)            a ## b\n#define LZO_CPP_CONCAT3(a,b,c)          a ## b ## c\n#define LZO_CPP_CONCAT4(a,b,c,d)        a ## b ## c ## d\n#define LZO_CPP_CONCAT5(a,b,c,d,e)      a ## b ## c ## d ## e\n#define LZO_CPP_ECONCAT2(a,b)           LZO_CPP_CONCAT2(a,b)\n#define LZO_CPP_ECONCAT3(a,b,c)         LZO_CPP_CONCAT3(a,b,c)\n#define LZO_CPP_ECONCAT4(a,b,c,d)       LZO_CPP_CONCAT4(a,b,c,d)\n#define LZO_CPP_ECONCAT5(a,b,c,d,e)     LZO_CPP_CONCAT5(a,b,c,d,e)\n#endif\n#define __LZO_MASK_GEN(o,b)     (((((o) << ((b)-1)) - (o)) << 1) + (o))\n#if 1 && defined(__cplusplus)\n#  if !defined(__STDC_CONSTANT_MACROS)\n#    define __STDC_CONSTANT_MACROS 1\n#  endif\n#  if !defined(__STDC_LIMIT_MACROS)\n#    define __STDC_LIMIT_MACROS 1\n#  endif\n#endif\n#if defined(__cplusplus)\n#  define LZO_EXTERN_C extern \"C\"\n#else\n#  define LZO_EXTERN_C extern\n#endif\n#if !defined(__LZO_OS_OVERRIDE)\n#if (LZO_OS_FREESTANDING)\n#  define LZO_INFO_OS           \"freestanding\"\n#elif (LZO_OS_EMBEDDED)\n#  define LZO_INFO_OS           \"embedded\"\n#elif 1 && defined(__IAR_SYSTEMS_ICC__)\n#  define LZO_OS_EMBEDDED       1\n#  define LZO_INFO_OS           \"embedded\"\n#elif defined(__CYGWIN__) && defined(__GNUC__)\n#  define LZO_OS_CYGWIN         1\n#  define LZO_INFO_OS           \"cygwin\"\n#elif defined(__EMX__) && defined(__GNUC__)\n#  define LZO_OS_EMX            1\n#  define LZO_INFO_OS           \"emx\"\n#elif defined(__BEOS__)\n#  define LZO_OS_BEOS           1\n#  define LZO_INFO_OS           \"beos\"\n#elif defined(__Lynx__)\n#  define LZO_OS_LYNXOS         1\n#  define LZO_INFO_OS           \"lynxos\"\n#elif defined(__OS400__)\n#  define LZO_OS_OS400          1\n#  define LZO_INFO_OS           \"os400\"\n#elif defined(__QNX__)\n#  define LZO_OS_QNX            1\n#  define LZO_INFO_OS           \"qnx\"\n#elif defined(__BORLANDC__) && defined(__DPMI32__) && (__BORLANDC__ >= 0x0460)\n#  define LZO_OS_DOS32          1\n#  define LZO_INFO_OS           \"dos32\"\n#elif defined(__BORLANDC__) && defined(__DPMI16__)\n#  define LZO_OS_DOS16          1\n#  define LZO_INFO_OS           \"dos16\"\n#elif defined(__ZTC__) && defined(DOS386)\n#  define LZO_OS_DOS32          1\n#  define LZO_INFO_OS           \"dos32\"\n#elif defined(__OS2__) || defined(__OS2V2__)\n#  if (UINT_MAX == LZO_0xffffL)\n#    define LZO_OS_OS216        1\n#    define LZO_INFO_OS         \"os216\"\n#  elif (UINT_MAX == LZO_0xffffffffL)\n#    define LZO_OS_OS2          1\n#    define LZO_INFO_OS         \"os2\"\n#  else\n#    error \"check your limits.h header\"\n#  endif\n#elif defined(__WIN64__) || defined(_WIN64) || defined(WIN64)\n#  define LZO_OS_WIN64          1\n#  define LZO_INFO_OS           \"win64\"\n#elif defined(__WIN32__) || defined(_WIN32) || defined(WIN32) || defined(__WINDOWS_386__)\n#  define LZO_OS_WIN32          1\n#  define LZO_INFO_OS           \"win32\"\n#elif defined(__MWERKS__) && defined(__INTEL__)\n#  define LZO_OS_WIN32          1\n#  define LZO_INFO_OS           \"win32\"\n#elif defined(__WINDOWS__) || defined(_WINDOWS) || defined(_Windows)\n#  if (UINT_MAX == LZO_0xffffL)\n#    define LZO_OS_WIN16        1\n#    define LZO_INFO_OS         \"win16\"\n#  elif (UINT_MAX == LZO_0xffffffffL)\n#    define LZO_OS_WIN32        1\n#    define LZO_INFO_OS         \"win32\"\n#  else\n#    error \"check your limits.h header\"\n#  endif\n#elif defined(__DOS__) || defined(__MSDOS__) || defined(_MSDOS) || defined(MSDOS) || (defined(__PACIFIC__) && defined(DOS))\n#  if (UINT_MAX == LZO_0xffffL)\n#    define LZO_OS_DOS16        1\n#    define LZO_INFO_OS         \"dos16\"\n#  elif (UINT_MAX == LZO_0xffffffffL)\n#    define LZO_OS_DOS32        1\n#    define LZO_INFO_OS         \"dos32\"\n#  else\n#    error \"check your limits.h header\"\n#  endif\n#elif defined(__WATCOMC__)\n#  if defined(__NT__) && (UINT_MAX == LZO_0xffffL)\n#    define LZO_OS_DOS16        1\n#    define LZO_INFO_OS         \"dos16\"\n#  elif defined(__NT__) && (__WATCOMC__ < 1100)\n#    define LZO_OS_WIN32        1\n#    define LZO_INFO_OS         \"win32\"\n#  elif defined(__linux__) || defined(__LINUX__)\n#    define LZO_OS_POSIX        1\n#    define LZO_INFO_OS         \"posix\"\n#  else\n#    error \"please specify a target using the -bt compiler option\"\n#  endif\n#elif defined(__palmos__)\n#  define LZO_OS_PALMOS         1\n#  define LZO_INFO_OS           \"palmos\"\n#elif defined(__TOS__) || defined(__atarist__)\n#  define LZO_OS_TOS            1\n#  define LZO_INFO_OS           \"tos\"\n#elif defined(macintosh) && !defined(__ppc__)\n#  define LZO_OS_MACCLASSIC     1\n#  define LZO_INFO_OS           \"macclassic\"\n#elif defined(__VMS)\n#  define LZO_OS_VMS            1\n#  define LZO_INFO_OS           \"vms\"\n#elif ((defined(__mips__) && defined(__R5900__)) || defined(__MIPS_PSX2__))\n#  define LZO_OS_CONSOLE        1\n#  define LZO_OS_CONSOLE_PS2    1\n#  define LZO_INFO_OS           \"console\"\n#  define LZO_INFO_OS_CONSOLE   \"ps2\"\n#elif (defined(__mips__) && defined(__psp__))\n#  define LZO_OS_CONSOLE        1\n#  define LZO_OS_CONSOLE_PSP    1\n#  define LZO_INFO_OS           \"console\"\n#  define LZO_INFO_OS_CONSOLE   \"psp\"\n#else\n#  define LZO_OS_POSIX          1\n#  define LZO_INFO_OS           \"posix\"\n#endif\n#if (LZO_OS_POSIX)\n#  if defined(_AIX) || defined(__AIX__) || defined(__aix__)\n#    define LZO_OS_POSIX_AIX        1\n#    define LZO_INFO_OS_POSIX       \"aix\"\n#  elif defined(__FreeBSD__)\n#    define LZO_OS_POSIX_FREEBSD    1\n#    define LZO_INFO_OS_POSIX       \"freebsd\"\n#  elif defined(__hpux__) || defined(__hpux)\n#    define LZO_OS_POSIX_HPUX       1\n#    define LZO_INFO_OS_POSIX       \"hpux\"\n#  elif defined(__INTERIX)\n#    define LZO_OS_POSIX_INTERIX    1\n#    define LZO_INFO_OS_POSIX       \"interix\"\n#  elif defined(__IRIX__) || defined(__irix__)\n#    define LZO_OS_POSIX_IRIX       1\n#    define LZO_INFO_OS_POSIX       \"irix\"\n#  elif defined(__linux__) || defined(__linux) || defined(__LINUX__)\n#    define LZO_OS_POSIX_LINUX      1\n#    define LZO_INFO_OS_POSIX       \"linux\"\n#  elif defined(__APPLE__) || defined(__MACOS__)\n#    define LZO_OS_POSIX_MACOSX     1\n#    define LZO_INFO_OS_POSIX       \"macosx\"\n#  elif defined(__minix__) || defined(__minix)\n#    define LZO_OS_POSIX_MINIX      1\n#    define LZO_INFO_OS_POSIX       \"minix\"\n#  elif defined(__NetBSD__)\n#    define LZO_OS_POSIX_NETBSD     1\n#    define LZO_INFO_OS_POSIX       \"netbsd\"\n#  elif defined(__OpenBSD__)\n#    define LZO_OS_POSIX_OPENBSD    1\n#    define LZO_INFO_OS_POSIX       \"openbsd\"\n#  elif defined(__osf__)\n#    define LZO_OS_POSIX_OSF        1\n#    define LZO_INFO_OS_POSIX       \"osf\"\n#  elif defined(__solaris__) || defined(__sun)\n#    if defined(__SVR4) || defined(__svr4__)\n#      define LZO_OS_POSIX_SOLARIS  1\n#      define LZO_INFO_OS_POSIX     \"solaris\"\n#    else\n#      define LZO_OS_POSIX_SUNOS    1\n#      define LZO_INFO_OS_POSIX     \"sunos\"\n#    endif\n#  elif defined(__ultrix__) || defined(__ultrix)\n#    define LZO_OS_POSIX_ULTRIX     1\n#    define LZO_INFO_OS_POSIX       \"ultrix\"\n#  elif defined(_UNICOS)\n#    define LZO_OS_POSIX_UNICOS     1\n#    define LZO_INFO_OS_POSIX       \"unicos\"\n#  else\n#    define LZO_OS_POSIX_UNKNOWN    1\n#    define LZO_INFO_OS_POSIX       \"unknown\"\n#  endif\n#endif\n#endif\n#if (LZO_OS_DOS16 || LZO_OS_OS216 || LZO_OS_WIN16)\n#  if (UINT_MAX != LZO_0xffffL)\n#    error \"this should not happen\"\n#  endif\n#  if (ULONG_MAX != LZO_0xffffffffL)\n#    error \"this should not happen\"\n#  endif\n#endif\n#if (LZO_OS_DOS32 || LZO_OS_OS2 || LZO_OS_WIN32 || LZO_OS_WIN64)\n#  if (UINT_MAX != LZO_0xffffffffL)\n#    error \"this should not happen\"\n#  endif\n#  if (ULONG_MAX != LZO_0xffffffffL)\n#    error \"this should not happen\"\n#  endif\n#endif\n#if defined(CIL) && defined(_GNUCC) && defined(__GNUC__)\n#  define LZO_CC_CILLY          1\n#  define LZO_INFO_CC           \"Cilly\"\n#  if defined(__CILLY__)\n#    define LZO_INFO_CCVER      LZO_PP_MACRO_EXPAND(__CILLY__)\n#  else\n#    define LZO_INFO_CCVER      \"unknown\"\n#  endif\n#elif 0 && defined(SDCC) && defined(__VERSION__) && !defined(__GNUC__)\n#  define LZO_CC_SDCC           1\n#  define LZO_INFO_CC           \"sdcc\"\n#  define LZO_INFO_CCVER        LZO_PP_MACRO_EXPAND(SDCC)\n#elif defined(__PATHSCALE__) && defined(__PATHCC_PATCHLEVEL__)\n#  define LZO_CC_PATHSCALE      (__PATHCC__ * 0x10000L + __PATHCC_MINOR__ * 0x100 + __PATHCC_PATCHLEVEL__)\n#  define LZO_INFO_CC           \"Pathscale C\"\n#  define LZO_INFO_CCVER        __PATHSCALE__\n#elif defined(__INTEL_COMPILER)\n#  define LZO_CC_INTELC         1\n#  define LZO_INFO_CC           \"Intel C\"\n#  define LZO_INFO_CCVER        LZO_PP_MACRO_EXPAND(__INTEL_COMPILER)\n#  if defined(_WIN32) || defined(_WIN64)\n#    define LZO_CC_SYNTAX_MSC 1\n#  else\n#    define LZO_CC_SYNTAX_GNUC 1\n#  endif\n#elif defined(__POCC__) && defined(_WIN32)\n#  define LZO_CC_PELLESC        1\n#  define LZO_INFO_CC           \"Pelles C\"\n#  define LZO_INFO_CCVER        LZO_PP_MACRO_EXPAND(__POCC__)\n#elif defined(__clang__) && defined(__llvm__) && defined(__GNUC__) && defined(__GNUC_MINOR__) && defined(__VERSION__)\n#  if defined(__GNUC_PATCHLEVEL__)\n#    define LZO_CC_CLANG_GNUC   (__GNUC__ * 0x10000L + __GNUC_MINOR__ * 0x100 + __GNUC_PATCHLEVEL__)\n#  else\n#    define LZO_CC_CLANG_GNUC   (__GNUC__ * 0x10000L + __GNUC_MINOR__ * 0x100)\n#  endif\n#  if defined(__clang_major__) && defined(__clang_minor__) && defined(__clang_patchlevel__)\n#    define LZO_CC_CLANG_CLANG  (__clang_major__ * 0x10000L + __clang_minor__ * 0x100 + __clang_patchlevel__)\n#  else\n#    define LZO_CC_CLANG_CLANG  0x010000L\n#  endif\n#  define LZO_CC_CLANG          LZO_CC_CLANG_GNUC\n#  define LZO_INFO_CC           \"clang\"\n#  define LZO_INFO_CCVER        __VERSION__\n#elif defined(__llvm__) && defined(__GNUC__) && defined(__GNUC_MINOR__) && defined(__VERSION__)\n#  if defined(__GNUC_PATCHLEVEL__)\n#    define LZO_CC_LLVM_GNUC    (__GNUC__ * 0x10000L + __GNUC_MINOR__ * 0x100 + __GNUC_PATCHLEVEL__)\n#  else\n#    define LZO_CC_LLVM_GNUC    (__GNUC__ * 0x10000L + __GNUC_MINOR__ * 0x100)\n#  endif\n#  define LZO_CC_LLVM           LZO_CC_LLVM_GNUC\n#  define LZO_INFO_CC           \"llvm-gcc\"\n#  define LZO_INFO_CCVER        __VERSION__\n#elif defined(__GNUC__) && defined(__VERSION__)\n#  if defined(__GNUC_MINOR__) && defined(__GNUC_PATCHLEVEL__)\n#    define LZO_CC_GNUC         (__GNUC__ * 0x10000L + __GNUC_MINOR__ * 0x100 + __GNUC_PATCHLEVEL__)\n#  elif defined(__GNUC_MINOR__)\n#    define LZO_CC_GNUC         (__GNUC__ * 0x10000L + __GNUC_MINOR__ * 0x100)\n#  else\n#    define LZO_CC_GNUC         (__GNUC__ * 0x10000L)\n#  endif\n#  define LZO_INFO_CC           \"gcc\"\n#  define LZO_INFO_CCVER        __VERSION__\n#elif defined(__ACK__) && defined(_ACK)\n#  define LZO_CC_ACK            1\n#  define LZO_INFO_CC           \"Amsterdam Compiler Kit C\"\n#  define LZO_INFO_CCVER        \"unknown\"\n#elif defined(__AZTEC_C__)\n#  define LZO_CC_AZTECC         1\n#  define LZO_INFO_CC           \"Aztec C\"\n#  define LZO_INFO_CCVER        LZO_PP_MACRO_EXPAND(__AZTEC_C__)\n#elif defined(__CODEGEARC__)\n#  define LZO_CC_CODEGEARC      1\n#  define LZO_INFO_CC           \"CodeGear C\"\n#  define LZO_INFO_CCVER        LZO_PP_MACRO_EXPAND(__CODEGEARC__)\n#elif defined(__BORLANDC__)\n#  define LZO_CC_BORLANDC       1\n#  define LZO_INFO_CC           \"Borland C\"\n#  define LZO_INFO_CCVER        LZO_PP_MACRO_EXPAND(__BORLANDC__)\n#elif defined(_CRAYC) && defined(_RELEASE)\n#  define LZO_CC_CRAYC          1\n#  define LZO_INFO_CC           \"Cray C\"\n#  define LZO_INFO_CCVER        LZO_PP_MACRO_EXPAND(_RELEASE)\n#elif defined(__DMC__) && defined(__SC__)\n#  define LZO_CC_DMC            1\n#  define LZO_INFO_CC           \"Digital Mars C\"\n#  define LZO_INFO_CCVER        LZO_PP_MACRO_EXPAND(__DMC__)\n#elif defined(__DECC)\n#  define LZO_CC_DECC           1\n#  define LZO_INFO_CC           \"DEC C\"\n#  define LZO_INFO_CCVER        LZO_PP_MACRO_EXPAND(__DECC)\n#elif defined(__HIGHC__)\n#  define LZO_CC_HIGHC          1\n#  define LZO_INFO_CC           \"MetaWare High C\"\n#  define LZO_INFO_CCVER        \"unknown\"\n#elif defined(__IAR_SYSTEMS_ICC__)\n#  define LZO_CC_IARC           1\n#  define LZO_INFO_CC           \"IAR C\"\n#  if defined(__VER__)\n#    define LZO_INFO_CCVER      LZO_PP_MACRO_EXPAND(__VER__)\n#  else\n#    define LZO_INFO_CCVER      \"unknown\"\n#  endif\n#elif defined(__IBMC__)\n#  define LZO_CC_IBMC           1\n#  define LZO_INFO_CC           \"IBM C\"\n#  define LZO_INFO_CCVER        LZO_PP_MACRO_EXPAND(__IBMC__)\n#elif defined(__KEIL__) && defined(__C166__)\n#  define LZO_CC_KEILC          1\n#  define LZO_INFO_CC           \"Keil C\"\n#  define LZO_INFO_CCVER        LZO_PP_MACRO_EXPAND(__C166__)\n#elif defined(__LCC__) && defined(_WIN32) && defined(__LCCOPTIMLEVEL)\n#  define LZO_CC_LCCWIN32       1\n#  define LZO_INFO_CC           \"lcc-win32\"\n#  define LZO_INFO_CCVER        \"unknown\"\n#elif defined(__LCC__)\n#  define LZO_CC_LCC            1\n#  define LZO_INFO_CC           \"lcc\"\n#  if defined(__LCC_VERSION__)\n#    define LZO_INFO_CCVER      LZO_PP_MACRO_EXPAND(__LCC_VERSION__)\n#  else\n#    define LZO_INFO_CCVER      \"unknown\"\n#  endif\n#elif defined(_MSC_VER)\n#  define LZO_CC_MSC            1\n#  define LZO_INFO_CC           \"Microsoft C\"\n#  if defined(_MSC_FULL_VER)\n#    define LZO_INFO_CCVER      LZO_PP_MACRO_EXPAND(_MSC_VER) \".\" LZO_PP_MACRO_EXPAND(_MSC_FULL_VER)\n#  else\n#    define LZO_INFO_CCVER      LZO_PP_MACRO_EXPAND(_MSC_VER)\n#  endif\n#elif defined(__MWERKS__)\n#  define LZO_CC_MWERKS         1\n#  define LZO_INFO_CC           \"Metrowerks C\"\n#  define LZO_INFO_CCVER        LZO_PP_MACRO_EXPAND(__MWERKS__)\n#elif (defined(__NDPC__) || defined(__NDPX__)) && defined(__i386)\n#  define LZO_CC_NDPC           1\n#  define LZO_INFO_CC           \"Microway NDP C\"\n#  define LZO_INFO_CCVER        \"unknown\"\n#elif defined(__PACIFIC__)\n#  define LZO_CC_PACIFICC       1\n#  define LZO_INFO_CC           \"Pacific C\"\n#  define LZO_INFO_CCVER        LZO_PP_MACRO_EXPAND(__PACIFIC__)\n#elif defined(__PGI) && (defined(__linux__) || defined(__WIN32__))\n#  define LZO_CC_PGI            1\n#  define LZO_INFO_CC           \"Portland Group PGI C\"\n#  define LZO_INFO_CCVER        \"unknown\"\n#elif defined(__PUREC__) && defined(__TOS__)\n#  define LZO_CC_PUREC          1\n#  define LZO_INFO_CC           \"Pure C\"\n#  define LZO_INFO_CCVER        LZO_PP_MACRO_EXPAND(__PUREC__)\n#elif defined(__SC__) && defined(__ZTC__)\n#  define LZO_CC_SYMANTECC      1\n#  define LZO_INFO_CC           \"Symantec C\"\n#  define LZO_INFO_CCVER        LZO_PP_MACRO_EXPAND(__SC__)\n#elif defined(__SUNPRO_C)\n#  define LZO_INFO_CC           \"SunPro C\"\n#  if ((__SUNPRO_C)+0 > 0)\n#    define LZO_CC_SUNPROC      __SUNPRO_C\n#    define LZO_INFO_CCVER      LZO_PP_MACRO_EXPAND(__SUNPRO_C)\n#  else\n#    define LZO_CC_SUNPROC      1\n#    define LZO_INFO_CCVER      \"unknown\"\n#  endif\n#elif defined(__SUNPRO_CC)\n#  define LZO_INFO_CC           \"SunPro C\"\n#  if ((__SUNPRO_CC)+0 > 0)\n#    define LZO_CC_SUNPROC      __SUNPRO_CC\n#    define LZO_INFO_CCVER      LZO_PP_MACRO_EXPAND(__SUNPRO_CC)\n#  else\n#    define LZO_CC_SUNPROC      1\n#    define LZO_INFO_CCVER      \"unknown\"\n#  endif\n#elif defined(__TINYC__)\n#  define LZO_CC_TINYC          1\n#  define LZO_INFO_CC           \"Tiny C\"\n#  define LZO_INFO_CCVER        LZO_PP_MACRO_EXPAND(__TINYC__)\n#elif defined(__TSC__)\n#  define LZO_CC_TOPSPEEDC      1\n#  define LZO_INFO_CC           \"TopSpeed C\"\n#  define LZO_INFO_CCVER        LZO_PP_MACRO_EXPAND(__TSC__)\n#elif defined(__WATCOMC__)\n#  define LZO_CC_WATCOMC        1\n#  define LZO_INFO_CC           \"Watcom C\"\n#  define LZO_INFO_CCVER        LZO_PP_MACRO_EXPAND(__WATCOMC__)\n#elif defined(__TURBOC__)\n#  define LZO_CC_TURBOC         1\n#  define LZO_INFO_CC           \"Turbo C\"\n#  define LZO_INFO_CCVER        LZO_PP_MACRO_EXPAND(__TURBOC__)\n#elif defined(__ZTC__)\n#  define LZO_CC_ZORTECHC       1\n#  define LZO_INFO_CC           \"Zortech C\"\n#  if (__ZTC__ == 0x310)\n#    define LZO_INFO_CCVER      \"0x310\"\n#  else\n#    define LZO_INFO_CCVER      LZO_PP_MACRO_EXPAND(__ZTC__)\n#  endif\n#else\n#  define LZO_CC_UNKNOWN        1\n#  define LZO_INFO_CC           \"unknown\"\n#  define LZO_INFO_CCVER        \"unknown\"\n#endif\n#if 0 && (LZO_CC_MSC && (_MSC_VER >= 1200)) && !defined(_MSC_FULL_VER)\n#  error \"LZO_CC_MSC: _MSC_FULL_VER is not defined\"\n#endif\n#if !defined(__LZO_ARCH_OVERRIDE) && !(LZO_ARCH_GENERIC) && defined(_CRAY)\n#  if (UINT_MAX > LZO_0xffffffffL) && defined(_CRAY)\n#    if defined(_CRAYMPP) || defined(_CRAYT3D) || defined(_CRAYT3E)\n#      define LZO_ARCH_CRAY_MPP     1\n#    elif defined(_CRAY1)\n#      define LZO_ARCH_CRAY_PVP     1\n#    endif\n#  endif\n#endif\n#if !defined(__LZO_ARCH_OVERRIDE)\n#if (LZO_ARCH_GENERIC)\n#  define LZO_INFO_ARCH             \"generic\"\n#elif (LZO_OS_DOS16 || LZO_OS_OS216 || LZO_OS_WIN16)\n#  define LZO_ARCH_I086             1\n#  define LZO_ARCH_IA16             1\n#  define LZO_INFO_ARCH             \"i086\"\n#elif defined(__alpha__) || defined(__alpha) || defined(_M_ALPHA)\n#  define LZO_ARCH_ALPHA            1\n#  define LZO_INFO_ARCH             \"alpha\"\n#elif (LZO_ARCH_CRAY_MPP) && (defined(_CRAYT3D) || defined(_CRAYT3E))\n#  define LZO_ARCH_ALPHA            1\n#  define LZO_INFO_ARCH             \"alpha\"\n#elif defined(__amd64__) || defined(__x86_64__) || defined(_M_AMD64)\n#  define LZO_ARCH_AMD64            1\n#  define LZO_INFO_ARCH             \"amd64\"\n#elif defined(__thumb__) || (defined(_M_ARM) && defined(_M_THUMB))\n#  define LZO_ARCH_ARM              1\n#  define LZO_ARCH_ARM_THUMB        1\n#  define LZO_INFO_ARCH             \"arm_thumb\"\n#elif defined(__IAR_SYSTEMS_ICC__) && defined(__ICCARM__)\n#  define LZO_ARCH_ARM              1\n#  if defined(__CPU_MODE__) && ((__CPU_MODE__)+0 == 1)\n#    define LZO_ARCH_ARM_THUMB      1\n#    define LZO_INFO_ARCH           \"arm_thumb\"\n#  elif defined(__CPU_MODE__) && ((__CPU_MODE__)+0 == 2)\n#    define LZO_INFO_ARCH           \"arm\"\n#  else\n#    define LZO_INFO_ARCH           \"arm\"\n#  endif\n#elif defined(__arm__) || defined(_M_ARM)\n#  define LZO_ARCH_ARM              1\n#  define LZO_INFO_ARCH             \"arm\"\n#elif (UINT_MAX <= LZO_0xffffL) && defined(__AVR__)\n#  define LZO_ARCH_AVR              1\n#  define LZO_INFO_ARCH             \"avr\"\n#elif defined(__avr32__) || defined(__AVR32__)\n#  define LZO_ARCH_AVR32            1\n#  define LZO_INFO_ARCH             \"avr32\"\n#elif defined(__bfin__)\n#  define LZO_ARCH_BLACKFIN         1\n#  define LZO_INFO_ARCH             \"blackfin\"\n#elif (UINT_MAX == LZO_0xffffL) && defined(__C166__)\n#  define LZO_ARCH_C166             1\n#  define LZO_INFO_ARCH             \"c166\"\n#elif defined(__cris__)\n#  define LZO_ARCH_CRIS             1\n#  define LZO_INFO_ARCH             \"cris\"\n#elif defined(__IAR_SYSTEMS_ICC__) && defined(__ICCEZ80__)\n#  define LZO_ARCH_EZ80             1\n#  define LZO_INFO_ARCH             \"ez80\"\n#elif defined(__H8300__) || defined(__H8300H__) || defined(__H8300S__) || defined(__H8300SX__)\n#  define LZO_ARCH_H8300            1\n#  define LZO_INFO_ARCH             \"h8300\"\n#elif defined(__hppa__) || defined(__hppa)\n#  define LZO_ARCH_HPPA             1\n#  define LZO_INFO_ARCH             \"hppa\"\n#elif defined(__386__) || defined(__i386__) || defined(__i386) || defined(_M_IX86) || defined(_M_I386)\n#  define LZO_ARCH_I386             1\n#  define LZO_ARCH_IA32             1\n#  define LZO_INFO_ARCH             \"i386\"\n#elif (LZO_CC_ZORTECHC && defined(__I86__))\n#  define LZO_ARCH_I386             1\n#  define LZO_ARCH_IA32             1\n#  define LZO_INFO_ARCH             \"i386\"\n#elif (LZO_OS_DOS32 && LZO_CC_HIGHC) && defined(_I386)\n#  define LZO_ARCH_I386             1\n#  define LZO_ARCH_IA32             1\n#  define LZO_INFO_ARCH             \"i386\"\n#elif defined(__ia64__) || defined(__ia64) || defined(_M_IA64)\n#  define LZO_ARCH_IA64             1\n#  define LZO_INFO_ARCH             \"ia64\"\n#elif (UINT_MAX == LZO_0xffffL) && defined(__m32c__)\n#  define LZO_ARCH_M16C             1\n#  define LZO_INFO_ARCH             \"m16c\"\n#elif defined(__IAR_SYSTEMS_ICC__) && defined(__ICCM16C__)\n#  define LZO_ARCH_M16C             1\n#  define LZO_INFO_ARCH             \"m16c\"\n#elif defined(__m32r__)\n#  define LZO_ARCH_M32R             1\n#  define LZO_INFO_ARCH             \"m32r\"\n#elif (LZO_OS_TOS) || defined(__m68k__) || defined(__m68000__) || defined(__mc68000__) || defined(__mc68020__) || defined(_M_M68K)\n#  define LZO_ARCH_M68K             1\n#  define LZO_INFO_ARCH             \"m68k\"\n#elif (UINT_MAX == LZO_0xffffL) && defined(__C251__)\n#  define LZO_ARCH_MCS251           1\n#  define LZO_INFO_ARCH             \"mcs251\"\n#elif (UINT_MAX == LZO_0xffffL) && defined(__C51__)\n#  define LZO_ARCH_MCS51            1\n#  define LZO_INFO_ARCH             \"mcs51\"\n#elif defined(__IAR_SYSTEMS_ICC__) && defined(__ICC8051__)\n#  define LZO_ARCH_MCS51            1\n#  define LZO_INFO_ARCH             \"mcs51\"\n#elif defined(__mips__) || defined(__mips) || defined(_MIPS_ARCH) || defined(_M_MRX000)\n#  define LZO_ARCH_MIPS             1\n#  define LZO_INFO_ARCH             \"mips\"\n#elif (UINT_MAX == LZO_0xffffL) && defined(__MSP430__)\n#  define LZO_ARCH_MSP430           1\n#  define LZO_INFO_ARCH             \"msp430\"\n#elif defined(__IAR_SYSTEMS_ICC__) && defined(__ICC430__)\n#  define LZO_ARCH_MSP430           1\n#  define LZO_INFO_ARCH             \"msp430\"\n#elif defined(__powerpc__) || defined(__powerpc) || defined(__ppc__) || defined(__PPC__) || defined(_M_PPC) || defined(_ARCH_PPC) || defined(_ARCH_PWR)\n#  define LZO_ARCH_POWERPC          1\n#  define LZO_INFO_ARCH             \"powerpc\"\n#elif defined(__s390__) || defined(__s390) || defined(__s390x__) || defined(__s390x)\n#  define LZO_ARCH_S390             1\n#  define LZO_INFO_ARCH             \"s390\"\n#elif defined(__sh__) || defined(_M_SH)\n#  define LZO_ARCH_SH               1\n#  define LZO_INFO_ARCH             \"sh\"\n#elif defined(__sparc__) || defined(__sparc) || defined(__sparcv8)\n#  define LZO_ARCH_SPARC            1\n#  define LZO_INFO_ARCH             \"sparc\"\n#elif defined(__SPU__)\n#  define LZO_ARCH_SPU              1\n#  define LZO_INFO_ARCH             \"spu\"\n#elif (UINT_MAX == LZO_0xffffL) && defined(__z80)\n#  define LZO_ARCH_Z80              1\n#  define LZO_INFO_ARCH             \"z80\"\n#elif (LZO_ARCH_CRAY_PVP)\n#  if defined(_CRAYSV1)\n#    define LZO_ARCH_CRAY_SV1       1\n#    define LZO_INFO_ARCH           \"cray_sv1\"\n#  elif (_ADDR64)\n#    define LZO_ARCH_CRAY_T90       1\n#    define LZO_INFO_ARCH           \"cray_t90\"\n#  elif (_ADDR32)\n#    define LZO_ARCH_CRAY_YMP       1\n#    define LZO_INFO_ARCH           \"cray_ymp\"\n#  else\n#    define LZO_ARCH_CRAY_XMP       1\n#    define LZO_INFO_ARCH           \"cray_xmp\"\n#  endif\n#else\n#  define LZO_ARCH_UNKNOWN          1\n#  define LZO_INFO_ARCH             \"unknown\"\n#endif\n#endif\n#if 1 && (LZO_ARCH_UNKNOWN) && (LZO_OS_DOS32 || LZO_OS_OS2)\n#  error \"FIXME - missing define for CPU architecture\"\n#endif\n#if 1 && (LZO_ARCH_UNKNOWN) && (LZO_OS_WIN32)\n#  error \"FIXME - missing WIN32 define for CPU architecture\"\n#endif\n#if 1 && (LZO_ARCH_UNKNOWN) && (LZO_OS_WIN64)\n#  error \"FIXME - missing WIN64 define for CPU architecture\"\n#endif\n#if (LZO_OS_OS216 || LZO_OS_WIN16)\n#  define LZO_ARCH_I086PM           1\n#  define LZO_ARCH_IA16PM           1\n#elif 1 && (LZO_OS_DOS16 && defined(BLX286))\n#  define LZO_ARCH_I086PM           1\n#  define LZO_ARCH_IA16PM           1\n#elif 1 && (LZO_OS_DOS16 && defined(DOSX286))\n#  define LZO_ARCH_I086PM           1\n#  define LZO_ARCH_IA16PM           1\n#elif 1 && (LZO_OS_DOS16 && LZO_CC_BORLANDC && defined(__DPMI16__))\n#  define LZO_ARCH_I086PM           1\n#  define LZO_ARCH_IA16PM           1\n#endif\n#if (LZO_ARCH_ARM_THUMB) && !(LZO_ARCH_ARM)\n#  error \"this should not happen\"\n#endif\n#if (LZO_ARCH_I086PM) && !(LZO_ARCH_I086)\n#  error \"this should not happen\"\n#endif\n#if (LZO_ARCH_I086)\n#  if (UINT_MAX != LZO_0xffffL)\n#    error \"this should not happen\"\n#  endif\n#  if (ULONG_MAX != LZO_0xffffffffL)\n#    error \"this should not happen\"\n#  endif\n#endif\n#if (LZO_ARCH_I386)\n#  if (UINT_MAX != LZO_0xffffL) && defined(__i386_int16__)\n#    error \"this should not happen\"\n#  endif\n#  if (UINT_MAX != LZO_0xffffffffL) && !defined(__i386_int16__)\n#    error \"this should not happen\"\n#  endif\n#  if (ULONG_MAX != LZO_0xffffffffL)\n#    error \"this should not happen\"\n#  endif\n#endif\n#if !defined(__LZO_MM_OVERRIDE)\n#if (LZO_ARCH_I086)\n#if (UINT_MAX != LZO_0xffffL)\n#  error \"this should not happen\"\n#endif\n#if defined(__TINY__) || defined(M_I86TM) || defined(_M_I86TM)\n#  define LZO_MM_TINY           1\n#elif defined(__HUGE__) || defined(_HUGE_) || defined(M_I86HM) || defined(_M_I86HM)\n#  define LZO_MM_HUGE           1\n#elif defined(__SMALL__) || defined(M_I86SM) || defined(_M_I86SM) || defined(SMALL_MODEL)\n#  define LZO_MM_SMALL          1\n#elif defined(__MEDIUM__) || defined(M_I86MM) || defined(_M_I86MM)\n#  define LZO_MM_MEDIUM         1\n#elif defined(__COMPACT__) || defined(M_I86CM) || defined(_M_I86CM)\n#  define LZO_MM_COMPACT        1\n#elif defined(__LARGE__) || defined(M_I86LM) || defined(_M_I86LM) || defined(LARGE_MODEL)\n#  define LZO_MM_LARGE          1\n#elif (LZO_CC_AZTECC)\n#  if defined(_LARGE_CODE) && defined(_LARGE_DATA)\n#    define LZO_MM_LARGE        1\n#  elif defined(_LARGE_CODE)\n#    define LZO_MM_MEDIUM       1\n#  elif defined(_LARGE_DATA)\n#    define LZO_MM_COMPACT      1\n#  else\n#    define LZO_MM_SMALL        1\n#  endif\n#elif (LZO_CC_ZORTECHC && defined(__VCM__))\n#  define LZO_MM_LARGE          1\n#else\n#  error \"unknown memory model\"\n#endif\n#if (LZO_OS_DOS16 || LZO_OS_OS216 || LZO_OS_WIN16)\n#define LZO_HAVE_MM_HUGE_PTR        1\n#define LZO_HAVE_MM_HUGE_ARRAY      1\n#if (LZO_MM_TINY)\n#  undef LZO_HAVE_MM_HUGE_ARRAY\n#endif\n#if (LZO_CC_AZTECC || LZO_CC_PACIFICC || LZO_CC_ZORTECHC)\n#  undef LZO_HAVE_MM_HUGE_PTR\n#  undef LZO_HAVE_MM_HUGE_ARRAY\n#elif (LZO_CC_DMC || LZO_CC_SYMANTECC)\n#  undef LZO_HAVE_MM_HUGE_ARRAY\n#elif (LZO_CC_MSC && defined(_QC))\n#  undef LZO_HAVE_MM_HUGE_ARRAY\n#  if (_MSC_VER < 600)\n#    undef LZO_HAVE_MM_HUGE_PTR\n#  endif\n#elif (LZO_CC_TURBOC && (__TURBOC__ < 0x0295))\n#  undef LZO_HAVE_MM_HUGE_ARRAY\n#endif\n#if (LZO_ARCH_I086PM) && !(LZO_HAVE_MM_HUGE_PTR)\n#  if (LZO_OS_DOS16)\n#    error \"this should not happen\"\n#  elif (LZO_CC_ZORTECHC)\n#  else\n#    error \"this should not happen\"\n#  endif\n#endif\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n#if (LZO_CC_BORLANDC && (__BORLANDC__ >= 0x0200))\n   extern void __near __cdecl _AHSHIFT(void);\n#  define LZO_MM_AHSHIFT      ((unsigned) _AHSHIFT)\n#elif (LZO_CC_DMC || LZO_CC_SYMANTECC || LZO_CC_ZORTECHC)\n   extern void __near __cdecl _AHSHIFT(void);\n#  define LZO_MM_AHSHIFT      ((unsigned) _AHSHIFT)\n#elif (LZO_CC_MSC || LZO_CC_TOPSPEEDC)\n   extern void __near __cdecl _AHSHIFT(void);\n#  define LZO_MM_AHSHIFT      ((unsigned) _AHSHIFT)\n#elif (LZO_CC_TURBOC && (__TURBOC__ >= 0x0295))\n   extern void __near __cdecl _AHSHIFT(void);\n#  define LZO_MM_AHSHIFT      ((unsigned) _AHSHIFT)\n#elif ((LZO_CC_AZTECC || LZO_CC_PACIFICC || LZO_CC_TURBOC) && LZO_OS_DOS16)\n#  define LZO_MM_AHSHIFT      12\n#elif (LZO_CC_WATCOMC)\n   extern unsigned char _HShift;\n#  define LZO_MM_AHSHIFT      ((unsigned) _HShift)\n#else\n#  error \"FIXME - implement LZO_MM_AHSHIFT\"\n#endif\n#ifdef __cplusplus\n}\n#endif\n#endif\n#elif (LZO_ARCH_C166)\n#if !defined(__MODEL__)\n#  error \"FIXME - C166 __MODEL__\"\n#elif ((__MODEL__) == 0)\n#  define LZO_MM_SMALL          1\n#elif ((__MODEL__) == 1)\n#  define LZO_MM_SMALL          1\n#elif ((__MODEL__) == 2)\n#  define LZO_MM_LARGE          1\n#elif ((__MODEL__) == 3)\n#  define LZO_MM_TINY           1\n#elif ((__MODEL__) == 4)\n#  define LZO_MM_XTINY          1\n#elif ((__MODEL__) == 5)\n#  define LZO_MM_XSMALL         1\n#else\n#  error \"FIXME - C166 __MODEL__\"\n#endif\n#elif (LZO_ARCH_MCS251)\n#if !defined(__MODEL__)\n#  error \"FIXME - MCS251 __MODEL__\"\n#elif ((__MODEL__) == 0)\n#  define LZO_MM_SMALL          1\n#elif ((__MODEL__) == 2)\n#  define LZO_MM_LARGE          1\n#elif ((__MODEL__) == 3)\n#  define LZO_MM_TINY           1\n#elif ((__MODEL__) == 4)\n#  define LZO_MM_XTINY          1\n#elif ((__MODEL__) == 5)\n#  define LZO_MM_XSMALL         1\n#else\n#  error \"FIXME - MCS251 __MODEL__\"\n#endif\n#elif (LZO_ARCH_MCS51)\n#if !defined(__MODEL__)\n#  error \"FIXME - MCS51 __MODEL__\"\n#elif ((__MODEL__) == 1)\n#  define LZO_MM_SMALL          1\n#elif ((__MODEL__) == 2)\n#  define LZO_MM_LARGE          1\n#elif ((__MODEL__) == 3)\n#  define LZO_MM_TINY           1\n#elif ((__MODEL__) == 4)\n#  define LZO_MM_XTINY          1\n#elif ((__MODEL__) == 5)\n#  define LZO_MM_XSMALL         1\n#else\n#  error \"FIXME - MCS51 __MODEL__\"\n#endif\n#elif (LZO_ARCH_CRAY_PVP)\n#  define LZO_MM_PVP            1\n#else\n#  define LZO_MM_FLAT           1\n#endif\n#if (LZO_MM_COMPACT)\n#  define LZO_INFO_MM           \"compact\"\n#elif (LZO_MM_FLAT)\n#  define LZO_INFO_MM           \"flat\"\n#elif (LZO_MM_HUGE)\n#  define LZO_INFO_MM           \"huge\"\n#elif (LZO_MM_LARGE)\n#  define LZO_INFO_MM           \"large\"\n#elif (LZO_MM_MEDIUM)\n#  define LZO_INFO_MM           \"medium\"\n#elif (LZO_MM_PVP)\n#  define LZO_INFO_MM           \"pvp\"\n#elif (LZO_MM_SMALL)\n#  define LZO_INFO_MM           \"small\"\n#elif (LZO_MM_TINY)\n#  define LZO_INFO_MM           \"tiny\"\n#else\n#  error \"unknown memory model\"\n#endif\n#endif\n#if defined(SIZEOF_SHORT)\n#  define LZO_SIZEOF_SHORT          (SIZEOF_SHORT)\n#endif\n#if defined(SIZEOF_INT)\n#  define LZO_SIZEOF_INT            (SIZEOF_INT)\n#endif\n#if defined(SIZEOF_LONG)\n#  define LZO_SIZEOF_LONG           (SIZEOF_LONG)\n#endif\n#if defined(SIZEOF_LONG_LONG)\n#  define LZO_SIZEOF_LONG_LONG      (SIZEOF_LONG_LONG)\n#endif\n#if defined(SIZEOF___INT16)\n#  define LZO_SIZEOF___INT16        (SIZEOF___INT16)\n#endif\n#if defined(SIZEOF___INT32)\n#  define LZO_SIZEOF___INT32        (SIZEOF___INT32)\n#endif\n#if defined(SIZEOF___INT64)\n#  define LZO_SIZEOF___INT64        (SIZEOF___INT64)\n#endif\n#if defined(SIZEOF_VOID_P)\n#  define LZO_SIZEOF_VOID_P         (SIZEOF_VOID_P)\n#endif\n#if defined(SIZEOF_SIZE_T)\n#  define LZO_SIZEOF_SIZE_T         (SIZEOF_SIZE_T)\n#endif\n#if defined(SIZEOF_PTRDIFF_T)\n#  define LZO_SIZEOF_PTRDIFF_T      (SIZEOF_PTRDIFF_T)\n#endif\n#define __LZO_LSR(x,b)    (((x)+0ul) >> (b))\n#if !defined(LZO_SIZEOF_SHORT)\n#  if (LZO_ARCH_CRAY_PVP)\n#    define LZO_SIZEOF_SHORT        8\n#  elif (USHRT_MAX == LZO_0xffffL)\n#    define LZO_SIZEOF_SHORT        2\n#  elif (__LZO_LSR(USHRT_MAX,7) == 1)\n#    define LZO_SIZEOF_SHORT        1\n#  elif (__LZO_LSR(USHRT_MAX,15) == 1)\n#    define LZO_SIZEOF_SHORT        2\n#  elif (__LZO_LSR(USHRT_MAX,31) == 1)\n#    define LZO_SIZEOF_SHORT        4\n#  elif (__LZO_LSR(USHRT_MAX,63) == 1)\n#    define LZO_SIZEOF_SHORT        8\n#  elif (__LZO_LSR(USHRT_MAX,127) == 1)\n#    define LZO_SIZEOF_SHORT        16\n#  else\n#    error \"LZO_SIZEOF_SHORT\"\n#  endif\n#endif\n#if !defined(LZO_SIZEOF_INT)\n#  if (LZO_ARCH_CRAY_PVP)\n#    define LZO_SIZEOF_INT          8\n#  elif (UINT_MAX == LZO_0xffffL)\n#    define LZO_SIZEOF_INT          2\n#  elif (UINT_MAX == LZO_0xffffffffL)\n#    define LZO_SIZEOF_INT          4\n#  elif (__LZO_LSR(UINT_MAX,7) == 1)\n#    define LZO_SIZEOF_INT          1\n#  elif (__LZO_LSR(UINT_MAX,15) == 1)\n#    define LZO_SIZEOF_INT          2\n#  elif (__LZO_LSR(UINT_MAX,31) == 1)\n#    define LZO_SIZEOF_INT          4\n#  elif (__LZO_LSR(UINT_MAX,63) == 1)\n#    define LZO_SIZEOF_INT          8\n#  elif (__LZO_LSR(UINT_MAX,127) == 1)\n#    define LZO_SIZEOF_INT          16\n#  else\n#    error \"LZO_SIZEOF_INT\"\n#  endif\n#endif\n#if !defined(LZO_SIZEOF_LONG)\n#  if (ULONG_MAX == LZO_0xffffffffL)\n#    define LZO_SIZEOF_LONG         4\n#  elif (__LZO_LSR(ULONG_MAX,7) == 1)\n#    define LZO_SIZEOF_LONG         1\n#  elif (__LZO_LSR(ULONG_MAX,15) == 1)\n#    define LZO_SIZEOF_LONG         2\n#  elif (__LZO_LSR(ULONG_MAX,31) == 1)\n#    define LZO_SIZEOF_LONG         4\n#  elif (__LZO_LSR(ULONG_MAX,63) == 1)\n#    define LZO_SIZEOF_LONG         8\n#  elif (__LZO_LSR(ULONG_MAX,127) == 1)\n#    define LZO_SIZEOF_LONG         16\n#  else\n#    error \"LZO_SIZEOF_LONG\"\n#  endif\n#endif\n#if !defined(LZO_SIZEOF_LONG_LONG) && !defined(LZO_SIZEOF___INT64)\n#if (LZO_SIZEOF_LONG > 0 && LZO_SIZEOF_LONG < 8)\n#  if defined(__LONG_MAX__) && defined(__LONG_LONG_MAX__)\n#    if (LZO_CC_GNUC >= 0x030300ul)\n#      if ((__LONG_MAX__)+0 == (__LONG_LONG_MAX__)+0)\n#        define LZO_SIZEOF_LONG_LONG      LZO_SIZEOF_LONG\n#      elif (__LZO_LSR(__LONG_LONG_MAX__,30) == 1)\n#        define LZO_SIZEOF_LONG_LONG      4\n#      endif\n#    endif\n#  endif\n#endif\n#endif\n#if !defined(LZO_SIZEOF_LONG_LONG) && !defined(LZO_SIZEOF___INT64)\n#if (LZO_SIZEOF_LONG > 0 && LZO_SIZEOF_LONG < 8)\n#if (LZO_ARCH_I086 && LZO_CC_DMC)\n#elif (LZO_CC_CILLY) && defined(__GNUC__)\n#  define LZO_SIZEOF_LONG_LONG      8\n#elif (LZO_CC_CLANG || LZO_CC_GNUC || LZO_CC_LLVM || LZO_CC_PATHSCALE)\n#  define LZO_SIZEOF_LONG_LONG      8\n#elif ((LZO_OS_WIN32 || LZO_OS_WIN64 || defined(_WIN32)) && LZO_CC_MSC && (_MSC_VER >= 1400))\n#  define LZO_SIZEOF_LONG_LONG      8\n#elif (LZO_OS_WIN64 || defined(_WIN64))\n#  define LZO_SIZEOF___INT64        8\n#elif (LZO_ARCH_I386 && (LZO_CC_DMC))\n#  define LZO_SIZEOF_LONG_LONG      8\n#elif (LZO_ARCH_I386 && (LZO_CC_SYMANTECC && (__SC__ >= 0x700)))\n#  define LZO_SIZEOF_LONG_LONG      8\n#elif (LZO_ARCH_I386 && (LZO_CC_INTELC && defined(__linux__)))\n#  define LZO_SIZEOF_LONG_LONG      8\n#elif (LZO_ARCH_I386 && (LZO_CC_MWERKS || LZO_CC_PELLESC || LZO_CC_PGI || LZO_CC_SUNPROC))\n#  define LZO_SIZEOF_LONG_LONG      8\n#elif (LZO_ARCH_I386 && (LZO_CC_INTELC || LZO_CC_MSC))\n#  define LZO_SIZEOF___INT64        8\n#elif ((LZO_OS_WIN32 || defined(_WIN32)) && (LZO_CC_MSC))\n#  define LZO_SIZEOF___INT64        8\n#elif (LZO_ARCH_I386 && (LZO_CC_BORLANDC && (__BORLANDC__ >= 0x0520)))\n#  define LZO_SIZEOF___INT64        8\n#elif (LZO_ARCH_I386 && (LZO_CC_WATCOMC && (__WATCOMC__ >= 1100)))\n#  define LZO_SIZEOF___INT64        8\n#elif (LZO_CC_WATCOMC && defined(_INTEGRAL_MAX_BITS) && (_INTEGRAL_MAX_BITS == 64))\n#  define LZO_SIZEOF___INT64        8\n#elif (LZO_OS_OS400 || defined(__OS400__)) && defined(__LLP64_IFC__)\n#  define LZO_SIZEOF_LONG_LONG      8\n#elif (defined(__vms) || defined(__VMS)) && (__INITIAL_POINTER_SIZE+0 == 64)\n#  define LZO_SIZEOF_LONG_LONG      8\n#elif (LZO_CC_SDCC) && (LZO_SIZEOF_INT == 2)\n#elif 1 && defined(__STDC_VERSION__) && (__STDC_VERSION__ >= 199901L)\n#  define LZO_SIZEOF_LONG_LONG      8\n#endif\n#endif\n#endif\n#if defined(__cplusplus) && (LZO_CC_GNUC)\n#  if (LZO_CC_GNUC < 0x020800ul)\n#    undef LZO_SIZEOF_LONG_LONG\n#  endif\n#endif\n#if (LZO_CFG_NO_LONG_LONG) || defined(__NO_LONG_LONG)\n#  undef LZO_SIZEOF_LONG_LONG\n#endif\n#if !defined(LZO_SIZEOF_VOID_P)\n#if (LZO_ARCH_I086)\n#  define __LZO_WORDSIZE            2\n#  if (LZO_MM_TINY || LZO_MM_SMALL || LZO_MM_MEDIUM)\n#    define LZO_SIZEOF_VOID_P       2\n#  elif (LZO_MM_COMPACT || LZO_MM_LARGE || LZO_MM_HUGE)\n#    define LZO_SIZEOF_VOID_P       4\n#  else\n#    error \"LZO_MM\"\n#  endif\n#elif (LZO_ARCH_AVR || LZO_ARCH_Z80)\n#  define __LZO_WORDSIZE            1\n#  define LZO_SIZEOF_VOID_P         2\n#elif (LZO_ARCH_C166 || LZO_ARCH_MCS51 || LZO_ARCH_MCS251 || LZO_ARCH_MSP430)\n#  define LZO_SIZEOF_VOID_P         2\n#elif (LZO_ARCH_H8300)\n#  if defined(__NORMAL_MODE__)\n#    define __LZO_WORDSIZE          4\n#    define LZO_SIZEOF_VOID_P       2\n#  elif defined(__H8300H__) || defined(__H8300S__) || defined(__H8300SX__)\n#    define __LZO_WORDSIZE          4\n#    define LZO_SIZEOF_VOID_P       4\n#  else\n#    define __LZO_WORDSIZE          2\n#    define LZO_SIZEOF_VOID_P       2\n#  endif\n#  if (LZO_CC_GNUC && (LZO_CC_GNUC < 0x040000ul)) && (LZO_SIZEOF_INT == 4)\n#    define LZO_SIZEOF_SIZE_T       LZO_SIZEOF_INT\n#    define LZO_SIZEOF_PTRDIFF_T    LZO_SIZEOF_INT\n#  endif\n#elif (LZO_ARCH_M16C)\n#  define __LZO_WORDSIZE            2\n#  if defined(__m32c_cpu__) || defined(__m32cm_cpu__)\n#    define LZO_SIZEOF_VOID_P       4\n#  else\n#    define LZO_SIZEOF_VOID_P       2\n#  endif\n#elif (LZO_SIZEOF_LONG == 8) && ((defined(__mips__) && defined(__R5900__)) || defined(__MIPS_PSX2__))\n#  define __LZO_WORDSIZE            8\n#  define LZO_SIZEOF_VOID_P         4\n#elif defined(__LLP64__) || defined(__LLP64) || defined(_LLP64) || defined(_WIN64)\n#  define __LZO_WORDSIZE            8\n#  define LZO_SIZEOF_VOID_P         8\n#elif (LZO_OS_OS400 || defined(__OS400__)) && defined(__LLP64_IFC__)\n#  define LZO_SIZEOF_VOID_P         LZO_SIZEOF_LONG\n#  define LZO_SIZEOF_SIZE_T         LZO_SIZEOF_LONG\n#  define LZO_SIZEOF_PTRDIFF_T      LZO_SIZEOF_LONG\n#elif (LZO_OS_OS400 || defined(__OS400__))\n#  define __LZO_WORDSIZE            LZO_SIZEOF_LONG\n#  define LZO_SIZEOF_VOID_P         16\n#  define LZO_SIZEOF_SIZE_T         LZO_SIZEOF_LONG\n#  define LZO_SIZEOF_PTRDIFF_T      LZO_SIZEOF_LONG\n#elif (defined(__vms) || defined(__VMS)) && (__INITIAL_POINTER_SIZE+0 == 64)\n#  define LZO_SIZEOF_VOID_P         8\n#  define LZO_SIZEOF_SIZE_T         LZO_SIZEOF_LONG\n#  define LZO_SIZEOF_PTRDIFF_T      LZO_SIZEOF_LONG\n#elif (LZO_ARCH_SPU)\n# if 0\n#  define __LZO_WORDSIZE            16\n# endif\n#  define LZO_SIZEOF_VOID_P         4\n#else\n#  define LZO_SIZEOF_VOID_P         LZO_SIZEOF_LONG\n#endif\n#endif\n#if !defined(LZO_WORDSIZE)\n#  if defined(__LZO_WORDSIZE)\n#    define LZO_WORDSIZE            __LZO_WORDSIZE\n#  else\n#    define LZO_WORDSIZE            LZO_SIZEOF_VOID_P\n#  endif\n#endif\n#if !defined(LZO_SIZEOF_SIZE_T)\n#if (LZO_ARCH_I086 || LZO_ARCH_M16C)\n#  define LZO_SIZEOF_SIZE_T         2\n#else\n#  define LZO_SIZEOF_SIZE_T         LZO_SIZEOF_VOID_P\n#endif\n#endif\n#if !defined(LZO_SIZEOF_PTRDIFF_T)\n#if (LZO_ARCH_I086)\n#  if (LZO_MM_TINY || LZO_MM_SMALL || LZO_MM_MEDIUM || LZO_MM_HUGE)\n#    define LZO_SIZEOF_PTRDIFF_T    LZO_SIZEOF_VOID_P\n#  elif (LZO_MM_COMPACT || LZO_MM_LARGE)\n#    if (LZO_CC_BORLANDC || LZO_CC_TURBOC)\n#      define LZO_SIZEOF_PTRDIFF_T  4\n#    else\n#      define LZO_SIZEOF_PTRDIFF_T  2\n#    endif\n#  else\n#    error \"LZO_MM\"\n#  endif\n#else\n#  define LZO_SIZEOF_PTRDIFF_T      LZO_SIZEOF_SIZE_T\n#endif\n#endif\n#if (LZO_ABI_NEUTRAL_ENDIAN)\n#  undef LZO_ABI_BIG_ENDIAN\n#  undef LZO_ABI_LITTLE_ENDIAN\n#elif !(LZO_ABI_BIG_ENDIAN) && !(LZO_ABI_LITTLE_ENDIAN)\n#if (LZO_ARCH_ALPHA) && (LZO_ARCH_CRAY_MPP)\n#  define LZO_ABI_BIG_ENDIAN        1\n#elif (LZO_ARCH_IA64) && (LZO_OS_POSIX_LINUX || LZO_OS_WIN64)\n#  define LZO_ABI_LITTLE_ENDIAN     1\n#elif (LZO_ARCH_ALPHA || LZO_ARCH_AMD64 || LZO_ARCH_BLACKFIN || LZO_ARCH_CRIS || LZO_ARCH_I086 || LZO_ARCH_I386 || LZO_ARCH_MSP430)\n#  define LZO_ABI_LITTLE_ENDIAN     1\n#elif (LZO_ARCH_AVR32 || LZO_ARCH_M68K || LZO_ARCH_S390)\n#  define LZO_ABI_BIG_ENDIAN        1\n#elif 1 && defined(__IAR_SYSTEMS_ICC__) && defined(__LITTLE_ENDIAN__)\n#  if (__LITTLE_ENDIAN__ == 1)\n#    define LZO_ABI_LITTLE_ENDIAN   1\n#  else\n#    define LZO_ABI_BIG_ENDIAN      1\n#  endif\n#elif 1 && defined(__BIG_ENDIAN__) && !defined(__LITTLE_ENDIAN__)\n#  define LZO_ABI_BIG_ENDIAN        1\n#elif 1 && defined(__LITTLE_ENDIAN__) && !defined(__BIG_ENDIAN__)\n#  define LZO_ABI_LITTLE_ENDIAN     1\n#elif 1 && (LZO_ARCH_ARM) && defined(__ARMEB__) && !defined(__ARMEL__)\n#  define LZO_ABI_BIG_ENDIAN        1\n#elif 1 && (LZO_ARCH_ARM) && defined(__ARMEL__) && !defined(__ARMEB__)\n#  define LZO_ABI_LITTLE_ENDIAN     1\n#elif 1 && (LZO_ARCH_MIPS) && defined(__MIPSEB__) && !defined(__MIPSEL__)\n#  define LZO_ABI_BIG_ENDIAN        1\n#elif 1 && (LZO_ARCH_MIPS) && defined(__MIPSEL__) && !defined(__MIPSEB__)\n#  define LZO_ABI_LITTLE_ENDIAN     1\n#endif\n#endif\n#if (LZO_ABI_BIG_ENDIAN) && (LZO_ABI_LITTLE_ENDIAN)\n#  error \"this should not happen\"\n#endif\n#if (LZO_ABI_BIG_ENDIAN)\n#  define LZO_INFO_ABI_ENDIAN       \"be\"\n#elif (LZO_ABI_LITTLE_ENDIAN)\n#  define LZO_INFO_ABI_ENDIAN       \"le\"\n#elif (LZO_ABI_NEUTRAL_ENDIAN)\n#  define LZO_INFO_ABI_ENDIAN       \"neutral\"\n#endif\n#if (LZO_SIZEOF_INT == 1 && LZO_SIZEOF_LONG == 2 && LZO_SIZEOF_VOID_P == 2)\n#  define LZO_ABI_I8LP16         1\n#  define LZO_INFO_ABI_PM       \"i8lp16\"\n#elif (LZO_SIZEOF_INT == 2 && LZO_SIZEOF_LONG == 2 && LZO_SIZEOF_VOID_P == 2)\n#  define LZO_ABI_ILP16         1\n#  define LZO_INFO_ABI_PM       \"ilp16\"\n#elif (LZO_SIZEOF_INT == 4 && LZO_SIZEOF_LONG == 4 && LZO_SIZEOF_VOID_P == 4)\n#  define LZO_ABI_ILP32         1\n#  define LZO_INFO_ABI_PM       \"ilp32\"\n#elif (LZO_SIZEOF_INT == 4 && LZO_SIZEOF_LONG == 4 && LZO_SIZEOF_VOID_P == 8 && LZO_SIZEOF_SIZE_T == 8)\n#  define LZO_ABI_LLP64         1\n#  define LZO_INFO_ABI_PM       \"llp64\"\n#elif (LZO_SIZEOF_INT == 4 && LZO_SIZEOF_LONG == 8 && LZO_SIZEOF_VOID_P == 8)\n#  define LZO_ABI_LP64          1\n#  define LZO_INFO_ABI_PM       \"lp64\"\n#elif (LZO_SIZEOF_INT == 8 && LZO_SIZEOF_LONG == 8 && LZO_SIZEOF_VOID_P == 8)\n#  define LZO_ABI_ILP64         1\n#  define LZO_INFO_ABI_PM       \"ilp64\"\n#elif (LZO_SIZEOF_INT == 4 && LZO_SIZEOF_LONG == 8 && LZO_SIZEOF_VOID_P == 4)\n#  define LZO_ABI_IP32L64       1\n#  define LZO_INFO_ABI_PM       \"ip32l64\"\n#endif\n#if !defined(__LZO_LIBC_OVERRIDE)\n#if (LZO_LIBC_NAKED)\n#  define LZO_INFO_LIBC         \"naked\"\n#elif (LZO_LIBC_FREESTANDING)\n#  define LZO_INFO_LIBC         \"freestanding\"\n#elif (LZO_LIBC_MOSTLY_FREESTANDING)\n#  define LZO_INFO_LIBC         \"mfreestanding\"\n#elif (LZO_LIBC_ISOC90)\n#  define LZO_INFO_LIBC         \"isoc90\"\n#elif (LZO_LIBC_ISOC99)\n#  define LZO_INFO_LIBC         \"isoc99\"\n#elif defined(__dietlibc__)\n#  define LZO_LIBC_DIETLIBC     1\n#  define LZO_INFO_LIBC         \"dietlibc\"\n#elif defined(_NEWLIB_VERSION)\n#  define LZO_LIBC_NEWLIB       1\n#  define LZO_INFO_LIBC         \"newlib\"\n#elif defined(__UCLIBC__) && defined(__UCLIBC_MAJOR__) && defined(__UCLIBC_MINOR__)\n#  if defined(__UCLIBC_SUBLEVEL__)\n#    define LZO_LIBC_UCLIBC     (__UCLIBC_MAJOR__ * 0x10000L + __UCLIBC_MINOR__ * 0x100 + __UCLIBC_SUBLEVEL__)\n#  else\n#    define LZO_LIBC_UCLIBC     0x00090bL\n#  endif\n#  define LZO_INFO_LIBC         \"uclibc\"\n#elif defined(__GLIBC__) && defined(__GLIBC_MINOR__)\n#  define LZO_LIBC_GLIBC        (__GLIBC__ * 0x10000L + __GLIBC_MINOR__ * 0x100)\n#  define LZO_INFO_LIBC         \"glibc\"\n#elif (LZO_CC_MWERKS) && defined(__MSL__)\n#  define LZO_LIBC_MSL          __MSL__\n#  define LZO_INFO_LIBC         \"msl\"\n#elif 1 && defined(__IAR_SYSTEMS_ICC__)\n#  define LZO_LIBC_ISOC90       1\n#  define LZO_INFO_LIBC         \"isoc90\"\n#else\n#  define LZO_LIBC_DEFAULT      1\n#  define LZO_INFO_LIBC         \"default\"\n#endif\n#endif\n#if !defined(__lzo_gnuc_extension__)\n#if (LZO_CC_GNUC >= 0x020800ul)\n#  define __lzo_gnuc_extension__    __extension__\n#elif (LZO_CC_CLANG || LZO_CC_LLVM || LZO_CC_PATHSCALE)\n#  define __lzo_gnuc_extension__    __extension__\n#else\n#  define __lzo_gnuc_extension__    /*empty*/\n#endif\n#endif\n#if !defined(__lzo_ua_volatile)\n#  define __lzo_ua_volatile     volatile\n#endif\n#if !defined(__lzo_alignof)\n#if (LZO_CC_CILLY || LZO_CC_CLANG || LZO_CC_GNUC || LZO_CC_LLVM || LZO_CC_PATHSCALE || LZO_CC_PGI)\n#  define __lzo_alignof(e)      __alignof__(e)\n#elif (LZO_CC_INTELC && (__INTEL_COMPILER >= 700))\n#  define __lzo_alignof(e)      __alignof__(e)\n#elif (LZO_CC_MSC && (_MSC_VER >= 1300))\n#  define __lzo_alignof(e)      __alignof(e)\n#elif (LZO_CC_SUNPROC && (LZO_CC_SUNPROC >= 0x5100))\n#  define __lzo_alignof(e)      __alignof__(e)\n#endif\n#endif\n#if defined(__lzo_alignof)\n#  define __lzo_HAVE_alignof 1\n#endif\n#if !defined(__lzo_constructor)\n#if (LZO_CC_GNUC >= 0x030400ul)\n#  define __lzo_constructor     __attribute__((__constructor__,__used__))\n#elif (LZO_CC_GNUC >= 0x020700ul)\n#  define __lzo_constructor     __attribute__((__constructor__))\n#elif (LZO_CC_CLANG || LZO_CC_LLVM || LZO_CC_PATHSCALE)\n#  define __lzo_constructor     __attribute__((__constructor__))\n#endif\n#endif\n#if defined(__lzo_constructor)\n#  define __lzo_HAVE_constructor 1\n#endif\n#if !defined(__lzo_destructor)\n#if (LZO_CC_GNUC >= 0x030400ul)\n#  define __lzo_destructor      __attribute__((__destructor__,__used__))\n#elif (LZO_CC_GNUC >= 0x020700ul)\n#  define __lzo_destructor      __attribute__((__destructor__))\n#elif (LZO_CC_CLANG || LZO_CC_LLVM || LZO_CC_PATHSCALE)\n#  define __lzo_destructor      __attribute__((__destructor__))\n#endif\n#endif\n#if defined(__lzo_destructor)\n#  define __lzo_HAVE_destructor 1\n#endif\n#if (__lzo_HAVE_destructor) && !(__lzo_HAVE_constructor)\n#  error \"this should not happen\"\n#endif\n#if !defined(__lzo_inline)\n#if (LZO_CC_TURBOC && (__TURBOC__ <= 0x0295))\n#elif defined(__cplusplus)\n#  define __lzo_inline          inline\n#elif (LZO_CC_BORLANDC && (__BORLANDC__ >= 0x0550))\n#  define __lzo_inline          __inline\n#elif (LZO_CC_CILLY || LZO_CC_CLANG || LZO_CC_GNUC || LZO_CC_LLVM || LZO_CC_PATHSCALE || LZO_CC_PGI)\n#  define __lzo_inline          __inline__\n#elif (LZO_CC_DMC)\n#  define __lzo_inline          __inline\n#elif (LZO_CC_INTELC)\n#  define __lzo_inline          __inline\n#elif (LZO_CC_MWERKS && (__MWERKS__ >= 0x2405))\n#  define __lzo_inline          __inline\n#elif (LZO_CC_MSC && (_MSC_VER >= 900))\n#  define __lzo_inline          __inline\n#elif (LZO_CC_SUNPROC && (LZO_CC_SUNPROC >= 0x5100))\n#  define __lzo_inline          __inline__\n#elif defined(__STDC_VERSION__) && (__STDC_VERSION__ >= 199901L)\n#  define __lzo_inline          inline\n#endif\n#endif\n#if defined(__lzo_inline)\n#  define __lzo_HAVE_inline 1\n#else\n#  define __lzo_inline          /*empty*/\n#endif\n#if !defined(__lzo_forceinline)\n#if (LZO_CC_GNUC >= 0x030200ul)\n#  define __lzo_forceinline     __inline__ __attribute__((__always_inline__))\n#elif (LZO_CC_INTELC && (__INTEL_COMPILER >= 450) && LZO_CC_SYNTAX_MSC)\n#  define __lzo_forceinline     __forceinline\n#elif (LZO_CC_INTELC && (__INTEL_COMPILER >= 800) && LZO_CC_SYNTAX_GNUC)\n#  define __lzo_forceinline     __inline__ __attribute__((__always_inline__))\n#elif (LZO_CC_CLANG || LZO_CC_LLVM || LZO_CC_PATHSCALE)\n#  define __lzo_forceinline     __inline__ __attribute__((__always_inline__))\n#elif (LZO_CC_MSC && (_MSC_VER >= 1200))\n#  define __lzo_forceinline     __forceinline\n#elif (LZO_CC_SUNPROC && (LZO_CC_SUNPROC >= 0x5100))\n#  define __lzo_forceinline     __inline__ __attribute__((__always_inline__))\n#endif\n#endif\n#if defined(__lzo_forceinline)\n#  define __lzo_HAVE_forceinline 1\n#else\n#  define __lzo_forceinline     /*empty*/\n#endif\n#if !defined(__lzo_noinline)\n#if 1 && (LZO_ARCH_I386) && (LZO_CC_GNUC >= 0x040000ul) && (LZO_CC_GNUC < 0x040003ul)\n#  define __lzo_noinline        __attribute__((__noinline__,__used__))\n#elif (LZO_CC_GNUC >= 0x030200ul)\n#  define __lzo_noinline        __attribute__((__noinline__))\n#elif (LZO_CC_INTELC && (__INTEL_COMPILER >= 600) && LZO_CC_SYNTAX_MSC)\n#  define __lzo_noinline        __declspec(noinline)\n#elif (LZO_CC_INTELC && (__INTEL_COMPILER >= 800) && LZO_CC_SYNTAX_GNUC)\n#  define __lzo_noinline        __attribute__((__noinline__))\n#elif (LZO_CC_CLANG || LZO_CC_LLVM || LZO_CC_PATHSCALE)\n#  define __lzo_noinline        __attribute__((__noinline__))\n#elif (LZO_CC_MSC && (_MSC_VER >= 1300))\n#  define __lzo_noinline        __declspec(noinline)\n#elif (LZO_CC_MWERKS && (__MWERKS__ >= 0x3200) && (LZO_OS_WIN32 || LZO_OS_WIN64))\n#  if defined(__cplusplus)\n#  else\n#    define __lzo_noinline      __declspec(noinline)\n#  endif\n#elif (LZO_CC_SUNPROC && (LZO_CC_SUNPROC >= 0x5100))\n#  define __lzo_noinline        __attribute__((__noinline__))\n#endif\n#endif\n#if defined(__lzo_noinline)\n#  define __lzo_HAVE_noinline 1\n#else\n#  define __lzo_noinline        /*empty*/\n#endif\n#if (__lzo_HAVE_forceinline || __lzo_HAVE_noinline) && !(__lzo_HAVE_inline)\n#  error \"this should not happen\"\n#endif\n#if !defined(__lzo_noreturn)\n#if (LZO_CC_GNUC >= 0x020700ul)\n#  define __lzo_noreturn        __attribute__((__noreturn__))\n#elif (LZO_CC_INTELC && (__INTEL_COMPILER >= 450) && LZO_CC_SYNTAX_MSC)\n#  define __lzo_noreturn        __declspec(noreturn)\n#elif (LZO_CC_INTELC && (__INTEL_COMPILER >= 600) && LZO_CC_SYNTAX_GNUC)\n#  define __lzo_noreturn        __attribute__((__noreturn__))\n#elif (LZO_CC_CLANG || LZO_CC_LLVM || LZO_CC_PATHSCALE)\n#  define __lzo_noreturn        __attribute__((__noreturn__))\n#elif (LZO_CC_MSC && (_MSC_VER >= 1200))\n#  define __lzo_noreturn        __declspec(noreturn)\n#endif\n#endif\n#if defined(__lzo_noreturn)\n#  define __lzo_HAVE_noreturn 1\n#else\n#  define __lzo_noreturn        /*empty*/\n#endif\n#if !defined(__lzo_nothrow)\n#if (LZO_CC_GNUC >= 0x030300ul)\n#  define __lzo_nothrow         __attribute__((__nothrow__))\n#elif (LZO_CC_INTELC && (__INTEL_COMPILER >= 450) && LZO_CC_SYNTAX_MSC) && defined(__cplusplus)\n#  define __lzo_nothrow         __declspec(nothrow)\n#elif (LZO_CC_INTELC && (__INTEL_COMPILER >= 900) && LZO_CC_SYNTAX_GNUC)\n#  define __lzo_nothrow         __attribute__((__nothrow__))\n#elif (LZO_CC_CLANG || LZO_CC_LLVM || LZO_CC_PATHSCALE)\n#  define __lzo_nothrow         __attribute__((__nothrow__))\n#elif (LZO_CC_MSC && (_MSC_VER >= 1200)) && defined(__cplusplus)\n#  define __lzo_nothrow         __declspec(nothrow)\n#endif\n#endif\n#if defined(__lzo_nothrow)\n#  define __lzo_HAVE_nothrow 1\n#else\n#  define __lzo_nothrow         /*empty*/\n#endif\n#if !defined(__lzo_restrict)\n#if (LZO_CC_GNUC >= 0x030400ul)\n#  define __lzo_restrict        __restrict__\n#elif (LZO_CC_INTELC && (__INTEL_COMPILER >= 600) && LZO_CC_SYNTAX_GNUC)\n#  define __lzo_restrict        __restrict__\n#elif (LZO_CC_CLANG || LZO_CC_LLVM)\n#  define __lzo_restrict        __restrict__\n#elif (LZO_CC_MSC && (_MSC_VER >= 1400))\n#  define __lzo_restrict        __restrict\n#endif\n#endif\n#if defined(__lzo_restrict)\n#  define __lzo_HAVE_restrict 1\n#else\n#  define __lzo_restrict        /*empty*/\n#endif\n#if !defined(__lzo_likely) && !defined(__lzo_unlikely)\n#if (LZO_CC_GNUC >= 0x030200ul)\n#  define __lzo_likely(e)       (__builtin_expect(!!(e),1))\n#  define __lzo_unlikely(e)     (__builtin_expect(!!(e),0))\n#elif (LZO_CC_INTELC && (__INTEL_COMPILER >= 800))\n#  define __lzo_likely(e)       (__builtin_expect(!!(e),1))\n#  define __lzo_unlikely(e)     (__builtin_expect(!!(e),0))\n#elif (LZO_CC_CLANG || LZO_CC_LLVM || LZO_CC_PATHSCALE)\n#  define __lzo_likely(e)       (__builtin_expect(!!(e),1))\n#  define __lzo_unlikely(e)     (__builtin_expect(!!(e),0))\n#endif\n#endif\n#if defined(__lzo_likely)\n#  define __lzo_HAVE_likely 1\n#else\n#  define __lzo_likely(e)       (e)\n#endif\n#if defined(__lzo_unlikely)\n#  define __lzo_HAVE_unlikely 1\n#else\n#  define __lzo_unlikely(e)     (e)\n#endif\n#if !defined(LZO_UNUSED)\n#  if (LZO_CC_BORLANDC && (__BORLANDC__ >= 0x0600))\n#    define LZO_UNUSED(var)         ((void) &var)\n#  elif (LZO_CC_BORLANDC || LZO_CC_HIGHC || LZO_CC_NDPC || LZO_CC_PELLESC || LZO_CC_TURBOC)\n#    define LZO_UNUSED(var)         if (&var) ; else\n#  elif (LZO_CC_CLANG || LZO_CC_GNUC || LZO_CC_LLVM || LZO_CC_PATHSCALE)\n#    define LZO_UNUSED(var)         ((void) var)\n#  elif (LZO_CC_MSC && (_MSC_VER < 900))\n#    define LZO_UNUSED(var)         if (&var) ; else\n#  elif (LZO_CC_KEILC)\n#    define LZO_UNUSED(var)         {extern int __lzo_unused[1-2*!(sizeof(var)>0)];}\n#  elif (LZO_CC_PACIFICC)\n#    define LZO_UNUSED(var)         ((void) sizeof(var))\n#  elif (LZO_CC_WATCOMC) && defined(__cplusplus)\n#    define LZO_UNUSED(var)         ((void) var)\n#  else\n#    define LZO_UNUSED(var)         ((void) &var)\n#  endif\n#endif\n#if !defined(LZO_UNUSED_FUNC)\n#  if (LZO_CC_BORLANDC && (__BORLANDC__ >= 0x0600))\n#    define LZO_UNUSED_FUNC(func)   ((void) func)\n#  elif (LZO_CC_BORLANDC || LZO_CC_NDPC || LZO_CC_TURBOC)\n#    define LZO_UNUSED_FUNC(func)   if (func) ; else\n#  elif (LZO_CC_CLANG || LZO_CC_LLVM)\n#    define LZO_UNUSED_FUNC(func)   ((void) &func)\n#  elif (LZO_CC_MSC && (_MSC_VER < 900))\n#    define LZO_UNUSED_FUNC(func)   if (func) ; else\n#  elif (LZO_CC_MSC)\n#    define LZO_UNUSED_FUNC(func)   ((void) &func)\n#  elif (LZO_CC_KEILC || LZO_CC_PELLESC)\n#    define LZO_UNUSED_FUNC(func)   {extern int __lzo_unused[1-2*!(sizeof((int)func)>0)];}\n#  else\n#    define LZO_UNUSED_FUNC(func)   ((void) func)\n#  endif\n#endif\n#if !defined(LZO_UNUSED_LABEL)\n#  if (LZO_CC_WATCOMC) && defined(__cplusplus)\n#    define LZO_UNUSED_LABEL(l)     switch(0) case 1:goto l\n#  elif (LZO_CC_CLANG || LZO_CC_INTELC || LZO_CC_WATCOMC)\n#    define LZO_UNUSED_LABEL(l)     if (0) goto l\n#  else\n#    define LZO_UNUSED_LABEL(l)     switch(0) case 1:goto l\n#  endif\n#endif\n#if !defined(LZO_DEFINE_UNINITIALIZED_VAR)\n#  if 0\n#    define LZO_DEFINE_UNINITIALIZED_VAR(type,var,init)  type var\n#  elif 0 && (LZO_CC_GNUC)\n#    define LZO_DEFINE_UNINITIALIZED_VAR(type,var,init)  type var = var\n#  else\n#    define LZO_DEFINE_UNINITIALIZED_VAR(type,var,init)  type var = init\n#  endif\n#endif\n#if !defined(LZO_UNCONST_CAST)\n#  if 0 && defined(__cplusplus)\n#    define LZO_UNCONST_CAST(t,e)   (const_cast<t> (e))\n#  elif (LZO_CC_CLANG || LZO_CC_GNUC || LZO_CC_LLVM || LZO_CC_PATHSCALE)\n#    define LZO_UNCONST_CAST(t,e)   ((t) ((void *) ((char *) ((lzo_uintptr_t) ((const void *) (e))))))\n#  else\n#    define LZO_UNCONST_CAST(t,e)   ((t) ((void *) ((char *) ((const void *) (e)))))\n#  endif\n#endif\n#if !defined(LZO_COMPILE_TIME_ASSERT_HEADER)\n#  if (LZO_CC_AZTECC || LZO_CC_ZORTECHC)\n#    define LZO_COMPILE_TIME_ASSERT_HEADER(e)  extern int __lzo_cta[1-!(e)];\n#  elif (LZO_CC_DMC || LZO_CC_SYMANTECC)\n#    define LZO_COMPILE_TIME_ASSERT_HEADER(e)  extern int __lzo_cta[1u-2*!(e)];\n#  elif (LZO_CC_TURBOC && (__TURBOC__ == 0x0295))\n#    define LZO_COMPILE_TIME_ASSERT_HEADER(e)  extern int __lzo_cta[1-!(e)];\n#  else\n#    define LZO_COMPILE_TIME_ASSERT_HEADER(e)  extern int __lzo_cta[1-2*!(e)];\n#  endif\n#endif\n#if !defined(LZO_COMPILE_TIME_ASSERT)\n#  if (LZO_CC_AZTECC)\n#    define LZO_COMPILE_TIME_ASSERT(e)  {typedef int __lzo_cta_t[1-!(e)];}\n#  elif (LZO_CC_DMC || LZO_CC_PACIFICC || LZO_CC_SYMANTECC || LZO_CC_ZORTECHC)\n#    define LZO_COMPILE_TIME_ASSERT(e)  switch(0) case 1:case !(e):break;\n#  elif (LZO_CC_MSC && (_MSC_VER < 900))\n#    define LZO_COMPILE_TIME_ASSERT(e)  switch(0) case 1:case !(e):break;\n#  elif (LZO_CC_TURBOC && (__TURBOC__ == 0x0295))\n#    define LZO_COMPILE_TIME_ASSERT(e)  switch(0) case 1:case !(e):break;\n#  else\n#    define LZO_COMPILE_TIME_ASSERT(e)  {typedef int __lzo_cta_t[1-2*!(e)];}\n#  endif\n#endif\n#if (LZO_ARCH_I086 || LZO_ARCH_I386) && (LZO_OS_DOS16 || LZO_OS_DOS32 || LZO_OS_OS2 || LZO_OS_OS216 || LZO_OS_WIN16 || LZO_OS_WIN32 || LZO_OS_WIN64)\n#  if (LZO_CC_GNUC || LZO_CC_HIGHC || LZO_CC_NDPC || LZO_CC_PACIFICC)\n#  elif (LZO_CC_DMC || LZO_CC_SYMANTECC || LZO_CC_ZORTECHC)\n#    define __lzo_cdecl                 __cdecl\n#    define __lzo_cdecl_atexit          /*empty*/\n#    define __lzo_cdecl_main            __cdecl\n#    if (LZO_OS_OS2 && (LZO_CC_DMC || LZO_CC_SYMANTECC))\n#      define __lzo_cdecl_qsort         __pascal\n#    elif (LZO_OS_OS2 && (LZO_CC_ZORTECHC))\n#      define __lzo_cdecl_qsort         _stdcall\n#    else\n#      define __lzo_cdecl_qsort         __cdecl\n#    endif\n#  elif (LZO_CC_WATCOMC)\n#    define __lzo_cdecl                 __cdecl\n#  else\n#    define __lzo_cdecl                 __cdecl\n#    define __lzo_cdecl_atexit          __cdecl\n#    define __lzo_cdecl_main            __cdecl\n#    define __lzo_cdecl_qsort           __cdecl\n#  endif\n#  if (LZO_CC_GNUC || LZO_CC_HIGHC || LZO_CC_NDPC || LZO_CC_PACIFICC || LZO_CC_WATCOMC)\n#  elif (LZO_OS_OS2 && (LZO_CC_DMC || LZO_CC_SYMANTECC))\n#    define __lzo_cdecl_sighandler      __pascal\n#  elif (LZO_OS_OS2 && (LZO_CC_ZORTECHC))\n#    define __lzo_cdecl_sighandler      _stdcall\n#  elif (LZO_CC_MSC && (_MSC_VER >= 1400)) && defined(_M_CEE_PURE)\n#    define __lzo_cdecl_sighandler      __clrcall\n#  elif (LZO_CC_MSC && (_MSC_VER >= 600 && _MSC_VER < 700))\n#    if defined(_DLL)\n#      define __lzo_cdecl_sighandler    _far _cdecl _loadds\n#    elif defined(_MT)\n#      define __lzo_cdecl_sighandler    _far _cdecl\n#    else\n#      define __lzo_cdecl_sighandler    _cdecl\n#    endif\n#  else\n#    define __lzo_cdecl_sighandler      __cdecl\n#  endif\n#elif (LZO_ARCH_I386) && (LZO_CC_WATCOMC)\n#  define __lzo_cdecl                   __cdecl\n#elif (LZO_ARCH_M68K && LZO_OS_TOS && (LZO_CC_PUREC || LZO_CC_TURBOC))\n#  define __lzo_cdecl                   cdecl\n#endif\n#if !defined(__lzo_cdecl)\n#  define __lzo_cdecl                   /*empty*/\n#endif\n#if !defined(__lzo_cdecl_atexit)\n#  define __lzo_cdecl_atexit            /*empty*/\n#endif\n#if !defined(__lzo_cdecl_main)\n#  define __lzo_cdecl_main              /*empty*/\n#endif\n#if !defined(__lzo_cdecl_qsort)\n#  define __lzo_cdecl_qsort             /*empty*/\n#endif\n#if !defined(__lzo_cdecl_sighandler)\n#  define __lzo_cdecl_sighandler        /*empty*/\n#endif\n#if !defined(__lzo_cdecl_va)\n#  define __lzo_cdecl_va                __lzo_cdecl\n#endif\n#if !(LZO_CFG_NO_WINDOWS_H)\n#if (LZO_OS_CYGWIN || (LZO_OS_EMX && defined(__RSXNT__)) || LZO_OS_WIN32 || LZO_OS_WIN64)\n#  if (LZO_CC_WATCOMC && (__WATCOMC__ < 1000))\n#  elif (LZO_OS_WIN32 && LZO_CC_GNUC) && defined(__PW32__)\n#  elif ((LZO_OS_CYGWIN || defined(__MINGW32__)) && (LZO_CC_GNUC && (LZO_CC_GNUC < 0x025f00ul)))\n#  else\n#    define LZO_HAVE_WINDOWS_H 1\n#  endif\n#endif\n#endif\n#if (LZO_ARCH_ALPHA)\n#  define LZO_OPT_AVOID_UINT_INDEX  1\n#  define LZO_OPT_AVOID_SHORT       1\n#  define LZO_OPT_AVOID_USHORT      1\n#elif (LZO_ARCH_AMD64)\n#  define LZO_OPT_AVOID_INT_INDEX   1\n#  define LZO_OPT_AVOID_UINT_INDEX  1\n#  define LZO_OPT_UNALIGNED16       1\n#  define LZO_OPT_UNALIGNED32       1\n#  define LZO_OPT_UNALIGNED64       1\n#elif (LZO_ARCH_ARM && LZO_ARCH_ARM_THUMB)\n#elif (LZO_ARCH_ARM)\n#  define LZO_OPT_AVOID_SHORT       1\n#  define LZO_OPT_AVOID_USHORT      1\n#elif (LZO_ARCH_CRIS)\n#  define LZO_OPT_UNALIGNED16       1\n#  define LZO_OPT_UNALIGNED32       1\n#elif (LZO_ARCH_I386)\n#  define LZO_OPT_UNALIGNED16       1\n#  define LZO_OPT_UNALIGNED32       1\n#elif (LZO_ARCH_IA64)\n#  define LZO_OPT_AVOID_INT_INDEX   1\n#  define LZO_OPT_AVOID_UINT_INDEX  1\n#  define LZO_OPT_PREFER_POSTINC    1\n#elif (LZO_ARCH_M68K)\n#  define LZO_OPT_PREFER_POSTINC    1\n#  define LZO_OPT_PREFER_PREDEC     1\n#  if defined(__mc68020__) && !defined(__mcoldfire__)\n#    define LZO_OPT_UNALIGNED16     1\n#    define LZO_OPT_UNALIGNED32     1\n#  endif\n#elif (LZO_ARCH_MIPS)\n#  define LZO_OPT_AVOID_UINT_INDEX  1\n#elif (LZO_ARCH_POWERPC)\n#  define LZO_OPT_PREFER_PREINC     1\n#  define LZO_OPT_PREFER_PREDEC     1\n#  if (LZO_ABI_BIG_ENDIAN)\n#    define LZO_OPT_UNALIGNED16     1\n#    define LZO_OPT_UNALIGNED32     1\n#  endif\n#elif (LZO_ARCH_S390)\n#  define LZO_OPT_UNALIGNED16       1\n#  define LZO_OPT_UNALIGNED32       1\n#  if (LZO_SIZEOF_SIZE_T == 8)\n#    define LZO_OPT_UNALIGNED64     1\n#  endif\n#elif (LZO_ARCH_SH)\n#  define LZO_OPT_PREFER_POSTINC    1\n#  define LZO_OPT_PREFER_PREDEC     1\n#endif\n#ifndef LZO_CFG_NO_INLINE_ASM\n#if (LZO_CC_LLVM)\n#  define LZO_CFG_NO_INLINE_ASM 1\n#endif\n#endif\n#ifndef LZO_CFG_NO_UNALIGNED\n#if (LZO_ABI_NEUTRAL_ENDIAN) || (LZO_ARCH_GENERIC)\n#  define LZO_CFG_NO_UNALIGNED 1\n#endif\n#endif\n#if (LZO_CFG_NO_UNALIGNED)\n#  undef LZO_OPT_UNALIGNED16\n#  undef LZO_OPT_UNALIGNED32\n#  undef LZO_OPT_UNALIGNED64\n#endif\n#if (LZO_CFG_NO_INLINE_ASM)\n#elif (LZO_ARCH_I386 && (LZO_OS_DOS32 || LZO_OS_WIN32) && (LZO_CC_DMC || LZO_CC_INTELC || LZO_CC_MSC || LZO_CC_PELLESC))\n#  define LZO_ASM_SYNTAX_MSC 1\n#elif (LZO_OS_WIN64 && (LZO_CC_DMC || LZO_CC_INTELC || LZO_CC_MSC || LZO_CC_PELLESC))\n#elif (LZO_ARCH_I386 && LZO_CC_GNUC && (LZO_CC_GNUC == 0x011f00ul))\n#elif (LZO_ARCH_I386 && (LZO_CC_CLANG || LZO_CC_GNUC || LZO_CC_INTELC || LZO_CC_PATHSCALE))\n#  define LZO_ASM_SYNTAX_GNUC 1\n#elif (LZO_ARCH_AMD64 && (LZO_CC_CLANG || LZO_CC_GNUC || LZO_CC_INTELC || LZO_CC_PATHSCALE))\n#  define LZO_ASM_SYNTAX_GNUC 1\n#endif\n#if (LZO_ASM_SYNTAX_GNUC)\n#if (LZO_ARCH_I386 && LZO_CC_GNUC && (LZO_CC_GNUC < 0x020000ul))\n#  define __LZO_ASM_CLOBBER         \"ax\"\n#elif (LZO_CC_INTELC)\n#  define __LZO_ASM_CLOBBER         \"memory\"\n#else\n#  define __LZO_ASM_CLOBBER         \"cc\", \"memory\"\n#endif\n#endif\n#if defined(__LZO_INFOSTR_MM)\n#elif (LZO_MM_FLAT) && (defined(__LZO_INFOSTR_PM) || defined(LZO_INFO_ABI_PM))\n#  define __LZO_INFOSTR_MM          \"\"\n#elif defined(LZO_INFO_MM)\n#  define __LZO_INFOSTR_MM          \".\" LZO_INFO_MM\n#else\n#  define __LZO_INFOSTR_MM          \"\"\n#endif\n#if defined(__LZO_INFOSTR_PM)\n#elif defined(LZO_INFO_ABI_PM)\n#  define __LZO_INFOSTR_PM          \".\" LZO_INFO_ABI_PM\n#else\n#  define __LZO_INFOSTR_PM          \"\"\n#endif\n#if defined(__LZO_INFOSTR_ENDIAN)\n#elif defined(LZO_INFO_ABI_ENDIAN)\n#  define __LZO_INFOSTR_ENDIAN      \".\" LZO_INFO_ABI_ENDIAN\n#else\n#  define __LZO_INFOSTR_ENDIAN      \"\"\n#endif\n#if defined(__LZO_INFOSTR_OSNAME)\n#elif defined(LZO_INFO_OS_CONSOLE)\n#  define __LZO_INFOSTR_OSNAME      LZO_INFO_OS \".\" LZO_INFO_OS_CONSOLE\n#elif defined(LZO_INFO_OS_POSIX)\n#  define __LZO_INFOSTR_OSNAME      LZO_INFO_OS \".\" LZO_INFO_OS_POSIX\n#else\n#  define __LZO_INFOSTR_OSNAME      LZO_INFO_OS\n#endif\n#if defined(__LZO_INFOSTR_LIBC)\n#elif defined(LZO_INFO_LIBC)\n#  define __LZO_INFOSTR_LIBC        \".\" LZO_INFO_LIBC\n#else\n#  define __LZO_INFOSTR_LIBC        \"\"\n#endif\n#if defined(__LZO_INFOSTR_CCVER)\n#elif defined(LZO_INFO_CCVER)\n#  define __LZO_INFOSTR_CCVER       \" \" LZO_INFO_CCVER\n#else\n#  define __LZO_INFOSTR_CCVER       \"\"\n#endif\n#define LZO_INFO_STRING \\\n    LZO_INFO_ARCH __LZO_INFOSTR_MM __LZO_INFOSTR_PM __LZO_INFOSTR_ENDIAN \\\n    \" \" __LZO_INFOSTR_OSNAME __LZO_INFOSTR_LIBC \" \" LZO_INFO_CC __LZO_INFOSTR_CCVER\n\n#endif /* already included */\n\n/* vim:set ts=4 et: */\n\n", "type": "tool_result"}
{"role": "assistant", "content": "{\n  \"thought\": \"我已经分析了 'lzodefs.h' 文件的内容。这是一个头文件，主要包含预处理器指令、宏定义和条件编译，用于处理不同平台、编译器和架构的兼容性。它定义了常量（如 LZO_0xffffL）、类型大小（如 LZO_SIZEOF_INT）、内存模型（如 LZO_MM_SMALL）和编译器特定属性（如 __lzo_inline）。然而，作为头文件，它不包含任何可执行代码、函数实现或数据流逻辑。没有识别出输入点（如网络接口、NVRAM 变量）、数据传播路径或危险操作（如缓冲区操作）。因此，基于当前证据，无法构建从不可信输入点到危险操作的完整攻击链。所有发现都是理论性的定义，没有实际可利用的漏洞。我应该使用 'finish' 动作报告分析结果。\",\n  \"action\": \"finish\",\n  \"action_input\": {\n    \"final_response\": \"对文件 'lzodefs.h' 的安全分析已完成。以下是基于证据的详细报告：\\n\\n**分析总结：**\\n- **文件类型：** 头文件（lzodefs.h），属于 LZO 压缩库的一部分，用于定义架构、操作系统和编译器特定的宏和常量。\\n- **内容检查：** 文件包含预处理器指令、宏定义（如 LZO_PP_STRINGIZE、LZO_PP_CONCAT2）、类型大小定义（如 LZO_SIZEOF_INT）、内存模型（如 LZO_MM_SMALL）和编译器属性（如 __lzo_inline）。\\n- **安全评估：** 未发现任何输入点（如网络接口、NVRAM 变量、文件路径）、数据流或危险操作（如缓冲区溢出、代码注入）。所有定义都是静态的，用于编译时配置，不涉及运行时数据处理。\\n\\n**核心发现：**\\n- **无完整攻击链：** 由于文件不包含可执行代码或逻辑，无法识别从不可信输入点到危险操作的污点传播路径。\\n- **无触发条件：** 没有代码路径或函数可被触发，因此缺乏可利用的触发条件。\\n- **可利用性分析：** 所有宏和定义是良性的，用于兼容性目的；没有证据表明它们会导致漏洞（如缺少清理或逻辑缺陷）。\\n\\n**字段详情：**\\n- **description：** 未发现任何安全漏洞或攻击链。文件仅包含静态定义，无输入处理或数据流。\\n- **link_identifiers：** 无（未识别出 NVRAM 变量、文件路径、IPC 套接字或函数符号）。\\n- **location：** 无（无代码汇聚点）。\\n- **code_snippet：** 无（无相关漏洞代码）。\\n- **risk_score：** 0.0（无攻击链或安全影响）。\\n- **confidence：** 10.0（基于全面文件内容检查，确信无漏洞）。\\n- **notes：** 此文件是库的一部分，可能被其他源文件包含；建议在分析具体实现代码（如 .c 文件）时重新评估，但本文件本身无风险。\\n\\n**结论：**\\n'lzodefs.h' 未提供任何可利用的安全漏洞线索。分析基于文件内容，未发现实际威胁。\"\n  },\n  \"status\": \"complete\"\n}"}
