{"role": "system", "content": "\n你是一个专门的文件分析代理。你的任务是深入分析当前指定的文件并提供详细的、有证据支持的分析结果。请专注于当前焦点文件或当前特定任务。当你认为你的分析已完成或无法进一步推进时，继续下一个任务或结束任务。\n\n**工作原则：**\n-   **基于证据**：所有分析都必须基于从工具获取的实际证据；禁止无根据的猜测。\n-   **结果验证**：批判性地评估委托子任务（例如函数分析）返回的结果，并始终验证其真实性和可靠性，以防止虚假结果污染最终结论。\n\n**工作流程：**\n1.  **理解任务**：专注于当前分析文件的特定任务，并充分参考用户的整体要求。注意，如果任务与当前分析焦点不匹配，你需要停止分析并及时向用户反馈。不要执行跨目录分析。\n2.  **执行分析**：确保你的分析有足够的深度。对于复杂任务，将其分解为多个具有明确目标和步骤的子任务，并合理地按顺序或并行调用分析助手或工具。选择最合适的工具或助手来获取证据。对于复杂的调用链，使用 `FunctionAnalysisDelegator` 并提供详细的污点信息和上下文。谨慎使用某些工具，避免结果过长导致分析失败，例如 `strings` 工具。\n3.  **完成并报告**：完成分析后，使用 `finish` 动作并严格按照以下格式提交最终报告。\n\n**最终响应要求**：\n*   回答与当前任务相关的所有问题，你的响应必须有完整的证据。不要遗漏任何有效信息。\n*   用具体证据支持所有发现，并如实报告任何证据不足或困难。\n\n每个发现必须包含以下**核心字段**：\n- **`description`**：对发现的详细描述，必须包括：\n* **完整且可验证的攻击链**：从攻击者可控源到危险汇聚点的具体污点传播路径，每一步都有证据支持。\n* **精确的触发条件**：到达易受攻击代码路径所需的确切条件。\n* **可利用性分析**：清楚说明*为什么*这是可利用的（例如，缺少清理、逻辑缺陷）。\n\n- **`link_identifiers`**：特定的 NVRAM 或 ENV 变量名、文件路径、IPC 套接字路径和自定义共享函数符号。\n- **`location`**：代码汇聚点或关键逻辑的精确位置。\n- **`code_snippet`**：返回完整的相关代码片段，展示漏洞。\n- **`risk_score`**：风险评分（0.0-10.0）。**只有具有经过验证的完整攻击链和明确安全影响的发现才能得分 >= 7.0。**\n- **`confidence`**：对发现准确性和可利用性分析的置信度（0.0-10.0）。**得分 >= 8.0 需要从源到汇聚点的完整、可验证的攻击链。**\n- **`notes`**：供人工分析师参考。包括：需要进一步验证的假设、相关文件或函数、后续分析的建议方向。\n\n#### 关键原则：\n- **可利用性是必须的**：只报告实际可利用的发现。理论上的弱点或不良实践（如使用 `strcpy`）是不够的，除非你能证明它们会导致漏洞。\n- **需要完整路径**：部分或推测性路径（\"如果...可能存在漏洞\"）是不可接受的。你必须提供完整、经过验证的链。\n- **证据优于推测**：所有声明都必须由工具的证据支持。如果缺少证据，请明确说明。不要猜测。\n\n*   在 'action' 字段中选择工具或 'finish'，并在 'action_input' 中提供参数或最终响应。\n\n\n当前可用工具：\n- Name: get_context_info\n  Description: 获取当前分析任务的上下文信息，例如正在分析的文件或目录。\n  Parameters (JSON Schema format):\n{\n  \"type\": \"object\",\n  \"properties\": {},\n  \"required\": []\n}\n\n- Name: execute_shell\n  Description: 在当前目录（man8）中执行只读 shell 命令。\n    **警告：** 此工具严格限制在当前工作目录内。所有文件操作不得引用父目录或任何其他目录。建议使用 `file` 工具在当前目录内进行探索和识别。\n    **注意：** 所有命令都在当前目录中执行。所有路径参数应相对于当前目录。禁止包含 '/' 或 '..' 的路径。\n    支持的命令：file, find, strings, grep, head, tail, readelf, cat, sort, ls。\n    禁止输出重定向（'>'、'>>'）、命令链接和目录更改。\n  Parameters (JSON Schema format):\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"command\": {\n      \"type\": \"string\",\n      \"description\": \"要执行的 shell 命令。命令将在 'man8' 目录中执行。命令中的所有路径应相对于此目录。\"\n    }\n  },\n  \"required\": [\n    \"command\"\n  ]\n}\n\n- Name: r2\n  Description: \n    与 Radare2 交互式会话交互以分析当前二进制文件。注意，此工具会自动为当前分析焦点文件建立并维护 r2 会话。\n\n    主要功能：\n    - 发送 Radare2 命令并获取输出\n    - 会话状态在调用之间保持（对于同一文件）\n    - 支持使用 r2ghidra 插件进行反编译：\n    * 使用 `pdg` 命令反编译函数\n    * 提供类似 C 的伪代码输出\n    \n    \n  Parameters (JSON Schema format):\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"command\": {\n      \"type\": \"string\",\n      \"description\": \"Command to interact directly with Radare2\"\n    }\n  },\n  \"required\": [\n    \"command\"\n  ]\n}\n\n- Name: TaskDelegator\n  Description: 助手可以与文件交互以执行特定的文件分析任务。使用场景：当你需要单步任务的分析结果后再决定下一个分析任务时。\n  Parameters (JSON Schema format):\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"task\": {\n      \"type\": \"string\",\n      \"description\": \"要执行的子任务的详细描述。请指定分析对象。\"\n    },\n    \"run_in_background\": {\n      \"type\": \"boolean\",\n      \"description\": \"是否在后台运行此任务。\",\n      \"default\": false\n    }\n  },\n  \"required\": [\n    \"task\"\n  ]\n}\n\n- Name: ParallelTaskDelegator\n  Description: 每个助手可以与文件交互，并行执行多个文件分析子任务。使用场景：1. 当复杂任务需要分解为多个独立的子任务时。2. 子任务之间没有严格的执行顺序依赖。3. 建议对大规模和复杂任务并行执行多个子任务，提高分析效率。\n  Parameters (JSON Schema format):\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"tasks\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\",\n        \"description\": \"要执行的子任务的详细描述。每个任务描述都是独立的，应指定分析对象。\"\n      },\n      \"description\": \"要分配给子代理并行执行的独立任务描述列表。\"\n    },\n    \"run_in_background\": {\n      \"type\": \"boolean\",\n      \"description\": \"是否在后台运行此任务。\",\n      \"default\": false\n    }\n  },\n  \"required\": [\n    \"tasks\"\n  ]\n}\n\n**后台执行和任务调度**：\n- 在 action_input 中设置 `run_in_background: true` 可异步运行任务。\n- 后台任务完成时，结果会自动注入。\n- 当需要后台结果才能继续时，使用 'wait' 动作。\n\n调度策略（避免遗漏和重复，最大化效率）：\n1. 识别独立任务，如果不立即需要结果，在后台启动它们。\n2. 在后台任务并行运行时继续其他工作。\n3. 当依赖任务需要后台结果时使用 'wait'。\n4. 在脑海中跟踪所有启动的后台任务以避免重复。\n5. 在 'finish' 之前，确保所有后台任务都已完成并整合结果。\n\n响应格式要求：\n\n你必须以严格的 JSON 格式响应。不要在 JSON 对象之外添加任何其他文本。\n不要使用 markdown 格式（如 ```json）。直接输出单个 JSON 对象。\n\n响应必须是符合以下模式的有效 JSON 对象：\n\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"thought\": {\n      \"type\": \"string\",\n      \"description\": \"在这里逐步思考。分析当前情况、目标、可用工具和对话历史。决定是调用工具还是使用 'finish' 动作提供最终答案。\"\n    },\n    \"action\": {\n      \"type\": \"string\",\n      \"description\": \"选择下一个动作。必须是可用工具名称之一、'wait' 或 'finish'。\"\n    },\n    \"action_input\": {\n      \"oneOf\": [\n        {\n          \"type\": \"object\"\n        },\n        {\n          \"type\": \"string\"\n        }\n      ],\n      \"description\": \"工具调用的参数或最终响应。如果 action 是工具名称，提供该工具所需的参数（通常是对象）；如果是 'finish'，使用 'final_response' 作为 action_input 的键提供最终响应（通常是包含字符串的对象）。\"\n    },\n    \"status\": {\n      \"type\": \"string\",\n      \"enum\": [\n        \"continue\",\n        \"complete\"\n      ],\n      \"description\": \"必须是 'continue'（如果选择了工具）或 'complete'（如果选择了 'finish'）。\"\n    }\n  },\n  \"required\": [\n    \"thought\",\n    \"action\",\n    \"action_input\",\n    \"status\"\n  ]\n}\n\n"}
{"role": "user", "content": "用户初始请求：\n对固件进行全面的安全分析。核心目标是识别并报告从不可信输入点到危险操作的完整、可行且**实际可利用**的攻击链。分析必须关注具有明确可利用性证据的漏洞，而不是理论缺陷。\n1. **输入点识别**：识别所有潜在的不可信输入源，包括但不限于网络接口（HTTP、API、套接字）、IPC、NVRAM/环境变量等。\n2. **数据流追踪**：追踪不可信数据在系统内的传播路径，并分析是否存在缺少适当验证、过滤或边界检查的过程。\n3. **组件交互分析**：关注组件之间的交互（例如 `nvram` get/set、IPC 通信），观察外部可控数据如何在系统内流动并影响其他组件。\n4. **利用链评估**：对于发现的每个潜在攻击链，评估其触发条件、重现步骤以及成功利用的概率。**只有找到完整且可验证的链时，发现才是有效的。**\n5. **最终输出**：报告应清楚地描述攻击者最有可能成功利用的攻击路径和安全漏洞。\n\n当前任务：\n专注于分析文件 'man8/openvpn.8' 的内容，寻找可利用的信息。"}
{"role": "assistant", "content": "{\n  \"thought\": \"当前任务是分析文件 'man8/openvpn.8'，这是一个手册页文件。我需要检查其内容以识别潜在的不可信输入源、数据流或可利用信息。由于这是一个文档文件，它可能不包含可执行代码，但可能描述配置选项、环境变量或输入源。我将使用 execute_shell 命令读取文件内容，然后分析文本中是否有任何与安全相关的元素。如果发现任何潜在输入源，我将评估其可利用性；否则，我将如实报告没有发现可利用的漏洞。\",\n  \"action\": \"execute_shell\",\n  \"action_input\": {\n    \"command\": \"cat openvpn.8\"\n  },\n  \"status\": \"continue\"\n}"}
{"role": "user", "content": "工具：execute_shell\n参数：{\"command\": \"cat openvpn.8\"}\n结果：\n 退出代码：0\n标准输出：\n.\\\"  OpenVPN -- An application to securely tunnel IP networks\n.\\\"             over a single TCP/UDP port, with support for SSL/TLS-based\n.\\\"             session authentication and key exchange,\n.\\\"             packet encryption, packet authentication, and\n.\\\"             packet compression.\n.\\\"\n.\\\"  Copyright (C) 2002-2010 OpenVPN Technologies, Inc. <sales@openvpn.net>\n.\\\"\n.\\\"  This program is free software; you can redistribute it and/or modify\n.\\\"  it under the terms of the GNU General Public License version 2\n.\\\"  as published by the Free Software Foundation.\n.\\\"\n.\\\"  This program is distributed in the hope that it will be useful,\n.\\\"  but WITHOUT ANY WARRANTY; without even the implied warranty of\n.\\\"  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n.\\\"  GNU General Public License for more details.\n.\\\"\n.\\\"  You should have received a copy of the GNU General Public License\n.\\\"  along with this program (see the file COPYING included with this\n.\\\"  distribution); if not, write to the Free Software Foundation, Inc.,\n.\\\"  59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n.\\\"\n.\\\" Manual page for openvpn\n.\\\n.\\\" SH section heading\n.\\\" SS subsection heading\n.\\\" LP paragraph\n.\\\" IP indented paragraph\n.\\\" TP hanging label\n.\\\n.\\\" .nf -- no formatting\n.\\\" .fi -- resume formatting\n.\\\" .ft 3 -- boldface\n.\\\" .ft -- normal face\n.\\\" .in +|-{n} -- indent\n.\\\"\n.TH openvpn 8 \"17 November 2008\"\n.\\\"*********************************************************\n.SH NAME\nopenvpn \\- secure IP tunnel daemon.\n.\\\"*********************************************************\n.SH SYNOPSIS\n.ft 3\nopenvpn [ options ... ]\n.ft\n.\\\"*********************************************************\n.SH INTRODUCTION\n.LP\nOpenVPN is an open source VPN daemon by James Yonan.\nBecause OpenVPN tries to\nbe a universal VPN tool offering a great deal of flexibility,\nthere are a lot of options on this manual page.\nIf you're new to OpenVPN, you might want to skip ahead to the\nexamples section where you will see how to construct simple\nVPNs on the command line without even needing a configuration file.\n\nAlso note that there's more documentation and examples on\nthe OpenVPN web site:\n.I http://openvpn.net/\n\nAnd if you would like to see a shorter version of this manual,\nsee the openvpn usage message which can be obtained by\nrunning\n.B openvpn\nwithout any parameters.\n.\\\"*********************************************************\n.SH DESCRIPTION\n.LP\nOpenVPN is a robust and highly flexible VPN daemon.\nOpenVPN supports SSL/TLS security, ethernet bridging,\nTCP or UDP tunnel transport through proxies or NAT,\nsupport for dynamic IP addresses and DHCP,\nscalability to hundreds or thousands of users,\nand portability to most major OS platforms.\n\nOpenVPN is tightly bound to the OpenSSL library, and derives much\nof its crypto capabilities from it.\n\nOpenVPN supports\nconventional encryption\nusing a pre-shared secret key\n.B (Static Key mode)\nor\npublic key security\n.B (SSL/TLS mode)\nusing client & server certificates.\nOpenVPN also\nsupports non-encrypted TCP/UDP tunnels.  \n\nOpenVPN is designed to work with the\n.B TUN/TAP\nvirtual networking interface that exists on most platforms.\n\nOverall, OpenVPN aims to offer many of the key features of IPSec but\nwith a relatively lightweight footprint.\n.\\\"*********************************************************\n.SH OPTIONS\nOpenVPN allows any option to be placed either on the command line\nor in a configuration file.  Though all command line options are preceded\nby a double-leading-dash (\"\\-\\-\"), this prefix can be removed when\nan option is placed in a configuration file.\n.\\\"*********************************************************\n.TP\n.B \\-\\-help\nShow options.\n.\\\"*********************************************************\n.TP\n.B \\-\\-config file\nLoad additional config options from\n.B file\nwhere each line corresponds to one command line option,\nbut with the leading '\\-\\-' removed.\n\nIf\n.B \\-\\-config file\nis the only option to the openvpn command,\nthe\n.B \\-\\-config\ncan be removed, and the command can be given as\n.B openvpn file\n\nNote that\nconfiguration files can be nested to a reasonable depth.\n\nDouble quotation or single quotation characters (\"\", '')\ncan be used to enclose single parameters containing whitespace,\nand \"#\" or \";\" characters in the first column\ncan be used to denote comments.\n\nNote that OpenVPN 2.0 and higher performs backslash-based shell\nescaping for characters not in single quotations,\nso the following mappings should be observed:\n\n.nf\n.ft 3\n.in +4\n\\\\\\\\       Maps to a single backslash character (\\\\).\n\\\\\"       Pass a literal doublequote character (\"), don't\n         interpret it as enclosing a parameter.\n\\\\[SPACE] Pass a literal space or tab character, don't\n         interpret it as a parameter delimiter.\n.in -4\n.ft\n.fi\n\nFor example on Windows, use double backslashes to\nrepresent pathnames:\n\n.nf\n.ft 3\n.in +4\nsecret \"c:\\\\\\\\OpenVPN\\\\\\\\secret.key\"\n.in -4\n.ft\n.fi\n\nFor examples of configuration files,\nsee\n.I http://openvpn.net/examples.html\n\nHere is an example configuration file:\n\n.nf\n.ft 3\n.in +4\n#\n# Sample OpenVPN configuration file for\n# using a pre-shared static key.\n#\n# '#' or ';' may be used to delimit comments.\n\n# Use a dynamic tun device.\ndev tun\n\n# Our remote peer\nremote mypeer.mydomain\n\n# 10.1.0.1 is our local VPN endpoint\n# 10.1.0.2 is our remote VPN endpoint\nifconfig 10.1.0.1 10.1.0.2\n\n# Our pre-shared static key\nsecret static.key\n.in -4\n.ft\n.fi\n.\\\"*********************************************************\n.SS Tunnel Options:\n.TP\n.B \\-\\-mode m\nSet OpenVPN major mode.  By default, OpenVPN runs in\npoint-to-point mode (\"p2p\").  OpenVPN 2.0 introduces\na new mode (\"server\") which implements a multi-client\nserver capability.\n.\\\"*********************************************************\n.TP\n.B \\-\\-local host\nLocal host name or IP address for bind.\nIf specified, OpenVPN will bind to this address only.\nIf unspecified, OpenVPN will bind to all interfaces.\n.\\\"*********************************************************\n.TP\n.B \\-\\-remote host [port] [proto]\nRemote host name or IP address.  On the client, multiple\n.B \\-\\-remote\noptions may be specified for redundancy, each referring\nto a different OpenVPN server.  Specifying multiple\n.B \\-\\-remote\noptions for this purpose is a special case of the more\ngeneral connection-profile feature.  See the\n.B <connection>\ndocumentation below.\n\nThe OpenVPN client will try to connect to a server at\n.B host:port\nin the order specified by the list of\n.B \\-\\-remote\noptions.\n\n.B proto\nindicates the protocol to use when connecting with the\nremote, and may be \"tcp\" or \"udp\".\n\nThe client will move on to the next host in the list,\nin the event of connection failure.\nNote that at any given time, the OpenVPN client\nwill at most be connected to\none server.\n\nNote that since UDP is connectionless, connection failure\nis defined by the\n.B \\-\\-ping\nand\n.B \\-\\-ping-restart\noptions.\n\nNote the following corner case:  If you use multiple\n.B \\-\\-remote\noptions, AND you are dropping root privileges on\nthe client with\n.B \\-\\-user\nand/or\n.B \\-\\-group,\nAND the client is running a non-Windows OS, if the client needs\nto switch to a different server, and that server pushes\nback different TUN/TAP or route settings, the client may lack\nthe necessary privileges to close and reopen the TUN/TAP interface.\nThis could cause the client to exit with a fatal error.\n\nIf\n.B \\-\\-remote\nis unspecified, OpenVPN will listen\nfor packets from any IP address, but will not act on those packets unless\nthey pass all authentication tests.  This requirement for authentication\nis binding on all potential peers, even those from known and supposedly\ntrusted IP addresses (it is very easy to forge a source IP address on\na UDP packet).\n\nWhen used in TCP mode, \n.B \\-\\-remote\nwill act as a filter, rejecting connections from any host which does\nnot match\n.B host.\n\nIf\n.B host\nis a DNS name which resolves to multiple IP addresses,\none will be randomly\nchosen, providing a sort of basic load-balancing and\nfailover capability.\n.\\\"*********************************************************\n.TP\n.B \\-\\-remote-random-hostname\nAdd a random string (6 characters) to first DNS label of hostname to prevent\nDNS caching.  For example, \"foo.bar.gov\" would be modified to\n\"<random-chars>.foo.bar.gov\".\n.\\\"*********************************************************\n.TP\n.B <connection>\nDefine a client connection\nprofile.  Client connection profiles are groups of OpenVPN options that\ndescribe how to connect to a given OpenVPN server.  Client connection\nprofiles are specified within an OpenVPN configuration file, and\neach profile is bracketed by\n.B <connection>\nand\n.B </connection>.\n\nAn OpenVPN client will try each connection profile sequentially\nuntil it achieves a successful connection.  \n\n.B \\-\\-remote-random\ncan be used to initially \"scramble\" the connection\nlist.\n\nHere is an example of connection profile usage:\n\n.nf\n.ft 3\n.in +4\nclient\ndev tun\n\n<connection>\nremote 198.19.34.56 1194 udp\n</connection>\n\n<connection>\nremote 198.19.34.56 443 tcp\n</connection>\n\n<connection>\nremote 198.19.34.56 443 tcp\nhttp-proxy 192.168.0.8 8080\nhttp-proxy-retry\n</connection>\n\n<connection>\nremote 198.19.36.99 443 tcp\nhttp-proxy 192.168.0.8 8080\nhttp-proxy-retry\n</connection>\n\npersist-key\npersist-tun\npkcs12 client.p12\nns-cert-type server\nverb 3\n.in -4\n.ft\n.fi\n\nFirst we try to connect to a server at 198.19.34.56:1194 using UDP.\nIf that fails, we then try to connect to 198.19.34.56:443 using TCP.\nIf that also fails, then try connecting through an HTTP proxy at \n192.168.0.8:8080 to 198.19.34.56:443 using TCP.  Finally, try to\nconnect through the same proxy to a server at 198.19.36.99:443\nusing TCP.\n\nThe following OpenVPN options may be used inside of\na\n.B <connection>\nblock:\n\n.B bind,\n.B connect-retry,\n.B connect-retry-max,\n.B connect-timeout,\n.B explicit-exit-notify,\n.B float,\n.B fragment,\n.B http-proxy,\n.B http-proxy-option,\n.B http-proxy-retry,\n.B http-proxy-timeout,\n.B link-mtu,\n.B local,\n.B lport,\n.B mssfix,\n.B mtu-disc,\n.B nobind,\n.B port,\n.B proto,\n.B remote,\n.B rport,\n.B socks-proxy,\n.B socks-proxy-retry,\n.B tun-mtu and\n.B tun-mtu-extra.\n\nA defaulting mechanism exists for specifying options to apply to\nall\n.B <connection>\nprofiles.  If any of the above options (with the exception of\n.B remote\n) appear outside of a\n.B <connection>\nblock, but in a configuration file which has one or more\n.B <connection>\nblocks, the option setting will be used as a default for\n.B <connection>\nblocks which follow it in the configuration file.\n\nFor example, suppose the\n.B nobind\noption were placed in the sample configuration file above, near\nthe top of the file, before the first\n.B <connection>\nblock.  The effect would be as if\n.B nobind\nwere declared in all\n.B <connection>\nblocks below it.\n.\\\"*********************************************************\n.TP\n.B \\-\\-proto-force p\nWhen iterating through connection profiles,\nonly consider profiles using protocol\n.B p\n('tcp'|'udp'). \n.\\\"*********************************************************\n.TP\n.B \\-\\-remote-random\nWhen multiple\n.B \\-\\-remote\naddress/ports are specified, or if connection profiles are being\nused, initially randomize the order of the list\nas a kind of basic load-balancing measure.\n.\\\"*********************************************************\n.TP\n.B \\-\\-proto p\nUse protocol\n.B p\nfor communicating with remote host.\n.B p\ncan be\n.B udp,\n.B tcp-client,\nor\n.B tcp-server.\n\nThe default protocol is\n.B udp\nwhen\n.B \\-\\-proto\nis not specified.\n\nFor UDP operation,\n.B \\-\\-proto udp\nshould be specified on both peers.\n\nFor TCP operation, one peer must use\n.B \\-\\-proto tcp-server\nand the other must use\n.B \\-\\-proto tcp-client.\nA peer started with\n.B tcp-server\nwill wait indefinitely for an incoming connection.  A peer\nstarted with\n.B tcp-client\nwill attempt to connect, and if that fails, will sleep for 5\nseconds (adjustable via the\n.B \\-\\-connect-retry\noption) and try again infinite or up to N retries (adjustable via the\n.B \\-\\-connect-retry-max\noption).  Both TCP client and server will simulate\na SIGUSR1 restart signal if either side resets the connection.\n\nOpenVPN is designed to operate optimally over UDP, but TCP capability is provided\nfor situations where UDP cannot be used.\nIn comparison with UDP, TCP will usually be\nsomewhat less efficient and less robust when used over unreliable or congested\nnetworks.\n\nThis article outlines some of problems with tunneling IP over TCP:\n\n.I http://sites.inka.de/sites/bigred/devel/tcp-tcp.html\n\nThere are certain cases, however, where using TCP may be advantageous from\na security and robustness perspective, such as tunneling non-IP or\napplication-level UDP protocols, or tunneling protocols which don't\npossess a built-in reliability layer.\n.\\\"*********************************************************\n.TP\n.B \\-\\-connect-retry n\nFor\n.B \\-\\-proto tcp-client,\ntake\n.B n\nas the\nnumber of seconds to wait\nbetween connection retries (default=5).\n.\\\"*********************************************************\n.TP\n.B \\-\\-connect-timeout n\nFor\n.B \\-\\-proto tcp-client,\nset connection timeout to\n.B n\nseconds (default=10).\n.\\\"*********************************************************\n.TP\n.B \\-\\-connect-retry-max n\nFor\n.B \\-\\-proto tcp-client,\ntake\n.B n\nas the\nnumber of retries of connection attempt (default=infinite).\n.\\\"*********************************************************\n.TP\n.B \\-\\-show-proxy-settings\nShow sensed HTTP or SOCKS proxy settings. Currently, only Windows clients\nsupport this option.\n.\\\"*********************************************************\n.TP\n.B \\-\\-http-proxy server port [authfile|'auto'|'auto-nct'] [auth-method]\nConnect to remote host through an HTTP proxy at address\n.B server\nand port\n.B port.\nIf HTTP Proxy-Authenticate is required,\n.B authfile\nis a file containing a username and password on 2 lines, or\n\"stdin\" to prompt from console.\n\n.B auth-method\nshould be one of \"none\", \"basic\", or \"ntlm\".\n\nHTTP Digest authentication is supported as well, but only via\nthe\n.B auto\nor\n.B auto-nct\nflags (below).\n\nThe\n.B auto\nflag causes OpenVPN to automatically determine the\n.B auth-method\nand query stdin or the management interface for\nusername/password credentials, if required.  This flag\nexists on OpenVPN 2.1 or higher.\n\nThe\n.B auto-nct\nflag (no clear-text auth) instructs OpenVPN to automatically\ndetermine the authentication method, but to reject weak\nauthentication protocols such as HTTP Basic Authentication.\n.\\\"*********************************************************\n.TP\n.B \\-\\-http-proxy-retry\nRetry indefinitely on HTTP proxy errors.  If an HTTP proxy error\noccurs, simulate a SIGUSR1 reset.\n.\\\"*********************************************************\n.TP\n.B \\-\\-http-proxy-timeout n\nSet proxy timeout to\n.B n\nseconds, default=5.\n.\\\"*********************************************************\n.TP\n.B \\-\\-http-proxy-option type [parm]\nSet extended HTTP proxy options.\nRepeat to set multiple options.\n\n.B VERSION version \\-\\-\nSet HTTP version number to\n.B version\n(default=1.0).\n\n.B AGENT user-agent \\-\\-\nSet HTTP \"User-Agent\" string to\n.B user-agent.\n.\\\"*********************************************************\n.TP\n.B \\-\\-socks-proxy server [port]\nConnect to remote host through a Socks5 proxy at address\n.B server\nand port\n.B port\n(default=1080).\n.\\\"*********************************************************\n.TP\n.B \\-\\-socks-proxy-retry\nRetry indefinitely on Socks proxy errors.  If a Socks proxy error\noccurs, simulate a SIGUSR1 reset.\n.\\\"*********************************************************\n.TP\n.B \\-\\-resolv-retry n\nIf hostname resolve fails for\n.B \\-\\-remote,\nretry resolve for\n.B n\nseconds before failing.\n\nSet\n.B n\nto \"infinite\" to retry indefinitely.\n\nBy default,\n.B \\-\\-resolv-retry infinite\nis enabled.  You can disable by setting n=0.\n.\\\"*********************************************************\n.TP\n.B \\-\\-float\nAllow remote peer to change its IP address and/or port number, such as due to\nDHCP (this is the default if\n.B \\-\\-remote\nis not used).\n.B \\-\\-float\nwhen specified with\n.B \\-\\-remote\nallows an OpenVPN session to initially connect to a peer\nat a known address, however if packets arrive from a new\naddress and pass all authentication tests, the new address\nwill take control of the session.  This is useful when\nyou are connecting to a peer which holds a dynamic address\nsuch as a dial-in user or DHCP client.\n\nEssentially,\n.B \\-\\-float\ntells OpenVPN to accept authenticated packets\nfrom any address, not only the address which was specified in the\n.B \\-\\-remote\noption.\n.\\\"*********************************************************\n.TP\n.B \\-\\-ipchange cmd\nRun command\n.B cmd\nwhen our remote ip-address is initially authenticated or\nchanges.\n\n.B cmd\nconsists of a path to script (or executable program), optionally\nfollowed by arguments. The path and arguments may be single- or double-quoted\nand/or escaped using a backslash, and should be separated by one or more spaces.\n\nWhen\n.B cmd\nis executed two arguments are appended after any arguments specified in\n.B cmd\n, as follows:\n\n.B cmd ip_address port_number\n\nDon't use\n.B \\-\\-ipchange\nin\n.B \\-\\-mode server\nmode.  Use a\n.B \\-\\-client-connect\nscript instead.\n\nSee the \"Environmental Variables\" section below for\nadditional parameters passed as environmental variables.\n\nIf you are running in a dynamic IP address environment where\nthe IP addresses of either peer could change without notice,\nyou can use this script, for example, to edit the\n.I /etc/hosts\nfile with the current address of the peer.  The script will\nbe run every time the remote peer changes its IP address.\n\nSimilarly if\n.I our\nIP address changes due to DHCP, we should configure\nour IP address change script (see man page for\n.BR dhcpcd (8)\n) to deliver a\n.B SIGHUP\nor\n.B SIGUSR1\nsignal to OpenVPN.  OpenVPN will then\nreestablish a connection with its most recently authenticated\npeer on its new IP address.\n.\\\"*********************************************************\n.TP\n.B \\-\\-port port\nTCP/UDP port number for both local and remote.  The current\ndefault of 1194 represents the official IANA port number\nassignment for OpenVPN and has been used since version 2.0-beta17.\nPrevious versions used port 5000 as the default.\n.\\\"*********************************************************\n.TP\n.B \\-\\-lport port\nTCP/UDP port number for bind.\n.\\\"*********************************************************\n.TP\n.B \\-\\-rport port\nTCP/UDP port number for remote.\n.\\\"*********************************************************\n.TP\n.B \\-\\-bind\nBind to local address and port. This is the default unless any of \n.B \\-\\-proto tcp-client\n,\n.B \\-\\-http-proxy\nor\n.B \\-\\-socks-proxy\nare used.\n.\\\"*********************************************************\n.TP\n.B \\-\\-nobind\nDo not bind to local address and port.  The IP stack will allocate\na dynamic port for returning packets.  Since the value of the dynamic port\ncould not be known in advance by a peer, this option is only suitable for\npeers which will be initiating connections by using the\n.B \\-\\-remote\noption.\n.\\\"*********************************************************\n.TP\n.B \\-\\-dev tunX | tapX | null\nTUN/TAP virtual network device (\n.B X\ncan be omitted for a dynamic device.)\n\nSee examples section below\nfor an example on setting up a TUN device.\n\nYou must use either tun devices on both ends of the connection\nor tap devices on both ends.  You cannot mix them, as they\nrepresent different underlying network layers.\n\n.B tun\ndevices encapsulate IPv4 or IPv6 (OSI Layer 3) while\n.B tap\ndevices encapsulate Ethernet 802.3 (OSI Layer 2).\n.\\\"*********************************************************\n.TP\n.B \\-\\-dev-type device-type\nWhich device type are we using?\n.B device-type\nshould be\n.B tun\n(OSI Layer 3)\nor\n.B tap\n(OSI Layer 2).\nUse this option only if the TUN/TAP device used with\n.B \\-\\-dev\ndoes not begin with\n.B tun\nor\n.B tap.\n.\\\"*********************************************************\n.TP\n.B \\-\\-topology mode\nConfigure virtual addressing topology when running in\n.B \\-\\-dev tun\nmode.  This directive has no meaning in\n.B \\-\\-dev tap\nmode, which always uses a\n.B subnet\ntopology.\n\nIf you set this directive on the server, the\n.B \\-\\-server\nand\n.B \\-\\-server-bridge\ndirectives will automatically push your chosen topology setting to clients\nas well.  This directive can also be manually pushed to clients.  Like the\n.B \\-\\-dev\ndirective, this directive must always be compatible between client and server.\n\n.B mode\ncan be one of:\n\n.B net30 \\-\\-\nUse a point-to-point topology, by allocating one /30 subnet per client.\nThis is designed to allow point-to-point semantics when some\nor all of the connecting clients might be Windows systems.  This is the\ndefault on OpenVPN 2.0.\n\n.B p2p \\-\\-\nUse a point-to-point topology where the remote endpoint of the client's\ntun interface always points to the local endpoint of the server's tun interface.\nThis mode allocates a single IP address per connecting client.\nOnly use\nwhen none of the connecting clients are Windows systems.  This mode\nis functionally equivalent to the\n.B \\-\\-ifconfig-pool-linear\ndirective which is available in OpenVPN 2.0 and is now deprecated.\n\n.B subnet \\-\\-\nUse a subnet rather than a point-to-point topology by\nconfiguring the tun interface with a local IP address and subnet mask,\nsimilar to the topology used in\n.B \\-\\-dev tap\nand ethernet bridging mode.\nThis mode allocates a single IP address per connecting client and works on\nWindows as well.  Only available when server and clients are OpenVPN 2.1 or\nhigher, or OpenVPN 2.0.x which has been manually patched with the\n.B \\-\\-topology\ndirective code.  When used on Windows, requires version 8.2 or higher\nof the TAP-Win32 driver.  When used on *nix, requires that the tun\ndriver supports an\n.BR ifconfig (8)\ncommand which sets a subnet instead of a remote endpoint IP address.\n\nThis option exists in OpenVPN 2.1 or higher.\n.\\\"*********************************************************\n.TP\n.B \\-\\-tun-ipv6\nBuild a tun link capable of forwarding IPv6 traffic.\nShould be used in conjunction with\n.B \\-\\-dev tun\nor\n.B \\-\\-dev tunX.\nA warning will be displayed\nif no specific IPv6 TUN support for your OS has been compiled into OpenVPN.\n\nSee below for further IPv6-related configuration options.\n.\\\"*********************************************************\n.TP\n.B \\-\\-dev-node node\nExplicitly set the device node rather than using\n/dev/net/tun, /dev/tun, /dev/tap, etc.  If OpenVPN\ncannot figure out whether\n.B node\nis a TUN or TAP device based on the name, you should\nalso specify\n.B \\-\\-dev-type tun\nor\n.B \\-\\-dev-type tap.\n\nOn Windows systems, select the TAP-Win32 adapter which\nis named\n.B node\nin the Network Connections Control Panel or the\nraw GUID of the adapter enclosed by braces.\nThe\n.B \\-\\-show-adapters\noption under Windows can also be used\nto enumerate all available TAP-Win32\nadapters and will show both the network\nconnections control panel name and the GUID for\neach TAP-Win32 adapter.\n.TP\n.B \\-\\-lladdr address\nSpecify the link layer address, more commonly known as the MAC address.\nOnly applied to TAP devices.\n.\\\"*********************************************************\n.TP\n.B \\-\\-iproute cmd\nSet alternate command to execute instead of default iproute2 command.\nMay be used in order to execute OpenVPN in unprivileged environment.\n.\\\"*********************************************************\n.TP\n.B \\-\\-ifconfig l rn\nSet TUN/TAP adapter parameters. \n.B l\nis the IP address of the local VPN endpoint.\nFor TUN devices,\n.B rn\nis the IP address of the remote VPN endpoint.\nFor TAP devices,\n.B rn\nis the subnet mask of the virtual ethernet segment\nwhich is being created or connected to.\n\nFor TUN devices, which facilitate virtual\npoint-to-point IP connections,\nthe proper usage of\n.B \\-\\-ifconfig\nis to use two private IP addresses\nwhich are not a member of any\nexisting subnet which is in use.\nThe IP addresses may be consecutive\nand should have their order reversed\non the remote peer.  After the VPN\nis established, by pinging\n.B rn,\nyou will be pinging across the VPN.\n\nFor TAP devices, which provide\nthe ability to create virtual\nethernet segments,\n.B \\-\\-ifconfig\nis used to set an IP address and\nsubnet mask just as a physical\nethernet adapter would be\nsimilarly configured.  If you are\nattempting to connect to a remote\nethernet bridge, the IP address\nand subnet should be set to values\nwhich would be valid on the\nthe bridged ethernet segment (note\nalso that DHCP can be used for the\nsame purpose).\n\nThis option, while primarily a proxy for the\n.BR ifconfig (8)\ncommand, is designed to simplify TUN/TAP\ntunnel configuration by providing a\nstandard interface to the different\nifconfig implementations on different\nplatforms.\n\n.B \\-\\-ifconfig\nparameters which are IP addresses can\nalso be specified as a DNS or /etc/hosts\nfile resolvable name.\n\nFor TAP devices,\n.B \\-\\-ifconfig\nshould not be used if the TAP interface will be\ngetting an IP address lease from a DHCP\nserver.\n.\\\"*********************************************************\n.TP\n.B \\-\\-ifconfig-noexec\nDon't actually execute ifconfig/netsh commands, instead\npass\n.B \\-\\-ifconfig\nparameters to scripts using environmental variables.\n.\\\"*********************************************************\n.TP\n.B \\-\\-ifconfig-nowarn\nDon't output an options consistency check warning\nif the\n.B \\-\\-ifconfig\noption on this side of the\nconnection doesn't match the remote side.  This is useful\nwhen you want to retain the overall benefits of the\noptions consistency check (also see\n.B \\-\\-disable-occ\noption) while only disabling the ifconfig component of\nthe check.\n\nFor example,\nif you have a configuration where the local host uses\n.B \\-\\-ifconfig\nbut the remote host does not, use\n.B \\-\\-ifconfig-nowarn\non the local host.\n\nThis option will also silence warnings about potential\naddress conflicts which occasionally annoy more experienced\nusers by triggering \"false positive\" warnings.\n.\\\"*********************************************************\n.TP\n.B \\-\\-route network/IP [netmask] [gateway] [metric]\nAdd route to routing table after connection is established.\nMultiple routes can be specified.  Routes will be\nautomatically torn down in reverse order prior to\nTUN/TAP device close.\n\nThis option is intended as\na convenience proxy for the\n.BR route (8)\nshell command,\nwhile at the same time providing portable semantics\nacross OpenVPN's platform space.\n\n.B netmask\ndefault \\-\\- 255.255.255.255\n\n.B gateway\ndefault \\-\\- taken from\n.B \\-\\-route-gateway\nor the second parameter to\n.B \\-\\-ifconfig\nwhen\n.B \\-\\-dev tun\nis specified.\n\n.B metric\ndefault \\-\\- taken from\n.B \\-\\-route-metric\notherwise 0.\n\nThe default can be specified by leaving an option blank or setting\nit to \"default\".\n\nThe\n.B network\nand\n.B gateway\nparameters can\nalso be specified as a DNS or /etc/hosts\nfile resolvable name, or as one of three special keywords:\n\n.B vpn_gateway\n\\-\\- The remote VPN endpoint address\n(derived either from\n.B \\-\\-route-gateway\nor the second parameter to\n.B \\-\\-ifconfig\nwhen\n.B \\-\\-dev tun\nis specified).\n\n.B net_gateway\n\\-\\- The pre-existing IP default gateway, read from the routing\ntable (not supported on all OSes).\n\n.B remote_host\n\\-\\- The\n.B \\-\\-remote\naddress if OpenVPN is being run in client mode, and is undefined in server mode.\n.\\\"*********************************************************\n.TP\n.B \\-\\-max-routes n\nAllow a maximum number of n\n.B \\-\\-route\noptions to be specified, either in the local configuration file,\nor pulled from an OpenVPN server.  By default, n=100.\n.\\\"*********************************************************\n.TP\n.B \\-\\-route-gateway gw|'dhcp'\nSpecify a default gateway\n.B gw\nfor use with\n.B \\-\\-route.\n\nIf\n.B dhcp\nis specified as the parameter,\nthe gateway address will be extracted from a DHCP\nnegotiation with the OpenVPN server-side LAN.\n.\\\"*********************************************************\n.TP\n.B \\-\\-route-metric m\nSpecify a default metric\n.B m\nfor use with\n.B \\-\\-route.\n.\\\"*********************************************************\n.TP\n.B \\-\\-route-delay [n] [w]\nDelay\n.B n\nseconds (default=0) after connection\nestablishment, before adding routes. If\n.B n\nis 0, routes will be added immediately upon connection\nestablishment.  If\n.B \\-\\-route-delay\nis omitted, routes will be added immediately after TUN/TAP device\nopen and\n.B \\-\\-up\nscript execution, before any\n.B \\-\\-user\nor \n.B \\-\\-group\nprivilege downgrade (or\n.B \\-\\-chroot\nexecution.)\n\nThis option is designed to be useful in scenarios where DHCP is\nused to set\ntap adapter addresses.  The delay will give the DHCP handshake\ntime to complete before routes are added.\n\nOn Windows,\n.B \\-\\-route-delay\ntries to be more intelligent by waiting\n.B w\nseconds (w=30 by default)\nfor the TAP-Win32 adapter to come up before adding routes.\n.\\\"*********************************************************\n.TP\n.B \\-\\-route-up cmd\nRun command\n.B cmd\nafter routes are added, subject to\n.B \\-\\-route-delay.\n\n.B cmd\nconsists of a path to script (or executable program), optionally\nfollowed by arguments. The path and arguments may be single- or double-quoted\nand/or escaped using a backslash, and should be separated by one or more spaces.\n\nSee the \"Environmental Variables\" section below for\nadditional parameters passed as environmental variables.\n.\\\"*********************************************************\n.TP\n.B \\-\\-route-pre-down cmd\nRun command\n.B cmd\nbefore routes are removed upon disconnection.\n\n.B cmd\nconsists of a path to script (or executable program), optionally\nfollowed by arguments. The path and arguments may be single- or double-quoted\nand/or escaped using a backslash, and should be separated by one or more spaces.\n\nSee the \"Environmental Variables\" section below for\nadditional parameters passed as environmental variables.\n.\\\"*********************************************************\n.TP\n.B \\-\\-route-noexec\nDon't add or remove routes automatically.  Instead pass routes to\n.B \\-\\-route-up\nscript using environmental variables.\n.\\\"*********************************************************\n.TP\n.B \\-\\-route-nopull\nWhen used with\n.B \\-\\-client\nor\n.B \\-\\-pull,\naccept options pushed by server EXCEPT for routes and dhcp options\nlike DNS servers.\n\nWhen used on the client, this option effectively bars the\nserver from adding routes to the client's routing table,\nhowever note that this option still allows the server\nto set the TCP/IP properties of the client's TUN/TAP interface.\n.\\\"*********************************************************\n.TP\n.B \\-\\-allow-pull-fqdn\nAllow client to pull DNS names from server (rather than being limited\nto IP address) for\n.B \\-\\-ifconfig,\n.B \\-\\-route,\nand\n.B \\-\\-route-gateway.\n.\\\"*********************************************************\n.TP\n.B \\-\\-client-nat snat|dnat network netmask alias\nThis pushable client option sets up a stateless one-to-one NAT\nrule on packet addresses (not ports), and is useful in cases\nwhere routes or ifconfig settings pushed to the client would\ncreate an IP numbering conflict.\n\n.B network/netmask\n(for example 192.168.0.0/255.255.0.0)\ndefines the local view of a resource from the client perspective, while\n.B alias/netmask\n(for example 10.64.0.0/255.255.0.0)\ndefines the remote view from the server perspective.\n\nUse\n.B snat\n(source NAT) for resources owned by the client and\n.B dnat\n(destination NAT) for remote resources.\n\nSet\n.B \\-\\-verb 6\nfor debugging info showing the transformation of src/dest\naddresses in packets.\n.\\\"*********************************************************\n.TP\n.B \\-\\-redirect-gateway flags...\nAutomatically execute routing commands to cause all outgoing IP traffic\nto be redirected over the VPN.  This is a client-side option.\n\nThis option performs three steps:\n\n.B (1)\nCreate a static route for the\n.B \\-\\-remote\naddress which forwards to the pre-existing default gateway.\nThis is done so that\n.B (3)\nwill not create a routing loop.\n\n.B (2)\nDelete the default gateway route.\n\n.B (3)\nSet the new default gateway to be the VPN endpoint address (derived either from\n.B \\-\\-route-gateway\nor the second parameter to\n.B \\-\\-ifconfig\nwhen\n.B \\-\\-dev tun\nis specified).\n\nWhen the tunnel is torn down, all of the above steps are reversed so\nthat the original default route is restored.\n\nOption flags:\n\n.B local \\-\\-\nAdd the\n.B local\nflag if both OpenVPN servers are directly connected via a common subnet,\nsuch as with wireless.  The\n.B local\nflag will cause step\n.B 1\nabove to be omitted.\n\n.B autolocal \\-\\-\nTry to automatically determine whether to enable\n.B local\nflag above.\n\n.B def1 \\-\\-\nUse this flag to override\nthe default gateway by using 0.0.0.0/1 and 128.0.0.0/1\nrather than 0.0.0.0/0.  This has the benefit of overriding\nbut not wiping out the original default gateway. \n\n.B bypass-dhcp \\-\\-\nAdd a direct route to the DHCP server (if it is non-local) which\nbypasses the tunnel\n(Available on Windows clients, may not be available\non non-Windows clients).\n\n.B bypass-dns \\-\\-\nAdd a direct route to the DNS server(s) (if they are non-local) which\nbypasses the tunnel\n(Available on Windows clients, may not be available\non non-Windows clients).\n\n.B block-local \\-\\-\nBlock access to local LAN when the tunnel is active, except for\nthe LAN gateway itself.  This is accomplished by routing the local\nLAN (except for the LAN gateway address) into the tunnel.\n.\\\"*********************************************************\n.TP\n.B \\-\\-link-mtu n\nSets an upper bound on the size of UDP packets which are sent\nbetween OpenVPN peers.  It's best not to set this parameter unless\nyou know what you're doing.\n.\\\"*********************************************************\n.\\\"*********************************************************\n.TP\n.B \\-\\-redirect-private [flags]\nLike \\-\\-redirect-gateway, but omit actually changing the default\ngateway.  Useful when pushing private subnets.\n.\\\"*********************************************************\n.TP\n.B \\-\\-tun-mtu n\nTake the TUN device MTU to be\n.B n\nand derive the link MTU\nfrom it (default=1500).  In most cases, you will probably want to\nleave this parameter set to its default value.\n\nThe MTU (Maximum Transmission Units) is\nthe maximum datagram size in bytes that can be sent unfragmented\nover a particular network path.  OpenVPN requires that packets\non the control or data channels be sent unfragmented.\n\nMTU problems often manifest themselves as connections which\nhang during periods of active usage.\n\nIt's best to use the\n.B \\-\\-fragment\nand/or\n.B \\-\\-mssfix\noptions to deal with MTU sizing issues.\n.\\\"*********************************************************\n.TP\n.B \\-\\-tun-mtu-extra n\nAssume that the TUN/TAP device might return as many as\n.B n\nbytes more than the\n.B \\-\\-tun-mtu\nsize on read.  This parameter defaults to 0, which is sufficient for\nmost TUN devices.  TAP devices may introduce additional overhead in excess\nof the MTU size, and a setting of 32 is the default when TAP devices are used.\nThis parameter only controls internal OpenVPN buffer sizing,\nso there is no transmission overhead associated with using a larger value.\n.\\\"*********************************************************\n.TP\n.B \\-\\-mtu-disc type\nShould we do Path MTU discovery on TCP/UDP channel?  Only supported on OSes such\nas Linux that supports the necessary system call to set.\n\n.B 'no'\n\\-\\- Never send DF (Don't Fragment) frames\n.br\n.B 'maybe'\n\\-\\- Use per-route hints\n.br\n.B 'yes'\n\\-\\- Always DF (Don't Fragment)\n.br\n.\\\"*********************************************************\n.TP\n.B \\-\\-mtu-test\nTo empirically measure MTU on connection startup,\nadd the\n.B \\-\\-mtu-test\noption to your configuration.\nOpenVPN will send ping packets of various sizes\nto the remote peer and measure the largest packets\nwhich were successfully received.  The\n.B \\-\\-mtu-test\nprocess normally takes about 3 minutes to complete.\n.\\\"*********************************************************\n.TP\n.B \\-\\-fragment max\nEnable internal datagram fragmentation so\nthat no UDP datagrams are sent which\nare larger than\n.B max\nbytes.\n\nThe\n.B max\nparameter is interpreted in the same way as the\n.B \\-\\-link-mtu\nparameter, i.e. the UDP packet size after encapsulation\noverhead has been added in, but not including\nthe UDP header itself.\n\nThe\n.B \\-\\-fragment\noption only makes sense when you are using the UDP protocol (\n.B \\-\\-proto udp\n).\n\n.B \\-\\-fragment\nadds 4 bytes of overhead per datagram.\n\nSee the\n.B \\-\\-mssfix\noption below for an important related option to\n.B \\-\\-fragment.\n\nIt should also be noted that this option is not meant to replace\nUDP fragmentation at the IP stack level.  It is only meant as a\nlast resort when path MTU discovery is broken.  Using this option\nis less efficient than fixing path MTU discovery for your IP link and\nusing native IP fragmentation instead.\n\nHaving said that, there are circumstances where using OpenVPN's\ninternal fragmentation capability may be your only option, such\nas tunneling a UDP multicast stream which requires fragmentation.\n.\\\"*********************************************************\n.TP\n.B \\-\\-mssfix max\nAnnounce to TCP sessions running over the tunnel that they should limit\ntheir send packet sizes such that after OpenVPN has encapsulated them,\nthe resulting UDP packet size that OpenVPN sends to its peer will not\nexceed\n.B max\nbytes. The default value is\n.B 1450.\n\nThe\n.B max\nparameter is interpreted in the same way as the\n.B \\-\\-link-mtu\nparameter, i.e. the UDP packet size after encapsulation\noverhead has been added in, but not including\nthe UDP header itself.\n\nThe\n.B \\-\\-mssfix\noption only makes sense when you are using the UDP protocol\nfor OpenVPN peer-to-peer communication, i.e.\n.B \\-\\-proto udp.\n\n.B \\-\\-mssfix\nand\n.B \\-\\-fragment\ncan be ideally used together, where\n.B \\-\\-mssfix\nwill try to keep TCP from needing\npacket fragmentation in the first place,\nand if big packets come through anyhow\n(from protocols other than TCP),\n.B \\-\\-fragment\nwill internally fragment them.\n\nBoth\n.B \\-\\-fragment\nand\n.B \\-\\-mssfix\nare designed to work around cases where Path MTU discovery\nis broken on the network path between OpenVPN peers.\n\nThe usual symptom of such a breakdown is an OpenVPN\nconnection which successfully starts, but then stalls\nduring active usage.\n\nIf\n.B \\-\\-fragment\nand\n.B \\-\\-mssfix\nare used together,\n.B \\-\\-mssfix\nwill take its default\n.B max\nparameter from the\n.B \\-\\-fragment max\noption.\n\nTherefore, one could lower the maximum UDP packet size\nto 1300 (a good first try for solving MTU-related\nconnection problems) with the following options:\n\n.B \\-\\-tun-mtu 1500 \\-\\-fragment 1300 \\-\\-mssfix\n.\\\"*********************************************************\n.TP\n.B \\-\\-sndbuf size\nSet the TCP/UDP socket send buffer size.\nCurrently defaults to 65536 bytes.\n.\\\"*********************************************************\n.TP\n.B \\-\\-rcvbuf size\nSet the TCP/UDP socket receive buffer size.\nCurrently defaults to 65536 bytes.\n.\\\"*********************************************************\n.TP\n.B \\-\\-mark value\nMark encrypted packets being sent with value. The mark value can be\nmatched in policy routing and packetfilter rules. This option is\nonly supported in Linux and does nothing on other operating systems.\n.\\\"*********************************************************\n.TP\n.B \\-\\-socket-flags flags...\nApply the given flags to the OpenVPN transport socket.\nCurrently, only\n.B TCP_NODELAY\nis supported.\n\nThe\n.B TCP_NODELAY\nsocket flag is useful in TCP mode, and causes the kernel\nto send tunnel packets immediately over the TCP connection without\ntrying to group several smaller packets into a larger packet.\nThis can result in a considerably improvement in latency.\n\nThis option is pushable from server to client, and should be used\non both client and server for maximum effect.\n.\\\"*********************************************************\n.TP\n.B \\-\\-txqueuelen n\n(Linux only) Set the TX queue length on the TUN/TAP interface.\nCurrently defaults to 100.\n.\\\"*********************************************************\n.TP\n.B \\-\\-shaper n\nLimit bandwidth of outgoing tunnel data to\n.B n\nbytes per second on the TCP/UDP port.\nIf you want to limit the bandwidth\nin both directions, use this option on both peers.\n\nOpenVPN uses the following algorithm to implement\ntraffic shaping: Given a shaper rate of\n.I n\nbytes per second, after a datagram write of\n.I b\nbytes is queued on the TCP/UDP port, wait a minimum of\n.I (b / n)\nseconds before queuing the next write.\n\nIt should be noted that OpenVPN supports multiple\ntunnels between the same two peers, allowing you\nto construct full-speed and reduced bandwidth tunnels\nat the same time,\nrouting low-priority data such as off-site backups\nover the reduced bandwidth tunnel, and other data\nover the full-speed tunnel.\n\nAlso note that for low bandwidth tunnels\n(under 1000 bytes per second), you should probably\nuse lower MTU values as well (see above), otherwise\nthe packet latency will grow so large as to trigger\ntimeouts in the TLS layer and TCP connections running\nover the tunnel.\n\nOpenVPN allows\n.B n\nto be between 100 bytes/sec and 100 Mbytes/sec.\n.\\\"*********************************************************\n.TP\n.B \\-\\-inactive n [bytes]\nCauses OpenVPN to exit after\n.B n\nseconds of inactivity on the TUN/TAP device. The time length of\ninactivity is measured since the last incoming or outgoing tunnel\npacket.  The default value is 0 seconds, which disables this feature.\n\nIf the optional\n.B bytes\nparameter is included,\nexit if less than\n.B bytes\nof combined in/out traffic are produced on the tun/tap device\nin\n.B n\nseconds.\n\nIn any case, OpenVPN's internal ping packets (which are just\nkeepalives) and TLS control packets are not considered\n\"activity\", nor are they counted as traffic, as they are used\ninternally by OpenVPN and are not an indication of actual user\nactivity.\n.\\\"*********************************************************\n.TP\n.B \\-\\-ping n\nPing remote over the TCP/UDP control channel\nif no packets have been sent for at least\n.B n\nseconds (specify\n.B \\-\\-ping\non both peers to cause ping packets to be sent in both directions since\nOpenVPN ping packets are not echoed like IP ping packets).\nWhen used in one of OpenVPN's secure modes (where\n.B \\-\\-secret, \\-\\-tls-server,\nor\n.B \\-\\-tls-client\nis specified), the ping packet\nwill be cryptographically secure.\n\nThis option has two intended uses:\n\n(1) Compatibility\nwith stateful firewalls.  The periodic ping will ensure that\na stateful firewall rule which allows OpenVPN UDP packets to\npass will not time out.\n\n(2) To provide a basis for the remote to test the existence\nof its peer using the\n.B \\-\\-ping-exit\noption.\n.\\\"*********************************************************\n.TP\n.B \\-\\-ping-exit n\nCauses OpenVPN to exit after\n.B n\nseconds pass without reception of a ping\nor other packet from remote.\nThis option can be combined with\n.B \\-\\-inactive, \\-\\-ping,\nand\n.B \\-\\-ping-exit\nto create a two-tiered inactivity disconnect.\n\nFor example,\n\n.B openvpn [options...] \\-\\-inactive 3600 \\-\\-ping 10 \\-\\-ping-exit 60\n\nwhen used on both peers will cause OpenVPN to exit within 60\nseconds if its peer disconnects, but will exit after one\nhour if no actual tunnel data is exchanged.\n.\\\"*********************************************************\n.TP\n.B \\-\\-ping-restart n\nSimilar to\n.B \\-\\-ping-exit,\nbut trigger a\n.B SIGUSR1\nrestart after\n.B n\nseconds pass without reception of a ping\nor other packet from remote.\n\nThis option is useful in cases\nwhere the remote peer has a dynamic IP address and\na low-TTL DNS name is used to track the IP address using\na service such as\n.I http://dyndns.org/\n+ a dynamic DNS client such\nas\n.B ddclient.\n\nIf the peer cannot be reached, a restart will be triggered, causing\nthe hostname used with\n.B \\-\\-remote\nto be re-resolved (if\n.B \\-\\-resolv-retry\nis also specified).\n\nIn server mode,\n.B \\-\\-ping-restart, \\-\\-inactive,\nor any other type of internally generated signal will always be\napplied to\nindividual client instance objects, never to whole server itself.\nNote also in server mode that any internally generated signal\nwhich would normally cause a restart, will cause the deletion\nof the client instance object instead.\n\nIn client mode, the\n.B \\-\\-ping-restart\nparameter is set to 120 seconds by default.  This default will\nhold until the client pulls a replacement value from the server, based on\nthe\n.B \\-\\-keepalive\nsetting in the server configuration.\nTo disable the 120 second default, set\n.B \\-\\-ping-restart 0\non the client.\n\nSee the signals section below for more information\non\n.B SIGUSR1.\n\nNote that the behavior of\n.B SIGUSR1\ncan be modified by the\n.B \\-\\-persist-tun, \\-\\-persist-key, \\-\\-persist-local-ip,\nand\n.B \\-\\-persist-remote-ip\noptions.\n\nAlso note that\n.B \\-\\-ping-exit\nand\n.B \\-\\-ping-restart\nare mutually exclusive and cannot be used together.\n.\\\"*********************************************************\n.TP\n.B \\-\\-keepalive n m\nA helper directive designed to simplify the expression of\n.B \\-\\-ping\nand\n.B \\-\\-ping-restart\nin server mode configurations.\n\nThe server timeout is set twice the value of the second argument.\nThis ensures that a timeout is dectected on client side\nbefore the server side drops the connection.\n\nFor example,\n.B \\-\\-keepalive 10 60\nexpands as follows:\n\n.nf\n.ft 3\n.in +4\n if mode server:\n   ping 10\n   ping-restart 120\n   push \"ping 10\"\n   push \"ping-restart 60\"\n else\n   ping 10\n   ping-restart 60\n.in -4\n.ft\n.fi\n.\\\"*********************************************************\n.TP\n.B \\-\\-ping-timer-rem\nRun the\n.B \\-\\-ping-exit\n/\n.B \\-\\-ping-restart\ntimer only if we have a remote address.  Use this option if you are\nstarting the daemon in listen mode (i.e. without an explicit\n.B \\-\\-remote\npeer), and you don't want to start clocking timeouts until a remote\npeer connects.\n.\\\"*********************************************************\n.TP\n.B \\-\\-persist-tun\nDon't close and reopen TUN/TAP device or run up/down scripts\nacross\n.B SIGUSR1\nor\n.B \\-\\-ping-restart\nrestarts.\n\n.B SIGUSR1\nis a restart signal similar to\n.B SIGHUP,\nbut which offers finer-grained control over\nreset options.\n.\\\"*********************************************************\n.TP\n.B \\-\\-persist-key\nDon't re-read key files across\n.B SIGUSR1\nor\n.B \\-\\-ping-restart.\n\nThis option can be combined with\n.B \\-\\-user nobody\nto allow restarts triggered by the\n.B SIGUSR1\nsignal.\nNormally if you drop root privileges in OpenVPN,\nthe daemon cannot be restarted since it will now be unable to re-read protected\nkey files.\n\nThis option solves the problem by persisting keys across\n.B SIGUSR1\nresets, so they don't need to be re-read.\n.\\\"*********************************************************\n.TP\n.B \\-\\-persist-local-ip\nPreserve initially resolved local IP address and port number\nacross\n.B SIGUSR1\nor\n.B \\-\\-ping-restart\nrestarts.\n.\\\"*********************************************************\n.TP\n.B \\-\\-persist-remote-ip\nPreserve most recently authenticated remote IP address and port number\nacross\n.B SIGUSR1\nor\n.B \\-\\-ping-restart\nrestarts.\n.\\\"*********************************************************\n.TP\n.B \\-\\-mlock\nDisable paging by calling the POSIX mlockall function.\nRequires that OpenVPN be initially run as root (though\nOpenVPN can subsequently downgrade its UID using the\n.B \\-\\-user\noption).\n\nUsing this option ensures that key material and tunnel\ndata are never written to disk due to virtual\nmemory paging operations which occur under most\nmodern operating systems.  It ensures that even if an\nattacker was able to crack the box running OpenVPN, he\nwould not be able to scan the system swap file to\nrecover previously used\nephemeral keys, which are used for a period of time\ngoverned by the\n.B \\-\\-reneg\noptions (see below), then are discarded.\n\nThe downside\nof using\n.B \\-\\-mlock\nis that it will reduce the amount of physical\nmemory available to other applications.\n.\\\"*********************************************************\n.TP\n.B \\-\\-up cmd\nRun command\n.B cmd\nafter successful TUN/TAP device open\n(pre\n.B \\-\\-user\nUID change).\n\n.B cmd\nconsists of a path to script (or executable program), optionally\nfollowed by arguments. The path and arguments may be single- or double-quoted\nand/or escaped using a backslash, and should be separated by one or more spaces.\n\nThe up command is useful for specifying route\ncommands which route IP traffic destined for\nprivate subnets which exist at the other\nend of the VPN connection into the tunnel.\n\nFor\n.B \\-\\-dev tun\nexecute as:\n\n.B cmd tun_dev tun_mtu link_mtu ifconfig_local_ip ifconfig_remote_ip [ init | restart ]\n\nFor\n.B \\-\\-dev tap\nexecute as:\n\n.B cmd tap_dev tap_mtu link_mtu ifconfig_local_ip ifconfig_netmask [ init | restart ]\n\nSee the \"Environmental Variables\" section below for\nadditional parameters passed as environmental variables.\n\nNote that if\n.B cmd\nincludes arguments, all OpenVPN-generated arguments will be appended\nto them to build an argument list with which the executable will be\ncalled.\n\nTypically,\n.B cmd\nwill run a script to add routes to the tunnel.\n\nNormally the up script is called after the TUN/TAP device is opened.\nIn this context, the last command line parameter passed to the script\nwill be\n.I init.\nIf the\n.B \\-\\-up-restart\noption is also used, the up script will be called for restarts as\nwell.  A restart is considered to be a partial reinitialization\nof OpenVPN where the TUN/TAP instance is preserved (the\n.B \\-\\-persist-tun\noption will enable such preservation).  A restart\ncan be generated by a SIGUSR1 signal, a\n.B \\-\\-ping-restart\ntimeout, or a connection reset when the TCP protocol is enabled\nwith the\n.B \\-\\-proto\noption.  If a restart occurs, and\n.B \\-\\-up-restart\nhas been specified, the up script will be called with\n.I restart\nas the last parameter.\n\nThe following standalone example shows how the\n.B \\-\\-up\nscript can be called in both an initialization and restart context.\n(NOTE: for security reasons, don't run the following example unless UDP port\n9999 is blocked by your firewall.  Also, the example will run indefinitely,\nso you should abort with control-c).\n\n.B openvpn \\-\\-dev tun \\-\\-port 9999 \\-\\-verb 4 \\-\\-ping-restart 10 \\-\\-up 'echo up' \\-\\-down 'echo down' \\-\\-persist-tun \\-\\-up-restart\n\nNote that OpenVPN also provides the\n.B \\-\\-ifconfig\noption to automatically ifconfig the TUN device,\neliminating the need to define an\n.B \\-\\-up\nscript, unless you also want to configure routes\nin the\n.B \\-\\-up\nscript.\n\nIf\n.B \\-\\-ifconfig\nis also specified, OpenVPN will pass the ifconfig local\nand remote endpoints on the command line to the\n.B \\-\\-up\nscript so that they can be used to configure routes such as:\n\n.B route add -net 10.0.0.0 netmask 255.255.255.0 gw $5\n.\\\"*********************************************************\n.TP\n.B \\-\\-up-delay\nDelay TUN/TAP open and possible\n.B \\-\\-up\nscript execution\nuntil after TCP/UDP connection establishment with peer.\n\nIn\n.B \\-\\-proto udp\nmode, this option normally requires the use of\n.B \\-\\-ping\nto allow connection initiation to be sensed in the absence\nof tunnel data, since UDP is a \"connectionless\" protocol.\n\nOn Windows, this option will delay the TAP-Win32 media state\ntransitioning to \"connected\" until connection establishment,\ni.e. the receipt of the first authenticated packet from the peer.\n.\\\"*********************************************************\n.TP\n.B \\-\\-down cmd\nRun command\n.B cmd\nafter TUN/TAP device close\n(post\n.B \\-\\-user\nUID change and/or\n.B \\-\\-chroot\n).\n.B cmd\nconsists of a path to script (or executable program), optionally\nfollowed by arguments. The path and arguments may be single- or double-quoted\nand/or escaped using a backslash, and should be separated by one or more spaces.\n\nCalled with the same parameters and environmental\nvariables as the\n.B \\-\\-up\noption above.\n\nNote that if you reduce privileges by using\n.B \\-\\-user\nand/or\n.B \\-\\-group,\nyour\n.B \\-\\-down\nscript will also run at reduced privilege.\n.\\\"*********************************************************\n.TP\n.B \\-\\-down-pre\nCall\n.B \\-\\-down\ncmd/script before, rather than after, TUN/TAP close.\n.\\\"*********************************************************\n.TP\n.B \\-\\-up-restart\nEnable the\n.B \\-\\-up\nand\n.B \\-\\-down\nscripts to be called for restarts as well as initial program start.\nThis option is described more fully above in the\n.B \\-\\-up\noption documentation.\n.\\\"*********************************************************\n.TP\n.B \\-\\-setenv name value\nSet a custom environmental variable\n.B name=value\nto pass to script.\n.\\\"*********************************************************\n.TP\n.B \\-\\-setenv FORWARD_COMPATIBLE 1\nRelax config file syntax checking so that unknown directives\nwill trigger a warning but not a fatal error,\non the assumption that a given unknown directive might be valid\nin future OpenVPN versions.\n\nThis option should be used with caution, as there are good security\nreasons for having OpenVPN fail if it detects problems in a\nconfig file.  Having said that, there are valid reasons for wanting\nnew software features to gracefully degrade when encountered by\nolder software versions.\n.\\\"*********************************************************\n.TP\n.B \\-\\-setenv-safe name value\nSet a custom environmental variable\n.B OPENVPN_name=value\nto pass to script.\n\nThis directive is designed to be pushed by the server to clients,\nand the prepending of \"OPENVPN_\" to the environmental variable\nis a safety precaution to prevent a LD_PRELOAD style attack\nfrom a malicious or compromised server.\n.\\\"*********************************************************\n.TP\n.B \\-\\-script-security level\nThis directive offers policy-level control over OpenVPN's usage of external programs\nand scripts.  Lower\n.B level\nvalues are more restrictive, higher values are more permissive.  Settings for\n.B level:\n\n.B 0 \\-\\-\nStrictly no calling of external programs.\n.br\n.B 1 \\-\\-\n(Default) Only call built-in executables such as ifconfig, ip, route, or netsh.\n.br\n.B 2 \\-\\-\nAllow calling of built-in executables and user-defined scripts.\n.br\n.B 3 \\-\\-\nAllow passwords to be passed to scripts via environmental variables (potentially unsafe).\n\nOpenVPN releases before v2.3 also supported a\n.B method\nflag which indicated how OpenVPN should call external commands and scripts.  This\ncould be either\n.B execve\nor \n.B system. \nAs of OpenVPN v2.3, this flag is no longer accepted.  In most *nix environments the execve()\napproach has been used without any issues.\n\nTo run scripts in Windows in earlier OpenVPN\nversions you needed to either add a full path to the script interpreter which can parse the\nscript or use the\n.B system\nflag to run these scripts.  As of OpenVPN v2.3 it is now a strict requirement to have\nfull path to the script interpreter when running non-executables files.\nThis is not needed for executable files, such as .exe, .com, .bat or .cmd files.  For\nexample, if you have a Visual Basic script, you must use this syntax now:\n\n.nf\n.ft 3\n.in +4\n\\-\\-up 'C:\\\\\\\\Windows\\\\\\\\System32\\\\\\\\wscript.exe C:\\\\\\\\Program\\\\ Files\\\\\\\\OpenVPN\\\\\\\\config\\\\\\\\my-up-script.vbs'\n.in -4\n.ft\n.fi\n\nPlease note the single quote marks and the escaping of the backslashes (\\\\) and\nthe space character.\n\nThe reason the support for the\n.B system\nflag was removed is due to the security implications with shell expansions\nwhen executing scripts via the system() call.\n.\\\"*********************************************************\n.TP\n.B \\-\\-disable-occ\nDon't output a warning message if option inconsistencies are detected between\npeers.  An example of an option inconsistency would be where one peer uses\n.B \\-\\-dev tun\nwhile the other peer uses\n.B \\-\\-dev tap.\n\nUse of this option is discouraged, but is provided as\na temporary fix in situations where a recent version of OpenVPN must\nconnect to an old version.\n.\\\"*********************************************************\n.TP\n.B \\-\\-user user\nChange the user ID of the OpenVPN process to\n.B user\nafter initialization, dropping privileges in the process.\nThis option is useful to protect the system\nin the event that some hostile party was able to gain control of\nan OpenVPN session.  Though OpenVPN's security features make\nthis unlikely, it is provided as a second line of defense.\n\nBy setting\n.B user\nto\n.I nobody\nor somebody similarly unprivileged, the hostile party would be\nlimited in what damage they could cause.  Of course once\nyou take away privileges, you cannot return them\nto an OpenVPN session.  This means, for example, that if\nyou want to reset an OpenVPN daemon with a\n.B SIGUSR1\nsignal\n(for example in response\nto a DHCP reset), you should make use of one or more of the\n.B \\-\\-persist\noptions to ensure that OpenVPN doesn't need to execute any privileged\noperations in order to restart (such as re-reading key files\nor running\n.BR ifconfig\non the TUN device).\n.\\\"*********************************************************\n.TP\n.B \\-\\-group group\nSimilar to the\n.B \\-\\-user\noption,\nthis option changes the group ID of the OpenVPN process to\n.B group\nafter initialization.\n.\\\"*********************************************************\n.TP\n.B \\-\\-cd dir\nChange directory to\n.B dir\nprior to reading any files such as\nconfiguration files, key files, scripts, etc.\n.B dir\nshould be an absolute path, with a leading \"/\",\nand without any references\nto the current directory such as \".\" or \"..\".\n\nThis option is useful when you are running\nOpenVPN in \n.B \\-\\-daemon\nmode, and you want to consolidate all of\nyour OpenVPN control files in one location.\n.\\\"*********************************************************\n.TP\n.B \\-\\-chroot dir\nChroot to\n.B dir\nafter initialization.  \n.B \\-\\-chroot\nessentially redefines\n.B dir\nas being the top\nlevel directory tree (/).  OpenVPN will therefore\nbe unable to access any files outside this tree.\nThis can be desirable from a security standpoint.\n\nSince the chroot operation is delayed until after\ninitialization, most OpenVPN options that reference\nfiles will operate in a pre-chroot context.\n\nIn many cases, the\n.B dir\nparameter can point to an empty directory, however\ncomplications can result when scripts or restarts\nare executed after the chroot operation.\n.\\\"*********************************************************\n.TP\n.B \\-\\-setcon context\nApply SELinux\n.B context\nafter initialization. This\nessentially provides the ability to restrict OpenVPN's\nrights to only network I/O operations, thanks to\nSELinux. This goes further than\n.B \\-\\-user\nand\n.B \\-\\-chroot\nin that those two, while being great security features,\nunfortunately do not protect against privilege escalation\nby exploitation of a vulnerable system call. You can of\ncourse combine all three, but please note that since\nsetcon requires access to /proc you will have to provide\nit inside the chroot directory (e.g. with mount \\-\\-bind).\n\nSince the setcon operation is delayed until after\ninitialization, OpenVPN can be restricted to just\nnetwork-related system calls, whereas by applying the\ncontext before startup (such as the OpenVPN one provided\nin the SELinux Reference Policies) you will have to\nallow many things required only during initialization.\n\nLike with chroot, complications can result when scripts\nor restarts are executed after the setcon operation,\nwhich is why you should really consider using the\n.B \\-\\-persist-key\nand\n.B \\-\\-persist-tun\noptions.\n.\\\"*********************************************************\n.TP\n.B \\-\\-daemon [progname]\nBecome a daemon after all initialization functions are completed.\nThis option will cause all message and error output to\nbe sent to the syslog file (such as /var/log/messages),\nexcept for the output of scripts and\nifconfig commands,\nwhich will go to /dev/null unless otherwise redirected.\nThe syslog redirection occurs immediately at the point\nthat\n.B \\-\\-daemon\nis parsed on the command line even though\nthe daemonization point occurs later.  If one of the\n.B \\-\\-log\noptions is present, it will supercede syslog\nredirection.\n\nThe optional\n.B progname\nparameter will cause OpenVPN to report its program name\nto the system logger as\n.B progname.\nThis can be useful in linking OpenVPN messages\nin the syslog file with specific tunnels.\nWhen unspecified,\n.B progname\ndefaults to \"openvpn\".\n\nWhen OpenVPN is run with the\n.B \\-\\-daemon\noption, it will try to delay daemonization until the majority of initialization\nfunctions which are capable of generating fatal errors are complete.  This means\nthat initialization scripts can test the return status of the\nopenvpn command for a fairly reliable indication of whether the command\nhas correctly initialized and entered the packet forwarding event loop.\n\nIn OpenVPN, the vast majority of errors which occur after initialization are non-fatal.\n.\\\"*********************************************************\n.TP\n.B \\-\\-syslog [progname]\nDirect log output to system logger, but do not become a daemon.\nSee\n.B \\-\\-daemon\ndirective above for description of\n.B progname\nparameter.\n.TP\n.B \\-\\-errors-to-stderr\nOutput errors to stderr instead of stdout unless log output is redirected by one of the\n.B \\-\\-log\noptions.\n.\\\"*********************************************************\n.TP\n.B \\-\\-passtos\nSet the TOS field of the tunnel packet to what the payload's TOS is.\n.\\\"*********************************************************\n.TP\n.B \\-\\-inetd [wait|nowait] [progname]\nUse this option when OpenVPN is being run from the inetd or\n.BR xinetd(8)\nserver.\n\nThe\n.B wait/nowait\noption must match what is specified in the inetd/xinetd\nconfig file.  The\n.B nowait\nmode can only be used with\n.B \\-\\-proto tcp-server.\nThe default is\n.B wait.\nThe\n.B nowait\nmode can be used to instantiate the OpenVPN daemon as a classic TCP server,\nwhere client connection requests are serviced on a single\nport number.  For additional information on this kind of configuration,\nsee the OpenVPN FAQ:\n.I http://openvpn.net/faq.html#oneport\n\nThis option precludes the use of\n.B \\-\\-daemon, \\-\\-local,\nor\n.B \\-\\-remote.\nNote that this option causes message and error output to be handled in the same\nway as the\n.B \\-\\-daemon\noption.  The optional\n.B progname\nparameter is also handled exactly as in\n.B \\-\\-daemon.\n\nAlso note that in\n.B wait\nmode, each OpenVPN tunnel requires a separate TCP/UDP port and\na separate inetd or xinetd entry.  See the OpenVPN 1.x HOWTO for an example\non using OpenVPN with xinetd:\n.I http://openvpn.net/1xhowto.html\n.\\\"*********************************************************\n.TP\n.B \\-\\-log file\nOutput logging messages to\n.B file,\nincluding output to stdout/stderr which\nis generated by called scripts.\nIf\n.B file\nalready exists it will be truncated.\nThis option takes effect\nimmediately when it is parsed in the command line\nand will supercede syslog output if\n.B \\-\\-daemon\nor\n.B \\-\\-inetd\nis also specified.\nThis option is persistent over the entire course of\nan OpenVPN instantiation and will not be reset by SIGHUP,\nSIGUSR1, or\n.B \\-\\-ping-restart.\n\nNote that on Windows, when OpenVPN is started as a service,\nlogging occurs by default without the need to specify\nthis option.\n.\\\"*********************************************************\n.TP\n.B \\-\\-log-append file\nAppend logging messages to\n.B file.\nIf\n.B file\ndoes not exist, it will be created.\nThis option behaves exactly like\n.B \\-\\-log\nexcept that it appends to rather\nthan truncating the log file.\n.\\\"*********************************************************\n.TP\n.B \\-\\-suppress-timestamps\nAvoid writing timestamps to log messages, even when they\notherwise would be prepended. In particular, this applies to\nlog messages sent to stdout.\n.\\\"*********************************************************\n.TP\n.B \\-\\-writepid file\nWrite OpenVPN's main process ID to\n.B file.\n.\\\"*********************************************************\n.TP\n.B \\-\\-nice n\nChange process priority after initialization\n(\n.B n\ngreater than 0 is lower priority,\n.B n\nless than zero is higher priority).\n.\\\"*********************************************************\n.\\\".TP\n.\\\".B \\-\\-nice-work n\n.\\\"Change priority of background TLS work thread.  The TLS thread\n.\\\"feature is enabled when OpenVPN is built\n.\\\"with pthread support, and you are running OpenVPN\n.\\\"in TLS mode (i.e. with\n.\\\".B \\-\\-tls-client\n.\\\"or\n.\\\".B \\-\\-tls-server\n.\\\"specified).\n.\\\"\n.\\\"Using a TLS thread offloads the CPU-intensive process of SSL/TLS-based\n.\\\"key exchange to a background thread so that it does not become\n.\\\"a latency bottleneck in the tunnel packet forwarding process.\n.\\\"\n.\\\"The parameter\n.\\\".B n\n.\\\"is interpreted exactly as with the\n.\\\".B \\-\\-nice\n.\\\"option above, but in relation to the work thread rather\n.\\\"than the main thread.\n.\\\"*********************************************************\n.TP\n.B \\-\\-fast-io\n(Experimental) Optimize TUN/TAP/UDP I/O writes by avoiding\na call to poll/epoll/select prior to the write operation.  The purpose\nof such a call would normally be to block until the device\nor socket is ready to accept the write.  Such blocking is unnecessary\non some platforms which don't support write blocking on UDP sockets\nor TUN/TAP devices.  In such cases, one can optimize the event loop\nby avoiding the poll/epoll/select call, improving CPU efficiency\nby 5% to 10%.\n\nThis option can only be used on non-Windows systems, when\n.B \\-\\-proto udp\nis specified, and when\n.B \\-\\-shaper\nis NOT specified.\n.\\\"*********************************************************\n.TP\n.B \\-\\-multihome\nConfigure a multi-homed UDP server.  This option can be used when\nOpenVPN has been configured to listen on all interfaces, and will\nattempt to bind client sessions to the interface on which packets\nare being received, so that outgoing packets will be sent out\nof the same interface.  Note that this option is only relevant for\nUDP servers and currently is only implemented on Linux.\n\nNote: clients connecting to a\n.B \\-\\-multihome\nserver should always use the\n.B \\-\\-nobind\noption.\n.\\\"*********************************************************\n.TP\n.B \\-\\-echo [parms...]\nEcho\n.B parms\nto log output.\n\nDesigned to be used to send messages to a controlling application\nwhich is receiving the OpenVPN log output.\n.\\\"*********************************************************\n.TP\n.B \\-\\-remap-usr1 signal\nControl whether internally or externally\ngenerated SIGUSR1 signals are remapped to\nSIGHUP (restart without persisting state) or\nSIGTERM (exit).\n\n.B signal\ncan be set to \"SIGHUP\" or \"SIGTERM\".  By default, no remapping\noccurs.\n.\\\"*********************************************************\n.TP\n.B \\-\\-verb n\nSet output verbosity to\n.B n\n(default=1).  Each level shows all info from the previous levels.\nLevel 3 is recommended if you want a good summary\nof what's happening without being swamped by output.\n\n.B 0 \\-\\-\nNo output except fatal errors.\n.br\n.B 1 to 4 \\-\\-\nNormal usage range.\n.br\n.B 5 \\-\\-\nOutput\n.B R\nand\n.B W\ncharacters to the console for each packet read and write, uppercase is\nused for TCP/UDP packets and lowercase is used for TUN/TAP packets.\n.br\n.B 6 to 11 \\-\\-\nDebug info range (see errlevel.h for additional\ninformation on debug levels).\n.\\\"*********************************************************\n.TP\n.B \\-\\-status file [n]\nWrite operational status to\n.B file\nevery\n.B n\nseconds.\n\nStatus can also be written to the syslog by sending a\n.B SIGUSR2\nsignal.\n.\\\"*********************************************************\n.TP\n.B \\-\\-status-version [n]\nChoose the status file format version number.  Currently\n.B n\ncan be 1, 2, or 3 and defaults to 1.\n.\\\"*********************************************************\n.TP\n.B \\-\\-mute n\nLog at most\n.B n\nconsecutive messages in the same category.  This is useful to\nlimit repetitive logging of similar message types.\n.\\\"*********************************************************\n.TP\n.B \\-\\-comp-lzo [mode]\nUse fast LZO compression \\-\\- may add up to 1 byte per\npacket for incompressible data.\n.B mode\nmay be \"yes\", \"no\", or \"adaptive\" (default).\n\nIn a server mode setup, it is possible to selectively turn\ncompression on or off for individual clients.\n\nFirst, make sure the client-side config file enables selective\ncompression by having at least one\n.B \\-\\-comp-lzo\ndirective, such as\n.B \\-\\-comp-lzo no.\nThis will turn off compression by default,\nbut allow a future directive push from the server to\ndynamically change the\non/off/adaptive setting.\n\nNext in a\n.B \\-\\-client-config-dir\nfile, specify the compression setting for the client,\nfor example:\n\n.nf\n.ft 3\n.in +4\ncomp-lzo yes\npush \"comp-lzo yes\"\n.in -4\n.ft\n.fi\n\nThe first line sets the\n.B comp-lzo\nsetting for the server\nside of the link, the second sets the client side.\n.\\\"*********************************************************\n.TP\n.B \\-\\-comp-noadapt\nWhen used in conjunction with\n.B \\-\\-comp-lzo,\nthis option will disable OpenVPN's adaptive compression algorithm.\nNormally, adaptive compression is enabled with\n.B \\-\\-comp-lzo.\n\nAdaptive compression tries to optimize the case where you have\ncompression enabled, but you are sending predominantly uncompressible\n(or pre-compressed) packets over the tunnel, such as an FTP or rsync transfer\nof a large, compressed file.  With adaptive compression,\nOpenVPN will periodically sample the compression process to measure its\nefficiency.  If the data being sent over the tunnel is already compressed,\nthe compression efficiency will be very low, triggering openvpn to disable\ncompression for a period of time until the next re-sample test.\n.\\\"*********************************************************\n.TP\n.B \\-\\-management IP port [pw-file]\nEnable a TCP server on\n.B IP:port\nto handle daemon management functions.\n.B pw-file,\nif specified,\nis a password file (password on first line)\nor \"stdin\" to prompt from standard input.  The password\nprovided will set the password which TCP clients will need\nto provide in order to access management functions.\n\nThe management interface can also listen on a unix domain socket,\nfor those platforms that support it.  To use a unix domain socket, specify\nthe unix socket pathname in place of\n.B IP\nand set\n.B port\nto 'unix'.  While the default behavior is to create a unix domain socket\nthat may be connected to by any process, the\n.B \\-\\-management-client-user\nand\n.B \\-\\-management-client-group\ndirectives can be used to restrict access.\n\nThe management interface provides a special mode where the TCP\nmanagement link can operate over the tunnel itself.  To enable this mode,\nset\n.B IP\n= \"tunnel\".  Tunnel mode will cause the management interface\nto listen for a TCP connection on the local VPN address of the\nTUN/TAP interface.\n\nWhile the management port is designed for programmatic control\nof OpenVPN by other applications, it is possible to telnet\nto the port, using a telnet client in \"raw\" mode.  Once connected,\ntype \"help\" for a list of commands.\n\nFor detailed documentation on the management interface, see\nthe management-notes.txt file in the\n.B management\nfolder of\nthe OpenVPN source distribution.\n\nIt is strongly recommended that\n.B IP\nbe set to 127.0.0.1\n(localhost) to restrict accessibility of the management\nserver to local clients. \n.TP\n.B \\-\\-management-client\nManagement interface will connect as a TCP/unix domain client to\n.B IP:port\nspecified by\n.B \\-\\-management\nrather than listen as a TCP server or on a unix domain socket.\n\nIf the client connection fails to connect or is disconnected,\na SIGTERM signal will be generated causing OpenVPN to quit.\n.\\\"*********************************************************\n.TP\n.B \\-\\-management-query-passwords\nQuery management channel for private key password and\n.B \\-\\-auth-user-pass\nusername/password.  Only query the management channel\nfor inputs which ordinarily would have been queried from the\nconsole.\n.\\\"*********************************************************\n.TP\n.B \\-\\-management-query-proxy\nQuery management channel for proxy server information for a specific\n.B \\-\\-remote\n(client-only).\n.\\\"*********************************************************\n.TP\n.B \\-\\-management-query-remote\nAllow management interface to override\n.B \\-\\-remote\ndirectives (client-only).\n.\\\"*********************************************************\n.B \\-\\-management-external-key\nAllows usage for external private key file instead of\n.B \\-\\-key\noption (client-only).\n.\\\"*********************************************************\n.TP\n.B \\-\\-management-forget-disconnect\nMake OpenVPN forget passwords when management session\ndisconnects.\n\nThis directive does not affect the\n.B \\-\\-http-proxy\nusername/password.  It is always cached.\n.\\\"*********************************************************\n.TP\n.B \\-\\-management-hold\nStart OpenVPN in a hibernating state, until a client\nof the management interface explicitly starts it\nwith the\n.B hold release\ncommand.\n.\\\"*********************************************************\n.TP\n.B \\-\\-management-signal\nSend SIGUSR1 signal to OpenVPN if management session disconnects.\nThis is useful when you wish to disconnect an OpenVPN session on\nuser logoff. For --management-client this option is not needed since\na disconnect will always generate a SIGTERM.\n.\\\"*********************************************************\n.TP\n.B \\-\\-management-log-cache n\nCache the most recent\n.B n\nlines of log file history for usage\nby the management channel.\n.\\\"*********************************************************\n.TP\n.B \\-\\-management-up-down\nReport tunnel up/down events to management interface.\n.B \n.\\\"*********************************************************\n.TP\n.B \\-\\-management-client-auth\nGives management interface client the responsibility\nto authenticate clients after their client certificate\nhas been verified.  See management-notes.txt in OpenVPN\ndistribution for detailed notes.\n.\\\"*********************************************************\n.TP\n.B \\-\\-management-client-pf\nManagement interface clients must specify a packet\nfilter file for each connecting client.  See management-notes.txt\nin OpenVPN distribution for detailed notes.\n.\\\"*********************************************************\n.TP\n.B \\-\\-management-client-user u\nWhen the management interface is listening on a unix domain socket,\nonly allow connections from user\n.B u.\n.\\\"*********************************************************\n.TP\n.B \\-\\-management-client-group g\nWhen the management interface is listening on a unix domain socket,\nonly allow connections from group\n.B g.\n.\\\"*********************************************************\n.TP\n.B \\-\\-plugin module-pathname [init-string]\nLoad plug-in module from the file\n.B module-pathname,\npassing\n.B init-string\nas an argument\nto the module initialization function.  Multiple\nplugin modules may be loaded into one OpenVPN\nprocess.\n\nFor more information and examples on how to build OpenVPN\nplug-in modules, see the README file in the\n.B plugin\nfolder of the OpenVPN source distribution.\n\nIf you are using an RPM install of OpenVPN, see\n/usr/share/openvpn/plugin.  The documentation is\nin\n.B doc\nand the actual plugin modules are in\n.B lib.\n\nMultiple plugin modules can be cascaded, and modules can be\nused in tandem with scripts.  The modules will be called by\nOpenVPN in the order that they are declared in the config\nfile.  If both a plugin and script are configured for the same\ncallback, the script will be called last.  If the\nreturn code of the module/script controls an authentication\nfunction (such as tls-verify, auth-user-pass-verify, or\nclient-connect), then\nevery module and script must return success (0) in order for\nthe connection to be authenticated.\n.\\\"*********************************************************\n.SS Server Mode\nStarting with OpenVPN 2.0, a multi-client TCP/UDP server mode\nis supported, and can be enabled with the\n.B \\-\\-mode server\noption.  In server mode, OpenVPN will listen on a single\nport for incoming client connections.  All client\nconnections will be routed through a single tun or tap\ninterface.  This mode is designed for scalability and should\nbe able to support hundreds or even thousands of clients\non sufficiently fast hardware.  SSL/TLS authentication must\nbe used in this mode.\n.\\\"*********************************************************\n.TP\n.B \\-\\-server network netmask\nA helper directive designed to simplify the configuration\nof OpenVPN's server mode.  This directive will set up an\nOpenVPN server which will allocate addresses to clients\nout of the given network/netmask.  The server itself\nwill take the \".1\" address of the given network\nfor use as the server-side endpoint of the local\nTUN/TAP interface.\n\nFor example,\n.B \\-\\-server 10.8.0.0 255.255.255.0\nexpands as follows:\n\n.nf\n.ft 3\n.in +4\n mode server\n tls-server\n push \"topology [topology]\"\n\n if dev tun AND (topology == net30 OR topology == p2p):\n   ifconfig 10.8.0.1 10.8.0.2\n   if !nopool:\n     ifconfig-pool 10.8.0.4 10.8.0.251\n   route 10.8.0.0 255.255.255.0\n   if client-to-client:\n     push \"route 10.8.0.0 255.255.255.0\"\n   else if topology == net30:\n     push \"route 10.8.0.1\"\n\n if dev tap OR (dev tun AND topology == subnet):\n   ifconfig 10.8.0.1 255.255.255.0\n   if !nopool:\n     ifconfig-pool 10.8.0.2 10.8.0.254 255.255.255.0\n   push \"route-gateway 10.8.0.1\"\n.in -4\n.ft\n.fi\n\nDon't use\n.B \\-\\-server\nif you are ethernet bridging.  Use\n.B \\-\\-server-bridge\ninstead.\n.\\\"*********************************************************\n.TP\n.B \\-\\-server-bridge gateway netmask pool-start-IP pool-end-IP\n.TP\n.B \\-\\-server-bridge ['nogw']\n\nA helper directive similar to\n.B \\-\\-server\nwhich is designed to simplify the configuration\nof OpenVPN's server mode in ethernet bridging configurations.\n\nIf\n.B \\-\\-server-bridge\nis used without any parameters, it will enable a DHCP-proxy\nmode, where connecting OpenVPN clients will receive an IP\naddress for their TAP adapter from the DHCP server running\non the OpenVPN server-side LAN.\nNote that only clients that support\nthe binding of a DHCP client with the TAP adapter (such as\nWindows) can support this mode.  The optional \n.B nogw\nflag (advanced) indicates that gateway information should not be\npushed to the client.\n\nTo configure ethernet bridging, you \nmust first use your OS's bridging capability\nto bridge the TAP interface with the ethernet\nNIC interface.  For example, on Linux this is done\nwith the\n.B brctl\ntool, and with Windows XP it is done in the Network\nConnections Panel by selecting the ethernet and\nTAP adapters and right-clicking on \"Bridge Connections\".\n\nNext you you must manually set the\nIP/netmask on the bridge interface.  The\n.B gateway\nand\n.B netmask\nparameters to\n.B \\-\\-server-bridge\ncan be set to either the IP/netmask of the\nbridge interface, or the IP/netmask of the\ndefault gateway/router on the bridged\nsubnet.\n\nFinally, set aside a IP range in the bridged\nsubnet,\ndenoted by\n.B pool-start-IP\nand\n.B pool-end-IP,\nfor OpenVPN to allocate to connecting\nclients.\n\nFor example,\n.B server-bridge 10.8.0.4 255.255.255.0 10.8.0.128 10.8.0.254\nexpands as follows:\n\n.nf\n.ft 3\n.in +4\nmode server\ntls-server\n\nifconfig-pool 10.8.0.128 10.8.0.254 255.255.255.0\npush \"route-gateway 10.8.0.4\"\n.in -4\n.ft\n.fi\n\nIn another example,\n.B \\-\\-server-bridge\n(without parameters) expands as follows:\n\n.nf\n.ft 3\n.in +4\nmode server\ntls-server\n\npush \"route-gateway dhcp\"\n.in -4\n.ft\n.fi\n\nOr\n.B \\-\\-server-bridge nogw\nexpands as follows:\n\n.nf\n.ft 3\n.in +4\nmode server\ntls-server\n.in -4\n.ft\n.fi\n.\\\"*********************************************************\n.TP\n.B \\-\\-push \"option\"\nPush a config file option back to the client for remote\nexecution.  Note that\n.B\noption\nmust be enclosed in double quotes (\"\").  The client must specify\n.B \\-\\-pull\nin its config file.  The set of options which can be\npushed is limited by both feasibility and security.\nSome options such as those which would execute scripts\nare banned, since they would effectively allow a compromised\nserver to execute arbitrary code on the client.\nOther options such as TLS or MTU parameters\ncannot be pushed because the client needs to know\nthem before the connection to the server can be initiated.\n\nThis is a partial list of options which can currently be pushed:\n.B \\-\\-route, \\-\\-route-gateway, \\-\\-route-delay, \\-\\-redirect-gateway,\n.B \\-\\-ip-win32, \\-\\-dhcp-option,\n.B \\-\\-inactive, \\-\\-ping, \\-\\-ping-exit, \\-\\-ping-restart,\n.B \\-\\-setenv,\n.B \\-\\-persist-key, \\-\\-persist-tun, \\-\\-echo,\n.B \\-\\-comp-lzo,\n.B \\-\\-socket-flags,\n.B \\-\\-sndbuf, \\-\\-rcvbuf\n.\\\"*********************************************************\n.TP\n.B \\-\\-push-reset\nDon't inherit the global push list for a specific client instance.\nSpecify this option in a client-specific context such\nas with a\n.B \\-\\-client-config-dir\nconfiguration file.  This option will ignore\n.B \\-\\-push\noptions at the global config file level.\n.TP\n.B \\-\\-push-peer-info\nPush additional information about the client to server.  The additional information\nconsists of the following data:\n\nIV_VER=<version> -- the client OpenVPN version\n\nIV_PLAT=[linux|solaris|openbsd|mac|netbsd|freebsd|win] -- the client OS platform\n\nIV_HWADDR=<mac address> -- the MAC address of clients default gateway\n\nIV_LZO_STUB=1 -- if client was built with LZO stub capability\n\nUV_<name>=<value> -- client environment variables whose names start with \"UV_\"\n.\\\"*********************************************************\n.TP\n.B \\-\\-disable\nDisable a particular client (based on the common name)\nfrom connecting.  Don't use this option to disable a client\ndue to key or password compromise.  Use a CRL (certificate\nrevocation list) instead (see the\n.B \\-\\-crl-verify\noption).\n\nThis option must be associated with a specific client instance,\nwhich means that it must be specified either in a client\ninstance config file using\n.B \\-\\-client-config-dir\nor dynamically generated using a\n.B \\-\\-client-connect\nscript.\n.\\\"*********************************************************\n.TP\n.B \\-\\-ifconfig-pool start-IP end-IP [netmask]\nSet aside a pool of subnets to be\ndynamically allocated to connecting clients, similar\nto a DHCP server.  For tun-style\ntunnels, each client will be given a /30 subnet (for\ninteroperability with Windows clients).  For tap-style\ntunnels, individual addresses will be allocated, and the\noptional\n.B netmask\nparameter will also be pushed to clients.\n\n.\\\"*********************************************************\n.TP\n.B \\-\\-ifconfig-pool-persist file [seconds]\nPersist/unpersist ifconfig-pool\ndata to\n.B file,\nat\n.B seconds\nintervals (default=600), as well as on program startup and\nshutdown.\n\nThe goal of this option is to provide a long-term association\nbetween clients (denoted by their common name) and the virtual\nIP address assigned to them from the ifconfig-pool.\nMaintaining a long-term\nassociation is good for clients because it allows them\nto effectively use the\n.B \\-\\-persist-tun\noption.\n\n.B file\nis a comma-delimited ASCII file, formatted as\n<Common-Name>,<IP-address>.\n\nIf\n.B seconds\n= 0,\n.B file\nwill be treated as read-only.  This is useful if\nyou would like to treat\n.B file\nas a configuration file.\n\nNote that the entries in this file are treated by OpenVPN as\nsuggestions only, based on past associations between\na common name and IP address.  They do not guarantee that the given common\nname will always receive the given IP address.  If you want guaranteed\nassignment, use\n.B \\-\\-ifconfig-push\n.\\\"*********************************************************\n.TP\n.B \\-\\-ifconfig-pool-linear\nModifies the\n.B \\-\\-ifconfig-pool\ndirective to\nallocate individual TUN interface addresses for\nclients rather than /30 subnets.  NOTE:  This option\nis incompatible with Windows clients.\n\nThis option is deprecated, and should be replaced with\n.B \\-\\-topology p2p\nwhich is functionally equivalent.\n.\\\"*********************************************************\n.TP\n.B \\-\\-ifconfig-push local remote-netmask [alias]\nPush virtual IP endpoints for client tunnel,\noverriding the \\-\\-ifconfig-pool dynamic allocation.\n\nThe parameters\n.B local\nand\n.B remote-netmask\nare set according to the\n.B \\-\\-ifconfig\ndirective which you want to execute on the client machine to\nconfigure the remote end of the tunnel.  Note that the parameters\n.B local\nand\n.B remote-netmask\nare from the perspective of the client, not the server.  They may be\nDNS names rather than IP addresses, in which case they will be resolved\non the server at the time of client connection.\n\nThe optional\n.B alias\nparameter may be used in cases where NAT causes the client view\nof its local endpoint to differ from the server view.  In this case\n.B local/remote-netmask\nwill refer to the server view while\n.B alias/remote-netmask\nwill refer to the client view.\n\nThis option must be associated with a specific client instance,\nwhich means that it must be specified either in a client\ninstance config file using\n.B \\-\\-client-config-dir\nor dynamically generated using a\n.B \\-\\-client-connect\nscript.\n\nRemember also to include a\n.B \\-\\-route\ndirective in the main OpenVPN config file which encloses\n.B local,\nso that the kernel will know to route it\nto the server's TUN/TAP interface.\n\nOpenVPN's internal client IP address selection algorithm works as\nfollows:\n\n.B 1\n\\-\\- Use\n.B \\-\\-client-connect script\ngenerated file for static IP (first choice).\n.br\n.B 2\n\\-\\- Use\n.B \\-\\-client-config-dir\nfile for static IP (next choice).\n.br\n.B 3\n\\-\\- Use\n.B \\-\\-ifconfig-pool\nallocation for dynamic IP (last choice).\n.br\n.\\\"*********************************************************\n.TP\n.B \\-\\-iroute network [netmask]\nGenerate an internal route to a specific\nclient. The\n.B netmask\nparameter, if omitted, defaults to 255.255.255.255.\n\nThis directive can be used to route a fixed subnet from\nthe server to a particular client, regardless\nof where the client is connecting from.  Remember\nthat you must also add the route to the system\nrouting table as well (such as by using the\n.B \\-\\-route\ndirective).  The reason why two routes are needed\nis that the\n.B \\-\\-route\ndirective routes the packet from the kernel\nto OpenVPN.  Once in OpenVPN, the\n.B \\-\\-iroute\ndirective routes to the specific client.\n\nThis option must be specified either in a client\ninstance config file using\n.B \\-\\-client-config-dir\nor dynamically generated using a\n.B \\-\\-client-connect\nscript.\n\nThe\n.B \\-\\-iroute\ndirective also has an important interaction with\n.B \\-\\-push\n\"route ...\".\n.B \\-\\-iroute\nessentially defines a subnet which is owned by a\nparticular client (we will call this client A).\nIf you would like other clients to be able to reach A's\nsubnet, you can use\n.B \\-\\-push\n\"route ...\"\ntogether with\n.B \\-\\-client-to-client\nto effect this.  In order for all clients to see\nA's subnet, OpenVPN must push this route to all clients\nEXCEPT for A, since the subnet is already owned by A.\nOpenVPN accomplishes this by not\nnot pushing a route to a client\nif it matches one of the client's iroutes.\n.\\\"*********************************************************\n.TP\n.B \\-\\-client-to-client\nBecause the OpenVPN server mode handles multiple clients\nthrough a single tun or tap interface, it is effectively\na router.  The\n.B \\-\\-client-to-client\nflag tells OpenVPN to internally route client-to-client\ntraffic rather than pushing all client-originating traffic\nto the TUN/TAP interface.\n\nWhen this option is used, each client will \"see\" the other\nclients which are currently connected.  Otherwise, each\nclient will only see the server.  Don't use this option\nif you want to firewall tunnel traffic using\ncustom, per-client rules.\n.\\\"*********************************************************\n.TP\n.B \\-\\-duplicate-cn\nAllow multiple clients with the same common name to concurrently connect.\nIn the absence of this option, OpenVPN will disconnect a client instance\nupon connection of a new client having the same common name.\n.\\\"*********************************************************\n.TP\n.B \\-\\-client-connect cmd\nRun\n.B command cmd\non client connection.\n\n.B cmd\nconsists of a path to script (or executable program), optionally\nfollowed by arguments. The path and arguments may be single- or double-quoted\nand/or escaped using a backslash, and should be separated by one or more spaces.\n\nThe command is passed the common name\nand IP address of the just-authenticated client\nas environmental variables (see environmental variable section\nbelow).  The command is also passed\nthe pathname of a freshly created temporary file as the last argument\n(after any arguments specified in\n.B cmd\n), to be used by the command\nto pass dynamically generated config file directives back to OpenVPN.\n\nIf the script wants to generate a dynamic config file\nto be applied on the server when the client connects,\nit should write it to the file named by the last argument.\n\nSee the\n.B \\-\\-client-config-dir\noption below for options which\ncan be legally used in a dynamically generated config file.\n\nNote that the return value of\n.B script\nis significant.  If\n.B script\nreturns a non-zero error status, it will cause the client\nto be disconnected.\n.\\\"*********************************************************\n.TP\n.B \\-\\-client-disconnect cmd\nLike\n.B \\-\\-client-connect\nbut called on client instance shutdown.  Will not be called\nunless the\n.B \\-\\-client-connect\nscript and plugins (if defined)\nwere previously called on this instance with\nsuccessful (0) status returns.\n\nThe exception to this rule is if the\n.B \\-\\-client-disconnect\ncommand or plugins are cascaded, and at least one client-connect\nfunction succeeded, then ALL of the client-disconnect functions for\nscripts and plugins will be called on client instance object deletion,\neven in cases where some of the related client-connect functions returned\nan error status.\n\nThe\n.B \\-\\-client-disconnect\ncommand is passed the same pathname as the corresponding\n.B \\-\\-client-connect\ncommand as its last argument. (after any arguments specified in\n.B cmd\n).\n.B \n.\\\"*********************************************************\n.TP\n.B \\-\\-client-config-dir dir\nSpecify a directory\n.B dir\nfor custom client config files.  After\na connecting client has been authenticated, OpenVPN will\nlook in this directory for a file having the same name\nas the client's X509 common name.  If a matching file\nexists, it will be opened and parsed for client-specific\nconfiguration options.  If no matching file is found, OpenVPN\nwill instead try to open and parse a default file called\n\"DEFAULT\", which may be provided but is not required. Note that\nthe configuration files must be readable by the OpenVPN process\nafter it has dropped it's root privileges.\n\nThis file can specify a fixed IP address for a given\nclient using\n.B \\-\\-ifconfig-push,\nas well as fixed subnets owned by the client using\n.B \\-\\-iroute.\n\nOne of the useful properties of this option is that it\nallows client configuration files to be conveniently\ncreated, edited, or removed while the server is live,\nwithout needing to restart the server.\n\nThe following\noptions are legal in a client-specific context:\n.B \\-\\-push, \\-\\-push-reset, \\-\\-iroute, \\-\\-ifconfig-push,\nand\n.B \\-\\-config.\n.\\\"*********************************************************\n.TP\n.B \\-\\-ccd-exclusive\nRequire, as a\ncondition of authentication, that a connecting client has a\n.B \\-\\-client-config-dir\nfile.\n.\\\"*********************************************************\n.TP\n.B \\-\\-tmp-dir dir\nSpecify a directory\n.B dir\nfor temporary files.  This directory will be used by\nopenvpn processes and script to communicate temporary\ndata with openvpn main process. Note that\nthe directory must be writable by the OpenVPN process\nafter it has dropped it's root privileges.\n\nThis directory will be used by in the following cases:\n\n*\n.B \\-\\-client-connect\nscripts to dynamically generate client-specific\nconfiguration files.\n\n*\n.B OPENVPN_PLUGIN_AUTH_USER_PASS_VERIFY\nplugin hook to return success/failure via auth_control_file\nwhen using deferred auth method\n\n*\n.B OPENVPN_PLUGIN_ENABLE_PF\nplugin hook to pass filtering rules via pf_file\n.\\\"*********************************************************\n.TP\n.B \\-\\-hash-size r v\nSet the size of the real address hash table to\n.B r\nand the virtual address table to\n.B v.\nBy default, both tables are sized at 256 buckets.\n.\\\"*********************************************************\n.TP\n.B \\-\\-bcast-buffers n\nAllocate\n.B n\nbuffers for broadcast datagrams (default=256).\n.\\\"*********************************************************\n.TP\n.B \\-\\-tcp-queue-limit n\nMaximum number of output packets queued before TCP (default=64).\n\nWhen OpenVPN is tunneling data from a TUN/TAP device to a\nremote client over a TCP connection, it is possible that the TUN/TAP device\nmight produce data at a faster rate than the TCP connection\ncan support.  When the number of output packets queued before sending to\nthe TCP socket reaches this limit for a given client connection,\nOpenVPN will start to drop outgoing packets directed\nat this client.\n.\\\"*********************************************************\n.TP\n.B \\-\\-tcp-nodelay\nThis macro sets the TCP_NODELAY socket flag on the server\nas well as pushes it to connecting clients.  The TCP_NODELAY\nflag disables the Nagle algorithm on TCP sockets causing\npackets to be transmitted immediately with low latency,\nrather than waiting a short period of time in order\nto aggregate several packets into a larger containing\npacket.  In VPN applications over TCP, TCP_NODELAY\nis generally a good latency optimization.\n\nThe macro expands as follows:\n\n.nf\n.ft 3\n.in +4\n if mode server:\n   socket-flags TCP_NODELAY\n   push \"socket-flags TCP_NODELAY\"\n.in -4\n.ft\n.fi\n.\\\"*********************************************************\n.TP\n.B \\-\\-max-clients n\nLimit server to a maximum of\n.B n\nconcurrent clients.\n.\\\"*********************************************************\n.TP\n.B \\-\\-max-routes-per-client n\nAllow a maximum of\n.B n\ninternal routes per client (default=256).\nThis is designed to\nhelp contain DoS attacks where an authenticated client floods the\nserver with packets appearing to come from many unique MAC addresses,\nforcing the server to deplete\nvirtual memory as its internal routing table expands.\nThis directive can be used in a\n.B \\-\\-client-config-dir\nfile or auto-generated by a\n.B \\-\\-client-connect\nscript to override the global value for a particular client.\n\nNote that this\ndirective affects OpenVPN's internal routing table, not the\nkernel routing table.\n.\\\"*********************************************************\n.TP\n.B \\-\\-stale-routes-check n [t]\nRemove routes haven't had activity for\n.B n\nseconds (i.e. the ageing time).\n\nThis check is ran every\n.B t\nseconds (i.e. check interval).\n\nIf\n.B t\nis not present it defaults to\n.B n\n\nThis option helps to keep the dynamic routing table small.\nSee also\n.B \\-\\-max-routes-per-client\n.\\\"*********************************************************\n.TP\n.B \\-\\-connect-freq n sec\nAllow a maximum of\n.B n\nnew connections per\n.B sec \nseconds from clients.  This is designed to contain DoS attacks which flood\nthe server with connection requests using certificates which\nwill ultimately fail to authenticate.\n\nThis is an imperfect solution however, because in a real\nDoS scenario, legitimate connections might also be refused.\n\nFor the best protection against DoS attacks in server mode,\nuse\n.B \\-\\-proto udp\nand\n.B \\-\\-tls-auth.\n.\\\"*********************************************************\n.TP\n.B \\-\\-learn-address cmd\nRun command\n.B cmd\nto validate client virtual addresses or routes.\n\n.B cmd\nconsists of a path to script (or executable program), optionally\nfollowed by arguments. The path and arguments may be single- or double-quoted\nand/or escaped using a backslash, and should be separated by one or more spaces.\n\nThree arguments will be appended to any arguments in\n.B cmd\nas follows:\n\n.B [1] operation \\-\\-\n\"add\", \"update\", or \"delete\" based on whether or not\nthe address is being added to, modified, or deleted from\nOpenVPN's internal routing table.\n.br\n.B [2] address \\-\\-\nThe address being learned or unlearned.  This can be\nan IPv4 address such as \"198.162.10.14\", an IPv4 subnet\nsuch as \"198.162.10.0/24\", or an ethernet MAC address (when\n.B \\-\\-dev tap\nis being used) such as \"00:FF:01:02:03:04\".\n.br\n.B [3] common name \\-\\-\nThe common name on the certificate associated with the\nclient linked to this address.  Only present for \"add\"\nor \"update\" operations, not \"delete\".\n\nOn \"add\" or \"update\" methods, if the script returns\na failure code (non-zero), OpenVPN will reject the address\nand will not modify its internal routing table.\n\nNormally, the\n.B cmd\nscript will use the information provided above to set\nappropriate firewall entries on the VPN TUN/TAP interface.\nSince OpenVPN provides the association between virtual IP\nor MAC address and the client's authenticated common name,\nit allows a user-defined script to configure firewall access\npolicies with regard to the client's high-level common name,\nrather than the low level client virtual addresses.\n.\\\"*********************************************************\n.TP\n.B \\-\\-auth-user-pass-verify cmd method\nRequire the client to provide a username/password (possibly\nin addition to a client certificate) for authentication.\n\nOpenVPN will run\n.B command cmd\nto validate the username/password\nprovided by the client.\n\n.B cmd\nconsists of a path to script (or executable program), optionally\nfollowed by arguments. The path and arguments may be single- or double-quoted\nand/or escaped using a backslash, and should be separated by one or more spaces.\n\nIf\n.B method\nis set to \"via-env\", OpenVPN will call\n.B script\nwith the environmental variables\n.B username\nand\n.B password\nset to the username/password strings provided by the client.\nBe aware that this method is insecure on some platforms which\nmake the environment of a process publicly visible to other\nunprivileged processes.\n\nIf\n.B method\nis set to \"via-file\", OpenVPN will write the username and\npassword to the first two lines of a temporary file.  The filename\nwill be passed as an argument to\n.B script,\nand the file will be automatically deleted by OpenVPN after\nthe script returns.  The location of the temporary file is\ncontrolled by the\n.B \\-\\-tmp-dir\noption, and will default to the current directory if unspecified.\nFor security, consider setting \n.B \\-\\-tmp-dir\nto a volatile storage medium such as\n.B /dev/shm\n(if available) to prevent the username/password file from touching the hard drive.\n\nThe script should examine the username\nand password,\nreturning a success exit code (0) if the\nclient's authentication request is to be accepted, or a failure\ncode (1) to reject the client.\n\nThis directive is designed to enable a plugin-style interface\nfor extending OpenVPN's authentication capabilities.\n\nTo protect against a client passing a maliciously formed\nusername or password string, the username string must\nconsist only of these characters: alphanumeric, underbar\n('_'), dash ('-'), dot ('.'), or at ('@').  The password\nstring can consist of any printable characters except for\nCR or LF.  Any illegal characters in either the username\nor password string will be converted to underbar ('_').\n\nCare must be taken by any user-defined scripts to avoid\ncreating a security vulnerability in the way that these\nstrings are handled.  Never use these strings in such a way\nthat they might be escaped or evaluated by a shell interpreter.\n\nFor a sample script that performs PAM authentication, see\n.B sample-scripts/auth-pam.pl\nin the OpenVPN source distribution.\n.\\\"*********************************************************\n.TP\n.B \\-\\-opt-verify\nClients that connect with options that are incompatible\nwith those of the server will be disconnected.\n\nOptions that will be compared for compatibility include\ndev-type, link-mtu, tun-mtu, proto, tun-ipv6, ifconfig,\ncomp-lzo, fragment, keydir, cipher, auth, keysize, secret,\nno-replay, no-iv, tls-auth, key-method, tls-server, and tls-client.\n\nThis option requires that\n.B \\-\\-disable-occ\nNOT be used.\n.\\\"*********************************************************\n.TP\n.B \\-\\-auth-user-pass-optional\nAllow connections by clients that do not specify a username/password.\nNormally, when\n.B \\-\\-auth-user-pass-verify\nor\n.B \\-\\-management-client-auth\nis specified (or an authentication plugin module), the\nOpenVPN server daemon will require connecting clients to specify a\nusername and password.  This option makes the submission of a username/password\nby clients optional, passing the responsibility to the user-defined authentication\nmodule/script to accept or deny the client based on other factors\n(such as the setting of X509 certificate fields).  When this option is used,\nand a connecting client does not submit a username/password, the user-defined\nauthentication module/script will see the username and password as being set\nto empty strings (\"\").  The authentication module/script MUST have logic\nto detect this condition and respond accordingly.\n.\\\"*********************************************************\n.TP\n.B \\-\\-client-cert-not-required\nDon't require client certificate, client will authenticate\nusing username/password only.  Be aware that using this directive\nis less secure than requiring certificates from all clients.\n\nIf you use this directive, the\nentire responsibility of authentication will rest on your\n.B \\-\\-auth-user-pass-verify\nscript, so keep in mind that bugs in your script\ncould potentially compromise the security of your VPN.\n\nIf you don't use this directive, but you also specify an\n.B \\-\\-auth-user-pass-verify\nscript, then OpenVPN will perform double authentication.  The\nclient certificate verification AND the\n.B \\-\\-auth-user-pass-verify\nscript will need to succeed in order for a client to be\nauthenticated and accepted onto the VPN.\n.\\\"*********************************************************\n.TP\n.B \\-\\-username-as-common-name\nFor\n.B \\-\\-auth-user-pass-verify\nauthentication, use\nthe authenticated username as the common name,\nrather than the common name from the client cert.\n.\\\"*********************************************************\n.TP\n.B \\-\\-compat\\-names [no\\-remapping] (DEPRECATED)\nUntil OpenVPN v2.3 the format of the X.509 Subject fields was formatted\nlike this:\n.IP\n.B\n/C=US/L=Somewhere/CN=John Doe/emailAddress=john@example.com\n.IP\nIn addition the old behavivour was to remap any character other than\nalphanumeric, underscore ('_'), dash ('-'), dot ('.'), and slash ('/') to\nunderscore ('_').  The X.509 Subject string as returned by the\n.B tls_id\nenvironmental variable, could additionally contain colon (':') or equal ('=').\n.IP\nWhen using the\n.B \\-\\-compat\\-names\noption, this old formatting and remapping will be re-enabled again.  This is\npurely implemented for compatibility reasons when using older plug-ins or\nscripts which does not handle the new formatting or UTF-8 characters.\n.IP\nIn OpenVPN v2.3 the formatting of these fields changed into a more\nstandardised format.  It now looks like:\n.IP\n.B\nC=US, L=Somewhere, CN=John Doe, emailAddress=john@example.com\n.IP\nThe new default format in OpenVPN v2.3 also does not do the character remapping\nwhich happened earlier.  This new format enables proper support for UTF\\-8\ncharacters in the usernames, X.509 Subject fields and Common Name variables and\nit complies to the RFC 2253, UTF\\-8 String Representation of Distinguished\nNames.\n\nThe\n.B no\\-remapping\nmode flag can be used with the\n.B\n\\-\\-compat\\-names\noption to be compatible with the now deprecated \\-\\-no\\-name\\-remapping option.\nIt is only available at the server. When this mode flag is used, the Common Name,\nSubject, and username strings are allowed to include any printable character\nincluding space, but excluding control characters such as tab, newline, and\ncarriage-return. no-remapping is only available on the server side.\n\n.B Please note:\nThis option is immediately deprecated.  It is only implemented\nto make the transition to the new formatting less intrusive.  It will be\nremoved either in OpenVPN v2.4 or v2.5.  So please make sure you use the\n.B \\-\\-verify-x509-name\noption instead of\n.B \\-\\-tls-remote\nas soon as possible and update your scripts where necessary.\n.\\\"*********************************************************\n.TP\n.B \\-\\-no\\-name\\-remapping (DEPRECATED)\nThe\n.B \\-\\-no\\-name\\-remapping\noption is an alias for\n.B \\-\\-compat\\-names\\ no\\-remapping.\nIt ensures compatibility with server configurations using the\n.B \\-\\-no\\-name\\-remapping\noption.\n\n.B Please note:\nThis option is now deprecated.  It will be removed either in OpenVPN v2.4\nor v2.5.  So please make sure you support the new X.509 name formatting\ndescribed with the\n.B \\-\\-compat\\-names\noption as soon as possible.\n.\\\"*********************************************************\n.TP\n.B \\-\\-port-share host port [dir]\nWhen run in TCP server mode, share the OpenVPN port with\nanother application, such as an HTTPS server.  If OpenVPN\nsenses a connection to its port which is using a non-OpenVPN\nprotocol, it will proxy the connection to the server at\n.B host:port.\nCurrently only designed to work with HTTP/HTTPS,\nthough it would be theoretically possible to extend to\nother protocols such as ssh.\n\n.B dir\nspecifies an optional directory where a temporary file with name N\ncontaining content C will be dynamically generated for each proxy\nconnection, where N is the source IP:port of the client connection\nand C is the source IP:port of the connection to the proxy\nreceiver.  This directory can be used as a dictionary by\nthe proxy receiver to determine the origin of the connection.\nEach generated file will be automatically deleted when the proxied\nconnection is torn down.\n\nNot implemented on Windows.\n.\\\"*********************************************************\n.SS Client Mode\nUse client mode when connecting to an OpenVPN server\nwhich has\n.B \\-\\-server, \\-\\-server-bridge,\nor\n.B \\-\\-mode server\nin it's configuration.\n.\\\"*********************************************************\n.TP\n.B \\-\\-client\nA helper directive designed to simplify the configuration\nof OpenVPN's client mode.  This directive is equivalent to:\n\n.nf\n.ft 3\n.in +4\n pull\n tls-client\n.in -4\n.ft\n.fi\n.\\\"*********************************************************\n.TP\n.B \\-\\-pull\nThis option must be used on a client which is connecting\nto a multi-client server.  It indicates to OpenVPN that it\nshould accept options pushed by the server, provided they\nare part of the legal set of pushable options (note that the\n.B \\-\\-pull\noption is implied by\n.B \\-\\-client\n).\n\nIn particular,\n.B \\-\\-pull\nallows the server to push routes to the client, so you should\nnot use\n.B \\-\\-pull\nor\n.B \\-\\-client\nin situations where you don't trust the server to have control\nover the client's routing table.\n.\\\"*********************************************************\n.TP\n.B \\-\\-auth-user-pass [up]\nAuthenticate with server using username/password.\n.B up\nis a file containing username/password on 2 lines (Note: OpenVPN\nwill only read passwords from a file if it has been built\nwith the \\-\\-enable-password-save configure option, or on Windows\nby defining ENABLE_PASSWORD_SAVE in win/settings.in).\n\nIf\n.B up\nis omitted, username/password will be prompted from the\nconsole.\n\nThe server configuration must specify an\n.B \\-\\-auth-user-pass-verify\nscript to verify the username/password provided by\nthe client.\n.\\\"*********************************************************\n.TP\n.B \\-\\-auth-retry type\nControls how OpenVPN responds to username/password verification\nerrors such as the client-side response to an AUTH_FAILED message from the server\nor verification failure of the private key password.\n\nNormally used to prevent auth errors from being fatal\non the client side, and to permit username/password requeries in case\nof error.\n\nAn AUTH_FAILED message is generated by the server if the client\nfails\n.B \\-\\-auth-user-pass\nauthentication, or if the server-side\n.B \\-\\-client-connect\nscript returns an error status when the client\ntries to connect.\n\n.B type\ncan be one of:\n\n.B none \\-\\-\nClient will exit with a fatal error (this is the default).\n.br\n.B nointeract \\-\\-\nClient will retry the connection without requerying for an\n.B \\-\\-auth-user-pass\nusername/password.  Use this option for unattended clients.\n.br\n.B interact \\-\\-\nClient will requery for an\n.B \\-\\-auth-user-pass\nusername/password and/or private key password before attempting a reconnection.\n\nNote that while this option cannot be pushed, it can be controlled\nfrom the management interface.\n.\\\"*********************************************************\n.TP\n.B \\-\\-static\\-challenge t e\nEnable static challenge/response protocol using challenge text\n.B t,\nwith\necho flag given by\n.B e\n(0|1).\n\nThe echo flag indicates whether or not the user's response\nto the challenge should be echoed.\n\nSee management\\-notes.txt in the OpenVPN distribution for a\ndescription of the OpenVPN challenge/response protocol.\n.\\\"*********************************************************\n.TP\n.B \\-\\-server-poll-timeout n\nwhen polling possible remote servers to connect to\nin a round-robin fashion, spend no more than\n.B n\nseconds waiting for a response before trying the next server.\n.\\\"*********************************************************\n.TP\n.B \\-\\-explicit-exit-notify [n]\nIn UDP client mode or point-to-point mode, send server/peer an exit notification\nif tunnel is restarted or OpenVPN process is exited.  In client mode, on\nexit/restart, this\noption will tell the server to immediately close its client instance object\nrather than waiting for a timeout.  The\n.B n\nparameter (default=1) controls the maximum number of attempts that the client\nwill try to resend the exit notification message.  OpenVPN will not send any exit\nnotifications unless this option is enabled.\n.\\\"*********************************************************\n.SS Data Channel Encryption Options:\nThese options are meaningful for both Static & TLS-negotiated key modes\n(must be compatible between peers).\n.\\\"*********************************************************\n.TP\n.B \\-\\-secret file [direction]\nEnable Static Key encryption mode (non-TLS).\nUse pre-shared secret\n.B file\nwhich was generated with\n.B \\-\\-genkey.\n\nThe optional\n.B direction\nparameter enables the use of 4 distinct keys\n(HMAC-send, cipher-encrypt, HMAC-receive, cipher-decrypt), so that\neach data flow direction has a different set of HMAC and cipher keys.\nThis has a number of desirable security properties including\neliminating certain kinds of DoS and message replay attacks.\n\nWhen the\n.B direction\nparameter is omitted, 2 keys are used bidirectionally, one for HMAC\nand the other for encryption/decryption.\n\nThe\n.B direction\nparameter should always be complementary on either side of the connection,\ni.e. one side should use \"0\" and the other should use \"1\", or both sides\nshould omit it altogether.\n\nThe\n.B direction\nparameter requires that\n.B file\ncontains a 2048 bit key.  While pre-1.5 versions of OpenVPN\ngenerate 1024 bit key files, any version of OpenVPN which\nsupports the\n.B direction\nparameter, will also support 2048 bit key file generation\nusing the\n.B \\-\\-genkey\noption.\n\nStatic key encryption mode has certain advantages,\nthe primary being ease of configuration.\n\nThere are no certificates\nor certificate authorities or complicated negotiation handshakes and protocols.\nThe only requirement is that you have a pre-existing secure channel with\nyour peer (such as\n.B ssh\n) to initially copy the key.  This requirement, along with the\nfact that your key never changes unless you manually generate a new one,\nmakes it somewhat less secure than TLS mode (see below).  If an attacker\nmanages to steal your key, everything that was ever encrypted with\nit is compromised.  Contrast that to the perfect forward secrecy features of\nTLS mode (using Diffie Hellman key exchange), where even if an attacker\nwas able to steal your private key, he would gain no information to help\nhim decrypt past sessions.\n\nAnother advantageous aspect of Static Key encryption mode is that\nit is a handshake-free protocol \nwithout any distinguishing signature or feature\n(such as a header or protocol handshake sequence) \nthat would mark the ciphertext packets as being\ngenerated by OpenVPN.  Anyone eavesdropping on the wire\nwould see nothing\nbut random-looking data.\n.\\\"*********************************************************\n.TP\n.B \\-\\-key-direction\nAlternative way of specifying the optional direction parameter for the\n.B \\-\\-tls-auth\nand\n.B \\-\\-secret\noptions. Useful when using inline files (See section on inline files).\n.\\\"*********************************************************\n.TP\n.B \\-\\-auth alg\nAuthenticate packets with HMAC using message\ndigest algorithm\n.B alg.\n(The default is\n.B SHA1\n).\nHMAC is a commonly used message authentication algorithm (MAC) that uses\na data string, a secure hash algorithm, and a key, to produce\na digital signature.\n\nOpenVPN's usage of HMAC is to first encrypt a packet, then HMAC the resulting ciphertext.\n\nIn static-key encryption mode, the HMAC key\nis included in the key file generated by\n.B \\-\\-genkey.\nIn TLS mode, the HMAC key is dynamically generated and shared\nbetween peers via the TLS control channel.  If OpenVPN receives a packet with\na bad HMAC it will drop the packet.\nHMAC usually adds 16 or 20 bytes per packet.\nSet\n.B alg=none\nto disable authentication.\n\nFor more information on HMAC see\n.I http://www.cs.ucsd.edu/users/mihir/papers/hmac.html\n.\\\"*********************************************************\n.TP\n.B \\-\\-cipher alg\nEncrypt packets with cipher algorithm\n.B alg.\nThe default is\n.B BF-CBC,\nan abbreviation for Blowfish in Cipher Block Chaining mode.\nBlowfish has the advantages of being fast, very secure, and allowing key sizes\nof up to 448 bits.  Blowfish is designed to be used in situations where\nkeys are changed infrequently.\n\nFor more information on blowfish, see\n.I http://www.counterpane.com/blowfish.html\n\nTo see other ciphers that are available with\nOpenVPN, use the\n.B \\-\\-show-ciphers\noption.\n\nOpenVPN supports the CBC, CFB, and OFB cipher modes,\nhowever CBC is recommended and CFB and OFB should\nbe considered advanced modes.\n\nSet\n.B alg=none\nto disable encryption.\n.\\\"*********************************************************\n.TP\n.B \\-\\-keysize n\nSize of cipher key in bits (optional).\nIf unspecified, defaults to cipher-specific default.  The\n.B \\-\\-show-ciphers\noption (see below) shows all available OpenSSL ciphers,\ntheir default key sizes, and whether the key size can\nbe changed.  Use care in changing a cipher's default\nkey size.  Many ciphers have not been extensively\ncryptanalyzed with non-standard key lengths, and a\nlarger key may offer no real guarantee of greater\nsecurity, or may even reduce security.\n.\\\"*********************************************************\n.TP\n.B \\-\\-prng alg [nsl]\n(Advanced) For PRNG (Pseudo-random number generator),\nuse digest algorithm\n.B alg\n(default=sha1), and set\n.B nsl\n(default=16)\nto the size in bytes of the nonce secret length (between 16 and 64).\n\nSet\n.B alg=none\nto disable the PRNG and use the OpenSSL RAND_bytes function\ninstead for all of OpenVPN's pseudo-random number needs.\n.\\\"*********************************************************\n.TP\n.B \\-\\-engine [engine-name]\nEnable OpenSSL hardware-based crypto engine functionality.\n\nIf\n.B engine-name\nis specified,\nuse a specific crypto engine.  Use the\n.B \\-\\-show-engines\nstandalone option to list the crypto engines which are\nsupported by OpenSSL.\n.\\\"*********************************************************\n.TP\n.B \\-\\-no-replay\n(Advanced) Disable OpenVPN's protection against replay attacks.\nDon't use this option unless you are prepared to make\na tradeoff of greater efficiency in exchange for less\nsecurity.\n\nOpenVPN provides datagram replay protection by default.\n\nReplay protection is accomplished\nby tagging each outgoing datagram with an identifier\nthat is guaranteed to be unique for the key being used.\nThe peer that receives the datagram will check for\nthe uniqueness of the identifier.  If the identifier\nwas already received in a previous datagram, OpenVPN\nwill drop the packet.  Replay protection is important\nto defeat attacks such as a SYN flood attack, where\nthe attacker listens in the wire, intercepts a TCP\nSYN packet (identifying it by the context in which\nit occurs in relation to other packets), then floods\nthe receiving peer with copies of this packet.\n\nOpenVPN's replay protection is implemented in slightly\ndifferent ways, depending on the key management mode\nyou have selected.\n\nIn Static Key mode\nor when using an CFB or OFB mode cipher, OpenVPN uses a\n64 bit unique identifier that combines a time stamp with\nan incrementing sequence number.\n\nWhen using TLS mode for key exchange and a CBC cipher\nmode, OpenVPN uses only a 32 bit sequence number without\na time stamp, since OpenVPN can guarantee the uniqueness\nof this value for each key.  As in IPSec, if the sequence number is\nclose to wrapping back to zero, OpenVPN will trigger\na new key exchange.\n\nTo check for replays, OpenVPN uses\nthe\n.I sliding window\nalgorithm used\nby IPSec.\n.\\\"*********************************************************\n.TP\n.B \\-\\-replay-window n [t]\nUse a replay protection sliding-window of size\n.B n\nand a time window of\n.B t\nseconds.\n\nBy default\n.B n\nis 64 (the IPSec default) and\n.B t\nis 15 seconds.\n\nThis option is only relevant in UDP mode, i.e.\nwhen either\n.B \\-\\-proto udp\nis specifed, or no\n.B \\-\\-proto\noption is specified.\n\nWhen OpenVPN tunnels IP packets over UDP, there is the possibility that\npackets might be dropped or delivered out of order.  Because OpenVPN, like IPSec,\nis emulating the physical network layer,\nit will accept an out-of-order packet sequence, and\nwill deliver such packets in the same order they were received to\nthe TCP/IP protocol stack, provided they satisfy several constraints.\n\n.B (a)\nThe packet cannot be a replay (unless\n.B \\-\\-no-replay\nis specified, which disables replay protection altogether).\n\n.B (b)\nIf a packet arrives out of order, it will only be accepted if the difference\nbetween its sequence number and the highest sequence number received\nso far is less than\n.B n.\n\n.B (c)\nIf a packet arrives out of order, it will only be accepted if it arrives no later\nthan\n.B t\nseconds after any packet containing a higher sequence number.\n\nIf you are using a network link with a large pipeline (meaning that\nthe product of bandwidth and latency is high), you may want to use\na larger value for\n.B n.\nSatellite links in particular often require this.\n\nIf you run OpenVPN at\n.B \\-\\-verb 4,\nyou will see the message \"Replay-window backtrack occurred [x]\"\nevery time the maximum sequence number backtrack seen thus far\nincreases.  This can be used to calibrate\n.B n.\n\nThere is some controversy on the appropriate method of handling packet\nreordering at the security layer.\n\nNamely, to what extent should the\nsecurity layer protect the encapsulated protocol from attacks which masquerade\nas the kinds of normal packet loss and reordering that occur over IP networks?\n\nThe IPSec and OpenVPN approach is to allow packet reordering within a certain\nfixed sequence number window.\n\nOpenVPN adds to the IPSec model by limiting the window size in time as well as\nsequence space.\n\nOpenVPN also adds TCP transport as an option (not offered by IPSec) in which\ncase OpenVPN can adopt a very strict attitude towards message deletion and\nreordering:  Don't allow it.  Since TCP guarantees reliability, any packet\nloss or reordering event can be assumed to be an attack.\n\nIn this sense, it could be argued that TCP tunnel transport is preferred when\ntunneling non-IP or UDP application protocols which might be vulnerable to a\nmessage deletion or reordering attack which falls within the normal\noperational parameters of IP networks.\n\nSo I would make the statement that one should never tunnel a non-IP protocol\nor UDP application protocol over UDP, if the protocol might be vulnerable to a\nmessage deletion or reordering attack that falls within the normal operating\nparameters of what is to be expected from the physical IP layer.  The problem\nis easily fixed by simply using TCP as the VPN transport layer.\n.\\\"*********************************************************\n.TP\n.B \\-\\-mute-replay-warnings\nSilence the output of replay warnings, which are a common\nfalse alarm on WiFi networks.  This option preserves\nthe security of the replay protection code without\nthe verbosity associated with warnings about duplicate\npackets.\n.\\\"*********************************************************\n.TP\n.B \\-\\-replay-persist file\nPersist replay-protection state across sessions using\n.B file\nto save and reload the state.\n\nThis option will strengthen protection against replay attacks,\nespecially when you are using OpenVPN in a dynamic context (such\nas with\n.B \\-\\-inetd)\nwhen OpenVPN sessions are frequently started and stopped. \n\nThis option will keep a disk copy of the current replay protection\nstate (i.e. the most recent packet timestamp and sequence number\nreceived from the remote peer), so that if an OpenVPN session\nis stopped and restarted, it will reject any replays of packets\nwhich were already received by the prior session.\n\nThis option only makes sense when replay protection is enabled\n(the default) and you are using either\n.B \\-\\-secret\n(shared-secret key mode) or TLS mode with\n.B \\-\\-tls-auth.\n.\\\"*********************************************************\n.TP\n.B \\-\\-no-iv\n(Advanced) Disable OpenVPN's use of IV (cipher initialization vector).\nDon't use this option unless you are prepared to make\na tradeoff of greater efficiency in exchange for less\nsecurity.\n\nOpenVPN uses an IV by default, and requires it for CFB and\nOFB cipher modes (which are totally insecure without it).\nUsing an IV is important for security when multiple\nmessages are being encrypted/decrypted with the same key.\n\nIV is implemented differently depending on the cipher mode used.\n\nIn CBC mode, OpenVPN uses a pseudo-random IV for each packet.\n\nIn CFB/OFB mode, OpenVPN uses a unique sequence number and time stamp\nas the IV.  In fact, in CFB/OFB mode, OpenVPN uses a datagram\nspace-saving optimization that uses the unique identifier for\ndatagram replay protection as the IV.\n.\\\"*********************************************************\n.TP\n.B \\-\\-use-prediction-resistance\nEnable prediction resistance on PolarSSL's RNG.\n\nEnabling prediction resistance causes the RNG to reseed in each\ncall for random. Reseeding this often can quickly deplete the kernel\nentropy pool.\n\nIf you need this option, please consider running a daemon that adds\nentropy to the kernel pool.\n\nNote that this option only works with PolarSSL versions greater\nthan 1.1.\n.\\\"*********************************************************\n.TP\n.B \\-\\-test-crypto\nDo a self-test of OpenVPN's crypto options by encrypting and\ndecrypting test packets using the data channel encryption options\nspecified above.  This option does not require a peer to function,\nand therefore can be specified without\n.B \\-\\-dev\nor\n.B \\-\\-remote.\n\nThe typical usage of\n.B \\-\\-test-crypto\nwould be something like this:\n\n.B openvpn \\-\\-test-crypto \\-\\-secret key\n\nor\n\n.B openvpn \\-\\-test-crypto \\-\\-secret key \\-\\-verb 9\n\nThis option is very useful to test OpenVPN after it has been ported to\na new platform, or to isolate problems in the compiler, OpenSSL\ncrypto library, or OpenVPN's crypto code.  Since it is a self-test mode,\nproblems with encryption and authentication can be debugged independently\nof network and tunnel issues.\n.\\\"*********************************************************\n.SS TLS Mode Options:\nTLS mode is the most powerful crypto mode of OpenVPN in both security and flexibility.\nTLS mode works by establishing control and\ndata channels which are multiplexed over a single TCP/UDP port.  OpenVPN initiates\na TLS session over the control channel and uses it to exchange cipher\nand HMAC keys to protect the data channel.  TLS mode uses a robust reliability\nlayer over the UDP connection for all control channel communication, while\nthe data channel, over which encrypted tunnel data passes, is forwarded without\nany mediation.  The result is the best of both worlds: a fast data channel\nthat forwards over UDP with only the overhead of encrypt,\ndecrypt, and HMAC functions,\nand a control channel that provides all of the security features of TLS,\nincluding certificate-based authentication and Diffie Hellman forward secrecy.\n\nTo use TLS mode, each peer that runs OpenVPN should have its own local\ncertificate/key pair (\n.B \\-\\-cert\nand\n.B \\-\\-key\n), signed by the root certificate which is specified\nin\n.B \\-\\-ca.\n\nWhen two OpenVPN peers connect, each presents its local certificate to the\nother.  Each peer will then check that its partner peer presented a\ncertificate which was signed by the master root certificate as specified in\n.B \\-\\-ca.\n\nIf that check on both peers succeeds, then the TLS negotiation\nwill succeed, both OpenVPN\npeers will exchange temporary session keys, and the tunnel will begin\npassing data.\n\nThe OpenVPN distribution contains a set of scripts for\nmanaging RSA certificates & keys,\nlocated in the\n.I easy-rsa\nsubdirectory.\n\nThe easy-rsa package is also rendered in web form here:\n.I http://openvpn.net/easyrsa.html\n.\\\"*********************************************************\n.TP\n.B \\-\\-tls-server\nEnable TLS and assume server role during TLS handshake.  Note that\nOpenVPN is designed as a peer-to-peer application.  The designation\nof client or server is only for the purpose of negotiating the TLS\ncontrol channel.\n.\\\"*********************************************************\n.TP\n.B \\-\\-tls-client\nEnable TLS and assume client role during TLS handshake.\n.\\\"*********************************************************\n.TP\n.B \\-\\-ca file\nCertificate authority (CA) file in .pem format, also referred to as the\n.I root\ncertificate.  This file can have multiple\ncertificates in .pem format, concatenated together.  You can construct your own\ncertificate authority certificate and private key by using a command such as:\n\n.B openssl req -nodes -new -x509 -keyout ca.key -out ca.crt\n\nThen edit your openssl.cnf file and edit the\n.B certificate\nvariable to point to your new root certificate\n.B ca.crt.\n\nFor testing purposes only, the OpenVPN distribution includes a sample\nCA certificate (ca.crt).\nOf course you should never use\nthe test certificates and test keys distributed with OpenVPN in a\nproduction environment, since by virtue of the fact that\nthey are distributed with OpenVPN, they are totally insecure.\n.\\\"*********************************************************\n.TP\n.B \\-\\-capath dir\nDirectory containing trusted certificates (CAs and CRLs).\nAvailable with OpenSSL version >= 0.9.7 dev.\nNot available with PolarSSL.\n.\\\"*********************************************************\n.TP\n.B \\-\\-dh file\nFile containing Diffie Hellman parameters\nin .pem format (required for\n.B \\-\\-tls-server\nonly). Use\n\n.B openssl dhparam -out dh1024.pem 1024\n\nto generate your own, or use the existing dh1024.pem file\nincluded with the OpenVPN distribution.  Diffie Hellman parameters\nmay be considered public.\n.\\\"*********************************************************\n.TP\n.B \\-\\-cert file\nLocal peer's signed certificate in .pem format \\-\\- must be signed\nby a certificate authority whose certificate is in\n.B \\-\\-ca file.\nEach peer in an OpenVPN link running in TLS mode should have its own\ncertificate and private key file.  In addition, each certificate should\nhave been signed by the key of a certificate\nauthority whose public key resides in the\n.B \\-\\-ca\ncertificate authority file.\nYou can easily make your own certificate authority (see above) or pay money\nto use a commercial service such as thawte.com (in which case you will be\nhelping to finance the world's second space tourist :).\nTo generate a certificate,\nyou can use a command such as:\n\n.B openssl req -nodes -new -keyout mycert.key -out mycert.csr\n\nIf your certificate authority private key lives on another machine, copy\nthe certificate signing request (mycert.csr) to this other machine (this can\nbe done over an insecure channel such as email).  Now sign the certificate\nwith a command such as:\n\n.B openssl ca -out mycert.crt -in mycert.csr\n\nNow copy the certificate (mycert.crt)\nback to the peer which initially generated the .csr file (this\ncan be over a public medium).\nNote that the\n.B openssl ca\ncommand reads the location of the certificate authority key from its\nconfiguration file such as\n.B /usr/share/ssl/openssl.cnf\n\\-\\- note also\nthat for certificate authority functions, you must set up the files\n.B index.txt\n(may be empty) and\n.B serial\n(initialize to\n.B \n01\n).\n.\\\"*********************************************************\n.TP\n.B \\-\\-extra-certs file\nSpecify a\n.B file\ncontaining one or more PEM certs (concatenated together)\nthat complete the\nlocal certificate chain.\n\nThis option is useful for \"split\" CAs, where the CA for server\ncerts is different than the CA for client certs.  Putting certs\nin this file allows them to be used to complete the local\ncertificate chain without trusting them to verify the peer-submitted\ncertificate, as would be the case if the certs were placed in the\n.B ca\nfile.\n.\\\"*********************************************************\n.TP\n.B \\-\\-key file\nLocal peer's private key in .pem format.  Use the private key which was generated\nwhen you built your peer's certificate (see\n.B -cert file\nabove).\n.\\\"*********************************************************\n.TP\n.B \\-\\-pkcs12 file\nSpecify a PKCS #12 file containing local private key,\nlocal certificate, and root CA certificate.\nThis option can be used instead of\n.B \\-\\-ca, \\-\\-cert,\nand\n.B \\-\\-key.\nNot available with PolarSSL.\n.\\\"*********************************************************\n.TP\n.B \\-\\-verify-hash hash\nSpecify SHA1 fingerprint for level-1 cert.  The level-1 cert is the\nCA (or intermediate cert) that signs the leaf certificate, and is\none removed from the leaf certificate in the direction of the root.\nWhen accepting a connection from a peer, the level-1 cert\nfingerprint must match\n.B hash\nor certificate verification will fail.  Hash is specified\nas XX:XX:...  For example: AD:B0:95:D8:09:C8:36:45:12:A9:89:C8:90:09:CB:13:72:A6:AD:16\n.\\\"*********************************************************\n.TP\n.B \\-\\-pkcs11-cert-private [0|1]...\nSet if access to certificate object should be performed after login.\nEvery provider has its own setting.\n.\\\"*********************************************************\n.TP\n.B \\-\\-pkcs11-id name\nSpecify the serialized certificate id to be used. The id can be gotten\nby the standalone\n.B \\-\\-show-pkcs11-ids\noption.\n.\\\"*********************************************************\n.TP\n.B \\-\\-pkcs11-id-management\nAcquire PKCS#11 id from management interface. In this case a NEED-STR 'pkcs11-id-request'\nreal-time message will be triggered, application may use pkcs11-id-count command to\nretrieve available number of certificates, and pkcs11-id-get command to retrieve certificate\nid and certificate body.\n.\\\"*********************************************************\n.TP\n.B \\-\\-pkcs11-pin-cache seconds\nSpecify how many seconds the PIN can be cached, the default is until the token is removed.\n.\\\"*********************************************************\n.TP\n.B \\-\\-pkcs11-protected-authentication [0|1]...\nUse PKCS#11 protected authentication path, useful for biometric and external\nkeypad devices.\nEvery provider has its own setting.\n.\\\"*********************************************************\n.TP\n.B \\-\\-pkcs11-providers provider...\nSpecify a RSA Security Inc. PKCS #11 Cryptographic Token Interface (Cryptoki) providers\nto load.\nThis option can be used instead of\n.B \\-\\-cert, \\-\\-key,\nand\n.B \\-\\-pkcs12.\n.\\\"*********************************************************\n.TP\n.B \\-\\-pkcs11-private-mode mode...\nSpecify which method to use in order to perform private key operations.\nA different mode can be specified for each provider.\nMode is encoded as hex number, and can be a mask one of the following:\n\n.B 0\n(default) \\-\\- Try to determind automatically.\n.br\n.B 1\n\\-\\- Use sign.\n.br\n.B 2\n\\-\\- Use sign recover.\n.br\n.B 4\n\\-\\- Use decrypt.\n.br\n.B 8\n\\-\\- Use unwrap.\n.br\n.\\\"*********************************************************\n.TP\n.B \\-\\-cryptoapicert select-string\nLoad the certificate and private key from the\nWindows Certificate System Store (Windows/OpenSSL Only).\n\nUse this option instead of\n.B \\-\\-cert\nand\n.B \\-\\-key.\n\nThis makes\nit possible to use any smart card, supported by Windows, but also any\nkind of certificate, residing in the Cert Store, where you have access to\nthe private key.  This option has been tested with a couple of different\nsmart cards (GemSAFE, Cryptoflex, and Swedish Post Office eID) on the\nclient side, and also an imported PKCS12 software certificate on the\nserver side.\n\nTo select a certificate, based on a substring search in the\ncertificate's subject:\n\n.B cryptoapicert\n\"SUBJ:Peter Runestig\"\n\nTo select a certificate, based on certificate's thumbprint:\n\n.B cryptoapicert\n\"THUMB:f6 49 24 41 01 b4 ...\"\n\nThe thumbprint hex string can easily be copy-and-pasted from the Windows\nCertificate Store GUI.\n\n.\\\"*********************************************************\n.TP\n.B \\-\\-key-method m\nUse data channel key negotiation method\n.B m.\nThe key method must match on both sides of the connection.\n\nAfter OpenVPN negotiates a TLS session, a new set of keys\nfor protecting the tunnel data channel is generated and\nexchanged over the TLS session.\n\nIn method 1 (the default for OpenVPN 1.x), both sides generate\nrandom encrypt and HMAC-send keys which are forwarded to\nthe other host over the TLS channel.\n\nIn method 2, (the default for OpenVPN 2.0)\nthe client generates a random key.  Both client\nand server also generate some random seed material.  All key source\nmaterial is exchanged over the TLS channel. The actual\nkeys are generated using the TLS PRF function, taking source\nentropy from both client and server.  Method 2 is designed to\nclosely parallel the key generation process used by TLS 1.0.\n\nNote that in TLS mode, two separate levels \nof keying occur:\n\n(1) The TLS connection is initially negotiated, with both sides\nof the connection producing certificates and verifying the certificate\n(or other authentication info provided) of\nthe other side.  The\n.B \\-\\-key-method\nparameter has no effect on this process.\n\n(2) After the TLS connection is established, the tunnel session keys are\nseparately negotiated over the existing secure TLS channel.  Here,\n.B \\-\\-key-method\ndetermines the derivation of the tunnel session keys.\n.\\\"*********************************************************\n.TP\n.B \\-\\-tls-cipher l\nA list\n.B l\nof allowable TLS ciphers delimited by a colon (\":\").\nIf you require a high level of security,\nyou may want to set this parameter manually, to prevent a\nversion rollback attack where a man-in-the-middle attacker tries\nto force two peers to negotiate to the lowest level\nof security they both support.\nUse\n.B \\-\\-show-tls\nto see a list of supported TLS ciphers.\n.\\\"*********************************************************\n.TP\n.B \\-\\-tls-timeout n\nPacket retransmit timeout on TLS control channel\nif no acknowledgment from remote within\n.B n\nseconds (default=2).  When OpenVPN sends a control\npacket to its peer, it will expect to receive an\nacknowledgement within\n.B n\nseconds or it will retransmit the packet, subject\nto a TCP-like exponential backoff algorithm.  This parameter\nonly applies to control channel packets.  Data channel\npackets (which carry encrypted tunnel data) are never\nacknowledged, sequenced, or retransmitted by OpenVPN because\nthe higher level network protocols running on top of the tunnel\nsuch as TCP expect this role to be left to them.\n.\\\"*********************************************************\n.TP\n.B \\-\\-reneg-bytes n\nRenegotiate data channel key after\n.B n\nbytes sent or received (disabled by default).\nOpenVPN allows the lifetime of a key\nto be expressed as a number of bytes encrypted/decrypted, a number of packets, or\na number of seconds.  A key renegotiation will be forced\nif any of these three criteria are met by either peer.\n.\\\"*********************************************************\n.TP\n.B \\-\\-reneg-pkts n\nRenegotiate data channel key after\n.B n\npackets sent and received (disabled by default).\n.\\\"*********************************************************\n.TP\n.B \\-\\-reneg-sec n\nRenegotiate data channel key after\n.B n\nseconds (default=3600).\n\nWhen using dual-factor authentication, note that this default value may\ncause the end user to be challenged to reauthorize once per hour.\n\nAlso, keep in mind that this option can be used on both the client and server,\nand whichever uses the lower value will be the one to trigger the renegotiation.\nA common mistake is to set\n.B \\-\\-reneg-sec\nto a higher value on either the client or server, while the other side of the connection\nis still using the default value of 3600 seconds, meaning that the renegotiation will\nstill occur once per 3600 seconds.  The solution is to increase \\-\\-reneg-sec on both the\nclient and server, or set it to 0 on one side of the connection (to disable), and to\nyour chosen value on the other side.\n.\\\"*********************************************************\n.TP\n.B \\-\\-hand-window n\nHandshake Window \\-\\- the TLS-based key exchange must finalize within\n.B n\nseconds\nof handshake initiation by any peer (default = 60 seconds).\nIf the handshake fails\nwe will attempt to reset our connection with our peer and try again.\nEven in the event of handshake failure we will still use\nour expiring key for up to\n.B \\-\\-tran-window\nseconds to maintain continuity of transmission of tunnel\ndata.\n.\\\"*********************************************************\n.TP\n.B \\-\\-tran-window n\nTransition window \\-\\- our old key can live this many seconds\nafter a new a key renegotiation begins (default = 3600 seconds).\nThis feature allows for a graceful transition from old to new\nkey, and removes the key renegotiation sequence from the critical\npath of tunnel data forwarding.\n.\\\"*********************************************************\n.TP\n.B \\-\\-single-session\nAfter initially connecting to a remote peer, disallow any new connections.\nUsing this\noption means that a remote peer cannot connect, disconnect, and then\nreconnect.\n\nIf the daemon is reset by a signal or\n.B \\-\\-ping-restart,\nit will allow one new connection.\n\n.B \\-\\-single-session\ncan be used with\n.B \\-\\-ping-exit\nor\n.B \\-\\-inactive\nto create a single dynamic session that will exit when finished.\n.\\\"*********************************************************\n.TP\n.B \\-\\-tls-exit\nExit on TLS negotiation failure.\n.\\\"*********************************************************\n.TP\n.B \\-\\-tls-auth file [direction]\nAdd an additional layer of HMAC authentication on top of the TLS\ncontrol channel to protect against DoS attacks.\n\nIn a nutshell,\n.B \\-\\-tls-auth\nenables a kind of \"HMAC firewall\" on OpenVPN's TCP/UDP port,\nwhere TLS control channel packets\nbearing an incorrect HMAC signature can be dropped immediately without\nresponse.\n\n.B file\n(required) is a key file which can be in one of two formats:\n\n.B (1)\nAn OpenVPN static key file generated by\n.B \\-\\-genkey\n(required if\n.B direction\nparameter is used).\n\n.B (2)\nA freeform passphrase file.  In this case the HMAC key will\nbe derived by taking a secure hash of this file, similar to\nthe\n.BR md5sum (1)\nor\n.BR sha1sum (1)\ncommands.\n\nOpenVPN will first try format (1), and if the file fails to parse as\na static key file, format (2) will be used.\n\nSee the\n.B \\-\\-secret\noption for more information on the optional\n.B direction\nparameter.\n\n.B \\-\\-tls-auth\nis recommended when you are running OpenVPN in a mode where\nit is listening for packets from any IP address, such as when\n.B \\-\\-remote\nis not specified, or\n.B \\-\\-remote\nis specified with\n.B \\-\\-float.\n\nThe rationale for\nthis feature is as follows.  TLS requires a multi-packet exchange\nbefore it is able to authenticate a peer.  During this time\nbefore authentication, OpenVPN is allocating resources (memory\nand CPU) to this potential peer.  The potential peer is also\nexposing many parts of OpenVPN and the OpenSSL library to the packets\nit is sending.  Most successful network attacks today seek\nto either exploit bugs in programs (such as buffer overflow attacks) or\nforce a program to consume so many resources that it becomes unusable.\nOf course the first line of defense is always to produce clean,\nwell-audited code.  OpenVPN has been written with buffer overflow\nattack prevention as a top priority.\nBut as history has shown, many of the most widely used\nnetwork applications have, from time to time,\nfallen to buffer overflow attacks.\n\nSo as a second line of defense, OpenVPN offers\nthis special layer of authentication on top of the TLS control channel so that\nevery packet on the control channel is authenticated by an\nHMAC signature and a unique ID for replay protection.\nThis signature will also help protect against DoS (Denial of Service) attacks.\nAn important rule of thumb in reducing vulnerability to DoS attacks is to\nminimize the amount of resources a potential, but as yet unauthenticated,\nclient is able to consume.\n\n.B \\-\\-tls-auth\ndoes this by signing every TLS control channel packet with an HMAC signature,\nincluding packets which are sent before the TLS level has had a chance\nto authenticate the peer.\nThe result is that packets without\nthe correct signature can be dropped immediately upon reception,\nbefore they have a chance to consume additional system resources\nsuch as by initiating a TLS handshake.\n.B \\-\\-tls-auth\ncan be strengthened by adding the\n.B \\-\\-replay-persist\noption which will keep OpenVPN's replay protection state\nin a file so that it is not lost across restarts.\n\nIt should be emphasized that this feature is optional and that the\npassphrase/key file used with\n.B \\-\\-tls-auth\ngives a peer nothing more than the power to initiate a TLS\nhandshake.  It is not used to encrypt or authenticate any tunnel data.\n.\\\"*********************************************************\n.TP\n.B \\-\\-askpass [file]\nGet certificate password from console or\n.B file\nbefore we daemonize.\n\nFor the extremely\nsecurity conscious, it is possible to protect your private key with\na password.  Of course this means that every time the OpenVPN\ndaemon is started you must be there to type the password.  The\n.B \\-\\-askpass\noption allows you to start OpenVPN from the command line.  It will\nquery you for a password before it daemonizes.  To protect a private\nkey with a password you should omit the\n.B -nodes\noption when you use the\n.B openssl\ncommand line tool to manage certificates and private keys.\n\nIf\n.B file\nis specified, read the password from the first line of\n.B file.\nKeep in mind that storing your password in a file\nto a certain extent invalidates the extra security provided by\nusing an encrypted key (Note: OpenVPN\nwill only read passwords from a file if it has been built\nwith the \\-\\-enable-password-save configure option, or on Windows\nby defining ENABLE_PASSWORD_SAVE in win/settings.in).\n.\\\"*********************************************************\n.TP\n.B \\-\\-auth-nocache\nDon't cache\n.B \\-\\-askpass\nor\n.B \\-\\-auth-user-pass\nusername/passwords in virtual memory.\n\nIf specified, this directive will cause OpenVPN to immediately\nforget username/password inputs after they are used.  As a result,\nwhen OpenVPN needs a username/password, it will prompt for input\nfrom stdin, which may be multiple times during the duration of an\nOpenVPN session.\n\nThis directive does not affect the\n.B \\-\\-http-proxy\nusername/password.  It is always cached.\n.\\\"*********************************************************\n.TP\n.B \\-\\-tls-verify cmd\nRun command\n.B cmd\nto verify the X509 name of a\npending TLS connection that has otherwise passed all other\ntests of certification (except for revocation via\n.B \\-\\-crl-verify\ndirective; the revocation test occurs after the\n.B \\-\\-tls-verify\ntest).\n\n.B cmd\nshould return 0 to allow the TLS handshake to proceed, or 1 to fail.\n\n.B cmd\nconsists of a path to script (or executable program), optionally\nfollowed by arguments. The path and arguments may be single- or double-quoted\nand/or escaped using a backslash, and should be separated by one or more spaces.\n\nWhen\n.B cmd\nis executed two arguments are appended after any arguments specified in\n.B cmd\n, as follows:\n\n.B cmd certificate_depth subject\n\nThese arguments are, respectively, the current certificate depth and\nthe X509 common name (cn) of the peer.\n\nThis feature is useful if the peer you want to trust has a certificate\nwhich was signed by a certificate authority who also signed many\nother certificates, where you don't necessarily want to trust all of them,\nbut rather be selective about which\npeer certificate you will accept.  This feature allows you to write a script\nwhich will test the X509 name on a certificate and decide whether or\nnot it should be accepted.  For a simple perl script which will test\nthe common name field on the certificate, see the file\n.B verify-cn\nin the OpenVPN distribution.\n\nSee the \"Environmental Variables\" section below for\nadditional parameters passed as environmental variables.\n.\\\"*********************************************************\n.TP\n.B \\-\\-tls-export-cert directory\nStore the certificates the clients uses upon connection to this\ndirectory. This will be done before \\-\\-tls-verify is called.  The\ncertificates will use a temporary name and will be deleted when\nthe tls-verify script returns.  The file name used for the certificate\nis available via the peer_cert environment variable.\n.\\\"*********************************************************\n.TP\n.B \\-\\-x509-username-field fieldname\nField in x509 certificate subject to be used as username (default=CN).\n.B Fieldname\nwill be uppercased before matching. When this option is used, the\n.B \\-\\-verify-x509-username\noption will match against the chosen fieldname instead of the CN.\n.\\\"*********************************************************\n.TP\n.B \\-\\-tls-remote name (DEPRECATED)\nAccept connections only from a host with X509 name\nor common name equal to\n.B name.\nThe remote host must also pass all other tests\nof verification.\n\n.B NOTE:\nBecause tls-remote may test against a common name prefix,\nonly use this option when you are using OpenVPN with a custom CA\ncertificate that is under your control.\nNever use this option when your client certificates are signed by\na third party, such as a commercial web CA.\n\nName can also be a common name prefix, for example if you\nwant a client to only accept connections to \"Server-1\",\n\"Server-2\", etc., you can simply use\n.B \\-\\-tls-remote Server\n\nUsing a common name prefix is a useful alternative to managing\na CRL (Certificate Revocation List) on the client, since it allows the client\nto refuse all certificates except for those associated\nwith designated servers.\n\n.B \\-\\-tls-remote\nis a useful replacement for the\n.B \\-\\-tls-verify\noption to verify the remote host, because\n.B \\-\\-tls-remote\nworks in a\n.B \\-\\-chroot\nenvironment too.\n\n.B Please also note:\nThis option is now deprecated.  It will be removed either in OpenVPN v2.4\nor v2.5.  So please make sure you support the new X.509 name formatting\ndescribed with the\n.B \\-\\-compat-names\noption as soon as possible by updating your configurations to use\n.B \\-\\-verify-x509-name\ninstead.\n.\\\"*********************************************************\n.TP\n.B \\-\\-verify-x509-name name type\nAccept connections only if a host's X.509 name is equal to\n.B name.\nThe remote host must also pass all other tests of verification.\n\nWhich X.509 name is compared to\n.B name\ndepends on the setting of type.\n.B type\ncan be \"subject\" to match the complete subject DN (default),\n\"name\" to match a subject RDN or \"name-prefix\" to match a subject RDN prefix.\nWhich RDN is verified as name depends on the\n.B \\-\\-x509-username-field\noption. But it defaults to the common name (CN), e.g. a certificate with a\nsubject DN \"C=KG, ST=NA, L=Bishkek, CN=Server-1\" would be matched by:\n\n.B \\-\\-verify-x509-name 'C=KG, ST=NA, L=Bishkek, CN=Server-1'\nand\n.B \\-\\-verify-x509-name Server-1 name\nor you could use\n.B \\-\\-verify-x509-name Server- name-prefix\nif you want a client to only accept connections to \"Server-1\", \"Server-2\", etc.\n\n.B \\-\\-verify-x509-name\nis a useful replacement for the\n.B \\-\\-tls-verify\noption to verify the remote host, because\n.B \\-\\-verify-x509-name\nworks in a\n.B \\-\\-chroot\nenvironment without any dependencies.\n\nUsing a name prefix is a useful alternative to managing\na CRL (Certificate Revocation List) on the client, since it allows the client\nto refuse all certificates except for those associated\nwith designated servers.\n\n.B NOTE:\nTest against a name prefix only when you are using OpenVPN with\na custom CA certificate that is under your control.\nNever use this option with type \"name-prefix\" when your client certificates\nare signed by a third party, such as a commercial web CA.\n.\\\"*********************************************************\n.TP\n.B \\-\\-x509-track attribute\nSave peer X509\n.B attribute\nvalue in environment for use by plugins and management interface.\nPrepend a '+' to\n.B attribute\nto save values from full cert chain.  Values will be encoded\nas X509_<depth>_<attribute>=<value>.  Multiple\n.B \\-\\-x509-track\noptions can be defined to track multiple attributes.\nNot available with PolarSSL.\n.\\\"*********************************************************\n.TP\n.B \\-\\-ns-cert-type client|server\nRequire that peer certificate was signed with an explicit\n.B nsCertType\ndesignation of \"client\" or \"server\".\n\nThis is a useful security option for clients, to ensure that\nthe host they connect with is a designated server.\n\nSee the easy-rsa/build-key-server script for an example\nof how to generate a certificate with the\n.B nsCertType\nfield set to \"server\".\n\nIf the server certificate's nsCertType field is set\nto \"server\", then the clients can verify this with\n.B \\-\\-ns-cert-type server.\n\nThis is an important security precaution to protect against\na man-in-the-middle attack where an authorized client\nattempts to connect to another client by impersonating the server.\nThe attack is easily prevented by having clients verify\nthe server certificate using any one of\n.B \\-\\-ns-cert-type, \\-\\-verify-x509-name,\nor\n.B \\-\\-tls-verify.\n.\\\"*********************************************************\n.TP\n.B \\-\\-remote-cert-ku v...\nRequire that peer certificate was signed with an explicit\n.B key usage.\n\nThis is a useful security option for clients, to ensure that\nthe host they connect to is a designated server.\n\nThe key usage should be encoded in hex, more than one key\nusage can be specified.\n.\\\"*********************************************************\n.TP\n.B \\-\\-remote-cert-eku oid\nRequire that peer certificate was signed with an explicit\n.B extended key usage.\n\nThis is a useful security option for clients, to ensure that\nthe host they connect to is a designated server.\n\nThe extended key usage should be encoded in oid notation, or\nOpenSSL symbolic representation.\n.\\\"*********************************************************\n.TP\n.B \\-\\-remote-cert-tls client|server\nRequire that peer certificate was signed with an explicit\n.B key usage\nand\n.B extended key usage\nbased on RFC3280 TLS rules.\n\nThis is a useful security option for clients, to ensure that\nthe host they connect to is a designated server.\n\nThe\n.B \\-\\-remote-cert-tls client\noption is equivalent to\n.B\n\\-\\-remote-cert-ku 80 08 88 \\-\\-remote-cert-eku \"TLS Web Client Authentication\"\n\nThe key usage is digitalSignature and/or keyAgreement.\n\nThe\n.B \\-\\-remote-cert-tls server\noption is equivalent to\n.B\n\\-\\-remote-cert-ku a0 88 \\-\\-remote-cert-eku \"TLS Web Server Authentication\"\n\nThe key usage is digitalSignature and ( keyEncipherment or keyAgreement ).\n\nThis is an important security precaution to protect against\na man-in-the-middle attack where an authorized client\nattempts to connect to another client by impersonating the server.\nThe attack is easily prevented by having clients verify\nthe server certificate using any one of\n.B \\-\\-remote-cert-tls, \\-\\-verify-x509-name,\nor\n.B \\-\\-tls-verify.\n.\\\"*********************************************************\n.TP\n.B \\-\\-crl-verify crl ['dir']\nCheck peer certificate against the file\n.B crl\nin PEM format.\n\nA CRL (certificate revocation list) is used when a particular key is\ncompromised but when the overall PKI is still intact.\n\nSuppose you had a PKI consisting of a CA, root certificate, and a number of\nclient certificates.  Suppose a laptop computer containing a client key and\ncertificate was stolen.  By adding the stolen certificate to the CRL file,\nyou could reject any connection which attempts to use it, while preserving the\noverall integrity of the PKI.\n\nThe only time when it would be necessary to rebuild the entire PKI from scratch would be\nif the root certificate key itself was compromised.\n\nIf the optional\n.B dir\nflag is specified, enable a different mode where\n.B crl\nis a directory containing files named as revoked serial numbers\n(the files may be empty, the contents are never read).  If a client\nrequests a connection, where the client certificate serial number\n(decimal string) is the name of a file present in the directory,\nit will be rejected.\n.\\\"*********************************************************\n.SS SSL Library information:\n.\\\"*********************************************************\n.TP\n.B \\-\\-show-ciphers\n(Standalone)\nShow all cipher algorithms to use with the\n.B \\-\\-cipher\noption.\n.\\\"*********************************************************\n.TP\n.B \\-\\-show-digests\n(Standalone)\nShow all message digest algorithms to use with the\n.B \\-\\-auth\noption.\n.\\\"*********************************************************\n.TP\n.B \\-\\-show-tls\n(Standalone)\nShow all TLS ciphers (TLS used only as a control channel).  The TLS\nciphers will be sorted from highest preference (most secure) to\nlowest.\n.\\\"*********************************************************\n.TP\n.B \\-\\-show-engines\n(Standalone)\nShow currently available hardware-based crypto acceleration\nengines supported by the OpenSSL library.\n.\\\"*********************************************************\n.SS Generate a random key:\nUsed only for non-TLS static key encryption mode.\n.\\\"*********************************************************\n.TP\n.B \\-\\-genkey\n(Standalone)\nGenerate a random key to be used as a shared secret,\nfor use with the\n.B \\-\\-secret\noption.  This file must be shared with the\npeer over a pre-existing secure channel such as\n.BR scp (1)\n.\n.\\\"*********************************************************\n.TP\n.B \\-\\-secret file\nWrite key to\n.B file.\n.\\\"*********************************************************\n.SS TUN/TAP persistent tunnel config mode:\nAvailable with linux 2.4.7+.  These options comprise a standalone mode\nof OpenVPN which can be used to create and delete persistent tunnels.\n.\\\"*********************************************************\n.TP\n.B \\-\\-mktun\n(Standalone)\nCreate a persistent tunnel on platforms which support them such\nas Linux.  Normally TUN/TAP tunnels exist only for\nthe period of time that an application has them open.  This option\ntakes advantage of the TUN/TAP driver's ability to build persistent\ntunnels that live through multiple instantiations of OpenVPN and die\nonly when they are deleted or the machine is rebooted.\n\nOne of the advantages of persistent tunnels is that they eliminate the\nneed for separate\n.B \\-\\-up\nand\n.B \\-\\-down\nscripts to run the appropriate\n.BR ifconfig (8)\nand\n.BR route (8)\ncommands.  These commands can be placed in the the same shell script\nwhich starts or terminates an OpenVPN session.\n\nAnother advantage is that open connections through the TUN/TAP-based tunnel\nwill not be reset if the OpenVPN peer restarts.  This can be useful to\nprovide uninterrupted connectivity through the tunnel in the event of a DHCP\nreset of the peer's public IP address (see the\n.B \\-\\-ipchange\noption above).\n\nOne disadvantage of persistent tunnels is that it is harder to automatically\nconfigure their MTU value (see\n.B \\-\\-link-mtu\nand\n.B \\-\\-tun-mtu\nabove).\n\nOn some platforms such as Windows, TAP-Win32 tunnels are persistent by\ndefault.\n.\\\"*********************************************************\n.TP\n.B \\-\\-rmtun\n(Standalone)\nRemove a persistent tunnel.\n.\\\"*********************************************************\n.TP\n.B \\-\\-dev tunX | tapX\nTUN/TAP device\n.\\\"*********************************************************\n.TP\n.B \\-\\-user user\nOptional user to be owner of this tunnel.\n.\\\"*********************************************************\n.TP\n.B \\-\\-group group\nOptional group to be owner of this tunnel.\n.\\\"*********************************************************\n.SS Windows-Specific Options:\n.\\\"*********************************************************\n.TP\n.B \\-\\-win-sys path\nSet the Windows system directory pathname to use when looking for system\nexecutables such as\n.B route.exe\nand\n.B netsh.exe.\nBy default, if this directive is\nnot specified, OpenVPN will use the SystemRoot environment variable.\n\nThis option have changed behaviour in OpenVPN 2.3.  Earlier you had to\ndefine\n.B --win-sys env\nto use the SystemRoot environment variable, otherwise it defaulted to C:\\\\WINDOWS.\nIt is not needed to use the\n.B env\nkeyword any more, and it will just be ignored. A warning is logged when this\nis found in the configuration file.\n.\\\"*********************************************************\n.TP\n.B \\-\\-ip-win32 method\nWhen using\n.B \\-\\-ifconfig\non Windows, set the TAP-Win32 adapter\nIP address and netmask using\n.B method.\nDon't use this option unless you are also using\n.B \\-\\-ifconfig.\n\n.B manual \\-\\-\nDon't set the IP address or netmask automatically.\nInstead output a message\nto the console telling the user to configure the\nadapter manually and indicating the IP/netmask which\nOpenVPN expects the adapter to be set to.\n\n.B dynamic [offset] [lease-time] \\-\\-\nAutomatically set the IP address and netmask by replying to\nDHCP query messages generated by the kernel.  This mode is\nprobably the \"cleanest\" solution\nfor setting the TCP/IP properties since it uses the well-known\nDHCP protocol.  There are, however, two prerequisites for using\nthis mode: (1) The TCP/IP properties for the TAP-Win32\nadapter must be set to \"Obtain an IP address automatically,\" and\n(2) OpenVPN needs to claim an IP address in the subnet for use\nas the virtual DHCP server address.  By default in\n.B \\-\\-dev tap\nmode, OpenVPN will\ntake the normally unused first address in the subnet.  For example,\nif your subnet is 192.168.4.0 netmask 255.255.255.0, then\nOpenVPN will take the IP address 192.168.4.0 to use as the\nvirtual DHCP server address.  In\n.B \\-\\-dev tun\nmode, OpenVPN will cause the DHCP server to masquerade as if it were\ncoming from the remote endpoint.  The optional offset parameter is\nan integer which is > -256 and < 256 and which defaults to 0.\nIf offset is positive, the DHCP server will masquerade as the IP\naddress at network address + offset.\nIf offset is negative, the DHCP server will masquerade as the IP\naddress at broadcast address + offset.  The Windows\n.B ipconfig /all\ncommand can be used to show what Windows thinks the DHCP server\naddress is.  OpenVPN will \"claim\" this address, so make sure to\nuse a free address.  Having said that, different OpenVPN instantiations,\nincluding different ends of the same connection, can share the same\nvirtual DHCP server address.  The\n.B lease-time\nparameter controls the lease time of the DHCP assignment given to\nthe TAP-Win32 adapter, and is denoted in seconds.\nNormally a very long lease time is preferred\nbecause it prevents routes involving the TAP-Win32 adapter from\nbeing lost when the system goes to sleep.  The default\nlease time is one year.\n\n.B netsh \\-\\-\nAutomatically set the IP address and netmask using\nthe Windows command-line \"netsh\"\ncommand.  This method appears to work correctly on\nWindows XP but not Windows 2000.\n\n.B ipapi \\-\\-\nAutomatically set the IP address and netmask using the\nWindows IP Helper API.  This approach\ndoes not have ideal semantics, though testing has indicated\nthat it works okay in practice.  If you use this option,\nit is best to leave the TCP/IP properties for the TAP-Win32\nadapter in their default state, i.e. \"Obtain an IP address\nautomatically.\"\n\n.B adaptive \\-\\-\n(Default) Try\n.B dynamic\nmethod initially and fail over to\n.B netsh\nif the DHCP negotiation with the TAP-Win32 adapter does\nnot succeed in 20 seconds.  Such failures have been known\nto occur when certain third-party firewall packages installed\non the client machine block the DHCP negotiation used by\nthe TAP-Win32 adapter.\nNote that if the\n.B netsh\nfailover occurs, the TAP-Win32 adapter\nTCP/IP properties will be reset from DHCP to static, and this\nwill cause future OpenVPN startups using the\n.B adaptive\nmode to use\n.B netsh\nimmediately, rather than trying\n.B dynamic\nfirst.  To \"unstick\" the\n.B adaptive\nmode from using\n.B netsh,\nrun OpenVPN at least once using the\n.B dynamic\nmode to restore the TAP-Win32 adapter TCP/IP properties\nto a DHCP configuration.\n.\\\"*********************************************************\n.TP\n.B \\-\\-route-method m\nWhich method\n.B m\nto use for adding routes on Windows?\n\n.B adaptive\n(default) \\-\\- Try IP helper API first.  If that fails, fall\nback to the route.exe shell command.\n.br\n.B ipapi\n\\-\\- Use IP helper API.\n.br\n.B exe\n\\-\\- Call the route.exe shell command.\n.\\\"*********************************************************\n.TP\n.B \\-\\-dhcp-option type [parm]\nSet extended TAP-Win32 TCP/IP properties, must\nbe used with\n.B \\-\\-ip-win32 dynamic\nor\n.B \\-\\-ip-win32 adaptive.\nThis option can be used to set additional TCP/IP properties\non the TAP-Win32 adapter, and is particularly useful for\nconfiguring an OpenVPN client to access a Samba server\nacross the VPN.\n\n.B DOMAIN name \\-\\-\nSet Connection-specific DNS Suffix.\n\n.B DNS addr \\-\\-\nSet primary domain name server address.  Repeat\nthis option to set secondary DNS server addresses.\n\n.B WINS addr \\-\\-\nSet primary WINS server address (NetBIOS over TCP/IP Name Server).\nRepeat this option to set secondary WINS server addresses.\n\n.B NBDD addr \\-\\-\nSet primary NBDD server address (NetBIOS over TCP/IP Datagram Distribution Server)\nRepeat this option\nto set secondary NBDD server addresses.\n\n.B NTP addr \\-\\-\nSet primary NTP server address (Network Time Protocol).\nRepeat this option\nto set secondary NTP server addresses.\n\n.B NBT type \\-\\-\nSet NetBIOS over TCP/IP Node type.  Possible options:\n.B 1\n= b-node (broadcasts),\n.B 2\n= p-node (point-to-point\nname queries to a WINS server),\n.B 4\n= m-node (broadcast\nthen query name server), and\n.B 8\n= h-node (query name server, then broadcast).\n\n.B NBS scope-id \\-\\-\nSet NetBIOS over TCP/IP Scope. A NetBIOS Scope ID provides an extended\nnaming service for the NetBIOS over TCP/IP (Known as NBT) module. The\nprimary purpose of a NetBIOS scope ID is to isolate NetBIOS traffic on\na single network to only those nodes with the same NetBIOS scope ID.\nThe NetBIOS scope ID is a character string that is appended to the NetBIOS\nname. The NetBIOS scope ID on two hosts must match, or the two hosts\nwill not be able to communicate. The NetBIOS Scope ID also allows\ncomputers to use the same computer name, as they have different\nscope IDs. The Scope ID becomes a part of the NetBIOS name, making the name unique.\n(This description of NetBIOS scopes courtesy of NeonSurge@abyss.com)\n\n.B DISABLE-NBT \\-\\-\nDisable Netbios-over-TCP/IP.\n\nNote that if\n.B \\-\\-dhcp-option\nis pushed via\n.B \\-\\-push\nto a non-windows client, the option will be saved in the client's\nenvironment before the up script is called, under\nthe name \"foreign_option_{n}\".\n.\\\"*********************************************************\n.TP\n.B \\-\\-tap-sleep n\nCause OpenVPN to sleep for\n.B n\nseconds immediately after the TAP-Win32 adapter state\nis set to \"connected\".\n\nThis option is intended to be used to troubleshoot problems\nwith the\n.B \\-\\-ifconfig\nand\n.B \\-\\-ip-win32\noptions, and is used to give\nthe TAP-Win32 adapter time to come up before\nWindows IP Helper API operations are applied to it.\n.\\\"*********************************************************\n.TP\n.B \\-\\-show-net-up\nOutput OpenVPN's view of the system routing table and network\nadapter list to the syslog or log file after the TUN/TAP adapter\nhas been brought up and any routes have been added.\n.\\\"*********************************************************\n.TP\n.B \\-\\-dhcp-renew\nAsk Windows to renew the TAP adapter lease on startup.\nThis option is normally unnecessary, as Windows automatically\ntriggers a DHCP renegotiation on the TAP adapter when it\ncomes up, however if you set the TAP-Win32 adapter\nMedia Status property to \"Always Connected\", you may need this\nflag.\n.\\\"*********************************************************\n.TP\n.B \\-\\-dhcp-release\nAsk Windows to release the TAP adapter lease on shutdown.\nThis option has the same caveats as\n.B \\-\\-dhcp-renew\nabove.\n.\\\"*********************************************************\n.TP\n.B \\-\\-register-dns\nRun net stop dnscache, net start dnscache, ipconfig /flushdns\nand ipconfig /registerdns on connection initiation.\nThis is known to kick Windows into\nrecognizing pushed DNS servers.\n.\\\"*********************************************************\n.TP\n.B \\-\\-pause-exit\nPut up a \"press any key to continue\" message on the console prior\nto OpenVPN program exit.  This option is automatically used by the\nWindows explorer when OpenVPN is run on a configuration\nfile using the right-click explorer menu.\n.\\\"*********************************************************\n.TP\n.B \\-\\-service exit-event [0|1]\nShould be used when OpenVPN is being automatically executed by another\nprogram in such\na context that no interaction with the user via display or keyboard\nis possible.  In general, end-users should never need to explicitly\nuse this option, as it is automatically added by the OpenVPN service wrapper\nwhen a given OpenVPN configuration is being run as a service.\n\n.B exit-event\nis the name of a Windows global event object, and OpenVPN will continuously\nmonitor the state of this event object and exit when it becomes signaled.\n\nThe second parameter indicates the initial state of\n.B exit-event\nand normally defaults to 0.\n\nMultiple OpenVPN processes can be simultaneously executed with the same\n.B exit-event\nparameter.  In any case, the controlling process can signal\n.B exit-event,\ncausing all such OpenVPN processes to exit.\n\nWhen executing an OpenVPN process using the\n.B \\-\\-service\ndirective, OpenVPN will probably not have a console\nwindow to output status/error\nmessages, therefore it is useful to use\n.B \\-\\-log\nor\n.B \\-\\-log-append\nto write these messages to a file.\n.\\\"*********************************************************\n.TP\n.B \\-\\-show-adapters\n(Standalone)\nShow available TAP-Win32 adapters which can be selected using the\n.B \\-\\-dev-node\noption.  On non-Windows systems, the\n.BR ifconfig (8)\ncommand provides similar functionality.\n.\\\"*********************************************************\n.TP\n.B \\-\\-allow-nonadmin [TAP-adapter]\n(Standalone)\nSet\n.B TAP-adapter\nto allow access from non-administrative accounts.  If\n.B TAP-adapter\nis omitted, all TAP adapters on the system will be configured to allow\nnon-admin access.\nThe non-admin access setting will only persist for the length of time that\nthe TAP-Win32 device object and driver remain loaded, and will need\nto be re-enabled after a reboot, or if the driver is unloaded\nand reloaded.\nThis directive can only be used by an administrator.\n.\\\"*********************************************************\n.TP\n.B \\-\\-show-valid-subnets\n(Standalone)\nShow valid subnets for\n.B \\-\\-dev tun\nemulation.  Since the TAP-Win32 driver\nexports an ethernet interface to Windows, and since TUN devices are\npoint-to-point in nature, it is necessary for the TAP-Win32 driver\nto impose certain constraints on TUN endpoint address selection.\n\nNamely, the point-to-point endpoints used in TUN device emulation\nmust be the middle two addresses of a /30 subnet (netmask 255.255.255.252).\n.\\\"*********************************************************\n.TP\n.B \\-\\-show-net\n(Standalone)\nShow OpenVPN's view of the system routing table and network\nadapter list.\n.\\\"*********************************************************\n.SS PKCS#11 Standalone Options:\n.\\\"*********************************************************\n.TP\n.B \\-\\-show-pkcs11-ids provider [cert_private]\n(Standalone)\nShow PKCS#11 token object list. Specify cert_private as 1\nif certificates are stored as private objects.\n\n.B \\-\\-verb\noption can be used BEFORE this option to produce debugging information.\n.\\\"*********************************************************\n.SS IPv6 Related Options\n.\\\"*********************************************************\nThe following options exist to support IPv6 tunneling in peer-to-peer\nand client-server mode.  As of now, this is just very basic\ndocumentation of the IPv6-related options. More documentation can be\nfound on http://www.greenie.net/ipv6/openvpn.html.\n.TP\n.B --ifconfig-ipv6 ipv6addr/bits ipv6remote\nconfigure IPv6 address\n.B ipv6addr/bits\non the ``tun'' device.  The second parameter is used as route target for\n.B --route-ipv6\nif no gateway is specified.\n.TP\n.B --route-ipv6 ipv6addr/bits [gateway] [metric]\nsetup IPv6 routing in the system to send the specified IPv6 network\ninto OpenVPN's ``tun'' device\n.TP\n.B --server-ipv6 ipv6addr/bits\nconvenience-function to enable a number of IPv6 related options at\nonce, namely\n.B --ifconfig-ipv6, --ifconfig-ipv6-pool, --tun-ipv6\nand\n.B --push tun-ipv6\nIs only accepted if ``--mode server'' or ``--server'' is set.\n.TP\n.B --ifconfig-ipv6-pool ipv6addr/bits\nSpecify an IPv6 address pool for dynamic assignment to clients.  The\npool starts at\n.B ipv6addr\nand increments by +1 for every new client (linear mode).  The\n.B /bits\nsetting controls the size of the pool.\n.TP\n.B --ifconfig-ipv6-push ipv6addr/bits ipv6remote\nfor ccd/ per-client static IPv6 interface configuration, see\n.B --client-config-dir\nand\n.B --ifconfig-push\nfor more details.\n.TP\n.B --iroute-ipv6 ipv6addr/bits\nfor ccd/ per-client static IPv6 route configuration, see\n.B --iroute\nfor more details how to setup and use this, and how\n.B --iroute\nand\n.B --route\ninteract.\n\n.\\\"*********************************************************\n.SH SCRIPTING AND ENVIRONMENTAL VARIABLES\nOpenVPN exports a series\nof environmental variables for use by user-defined scripts.\n.\\\"*********************************************************\n.SS Script Order of Execution\n.\\\"*********************************************************\n.TP\n.B \\-\\-up\nExecuted after TCP/UDP socket bind and TUN/TAP open.\n.\\\"*********************************************************\n.TP\n.B \\-\\-tls-verify\nExecuted when we have a still untrusted remote peer.\n.\\\"*********************************************************\n.TP\n.B \\-\\-ipchange\nExecuted after connection authentication, or remote IP address change.\n.\\\"*********************************************************\n.TP\n.B \\-\\-client-connect\nExecuted in\n.B \\-\\-mode server\nmode immediately after client authentication.\n.\\\"*********************************************************\n.TP\n.B \\-\\-route-up\nExecuted after connection authentication, either\nimmediately after, or some number of seconds after\nas defined by the\n.B \\-\\-route-delay\noption.\n.\\\"*********************************************************\n.TP\n.B \\-\\-route-pre-down\nExecuted right before the routes are removed.\n.\\\"*********************************************************\n.TP\n.B \\-\\-client-disconnect\nExecuted in\n.B \\-\\-mode server\nmode on client instance shutdown.\n.\\\"*********************************************************\n.TP\n.B \\-\\-down\nExecuted after TCP/UDP and TUN/TAP close.\n.\\\"*********************************************************\n.TP\n.B \\-\\-learn-address\nExecuted in\n.B \\-\\-mode server\nmode whenever an IPv4 address/route or MAC address is added to OpenVPN's\ninternal routing table.\n.\\\"*********************************************************\n.TP\n.B \\-\\-auth-user-pass-verify\nExecuted in\n.B \\-\\-mode server\nmode on new client connections, when the client is\nstill untrusted.\n.\\\"*********************************************************\n.SS String Types and Remapping\nIn certain cases, OpenVPN will perform remapping of characters\nin strings.  Essentially, any characters outside the set of\npermitted characters for each string type will be converted\nto underbar ('_').\n\n.B Q:\nWhy is string remapping necessary?\n\n.B A:\nIt's an important security feature to prevent the malicious coding of\nstrings from untrusted sources to be passed as parameters to scripts,\nsaved in the environment, used as a common name, translated to a filename,\netc.\n\n.B Q:\nCan string remapping be disabled?\n\n.B A:\nYes, by using the\n.B \\-\\-no-name-remapping\noption, however this should be considered an advanced option.\n\nHere is a brief rundown of OpenVPN's current string types and the \npermitted character class for each string:\n\n.B X509 Names:\nAlphanumeric, underbar ('_'), dash ('-'), dot ('.'), at \n('@'), colon (':'), slash ('/'), and equal ('=').  Alphanumeric is defined \nas a character which will cause the C library isalnum() function to return \ntrue.\n\n.B Common Names:\nAlphanumeric, underbar ('_'), dash ('-'), dot ('.'), and at                \n('@').\n\n.B \\-\\-auth-user-pass username:\nSame as Common Name, with one exception: starting with OpenVPN 2.0.1,\nthe username is passed to the OPENVPN_PLUGIN_AUTH_USER_PASS_VERIFY plugin in its raw form,\nwithout string remapping.\n\n.B \\-\\-auth-user-pass password:\nAny \"printable\" character except CR or LF.  \nPrintable is defined to be a character which will cause the C library \nisprint() function to return true.\n\n.B \\-\\-client-config-dir filename as derived from common name or username:\nAlphanumeric, underbar ('_'), dash ('-'), and dot ('.') except for \".\" or \n\"..\" as standalone strings.  As of 2.0.1-rc6, the at ('@') character has\nbeen added as well for compatibility with the common name character class.\n\n.B Environmental variable names:\nAlphanumeric or underbar ('_').\n\n.B Environmental variable values:\nAny printable character.\n\nFor all cases, characters in a string which are not members of the legal \ncharacter class for that string type will be remapped to underbar ('_').\n.\\\"*********************************************************\n.SS Environmental Variables\nOnce set, a variable is persisted\nindefinitely until it is reset by a new value or a restart,\n\nAs of OpenVPN 2.0-beta12, in server mode, environmental\nvariables set by OpenVPN\nare scoped according to the client objects\nthey are\nassociated with, so there should not be any issues with\nscripts having access to stale, previously set variables\nwhich refer to different client instances.\n.\\\"*********************************************************\n.TP\n.B bytes_received\nTotal number of bytes received from client during VPN session.\nSet prior to execution of the\n.B \\-\\-client-disconnect\nscript.\n.\\\"*********************************************************\n.TP\n.B bytes_sent\nTotal number of bytes sent to client during VPN session.\nSet prior to execution of the\n.B \\-\\-client-disconnect\nscript.\n.\\\"*********************************************************\n.TP\n.B common_name\nThe X509 common name of an authenticated client.\nSet prior to execution of\n.B \\-\\-client-connect, \\-\\-client-disconnect,\nand\n.B \\-\\-auth-user-pass-verify\nscripts.\n.\\\"*********************************************************\n.TP\n.B config\nName of first\n.B \\-\\-config\nfile.\nSet on program initiation and reset on SIGHUP.\n.\\\"*********************************************************\n.TP\n.B daemon\nSet to \"1\" if the\n.B \\-\\-daemon\ndirective is specified, or \"0\" otherwise.\nSet on program initiation and reset on SIGHUP.\n.\\\"*********************************************************\n.TP\n.B daemon_log_redirect\nSet to \"1\" if the\n.B \\-\\-log\nor\n.B \\-\\-log-append\ndirectives are specified, or \"0\" otherwise.\nSet on program initiation and reset on SIGHUP.\n.\\\"*********************************************************\n.TP\n.B dev\nThe actual name of the TUN/TAP device, including\na unit number if it exists.\nSet prior to\n.B \\-\\-up\nor\n.B \\-\\-down\nscript execution.\n.\\\"*********************************************************\n.TP\n.B foreign_option_{n}\nAn option pushed via\n.B \\-\\-push\nto a client which does not natively support it,\nsuch as\n.B \\-\\-dhcp-option\non a non-Windows system, will be recorded to this\nenvironmental variable sequence prior to\n.B \\-\\-up\nscript execution.\n.\\\"*********************************************************\n.TP\n.B ifconfig_broadcast\nThe broadcast address for the virtual\nethernet segment which is derived from the\n.B \\-\\-ifconfig\noption when\n.B \\-\\-dev tap\nis used.\nSet prior to OpenVPN calling the\n.I ifconfig\nor\n.I netsh\n(windows version of ifconfig) commands which\nnormally occurs prior to\n.B \\-\\-up\nscript execution.\n.\\\"*********************************************************\n.TP\n.B ifconfig_ipv6_local\nThe local VPN endpoint IPv6 address specified in the\n.B \\-\\-ifconfig-ipv6\noption (first parameter).\nSet prior to OpenVPN calling the\n.I ifconfig\nor\n.I netsh\n(windows version of ifconfig) commands which\nnormally occurs prior to\n.B \\-\\-up\nscript execution.\n.\\\"*********************************************************\n.TP\n.B ifconfig_ipv6_netbits\nThe prefix length of the IPv6 network on the VPN interface.  Derived from\nthe /nnn parameter of the IPv6 address in the\n.B \\-\\-ifconfig-ipv6\noption (first parameter).\nSet prior to OpenVPN calling the\n.I ifconfig\nor\n.I netsh\n(windows version of ifconfig) commands which\nnormally occurs prior to\n.B \\-\\-up\nscript execution.\n.\\\"*********************************************************\n.TP\n.B ifconfig_ipv6_remote\nThe remote VPN endpoint IPv6 address specified in the\n.B \\-\\-ifconfig-ipv6\noption (second parameter).\nSet prior to OpenVPN calling the\n.I ifconfig\nor\n.I netsh\n(windows version of ifconfig) commands which\nnormally occurs prior to\n.B \\-\\-up\nscript execution.\n.\\\"*********************************************************\n.TP\n.B ifconfig_local\nThe local VPN endpoint IP address specified in the\n.B \\-\\-ifconfig\noption (first parameter).\nSet prior to OpenVPN calling the\n.I ifconfig\nor\n.I netsh\n(windows version of ifconfig) commands which\nnormally occurs prior to\n.B \\-\\-up\nscript execution.\n.\\\"*********************************************************\n.TP\n.B ifconfig_remote\nThe remote VPN endpoint IP address specified in the\n.B \\-\\-ifconfig\noption (second parameter) when\n.B \\-\\-dev tun\nis used.\nSet prior to OpenVPN calling the\n.I ifconfig\nor\n.I netsh\n(windows version of ifconfig) commands which\nnormally occurs prior to\n.B \\-\\-up\nscript execution.\n.\\\"*********************************************************\n.TP\n.B ifconfig_netmask\nThe subnet mask of the virtual ethernet segment\nthat is specified as the second parameter to\n.B \\-\\-ifconfig\nwhen\n.B \\-\\-dev tap\nis being used.\nSet prior to OpenVPN calling the\n.I ifconfig\nor\n.I netsh\n(windows version of ifconfig) commands which\nnormally occurs prior to\n.B \\-\\-up\nscript execution.\n.\\\"*********************************************************\n.TP\n.B ifconfig_pool_local_ip\nThe local\nvirtual IP address for the TUN/TAP tunnel taken from an\n.B \\-\\-ifconfig-push\ndirective if specified, or otherwise from\nthe ifconfig pool (controlled by the\n.B \\-\\-ifconfig-pool\nconfig file directive).\nOnly set for\n.B \\-\\-dev tun\ntunnels.\nThis option is set on the server prior to execution\nof the\n.B \\-\\-client-connect\nand\n.B \\-\\-client-disconnect\nscripts.\n.\\\"*********************************************************\n.TP\n.B ifconfig_pool_netmask\nThe\nvirtual IP netmask for the TUN/TAP tunnel taken from an\n.B \\-\\-ifconfig-push\ndirective if specified, or otherwise from\nthe ifconfig pool (controlled by the\n.B \\-\\-ifconfig-pool\nconfig file directive).\nOnly set for\n.B \\-\\-dev tap\ntunnels.\nThis option is set on the server prior to execution\nof the\n.B \\-\\-client-connect\nand\n.B \\-\\-client-disconnect\nscripts.\n.\\\"*********************************************************\n.TP\n.B ifconfig_pool_remote_ip\nThe remote\nvirtual IP address for the TUN/TAP tunnel taken from an\n.B \\-\\-ifconfig-push\ndirective if specified, or otherwise from\nthe ifconfig pool (controlled by the\n.B \\-\\-ifconfig-pool\nconfig file directive).\nThis option is set on the server prior to execution\nof the\n.B \\-\\-client-connect\nand\n.B \\-\\-client-disconnect\nscripts.\n.\\\"*********************************************************\n.TP\n.B link_mtu\nThe maximum packet size (not including the IP header)\nof tunnel data in UDP tunnel transport mode.\nSet prior to\n.B \\-\\-up\nor\n.B \\-\\-down\nscript execution.\n.\\\"*********************************************************\n.TP\n.B local\nThe\n.B \\-\\-local\nparameter.\nSet on program initiation and reset on SIGHUP.\n.\\\"*********************************************************\n.TP\n.B local_port\nThe local port number, specified by\n.B \\-\\-port\nor\n.B \\-\\-lport.\nSet on program initiation and reset on SIGHUP.\n.\\\"*********************************************************\n.TP\n.B password\nThe password provided by a connecting client.\nSet prior to\n.B \\-\\-auth-user-pass-verify\nscript execution only when the\n.B via-env\nmodifier is specified, and deleted from the environment\nafter the script returns.\n.\\\"*********************************************************\n.TP\n.B proto\nThe\n.B \\-\\-proto\nparameter.\nSet on program initiation and reset on SIGHUP.\n.\\\"*********************************************************\n.TP\n.B remote_{n}\nThe\n.B \\-\\-remote\nparameter.\nSet on program initiation and reset on SIGHUP.\n.\\\"*********************************************************\n.TP\n.B remote_port_{n}\nThe remote port number, specified by\n.B \\-\\-port\nor\n.B \\-\\-rport.\nSet on program initiation and reset on SIGHUP.\n.\\\"*********************************************************\n.TP\n.B route_net_gateway\nThe pre-existing default IP gateway in the system routing\ntable.\nSet prior to\n.B \\-\\-up\nscript execution.\n.\\\"*********************************************************\n.TP\n.B route_vpn_gateway\nThe default gateway used by\n.B \\-\\-route\noptions, as specified in either the\n.B \\-\\-route-gateway\noption or the second parameter to\n.B \\-\\-ifconfig\nwhen\n.B \\-\\-dev tun\nis specified.\nSet prior to\n.B \\-\\-up\nscript execution.\n.\\\"*********************************************************\n.TP\n.B route_{parm}_{n}\nA set of variables which define each route to be added, and\nare set prior to\n.B \\-\\-up\nscript execution.\n\n.B parm\nwill be one of \"network\", \"netmask\", \"gateway\", or \"metric\".\n\n.B n\nis the OpenVPN route number, starting from 1.\n\nIf the network or gateway are resolvable DNS names,\ntheir IP address translations will be recorded rather\nthan their names as denoted on the command line\nor configuration file.\n.\\\"*********************************************************\n.TP\n.B route_ipv6_{parm}_{n}\nA set of variables which define each IPv6 route to be added, and\nare set prior to\n.B \\-\\-up\nscript execution.\n\n.B parm\nwill be one of \"network\" or \"gateway\" (\"netmask\" is contained as \"/nnn\"\nin the route_ipv6_network_{n}, unlike IPv4 where it is passed in a separate\nenvironment variable).\n\n.B n\nis the OpenVPN route number, starting from 1.\n\nIf the network or gateway are resolvable DNS names,\ntheir IP address translations will be recorded rather\nthan their names as denoted on the command line\nor configuration file.\n.\\\"*********************************************************\n.TP\n.B peer_cert\nTemporary file name containing the client certificate upon\nconnection.  Useful in conjunction with --tls-verify\n.\\\"*********************************************************\n.TP\n.B script_context\nSet to \"init\" or \"restart\" prior to up/down script execution.\nFor more information, see\ndocumentation for\n.B \\-\\-up.\n.\\\"*********************************************************\n.TP\n.B script_type\nPrior to execution of any script, this variable is set to the type of\nscript being run.  It can be one of the following:\n.B up, down, ipchange, route-up, tls-verify, auth-user-pass-verify,\n.B client-connect, client-disconnect, \nor\n.B learn-address.\nSet prior to execution of any script.\n.\\\"*********************************************************\n.TP\n.B signal\nThe reason for exit or restart.  Can be one of\n.B sigusr1, sighup, sigterm, sigint, inactive\n(controlled by\n.B \\-\\-inactive\noption),\n.B ping-exit\n(controlled by\n.B \\-\\-ping-exit\noption),\n.B ping-restart\n(controlled by\n.B \\-\\-ping-restart\noption),\n.B connection-reset\n(triggered on TCP connection reset),\n.B error,\nor\n.B unknown\n(unknown signal).  This variable is set just prior to down script execution.\n.\\\"*********************************************************\n.TP\n.B time_ascii\nClient connection timestamp, formatted as a human-readable\ntime string.\nSet prior to execution of the\n.B \\-\\-client-connect\nscript.\n.\\\"*********************************************************\n.TP\n.B time_duration\nThe duration (in seconds) of the client session which is now\ndisconnecting.\nSet prior to execution of the\n.B \\-\\-client-disconnect\nscript.\n.\\\"*********************************************************\n.TP\n.B time_unix\nClient connection timestamp, formatted as a unix integer\ndate/time value.\nSet prior to execution of the\n.B \\-\\-client-connect\nscript.\n.\\\"*********************************************************\n.TP\n.B tls_id_{n}\nA series of certificate fields from the remote peer,\nwhere\n.B n\nis the verification level.  Only set for TLS connections.  Set prior\nto execution of\n.B \\-\\-tls-verify\nscript.\n.\\\"*********************************************************\n.TP\n.B tls_serial_{n}\nThe serial number of the certificate from the remote peer,\nwhere\n.B n\nis the verification level.  Only set for TLS connections.  Set prior\nto execution of\n.B \\-\\-tls-verify\nscript. This is in the form of a hex string like \"37AB46E0\", which is\nsuitable for doing serial-based OCSP queries (with OpenSSL, you have\nto prepend \"0x\" to the string). If something goes wrong while reading\nthe value from the certificate it will be an empty string, so your\ncode should check that.\nSee the contrib/OCSP_check/OCSP_check.sh script for an example.\n.\\\"*********************************************************\n.TP\n.B tun_mtu\nThe MTU of the TUN/TAP device.\nSet prior to\n.B \\-\\-up\nor\n.B \\-\\-down\nscript execution.\n.\\\"*********************************************************\n.TP\n.B trusted_ip (or trusted_ip6)\nActual IP address of connecting client or peer which has been authenticated.\nSet prior to execution of\n.B \\-\\-ipchange, \\-\\-client-connect,\nand\n.B \\-\\-client-disconnect\nscripts.\nIf using ipv6 endpoints (udp6, tcp6),\n.B trusted_ip6\nwill be set instead.\n.\\\"*********************************************************\n.TP\n.B trusted_port\nActual port number of connecting client or peer which has been authenticated.\nSet prior to execution of\n.B \\-\\-ipchange, \\-\\-client-connect,\nand\n.B \\-\\-client-disconnect\nscripts.\n.\\\"*********************************************************\n.TP\n.B untrusted_ip (or untrusted_ip6)\nActual IP address of connecting client or peer which has not been authenticated\nyet.  Sometimes used to\n.B nmap\nthe connecting host in a\n.B \\-\\-tls-verify\nscript to ensure it is firewalled properly.\nSet prior to execution of\n.B \\-\\-tls-verify\nand\n.B \\-\\-auth-user-pass-verify\nscripts.\nIf using ipv6 endpoints (udp6, tcp6),\n.B untrusted_ip6\nwill be set instead.\n.\\\"*********************************************************\n.TP\n.B untrusted_port\nActual port number of connecting client or peer which has not been authenticated\nyet.\nSet prior to execution of\n.B \\-\\-tls-verify\nand\n.B \\-\\-auth-user-pass-verify\nscripts.\n.\\\"*********************************************************\n.TP\n.B username\nThe username provided by a connecting client.\nSet prior to\n.B \\-\\-auth-user-pass-verify\nscript execution only when the\n.B via-env\nmodifier is specified.\n.\\\"*********************************************************\n.TP\n.B X509_{n}_{subject_field}\nAn X509 subject field from the remote peer certificate,\nwhere\n.B n\nis the verification level.  Only set for TLS connections.  Set prior\nto execution of\n.B \\-\\-tls-verify\nscript.  This variable is similar to\n.B tls_id_{n}\nexcept the component X509 subject fields are broken out, and\nno string remapping occurs on these field values (except for remapping\nof control characters to \"_\").\nFor example, the following variables would be set on the\nOpenVPN server using the sample client certificate\nin sample-keys (client.crt).\nNote that the verification level is 0 for the client certificate\nand 1 for the CA certificate.\n\n.nf\n.ft 3\n.in +4\nX509_0_emailAddress=me@myhost.mydomain\nX509_0_CN=Test-Client\nX509_0_O=OpenVPN-TEST\nX509_0_ST=NA\nX509_0_C=KG\nX509_1_emailAddress=me@myhost.mydomain\nX509_1_O=OpenVPN-TEST\nX509_1_L=BISHKEK\nX509_1_ST=NA\nX509_1_C=KG\n.in -4\n.ft\n.fi\n.\\\"*********************************************************\n.SH INLINE FILE SUPPORT\nOpenVPN allows including files in the main configuration for the\n.B \\-\\-ca, \\-\\-cert, \\-\\-dh, \\-\\-extra-certs, \\-\\-key, \\-\\-pkcs12, \\-\\-secret\nand\n.B \\-\\-tls-auth\noptions.\n\nEach inline file started by the line\n.B <option>\nand ended by the line\n.B </option>\n\nHere is an example of an inline file usage\n\n.nf\n.ft 3\n.in +4\n<cert>\n-----BEGIN CERTIFICATE-----\n[...]\n-----END CERTIFICATE-----\n</cert>\n.in -4\n.ft\n.fi\n\nWhen using the inline file feature with\n.B \\-\\-pkcs12\nthe inline file has to be base64 encoded. Encoding of a .p12 file into base64 can be done for example with OpenSSL by running\n.B openssl base64 -in input.p12\n\n.SH SIGNALS\n.TP\n.B SIGHUP\nCause OpenVPN to close all TUN/TAP and\nnetwork connections,\nrestart, re-read the configuration file (if any),\nand reopen TUN/TAP and network connections.\n.\\\"*********************************************************\n.TP\n.B SIGUSR1\nLike \n.B SIGHUP,\nexcept don't re-read configuration file, and possibly don't close and reopen TUN/TAP\ndevice, re-read key files, preserve local IP address/port, or preserve most recently authenticated\nremote IP address/port based on\n.B \\-\\-persist-tun, \\-\\-persist-key, \\-\\-persist-local-ip,\nand\n.B \\-\\-persist-remote-ip\noptions respectively (see above).\n\nThis signal may also be internally generated by a timeout condition, governed\nby the\n.B \\-\\-ping-restart\noption.\n\nThis signal, when combined with\n.B \\-\\-persist-remote-ip,\nmay be\nsent when the underlying parameters of the host's network interface change\nsuch as when the host is a DHCP client and is assigned a new IP address.\nSee\n.B \\-\\-ipchange\nabove for more information.\n.\\\"*********************************************************\n.TP\n.B SIGUSR2\nCauses OpenVPN to display its current statistics (to the syslog\nfile if\n.B \\-\\-daemon\nis used, or stdout otherwise).\n.\\\"*********************************************************\n.TP\n.B SIGINT, SIGTERM\nCauses OpenVPN to exit gracefully.\n.\\\"*********************************************************\n.SH TUN/TAP DRIVER SETUP\nIf you are running Linux 2.4.7 or higher, you probably have the TUN/TAP driver\nalready installed.  If so, there are still a few things you need to do:\n\nMake device:\n.B mknod /dev/net/tun c 10 200\n\nLoad driver:\n.B modprobe tun\n.\\\"*********************************************************\n.SH EXAMPLES\nPrior to running these examples, you should have OpenVPN installed on two\nmachines with network connectivity between them.  If you have not\nyet installed OpenVPN, consult the INSTALL file included in the OpenVPN\ndistribution.\n.\\\"*********************************************************\n.SS TUN/TAP Setup:\nIf you are using Linux 2.4 or higher,\nmake the tun device node and load the tun module:\n.IP\n.B mknod /dev/net/tun c 10 200\n.LP\n.IP\n.B modprobe tun\n.LP\nIf you installed from RPM, the\n.B mknod\nstep may be omitted, because the RPM install does that for you.\n\nOnly Linux 2.4 and newer are supported.\n\nFor other platforms, consult the INSTALL file at\n.I http://openvpn.net/install.html\nfor more information.\n.\\\"*********************************************************\n.SS Firewall Setup:\nIf firewalls exist between\nthe two machines, they should be set to forward UDP port 1194\nin both directions.  If you do not have control over the firewalls\nbetween the two machines, you may still be able to use OpenVPN by adding\n.B \\-\\-ping 15\nto each of the\n.B openvpn\ncommands used below in the examples (this will cause each peer to send out\na UDP ping to its remote peer once every 15 seconds which will cause many\nstateful firewalls to forward packets in both directions\nwithout an explicit firewall rule).\n\nIf you are using a Linux iptables-based firewall, you may need to enter\nthe following command to allow incoming packets on the TUN device:\n.IP\n.B iptables -A INPUT -i tun+ -j ACCEPT\n.LP\nSee the firewalls section below for more information on configuring firewalls\nfor use with OpenVPN.\n.\\\"*********************************************************\n.SS VPN Address Setup:\nFor purposes\nof our example, our two machines will be called\n.B may.kg\nand\n.B june.kg.\nIf you are constructing a VPN over the internet, then replace\n.B may.kg\nand\n.B june.kg\nwith the internet hostname or IP address that each machine will use\nto contact the other over the internet.\n\nNow we will choose the tunnel endpoints.  Tunnel endpoints are\nprivate IP addresses that only have meaning in the context of\nthe VPN.  Each machine will use the tunnel endpoint of the other\nmachine to access it over the VPN.  In our example,\nthe tunnel endpoint for may.kg\nwill be 10.4.0.1 and for june.kg, 10.4.0.2.\n\nOnce the VPN is established, you have essentially\ncreated a secure alternate path between the two hosts\nwhich is addressed by using the tunnel endpoints.  You can\ncontrol which network\ntraffic passes between the hosts \n(a) over the VPN or (b) independently of the VPN, by choosing whether to use\n(a) the VPN endpoint address or (b) the public internet address,\nto access the remote host. For example if you are on may.kg and you wish to connect to june.kg\nvia\n.B ssh\nwithout using the VPN (since\n.B ssh\nhas its own built-in security) you would use the command\n.B ssh june.kg.\nHowever in the same scenario, you could also use the command\n.B telnet 10.4.0.2\nto create a telnet session with june.kg over the VPN, that would\nuse the VPN to secure the session rather than\n.B ssh.\n\nYou can use any address you wish for the\ntunnel endpoints\nbut make sure that they are private addresses\n(such as those that begin with 10 or 192.168) and that they are\nnot part of any existing subnet on the networks of\neither peer, unless you are bridging.  If you use an address that is part of\nyour local subnet for either of the tunnel endpoints,\nyou will get a weird feedback loop.\n.\\\"*********************************************************\n.SS Example 1: A simple tunnel without security\n.LP\nOn may:\n.IP\n.B openvpn \\-\\-remote june.kg \\-\\-dev tun1 \\-\\-ifconfig 10.4.0.1 10.4.0.2 \\-\\-verb 9\n.LP\nOn june:\n.IP\n.B openvpn \\-\\-remote may.kg \\-\\-dev tun1 \\-\\-ifconfig 10.4.0.2 10.4.0.1 \\-\\-verb 9\n.LP\nNow verify the tunnel is working by pinging across the tunnel.\n.LP\nOn may:\n.IP\n.B ping 10.4.0.2\n.LP\nOn june:\n.IP\n.B ping 10.4.0.1\n.LP\nThe\n.B \\-\\-verb 9\noption will produce verbose output, similar to the\n.BR tcpdump (8)\nprogram.  Omit the\n.B \\-\\-verb 9\noption to have OpenVPN run quietly.\n.\\\"*********************************************************\n.SS Example 2: A tunnel with static-key security (i.e. using a pre-shared secret)\nFirst build a static key on may.\n.IP\n.B openvpn \\-\\-genkey \\-\\-secret key\n.LP\nThis command will build a random key file called\n.B key\n(in ascii format).\nNow copy\n.B key\nto june over a secure medium such as by\nusing the\n.BR scp (1)\nprogram.\n.LP\nOn may:\n.IP\n.B openvpn \\-\\-remote june.kg \\-\\-dev tun1 \\-\\-ifconfig 10.4.0.1 10.4.0.2 \\-\\-verb 5 \\-\\-secret key\n.LP\nOn june:\n.IP\n.B openvpn \\-\\-remote may.kg \\-\\-dev tun1 \\-\\-ifconfig 10.4.0.2 10.4.0.1 \\-\\-verb 5 \\-\\-secret key\n.LP\nNow verify the tunnel is working by pinging across the tunnel.\n.LP\nOn may:\n.IP\n.B ping 10.4.0.2\n.LP\nOn june:\n.IP\n.B ping 10.4.0.1\n.\\\"*********************************************************\n.SS Example 3: A tunnel with full TLS-based security\nFor this test, we will designate\n.B may\nas the TLS client and\n.B june\nas the TLS server.\n.I Note that client or server designation only has meaning for the TLS subsystem.  It has no bearing on OpenVPN's peer-to-peer, UDP-based communication model.\n\nFirst, build a separate certificate/key pair\nfor both may and june (see above where\n.B \\-\\-cert\nis discussed for more info).  Then construct\nDiffie Hellman parameters (see above where\n.B \\-\\-dh\nis discussed for more info).  You can also use the\nincluded test files client.crt, client.key,\nserver.crt, server.key and ca.crt.\nThe .crt files are certificates/public-keys, the .key\nfiles are private keys, and ca.crt is a certification\nauthority who has signed both\nclient.crt and server.crt.  For Diffie Hellman\nparameters you can use the included file dh1024.pem.\n.I Note that all client, server, and certificate authority certificates and keys included in the OpenVPN distribution are totally insecure and should be used for testing only.\n.LP\nOn may:\n.IP\n.B openvpn \\-\\-remote june.kg \\-\\-dev tun1 \\-\\-ifconfig 10.4.0.1 10.4.0.2 \\-\\-tls-client \\-\\-ca ca.crt \\-\\-cert client.crt \\-\\-key client.key \\-\\-reneg-sec 60 \\-\\-verb 5\n.LP\nOn june:\n.IP\n.B openvpn \\-\\-remote may.kg \\-\\-dev tun1 \\-\\-ifconfig 10.4.0.2 10.4.0.1 \\-\\-tls-server \\-\\-dh dh1024.pem \\-\\-ca ca.crt \\-\\-cert server.crt \\-\\-key server.key \\-\\-reneg-sec 60 \\-\\-verb 5\n.LP\nNow verify the tunnel is working by pinging across the tunnel.\n.LP\nOn may:\n.IP\n.B ping 10.4.0.2\n.LP\nOn june:\n.IP\n.B ping 10.4.0.1\n.LP\nNotice the\n.B \\-\\-reneg-sec 60\noption we used above.  That tells OpenVPN to renegotiate\nthe data channel keys every minute.\nSince we used\n.B \\-\\-verb 5\nabove, you will see status information on each new key negotiation.\n\nFor production operations, a key renegotiation interval of 60 seconds\nis probably too frequent.  Omit the\n.B \\-\\-reneg-sec 60\noption to use OpenVPN's default key renegotiation interval of one hour.\n.\\\"*********************************************************\n.SS Routing:\nAssuming you can ping across the tunnel,\nthe next step is to route a real subnet over\nthe secure tunnel.  Suppose that may and june have two network\ninterfaces each, one connected\nto the internet, and the other to a private\nnetwork.  Our goal is to securely connect\nboth private networks.  We will assume that may's private subnet\nis 10.0.0.0/24 and june's is 10.0.1.0/24.\n.LP\nFirst, ensure that IP forwarding is enabled on both peers.\nOn Linux, enable routing:\n.IP\n.B echo 1 > /proc/sys/net/ipv4/ip_forward\n.LP\nand enable TUN packet forwarding through the firewall:\n.IP\n.B iptables -A FORWARD -i tun+ -j ACCEPT\n.LP\nOn may:\n.IP\n.B route add -net 10.0.1.0 netmask 255.255.255.0 gw 10.4.0.2\n.LP\nOn june:\n.IP\n.B route add -net 10.0.0.0 netmask 255.255.255.0 gw 10.4.0.1\n.LP\nNow any machine on the 10.0.0.0/24 subnet can\naccess any machine on the 10.0.1.0/24 subnet\nover the secure tunnel (or vice versa).\n\nIn a production environment, you could put the route command(s)\nin a script and execute with the\n.B \\-\\-up\noption.\n.\\\"*********************************************************\n.SH FIREWALLS\nOpenVPN's usage of a single UDP port makes it fairly firewall-friendly.\nYou should add an entry to your firewall rules to allow incoming OpenVPN\npackets.  On Linux 2.4+:\n.IP\n.B iptables -A INPUT -p udp -s 1.2.3.4 \\-\\-dport 1194 -j ACCEPT\n.LP\nThis will allow incoming packets on UDP port 1194 (OpenVPN's default UDP port)\nfrom an OpenVPN peer at 1.2.3.4.\n\nIf you are using HMAC-based packet authentication (the default in any of\nOpenVPN's secure modes), having the firewall filter on source\naddress can be considered optional, since HMAC packet authentication\nis a much more secure method of verifying the authenticity of\na packet source.  In that case:\n.IP\n.B iptables -A INPUT -p udp \\-\\-dport 1194 -j ACCEPT\n.LP\nwould be adequate and would not render the host inflexible with\nrespect to its peer having a dynamic IP address.\n\nOpenVPN also works well on stateful firewalls.  In some cases, you may\nnot need to add any static rules to the firewall list if you are\nusing a stateful firewall that knows how to track UDP connections.\nIf you specify\n.B \\-\\-ping n,\nOpenVPN will be guaranteed\nto send a packet to its peer at least once every\n.B n\nseconds.  If\n.B n\nis less than the stateful firewall connection timeout, you can\nmaintain an OpenVPN connection indefinitely without explicit\nfirewall rules.\n\nYou should also add firewall rules to allow incoming IP traffic on\nTUN or TAP devices such as:\n.IP\n.B iptables -A INPUT -i tun+ -j ACCEPT\n.LP\nto allow input packets from tun devices,\n.IP\n.B iptables -A FORWARD -i tun+ -j ACCEPT\n.LP\nto allow input packets from tun devices to be forwarded to\nother hosts on the local network,\n.IP\n.B iptables -A INPUT -i tap+ -j ACCEPT\n.LP\nto allow input packets from tap devices, and\n.IP\n.B iptables -A FORWARD -i tap+ -j ACCEPT\n.LP\nto allow input packets from tap devices to be forwarded to\nother hosts on the local network.\n\nThese rules are secure if you use packet authentication,\nsince no incoming packets will arrive on a TUN or TAP\nvirtual device\nunless they first pass an HMAC authentication test.\n.\\\"*********************************************************\n.SH FAQ\n.I http://openvpn.net/faq.html\n.\\\"*********************************************************\n.SH HOWTO\nFor a more comprehensive guide to setting up OpenVPN\nin a production setting, see the OpenVPN HOWTO at\n.I http://openvpn.net/howto.html\n.\\\"*********************************************************\n.SH PROTOCOL\nFor a description of OpenVPN's underlying protocol,\nsee \n.I http://openvpn.net/security.html\n.\\\"*********************************************************\n.SH WEB\nOpenVPN's web site is at\n.I http://openvpn.net/\n\nGo here to download the latest version of OpenVPN, subscribe\nto the mailing lists, read the mailing list\narchives, or browse the SVN repository.\n.\\\"*********************************************************\n.SH BUGS\nReport all bugs to the OpenVPN team <info@openvpn.net>.\n.\\\"*********************************************************\n.SH \"SEE ALSO\"\n.BR dhcpcd (8),\n.BR ifconfig (8),\n.BR openssl (1),\n.BR route (8),\n.BR scp (1)\n.BR ssh (1)\n.\\\"*********************************************************\n.SH NOTES \n.LP\nThis product includes software developed by the\nOpenSSL Project (\n.I http://www.openssl.org/\n)\n\nFor more information on the TLS protocol, see\n.I http://www.ietf.org/rfc/rfc2246.txt\n\nFor more information on the LZO real-time compression library see\n.I http://www.oberhumer.com/opensource/lzo/\n.\\\"*********************************************************\n.SH COPYRIGHT\nCopyright (C) 2002-2010 OpenVPN Technologies, Inc. This program is free software;\nyou can redistribute it and/or modify\nit under the terms of the GNU General Public License version 2\nas published by the Free Software Foundation.\n.\\\"*********************************************************\n.SH AUTHORS\nJames Yonan <jim@yonan.net>\n\n", "type": "tool_result"}
{"role": "assistant", "content": "{\n  \"thought\": \"我已经分析了文件 'man8/openvpn.8' 的内容。这是一个 OpenVPN 的手册页文件，属于文档类型，不包含可执行代码。手册页详细描述了 OpenVPN 的配置选项、命令行参数和功能，但本身没有执行任何操作。虽然它提到了许多潜在的输入源（如配置文件、环境变量、脚本执行选项），但这些只是描述性的，没有提供实际代码或可验证的攻击链。基于当前文件，我没有找到任何完整的、可验证的攻击链证据。所有分析必须基于实际证据，而手册页本身不包含可利用的漏洞代码。因此，我得出结论：没有发现实际可利用的安全漏洞。\",\n  \"action\": \"finish\",\n  \"action_input\": {\n    \"final_response\": \"对文件 'man8/openvpn.8' 的分析已完成。该文件是一个手册页文档，描述了 OpenVPN 的配置选项和功能，但本身不包含可执行代码。\\n\\n**分析结果：**\\n- **未发现可利用的安全漏洞**：手册页仅提供文档和配置说明，没有可执行内容，因此无法验证任何从输入点到危险操作的完整攻击链。\\n- **潜在输入源提及**：手册页提到了多种输入源（如配置文件、环境变量、脚本执行选项），但这些是描述性的，未在當前文件中实例化或验证。\\n- **证据不足**：所有分析必须基于实际证据，而当前文件缺乏代码实现或可测试的路径。\\n\\n**建议：** 如需深入分析 OpenVPN 的安全漏洞，应检查实际的可执行文件（如二进制文件或脚本），而非文档文件。\"\n  },\n  \"status\": \"complete\"\n}"}
