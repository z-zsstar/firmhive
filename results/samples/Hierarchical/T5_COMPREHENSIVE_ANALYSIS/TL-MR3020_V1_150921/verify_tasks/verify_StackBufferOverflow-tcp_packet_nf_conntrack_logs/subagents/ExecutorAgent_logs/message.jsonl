{"role": "system", "content": "\n你是一个固件文件系统静态分析代理。你的任务是基于当前分析焦点（特定目录）进行探索和分析。请专注于当前焦点，当你认为对其分析已完成或无法进一步推进时，继续下一个任务或结束任务。\n\n工作方法：\n\n1.  **理解需求**\n    *   始终关注当前分析对象或特定任务，同时也要参考用户的整体或初始需求。\n    *   仔细理解用户当前想要分析的固件内容和目标。除非你非常确定不符合要求，否则不要遗漏符合用户要求的目录和文件。\n    *   如果用户需求不清楚，根据固件特征选择最佳分析路径，适当分解复杂任务，合理调用分析助手。\n\n2.  **制定分析计划**\n    *   根据固件特征选择最佳分析路径。\n    *   对于复杂任务，将其分解为多个具有明确目标和步骤的子任务，合理调用分析助手和工具。\n    *   根据助手反馈合理调整分析计划，确保计划准确完整。如果助手无法完成任务，重新制定分析计划。如果助手尝试两次后仍无法完成任务，继续分析下一个任务。\n\n3.  **分析期间的问题处理**\n    *   记录分析过程中遇到的技术难点和独特挑战。\n    *   评估问题在实际固件环境中的影响。\n    *   谨慎使用某些工具，避免结果过长导致分析失败，例如 `strings` 工具。\n\n4.  **提交分析结果**\n    *   总结所有分析结果并回答当前任务对应的问题。\n    *   如实报告证据不足或不确定的情况或困难（缺少什么证据，缺少什么信息）。\n\n**核心工作流程：**\n\n1.  **理解需求**\n    *   始终关注具体任务，同时也要参考用户的整体或初始需求。注意，如果任务与当前分析焦点不匹配，你需要停止分析并及时向用户反馈。不要执行跨目录分析。\n    *   仔细理解用户当前想要分析的固件内容和目标。除非你非常确定不符合要求，否则不要遗漏符合用户要求的目录和文件。如果用户需求不清楚，根据固件特征选择最佳分析路径，分解复杂任务，合理调用分析助手。\n\n2.  **理解上下文**：使用工具精确了解你当前的分析焦点和位置。\n\n3.  **委托任务**：需要深入分析时，调用适当的分析助手：\n    *   **探索目录**：使用子目录分析助手或其并行版本切换到指定目录进行分析。\n    *   **分析文件**：使用文件分析助手或其并行版本分析指定文件。\n\n4.  **总结并完成**：完成当前焦点的所有分析任务后，总结你的发现。如果所有任务都已完成，使用 `finish` 动作结束。\n\n*   在 'action' 字段中选择工具或 'finish'，并在 'action_input' 中提供参数或最终响应。\n\n\n当前可用工具：\n- Name: get_context_info\n  Description: 获取当前分析任务的上下文信息，例如正在分析的文件或目录。\n  Parameters (JSON Schema format):\n{\n  \"type\": \"object\",\n  \"properties\": {},\n  \"required\": []\n}\n\n- Name: execute_shell\n  Description: 在当前目录（squashfs-root）中执行只读 shell 命令。\n    **警告：** 此工具严格限制在当前工作目录内。所有文件操作不得引用父目录或任何其他目录。建议使用 `file` 工具在当前目录内进行探索和识别。\n    **注意：** 所有命令都在当前目录中执行。所有路径参数应相对于当前目录。禁止包含 '/' 或 '..' 的路径。\n    支持的命令：file, find, strings, grep, head, tail, readelf, cat, sort, ls。\n    禁止输出重定向（'>'、'>>'）、命令链接和目录更改。\n  Parameters (JSON Schema format):\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"command\": {\n      \"type\": \"string\",\n      \"description\": \"要执行的 shell 命令。命令将在 'squashfs-root' 目录中执行。命令中的所有路径应相对于此目录。\"\n    }\n  },\n  \"required\": [\n    \"command\"\n  ]\n}\n\n- Name: r2_file_target\n  Description: \n    与 Radare2 交互式会话交互以分析指定的二进制文件。注意，此工具会自动为目标分析对象建立并维护 r2 会话。\n\n    主要功能：\n    - 发送 Radare2 命令并获取输出\n    - 会话状态在调用之间保持（对于同一文件）\n    - 支持使用 r2ghidra 插件进行反编译：\n    * 使用 `pdg` 命令反编译函数\n    * 提供类似 C 的伪代码输出\n\n    \n  Parameters (JSON Schema format):\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"file_name\": {\n      \"type\": \"string\",\n      \"description\": \"要分析的文件名称。提供相对于固件根目录的路径，不要以 ./ 开头。\"\n    },\n    \"command\": {\n      \"type\": \"string\",\n      \"description\": \"直接与 Radare2 交互的命令\"\n    }\n  },\n  \"required\": [\n    \"file_name\",\n    \"command\"\n  ]\n}\n\n- Name: DeepFileAnalysisAssistant\n  Description: \n    用于对当前目录范围内指定文件进行深度分析的代理。\n    只能分析当前目录或其子目录（任意深度）中的文件。\n    对于你作用域内的文件，使用简单的相对路径，如 'config.php' 或 'subdir/file.txt'。\n    适用于单个文件的深度分析任务。你可以在观察单步结果后决定下一个分析任务。对于验证任务等有针对性的分析，强烈建议使用此代理。\n    \n  Parameters (JSON Schema format):\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"file_name\": {\n      \"type\": \"string\",\n      \"description\": \"相对于你当前目录的文件路径（例如，'config.php'、'hnap/Login.xml'）。你只能访问当前目录或其子目录中的文件。\"\n    },\n    \"run_in_background\": {\n      \"type\": \"boolean\",\n      \"description\": \"是否在后台运行此任务。\",\n      \"default\": false\n    }\n  },\n  \"required\": [\n    \"file_name\"\n  ],\n  \"description\": \"包含文件分析目标的对象。使用相对于当前工作目录的路径。\"\n}\n\n- Name: DeepDirectoryAnalysisAssistant\n  Description: \n    用于对当前目录范围内指定子目录进行深度分析的代理。\n    只能分析当前目录中的子目录（直接子目录或更深层的嵌套目录）。\n    对于你作用域内的目录，使用简单的相对路径，如 'hnap' 或 'subdir/nested'。\n    适用于单个子目录的深度分析任务。你可以在观察单步结果后决定下一个分析任务。对于验证任务等有针对性的分析，强烈建议使用此代理。\n    \n  Parameters (JSON Schema format):\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"dir_name\": {\n      \"type\": \"string\",\n      \"description\": \"相对于你当前目录的目录路径（例如，'hnap'、'init.d'）。你只能访问当前目录范围内的子目录。\"\n    },\n    \"run_in_background\": {\n      \"type\": \"boolean\",\n      \"description\": \"是否在后台运行此任务。\",\n      \"default\": false\n    }\n  },\n  \"required\": [\n    \"dir_name\"\n  ],\n  \"description\": \"包含目录分析目标的对象。使用相对于当前工作目录的路径。\"\n}\n\n- Name: ParallelDeepFileAnalysisDelegator\n  Description: \n    深度文件分析委托器 - 将当前目录范围内多个文件的分析任务分配给子代理并行处理。\n    只能分析当前目录或其子目录（任意深度）中的文件。\n    对于你作用域内的文件，使用简单的相对路径。\n    适用于同时对多个文件进行深度分析的任务。对于复杂任务或全面分析，强烈建议使用此委托器。\n    \n  Parameters (JSON Schema format):\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"file_names\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\",\n        \"description\": \"相对于你当前目录的文件路径（例如，'config.php'、'hnap/Login.xml'）。你只能访问当前目录或其子目录中的文件。\"\n      },\n      \"description\": \"要并行分析的文件路径列表。使用相对于当前工作目录的路径。\"\n    },\n    \"run_in_background\": {\n      \"type\": \"boolean\",\n      \"description\": \"是否在后台运行此任务。\",\n      \"default\": false\n    }\n  },\n  \"required\": [\n    \"file_names\"\n  ],\n  \"description\": \"包含当前目录范围内文件分析目标列表的对象。\"\n}\n\n- Name: ParallelDeepDirectoryAnalysisDelegator\n  Description: \n    深度目录分析委托器 - 将当前目录范围内多个子目录的分析任务分配给子代理并行处理。\n    只能分析当前目录中的子目录（直接子目录或更深层的嵌套目录）。\n    对于你作用域内的目录，使用简单的相对路径。\n    适用于同时对多个子目录进行深度分析的任务。对于复杂任务或全面分析，强烈建议使用此委托器。\n    \n  Parameters (JSON Schema format):\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"dir_names\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"string\",\n        \"description\": \"相对于你当前目录的目录路径（例如，'hnap'、'init.d'）。你只能访问当前目录范围内的子目录。\"\n      },\n      \"description\": \"要并行分析的目录路径列表。使用相对于当前工作目录的路径。\"\n    },\n    \"run_in_background\": {\n      \"type\": \"boolean\",\n      \"description\": \"是否在后台运行此任务。\",\n      \"default\": false\n    }\n  },\n  \"required\": [\n    \"dir_names\"\n  ],\n  \"description\": \"包含当前目录范围内目录分析目标列表的对象。\"\n}\n\n**后台执行和任务调度**：\n- 在 action_input 中设置 `run_in_background: true` 可异步运行任务。\n- 后台任务完成时，结果会自动注入。\n- 当需要后台结果才能继续时，使用 'wait' 动作。\n\n调度策略（避免遗漏和重复，最大化效率）：\n1. 识别独立任务，如果不立即需要结果，在后台启动它们。\n2. 在后台任务并行运行时继续其他工作。\n3. 当依赖任务需要后台结果时使用 'wait'。\n4. 在脑海中跟踪所有启动的后台任务以避免重复。\n5. 在 'finish' 之前，确保所有后台任务都已完成并整合结果。\n\n响应格式要求：\n\n你必须以严格的 JSON 格式响应。不要在 JSON 对象之外添加任何其他文本。\n不要使用 markdown 格式（如 ```json）。直接输出单个 JSON 对象。\n\n响应必须是符合以下模式的有效 JSON 对象：\n\n{\n  \"type\": \"object\",\n  \"properties\": {\n    \"thought\": {\n      \"type\": \"string\",\n      \"description\": \"在这里逐步思考。分析当前情况、目标、可用工具和对话历史。决定是调用工具还是使用 'finish' 动作提供最终答案。\"\n    },\n    \"action\": {\n      \"type\": \"string\",\n      \"description\": \"选择下一个动作。必须是可用工具名称之一、'wait' 或 'finish'。\"\n    },\n    \"action_input\": {\n      \"oneOf\": [\n        {\n          \"type\": \"object\"\n        },\n        {\n          \"type\": \"string\"\n        }\n      ],\n      \"description\": \"工具调用的参数或最终响应。如果 action 是工具名称，提供该工具所需的参数（通常是对象）；如果是 'finish'，使用 'final_response' 作为 action_input 的键提供最终响应（通常是包含字符串的对象）。\"\n    },\n    \"status\": {\n      \"type\": \"string\",\n      \"enum\": [\n        \"continue\",\n        \"complete\"\n      ],\n      \"description\": \"必须是 'continue'（如果选择了工具）或 'complete'（如果选择了 'finish'）。\"\n    }\n  },\n  \"required\": [\n    \"thought\",\n    \"action\",\n    \"action_input\",\n    \"status\"\n  ]\n}\n\n"}
{"role": "user", "content": "你的唯一任务是严格、客观地验证以下安全警报。你的分析必须完全基于所提供的证据。\n\n**核心原则**：\n1.  **证据驱动**：警报中的所有声明都必须通过分析所提供的证据来验证。严禁猜测或分析无关的信息和文件。\n2.  **逻辑审查**：不要仅仅确认代码的存在；你必须理解其执行逻辑。仔细检查条件语句、数据清理以及决定代码路径是否可达的其他因素。\n3.  **可利用性验证**：通过确认以下内容来验证漏洞是否**实际可利用**：\n    - **输入可控性**：攻击者可以控制污染的输入。\n    - **路径可达性**：在现实条件下可以到达易受攻击的代码路径。\n    - **实际影响**：汇聚操作可能造成实际的安全损害。\n4.  **完整攻击链**：验证从攻击者控制的输入到危险汇聚点的**完整传播路径**，每一步都有证据支持。\n\n**注意**：警报中的函数名可能来自反编译。请仔细搜索；不要仅仅因为它们不在符号表或字符串中就轻易断定它们不存在。\n\n验证以下发现：\n```json\n{\n  \"location\": \"Function: sym.tcp_packet (address: 0x080062fc) in nf_conntrack.ko\",\n  \"description\": \"A stack buffer overflow vulnerability exists in the TCP packet processing function 'sym.tcp_packet'. The attack chain starts from a malicious TCP packet sent over the network, where the TCP options header contains a crafted length field. This length is used to calculate the size for copying options data into a fixed-size stack buffer without proper bounds checking. Specifically, the calculation 'iVar2 = ((*(puVar6 + 0xc) >> 0x1c) + 0x3ffffffb) * 4' can result in a large value that exceeds the buffer 'aiStack_74[11]' (44 bytes). When the copy operation '(*NULL)(param_2, param_3 + 0x14, aiStack_74, iVar2)' is executed, it overflows the stack buffer, potentially overwriting return addresses or other critical data. The trigger condition is receiving a TCP packet with TCP options length set to a value that causes iVar2 to be greater than 44 bytes. This is exploitable because it allows control over kernel stack memory, leading to arbitrary code execution or denial-of-service.\",\n  \"code_snippet\": \"iVar2 = ((*(puVar6 + 0xc) >> 0x1c) + 0x3ffffffb) * 4;\\nif (iVar2 != 0) {\\n    if (iVar2 <= (*(param_2 + 0x50) - *(param_2 + 0x54)) - (param_3 + 0x14)) {\\n        halt_baddata();\\n    }\\n    iVar3 = (*NULL)(param_2, param_3 + 0x14, aiStack_74, iVar2);\\n    piVar4 = NULL;\\n    if (-1 < iVar3) {\\n        piVar4 = aiStack_74;\\n    }\\n    if (piVar4 == NULL) {\\n        trap(0x200);\\n    }\\n    // ... further processing ...\\n}\",\n  \"risk_score\": 9.0,\n  \"file_path\": \"lib/modules/2.6.31/kernel/nf_conntrack.ko\"\n}\n```\n**要求**：\n1.  **专注验证**：你的所有操作都必须围绕验证此发现进行。\n2.  **证据支持**：你的结论必须基于工具返回的实际证据。\n3.  **不做无关分析**：不要探索此发现之外的任何其他潜在问题。\n\n\n**提供结论**：在分析结束时，`final_response` 必须是包含以下字段的 JSON 对象：\n    - `accuracy`: (字符串) 对警报描述准确性的评估。必须是 'accurate'（准确）、'inaccurate'（不准确）或 'partially'（部分准确）。\n    - `vulnerability`: (布尔值) 判断该描述是否足以构成真实漏洞。必须是 True 或 False。前提条件是攻击者是已连接到设备并拥有有效登录凭据的用户。\n    - `risk_level`: (字符串) 如果 `vulnerability` 为 `true`，则为漏洞的风险级别。必须是 'Low'（低）、'Medium'（中）或 'High'（高）。\n    - `reason`: (字符串) 对你判断的详细解释，必须支持以上所有结论。对于确认为真实漏洞的发现，此字段还必须提供可重现的攻击载荷或概念验证（PoC）步骤，清楚地描述如何利用该漏洞。\n"}
{"role": "assistant", "content": "{\n  \"thought\": \"我需要验证关于 nf_conntrack.ko 内核模块中 sym.tcp_packet 函数的栈缓冲区溢出漏洞警报。首先，我将获取当前上下文信息以了解分析焦点，然后检查目标文件是否存在。如果文件存在，我将使用 Radare2 分析 sym.tcp_packet 函数，验证代码片段中的计算逻辑、边界检查缺失以及溢出条件。最后，基于证据评估漏洞的准确性、可利用性和风险级别。\",\n  \"action\": \"get_context_info\",\n  \"action_input\": {},\n  \"status\": \"continue\"\n}"}
{"role": "user", "content": "工具：get_context_info\n参数：{}\n结果：\n 当前分析焦点：\n- 文件：未指定\n- 目录：squashfs-root\n- 相对于固件根目录的目录路径：.", "type": "tool_result"}
{"role": "assistant", "content": "{\n  \"thought\": \"我需要验证 nf_conntrack.ko 文件中 sym.tcp_packet 函数的栈缓冲区溢出漏洞。首先，检查目标文件是否存在。如果存在，我将使用 Radare2 分析该函数，验证代码片段中的计算逻辑、边界检查缺失以及溢出条件。基于证据评估漏洞的准确性、可利用性和风险级别。\",\n  \"action\": \"execute_shell\",\n  \"action_input\": {\n    \"command\": \"file lib/modules/2.6.31/kernel/nf_conntrack.ko\"\n  },\n  \"status\": \"continue\"\n}"}
{"role": "user", "content": "工具：execute_shell\n参数：{\"command\": \"file lib/modules/2.6.31/kernel/nf_conntrack.ko\"}\n结果：\n 退出代码：0\n标准输出：\nlib/modules/2.6.31/kernel/nf_conntrack.ko: ELF 32-bit MSB relocatable, MIPS, MIPS32 rel2 version 1 (SYSV), BuildID[sha1]=363101012ae1fe8127f83fe39c3213e55e71d255, not stripped\n\n", "type": "tool_result"}
{"role": "assistant", "content": "{\n  \"thought\": \"我已经确认 nf_conntrack.ko 文件存在。现在需要使用 Radare2 分析 sym.tcp_packet 函数，验证警报中描述的栈缓冲区溢出漏洞。我将加载文件并反汇编该函数，检查代码片段中的计算逻辑、边界检查缺失以及溢出条件。基于证据评估漏洞的准确性、可利用性和风险级别。\",\n  \"action\": \"r2_file_target\",\n  \"action_input\": {\n    \"file_name\": \"lib/modules/2.6.31/kernel/nf_conntrack.ko\",\n    \"command\": \"aaa; pdf @ sym.tcp_packet\"\n  },\n  \"status\": \"continue\"\n}"}
{"role": "user", "content": "工具：r2_file_target\n参数：{\"file_name\": \"lib/modules/2.6.31/kernel/nf_conntrack.ko\", \"command\": \"aaa; pdf @ sym.tcp_packet\"}\n结果：\n ┌ 2980: sym.tcp_packet (int32_t arg1, int32_t arg2, int32_t arg3, int32_t arg4, int32_t arg_ach, int32_t arg_b0h, int32_t arg_b4h, int32_t arg_bbh, int32_t arg_80h, int32_t arg_84h, int32_t arg_88h, int32_t arg_8ch, int32_t arg_90h, int32_t arg_94h, int32_t arg_98h, int32_t arg_9ch, int32_t arg_a0h, int32_t arg_a4h);\n│ `- args(a0, a1, a2, a3, sp[0x4..0xa4]) vars(32:sp[0x4..0x98])\n│ ╎╎╎╎╎╎╎   0x080062fc      27bdff58       addiu sp, sp, -0xa8\n│ ╎╎╎╎╎╎╎   0x08006300      afb3008c       sw s3, (var_8ch)\n│ ╎╎╎╎╎╎╎   0x08006304      afbf00a4       sw ra, (var_a4h)\n│ ╎╎╎╎╎╎╎   0x08006308      afbe00a0       sw fp, (var_a0h)\n│ ╎╎╎╎╎╎╎   0x0800630c      afb7009c       sw s7, (var_9ch)\n│ ╎╎╎╎╎╎╎   0x08006310      afb60098       sw s6, (var_98h)\n│ ╎╎╎╎╎╎╎   0x08006314      afb50094       sw s5, (var_94h)\n│ ╎╎╎╎╎╎╎   0x08006318      afb40090       sw s4, (var_90h)\n│ ╎╎╎╎╎╎╎   0x0800631c      afb20088       sw s2, (var_88h)\n│ ╎╎╎╎╎╎╎   0x08006320      afb10084       sw s1, (var_84h)\n│ ╎╎╎╎╎╎╎   0x08006324      afb00080       sw s0, (var_80h)\n│ ╎╎╎╎╎╎╎   0x08006328      afa500ac       sw a1, (arg_ach)\n│ ╎╎╎╎╎╎╎   0x0800632c      8ca30054       lw v1, 0x54(a1)             ; arg2\n│ ╎╎╎╎╎╎╎   0x08006330      8ca20050       lw v0, 0x50(a1)             ; arg2\n│ ╎╎╎╎╎╎╎   0x08006334      00809821       move s3, a0\n│ ╎╎╎╎╎╎╎   0x08006338      afa600b0       sw a2, (arg_b0h)\n│ ╎╎╎╎╎╎╎   0x0800633c      00431023       subu v0, v0, v1\n│ ╎╎╎╎╎╎╎   0x08006340      93a300bb       lbu v1, (arg_bbh)\n│ ╎╎╎╎╎╎╎   0x08006344      00461023       subu v0, v0, a2             ; arg3\n│ ╎╎╎╎╎╎╎   0x08006348      28420014       slti v0, v0, 0x14\n│ ╎╎╎╎╎╎╎   0x0800634c      afa700b4       sw a3, (arg_b4h)\n│ ────────< 0x08006350      14400004       bnez v0, 0x8006364\n│ ╎╎╎╎╎╎╎   0x08006354      afa3007c       sw v1, (var_7ch)\n│ ╎╎╎╎╎╎╎   0x08006358      8ca200a0       lw v0, 0xa0(a1)             ; arg2\n│ ╎╎╎╎╎╎└─< 0x0800635c      080018c8       j .text                     ; RELOC 32 .text @ 0x08000070\n│ ╎╎╎╎╎╎    0x08006360      0046b021       addu s6, v0, a2             ; arg3\n│ ╎╎╎╎╎╎    ; CODE XREF from sym.tcp_packet @ 0x8006350(x)\n│ ────────> 0x08006364      8fa400ac       lw a0, (arg_ach)\n│ ╎╎╎╎╎╎    0x08006368      8fa500b0       lw a1, (arg_b0h)\n│ ╎╎╎╎╎╎    0x0800636c      27b00020       addiu s0, sp, 0x20\n│ ╎╎╎╎╎╎    0x08006370      3c020000       lui vskb_copy_bits, 0       ; RELOC 32 skb_copy_bits\n│ ╎╎╎╎╎╎    0x08006374      02003021       move a2, s0\n│ ╎╎╎╎╎╎    0x08006378      24420000       addiu v0, v0, 0             ; RELOC 32 skb_copy_bits\n│ ╎╎╎╎╎╎    0x0800637c      0040f809       jalr v0\n│ ╎╎╎╎╎╎    0x08006380      24070014       addiu a3, zero, 0x14        ; arg4\n│ ╎╎╎╎╎╎    ; DATA XREF from sym.tcp_packet @ 0x800637c(r)\n│ ╎╎╎╎╎╎    0x08006384     .string \"_B\" ; len=2\n│ ╎╎╎╎╎╎    0x08006386      0000           unaligned\n│ ╎╎╎╎╎╎    0x08006388      0000b021       move s6, zero\n│ ╎╎╎╎╎╎    0x0800638c      0202b00a       movz s6, s0, v0\n│ ╎╎╎╎╎╎    0x08006390      2ec20001       sltiu v0, s6, 1\n│ ╎╎╎╎╎╎    0x08006394      00028036       tne zero, v0, 0x200\n│ ╎╎╎╎╎╎    0x08006398      3c020000       lui vlocal_bh_disable, 0    ; RELOC 32 local_bh_disable\n│ ╎╎╎╎╎╎    ;-- reloc.local_bh_disable:\n│ ╎╎╎╎╎╎    0x0800639c      24420000       addiu v0, v0, 0             ; RELOC 32 local_bh_disable\n│ ╎╎╎╎╎╎    0x080063a0      0040f809       jalr v0\n│ ╎╎╎╎╎╎    0x080063a4      00000000       nop\n│ ╎╎╎╎╎╎    0x080063a8      8fa400b4       lw a0, (arg_b4h)\n│ ╎╎╎╎╎╎    0x080063ac      8ed7000c       lw s7, (var_ch)\n│ ╎╎╎╎╎╎    0x080063b0      926500b0       lbu a1, 0xb0(s3)\n│ ╎╎╎╎╎╎    0x080063b4      2c820003       sltiu v0, a0, 3             ; arg1\n│ ╎╎╎╎╎╎    0x080063b8      38540001       xori s4, v0, 1\n│ ╎╎╎╎╎╎    0x080063bc      24060004       addiu a2, zero, 4           ; arg3\n│ ╎╎╎╎╎╎    0x080063c0      7ee20480       ext v0, s7, 0x12, 1\n│ ╎╎╎╎╎╎    0x080063c4      afa50074       sw a1, (var_74h)\n│ ╎╎╎╎╎╎┌─< 0x080063c8      1440000f       bnez v0, 0x8006408\n│ ╎╎╎╎╎╎│   0x080063cc      afa60070       sw a2, (var_70h)\n│ ╎╎╎╎╎╎│   0x080063d0      7ee30500       ext v1, s7, 0x14, 1\n│ ╎╎╎╎╎╎│   0x080063d4      7ee20440       ext v0, s7, 0x11, 1\n│ ────────< 0x080063d8      1440000b       bnez v0, 0x8006408\n│ ╎╎╎╎╎╎│   0x080063dc      afa30070       sw v1, (var_70h)\n│ ╎╎╎╎╎╎│   0x080063e0      24040002       addiu a0, zero, 2           ; arg1\n│ ╎╎╎╎╎╎│   0x080063e4      7ee20400       ext v0, s7, 0x10, 1\n│ ────────< 0x080063e8      14400007       bnez v0, 0x8006408\n│ ╎╎╎╎╎╎│   0x080063ec      afa40070       sw a0, (var_70h)\n│ ╎╎╎╎╎╎│   0x080063f0      3c020010       lui v0, 0x10\n│ ╎╎╎╎╎╎│   0x080063f4      02e21024       and v0, s7, v0\n│ ╎╎╎╎╎╎│   0x080063f8      24050005       addiu a1, zero, 5           ; arg2\n│ ╎╎╎╎╎╎│   0x080063fc      24030003       addiu v1, zero, 3\n│ ╎╎╎╎╎╎│   0x08006400      0062280b       movn a1, v1, v0\n│ ╎╎╎╎╎╎│   0x08006404      afa50070       sw a1, (var_70h)\n│ ╎╎╎╎╎╎│   ; CODE XREFS from sym.tcp_packet @ 0x80063c8(x), 0x80063d8(x), 0x80063e8(x)\n│ ──────└─> 0x08006408      8fa20070       lw v0, (var_70h)\n│ ╎╎╎╎╎╎    0x0800640c      2404000a       addiu a0, zero, 0xa         ; arg1\n│ ╎╎╎╎╎╎    0x08006410      3c030000       lui v1, .rodata             ; RELOC 32 .rodata @ 0x08007b70\n│ ╎╎╎╎╎╎    0x08006414      00440018       mult v0, a0\n│ ╎╎╎╎╎╎    0x08006418      2402003c       addiu v0, zero, 0x3c\n│ ╎╎╎╎╎╎    0x0800641c      8fa50074       lw a1, (var_74h)\n│ ╎╎╎╎╎╎    0x08006420      24630210       addiu v1, v1, 0x210         ; RELOC 32 .rodata @ 0x08007b70\n│ ╎╎╎╎╎╎    0x08006424      72820000       madd s4, v0\n│ ╎╎╎╎╎╎    0x08006428      00001012       mflo v0\n│ ╎╎╎╎╎╎    0x0800642c      00431021       addu v0, v0, v1\n│ ╎╎╎╎╎╎    0x08006430      00451021       addu v0, v0, a1             ; arg2\n│ ╎╎╎╎╎╎    0x08006434      90420000       lbu v0, (v0)\n│ ╎╎╎╎╎╎    0x08006438      afa20078       sw v0, (var_78h)\n│ ╎╎╎╎╎╎    0x0800643c      8fa60078       lw a2, (var_78h)\n│ ╎╎╎╎╎╎    0x08006440      24020008       addiu v0, zero, 8\n│ ╎╎╎╎╎╎┌─< 0x08006444      10c200b2       beq a2, v0, 0x8006710\n│ ╎╎╎╎╎╎│   0x08006448      2cc20009       sltiu v0, a2, 9             ; arg3\n│ ────────< 0x0800644c      10400006       beqz v0, 0x8006468\n│ ╎╎╎╎╎╎│   0x08006450      8fa20078       lw v0, (var_78h)\n│ ╎╎╎╎╎╎│   0x08006454      24020001       addiu v0, zero, 1\n│ ────────< 0x08006458      14c200ee       bne a2, v0, 0x8006814\n│ ╎╎╎╎╎╎│   0x0800645c      24020014       addiu v0, zero, 0x14\n│ ╎╎╎╎╎└──< 0x08006460      08001905       j .text                     ; RELOC 32 .text @ 0x08000070\n│ ╎╎╎╎╎ │   0x08006464      8fa40074       lw a0, (var_74h)\n│ ╎╎╎╎╎ │   ; CODE XREF from sym.tcp_packet @ 0x800644c(x)\n│ ─────┌──< 0x08006468      10440091       beq v0, a0, local_bh_enable\n│ ╎╎╎╎╎││   0x0800646c      8fa30078       lw v1, (var_78h)\n│ ╎╎╎╎╎││   0x08006470      2402000b       addiu v0, zero, 0xb\n│ ────────< 0x08006474      146200e7       bne v1, v0, 0x8006814\n│ ╎╎╎╎╎││   0x08006478      24020014       addiu v0, zero, 0x14\n│ ╎╎╎╎└───< 0x0800647c      0800192b       j .text                     ; RELOC 32 .text @ 0x08000070\n│ ╎╎╎╎ ││   0x08006480      8fa30070       lw v1, (var_70h)\n..\n  ╎╎╎╎│││   ; CODE XREF from reloc.local_bh_disable @ +0x120(x)\n  ╎╎╎╎│││   ; CODE XREFS from reloc.local_bh_disable @ +0x12c(x), +0x13c(x)\n  ╎╎╎╎│││   ; CODE XREF from reloc.local_bh_disable @ +0x1d0(x)\n  ╎╎╎╎│││   ;-- reloc._LC6:\n  ╎╎╎╎│││   ; CODE XREFS from reloc.local_bh_disable @ +0x1d8(x), +0x1f0(x)\n  ╎╎╎╎│││   ; CODE XREF from reloc.local_bh_disable @ +0x184(x)\n  ╎╎╎╎│││   ; CODE XREFS from reloc.local_bh_disable @ +0x190(x), +0x19c(x), +0x1ac(x)\n  ╎╎╎╎│││   ; CODE XREF from reloc._LC6 @ +0xb8(x)\n  ╎╎╎╎│││   ;-- reloc._LC7:\n│ ╎╎╎╎│││   ; CODE XREF from sym.tcp_packet @ 0x8006468(x)\n│ ╎╎╎╎│└──> 0x080066b0      3c020000       lui vlocal_bh_enable, 0     ; RELOC 32 local_bh_enable\n│ ╎╎╎╎│ │   0x080066b4      24420000       addiu v0, v0, 0             ; RELOC 32 local_bh_enable\n│ ╎╎╎╎│ │   0x080066b8      0040f809       jalr v0\n│ ╎╎╎╎│ │   0x080066bc      00000000       nop\n│ ╎╎╎╎│ │   0x080066c0      3c020000       lui vinit_net, 0            ; RELOC 32 init_net\n│ ╎╎╎╎│ │   0x080066c4      8c4301e4       lw v1, 0x1e4(v0)            ; RELOC 32 init_net\n│ ╎╎╎╎│ │   0x080066c8      24020006       addiu v0, zero, 6\n│ ╎╎╎╎│┌──< 0x080066cc      10620003       beq v1, v0, net_ratelimit\n│ ╎╎╎╎│││   0x080066d0      240200ff       addiu v0, zero, 0xff\n│ ────────< 0x080066d4      1462026a       bne v1, v0, 0x8007080\n│ ╎╎╎╎│││   0x080066d8      2402ffff       addiu v0, zero, -1\n│ ╎╎╎╎│││   ; CODE XREF from sym.tcp_packet @ 0x80066cc(x)\n│ ╎╎╎╎│└──> 0x080066dc      3c020000       lui vnet_ratelimit, 0       ; RELOC 32 net_ratelimit\n│ ╎╎╎╎│ │   0x080066e0      24420000       addiu v0, v0, 0             ; RELOC 32 net_ratelimit\n│ ╎╎╎╎│ │   0x080066e4      0040f809       jalr v0\n│ ╎╎╎╎│ │   0x080066e8      00000000       nop\n│ ╎╎╎╎│┌──< 0x080066ec      50400264       beql v0, zero, 0x8007080\n│ ╎╎╎╎│││   0x080066f0      2402ffff       addiu v0, zero, -1\n│ ╎╎╎╎│││   0x080066f4      3c020000       lui v$LC8, 0                ; RELOC 32 $LC8 @ 0x0800833c\n│ ╎╎╎╎│││   0x080066f8      8fa4007c       lw a0, (var_7ch)\n│ ╎╎╎╎│││   0x080066fc      8fa600ac       lw a2, (arg_ach)\n│ ╎╎╎╎│││   0x08006700      00002821       move a1, zero\n│ ╎╎╎╎│││   0x08006704      00003821       move a3, zero\n│ ╎╎╎└────< 0x08006708      080019ce       j .text                     ; RELOC 32 .text @ 0x08000070\n│ ╎╎╎ │││   ;-- reloc._LC8:\n│ ╎╎╎ │││   0x0800670c      24420000       addiu v0, v0, 0             ; RELOC 32 $LC8 @ 0x0800833c\n│ ╎╎╎ │││   ; CODE XREF from sym.tcp_packet @ 0x8006444(x)\n│ ╎╎╎ ││└─> 0x08006710      8fa30070       lw v1, (var_70h)\n│ ╎╎╎ ││    0x08006714      24020004       addiu v0, zero, 4\n│ ╎╎╎ ││┌─< 0x08006718      1462003e       bne v1, v0, 0x8006814\n│ ╎╎╎ │││   0x0800671c      24020014       addiu v0, zero, 0x14\n│ ╎╎╎ │││   0x08006720      2e830001       sltiu v1, s4, 1\n│ ╎╎╎ │││   0x08006724      70622002       mul a0, v1, v0\n│ ╎╎╎ │││   0x08006728      00931821       addu v1, a0, s3             ; arg1\n│ ╎╎╎ │││   0x0800672c      90620099       lbu v0, 0x99(v1)\n│ ╎╎╎ │││   0x08006730      30420020       andi v0, v0, 0x20\n│ ╎╎╎┌────< 0x08006734      10400024       beqz v0, 0x80067c8\n│ ╎╎╎││││   0x08006738      00000000       nop\n│ ╎╎╎││││   0x0800673c      8c630094       lw v1, 0x94(v1)\n│ ╎╎╎││││   0x08006740      8ec20004       lw v0, (var_4h)\n│ ╎╎╎││││   0x08006744      00431023       subu v0, v0, v1\n│ ────────< 0x08006748      0441001f       bgez v0, 0x80067c8\n│ ╎╎╎││││   0x0800674c      3c020000       lui vlocal_bh_enable, 0     ; RELOC 32 local_bh_enable\n│ ╎╎╎││││   0x08006750      24420000       addiu v0, v0, 0             ; RELOC 32 local_bh_enable\n│ ╎╎╎││││   0x08006754      0040f809       jalr v0\n│ ╎╎╎││││   0x08006758      00000000       nop\n│ ╎╎╎││││   0x0800675c      3c020000       lui vinit_net, 0            ; RELOC 32 init_net\n│ ╎╎╎││││   0x08006760      8c4301e4       lw v1, 0x1e4(v0)            ; RELOC 32 init_net\n│ ╎╎╎││││   0x08006764      24020006       addiu v0, zero, 6\n│ ────────< 0x08006768      10620003       beq v1, v0, net_ratelimit\n│ ╎╎╎││││   0x0800676c      240200ff       addiu v0, zero, 0xff\n│ ────────< 0x08006770      14620243       bne v1, v0, 0x8007080\n│ ╎╎╎││││   0x08006774      2402ffff       addiu v0, zero, -1\n│ ╎╎╎││││   ; CODE XREF from sym.tcp_packet @ 0x8006768(x)\n│ ────────> 0x08006778      3c020000       lui vnet_ratelimit, 0       ; RELOC 32 net_ratelimit\n│ ╎╎╎││││   0x0800677c      24420000       addiu v0, v0, 0             ; RELOC 32 net_ratelimit\n│ ╎╎╎││││   0x08006780      0040f809       jalr v0\n│ ╎╎╎││││   0x08006784      00000000       nop\n│ ────────< 0x08006788      5040023d       beql v0, zero, 0x8007080\n│ ╎╎╎││││   0x0800678c      2402ffff       addiu v0, zero, -1\n│ ╎╎╎││││   0x08006790      8fa4007c       lw a0, (var_7ch)\n│ ╎╎╎││││   0x08006794      8fa600ac       lw a2, (arg_ach)\n│ ╎╎╎││││   0x08006798      3c020000       lui v$LC9, 0                ; RELOC 32 $LC9 @ 0x08008358\n│ ╎╎╎││││   0x0800679c      00002821       move a1, zero\n│ ╎╎╎││││   0x080067a0      00003821       move a3, zero\n│ ╎╎╎││││   ;-- reloc._LC9:\n│ ╎╎╎││││   0x080067a4      24420000       addiu v0, v0, 0             ; RELOC 32 $LC9 @ 0x08008358\n│ ╎╎╎││││   0x080067a8      afa20018       sw v0, (var_18h)\n│ ╎╎╎││││   0x080067ac      3c020000       lui vnf_log_packet, 0       ; RELOC 32 nf_log_packet\n│ ╎╎╎││││   0x080067b0      afa00010       sw zero, (var_10h)\n│ ╎╎╎││││   0x080067b4      24420000       addiu v0, v0, 0             ; RELOC 32 nf_log_packet\n│ ╎╎╎││││   0x080067b8      0040f809       jalr v0\n│ ╎╎╎││││   0x080067bc      afa00014       sw zero, (var_14h)\n│ ────────< 0x080067c0      08001c04       j .text                     ; RELOC 32 .text @ 0x08000070\n│ ╎╎╎││││   0x080067c4      2402ffff       addiu v0, zero, -1\n│ ╎╎╎││││   ; CODE XREFS from sym.tcp_packet @ 0x8006734(x), 0x8006748(x)\n│ ───└────> 0x080067c8      8e620064       lw v0, 0x64(s3)\n│ ╎╎╎ │││   0x080067cc      30420002       andi v0, v0, 2\n│ ╎╎╎┌────< 0x080067d0      10400004       beqz v0, 0x80067e4\n│ ╎╎╎││││   0x080067d4      00000000       nop\n│ ╎╎╎││││   0x080067d8      926200b3       lbu v0, 0xb3(s3)\n│ ────────< 0x080067dc      5040000a       beql v0, zero, 0x8006808\n│ ╎╎╎││││   0x080067e0      8ec30008       lw v1, (var_8h)\n│ ╎╎╎││││   ; CODE XREF from sym.tcp_packet @ 0x80067d0(x)\n│ ╎╎╎└────> 0x080067e4      8e620064       lw v0, 0x64(s3)\n│ ╎╎╎ │││   0x080067e8      30420004       andi v0, v0, 4\n│ ╎╎╎┌────< 0x080067ec      14400009       bnez v0, 0x8006814\n│ ╎╎╎││││   0x080067f0      24020014       addiu v0, zero, 0x14\n│ ╎╎╎││││   0x080067f4      926300b3       lbu v1, 0xb3(s3)\n│ ╎╎╎││││   0x080067f8      24020003       addiu v0, zero, 3\n│ ────────< 0x080067fc      14620005       bne v1, v0, 0x8006814\n│ ╎╎╎││││   0x08006800      24020014       addiu v0, zero, 0x14\n│ ╎╎╎││││   0x08006804      8ec30008       lw v1, (var_8h)\n│ ╎╎╎││││   ; CODE XREF from sym.tcp_packet @ 0x80067dc(x)\n│ ────────> 0x08006808      8e6200bc       lw v0, 0xbc(s3)\n│ ────────< 0x0800680c      106201b1       beq v1, v0, 0x8006ed4\n│ ╎╎╎││││   0x08006810      24020014       addiu v0, zero, 0x14\n│ ╎╎╎││││   ; XREFS: CODE 0x08006458  CODE 0x08006474  CODE 0x08006488  \n│ ╎╎╎││││   ; XREFS: CODE 0x08006718  CODE 0x080067ec  CODE 0x080067fc  \n│ ───└└─└─> 0x08006814      0014100b       movn v0, zero, s4\n│ ╎╎╎  │    0x08006818      26630088       addiu v1, s3, 0x88\n│ ╎╎╎  │    0x0800681c      0062a821       addu s5, v1, v0\n│ ╎╎╎  │    0x08006820      8ec3000c       lw v1, (var_ch)\n│ ╎╎╎  │    0x08006824      8ec50004       lw a1, (var_4h)\n│ ╎╎╎  │    0x08006828      92a20011       lbu v0, 0x11(s5)\n│ ╎╎╎  │    0x0800682c      00031f02       srl v1, v1, 0x1c\n│ ╎╎╎  │    0x08006830      afa3006c       sw v1, (var_6ch)\n│ ╎╎╎  │    0x08006834      afa50060       sw a1, (var_60h)\n│ ╎╎╎  │    0x08006838      96c6000e       lhu a2, 0xe(s6)\n│ ╎╎╎  │    0x0800683c      8fa300ac       lw v1, (arg_ach)\n│ ╎╎╎  │    0x08006840      8ede0008       lw fp, (var_8h)\n│ ╎╎╎  │    0x08006844      afa60064       sw a2, (var_64h)\n│ ╎╎╎  │    0x08006848      8c630050       lw v1, 0x50(v1)\n│ ╎╎╎  │    0x0800684c      30420002       andi v0, v0, 2\n│ ╎╎╎  │┌─< 0x08006850      10400054       beqz v0, 0x80069a4\n│ ╎╎╎  ││   0x08006854      afa30068       sw v1, (var_68h)\n│ ╎╎╎  ││   0x08006858      8fa4006c       lw a0, (var_6ch)\n│ ╎╎╎  ││   0x0800685c      3c023fff       lui v0, 0x3fff\n│ ╎╎╎  ││   0x08006860      3442fffb       ori v0, v0, 0xfffb\n│ ╎╎╎  ││   0x08006864      00821021       addu v0, a0, v0             ; arg1\n│ ╎╎╎  ││   0x08006868      00028880       sll s1, v0, 2\n│ ╎╎╎ ┌───< 0x0800686c      1220004e       beqz s1, 0x80069a8\n│ ╎╎╎ │││   0x08006870      03c09021       move s2, fp\n│ ╎╎╎ │││   0x08006874      8fa500ac       lw a1, (arg_ach)\n│ ╎╎╎ │││   0x08006878      8fa600b0       lw a2, (arg_b0h)\n│ ╎╎╎ │││   0x0800687c      8ca20054       lw v0, 0x54(a1)             ; arg2\n│ ╎╎╎ │││   0x08006880      24c50014       addiu a1, a2, 0x14          ; arg3\n│ ╎╎╎ │││   0x08006884      00621023       subu v0, v1, v0\n│ ╎╎╎ │││   0x08006888      00451023       subu v0, v0, a1             ; arg2\n│ ╎╎╎ │││   0x0800688c      0051102a       slt v0, v0, s1\n│ ╎╎╎┌────< 0x08006890      14400004       bnez v0, 0x80068a4\n│ ╎╎╎││││   0x08006894      8fa300ac       lw v1, (arg_ach)\n│ ╎╎╎││││   0x08006898      8c6200a0       lw v0, 0xa0(v1)\n│ ╎╎└─────< 0x0800689c      08001a17       j .text                     ; RELOC 32 .text @ 0x08000070\n│ ╎╎ ││││   0x080068a0      00451821       addu v1, v0, a1             ; arg2\n│ ╎╎ ││││   ; CODE XREF from sym.tcp_packet @ 0x8006890(x)\n│ ╎╎ └────> 0x080068a4      8fa400ac       lw a0, (arg_ach)\n│ ╎╎  │││   0x080068a8      27b00034       addiu s0, sp, 0x34\n│ ╎╎  │││   0x080068ac      3c020000       lui vskb_copy_bits, 0       ; RELOC 32 skb_copy_bits\n│ ╎╎  │││   0x080068b0      02003021       move a2, s0\n│ ╎╎  │││   0x080068b4      24420000       addiu v0, v0, 0             ; RELOC 32 skb_copy_bits\n│ ╎╎  │││   0x080068b8      0040f809       jalr v0\n│ ╎╎  │││   0x080068bc      02203821       move a3, s1\n│ ╎╎  │││   ; DATA XREF from sym.tcp_packet @ 0x80068b8(r)\n│ ╎╎  │││   0x080068c0     .string \"_B\" ; len=2\n│ ╎╎  │││   0x080068c2      0000           unaligned\n│ ╎╎  │││   0x080068c4      00001821       move v1, zero\n│ ╎╎  │││   0x080068c8      0202180a       movz v1, s0, v0\n│ ╎╎  │││   0x080068cc      00602021       move a0, v1\n│ ╎╎  │││   0x080068d0      2c620001       sltiu v0, v1, 1\n│ ╎╎  │││   0x080068d4      00028036       tne zero, v0, 0x200\n│ ╎╎  │││   0x080068d8      24020030       addiu v0, zero, 0x30\n│ ╎╎ ┌────< 0x080068dc      1622002e       bne s1, v0, str._           ; 0x8006998 ; \"$\\t\"\n│ ╎╎ ││││   0x080068e0      240a0001       addiu t2, zero, 1\n│ ╎╎ ││││   0x080068e4      8c630000       lw v1, (v1)\n│ ╎╎ ││││   0x080068e8      3c020101       lui v0, 0x101\n│ ╎╎ ││││   0x080068ec      3442080a       ori v0, v0, 0x80a\n│ ╎╎┌─────< 0x080068f0      5462002a       bnel v1, v0, 0x800699c\n│ ╎╎│││││   0x080068f4      24090005       addiu t1, zero, 5\n│ ────────< 0x080068f8      08001a4e       j .text                     ; RELOC 32 .text @ 0x08000070\n│ ╎╎│││││   0x080068fc      03c09021       move s2, fp\n│ ╎╎│││││   ; CODE XREF from sym.tcp_packet @ 0x800699c(x)\n│ ────────< 0x08006900      10c00028       beqz a2, 0x80069a4\n│ ╎╎│││││   0x08006904      24840001       addiu a0, a0, 1             ; arg1\n│ ────────< 0x08006908      54ca0003       bnel a2, t2, 0x8006918\n│ ╎╎│││││   0x0800690c      90830000       lbu v1, (a0)                ; arg1\n│ └───────< 0x08006910      08001a4b       j .text                     ; RELOC 32 .text @ 0x08000070\n│  ╎│││││   0x08006914      2631ffff       addiu s1, s1, -1\n│  ╎│││││   ; CODE XREF from sym.tcp_packet @ 0x8006908(x)\n│ ────────> 0x08006918      24840001       addiu a0, a0, 1             ; arg1\n│  ╎│││││   0x0800691c      28620002       slti v0, v1, 2\n│  ╎│││││   0x08006920      2468fffe       addiu t0, v1, -2\n│ ┌───────< 0x08006924      1440001f       bnez v0, 0x80069a4\n│ │╎│││││   0x08006928      0223282a       slt a1, s1, v1\n│ ────────< 0x0800692c      14a0001b       bnez a1, 0x800699c\n│ │╎│││││   0x08006930      00000000       nop\n│ ────────< 0x08006934      14c90016       bne a2, t1, .text\n│ │╎│││││   0x08006938      02238823       subu s1, s1, v1\n│ │╎│││││   0x0800693c      2862000a       slti v0, v1, 0xa\n│ │╎│││││   0x08006940      01003821       move a3, t0\n│ ────────< 0x08006944      14400012       bnez v0, .text\n│ │╎│││││   0x08006948      31030007       andi v1, t0, 7\n│ ────────< 0x0800694c      54600013       bnel v1, zero, 0x800699c\n│ │╎│││││   0x08006950      00882021       addu a0, a0, t0             ; arg1\n│ │╎│││││   0x08006954      24840004       addiu a0, a0, 4             ; arg1\n│ │╎│││││   0x08006958      03c02821       move a1, fp\n│ │╎│││││   0x0800695c      00003021       move a2, zero\n│ │╎│││││   ; CODE XREF from sym.tcp_packet @ 0x8006980(x)\n│ ────────> 0x08006960      88920000       lwl s2, (a0)                ; arg1\n│ │╎│││││   0x08006964      24c60008       addiu a2, a2, 8             ; arg3\n│ │╎│││││   0x08006968      00c7182a       slt v1, a2, a3\n│ │╎│││││   0x0800696c      98920003       lwr s2, (var_3h)            ; arg1\n│ │╎│││││   0x08006970      24840008       addiu a0, a0, 8             ; arg1\n│ │╎│││││   0x08006974      00b21023       subu v0, a1, s2             ; arg2\n│ │╎│││││   0x08006978      28420000       slti v0, v0, 0\n│ │╎│││││   0x0800697c      00a2900a       movz s2, a1, v0\n│ ────────< 0x08006980      1460fff7       bnez v1, 0x8006960\n│ │╎│││││   0x08006984      02402821       move a1, s2\n│ ────────< 0x08006988      08001a4f       j .text                     ; RELOC 32 .text @ 0x08000070\n│ │╎│││││   0x0800698c      8fa20068       lw v0, (var_68h)\n│ │││││││   ; CODE XREFS from sym.tcp_packet @ 0x8006934(x), 0x8006944(x)\n│ ─└──────< 0x08006990      08001a4b       j .text                     ; RELOC 32 .text @ 0x08000070\n│ │ │││││   0x08006994      00882021       addu a0, a0, t0             ; arg1\n│ │ │││││   ;-- str._:\n│ │ │││││   ; DATA XREF from sym.tcp_packet @ 0x80068dc(r)\n│ │ │└────> 0x08006998     .string \"_\" ; len=2\n│ │ │ │││   0x0800699a      0005           unaligned\n│ │ │ │││   ; CODE XREFS from sym.tcp_packet @ 0x80068f0(x), 0x800692c(x), 0x800694c(x)\n│ ──└─────> 0x0800699c      5e20ffd8       bgtzl s1, 0x8006900\n│ │   │││   0x080069a0      90860000       lbu a2, (a0)                ; arg1\n│ │   │││   ; CODE XREFS from sym.tcp_packet @ 0x8006850(x), 0x8006900(x), 0x8006924(x)\n│ └─────└─> 0x080069a4      03c09021       move s2, fp\n│     ││    ; CODE XREF from sym.tcp_packet @ 0x800686c(x)\n│     └───> 0x080069a8      8fa20068       lw v0, (var_68h)\n│      │    0x080069ac      8fa50060       lw a1, (var_60h)\n│      │    0x080069b0      24040014       addiu a0, zero, 0x14        ; arg1\n│      │    0x080069b4      72842002       mul a0, s4, a0\n│      │    0x080069b8      00451821       addu v1, v0, a1             ; arg2\n│      │    0x080069bc      7ee20440       ext v0, s7, 0x11, 1\n│      │    0x080069c0      8fa5006c       lw a1, (var_6ch)\n│      │    0x080069c4      00621821       addu v1, v1, v0\n│      │    0x080069c8      7ee20400       ext v0, s7, 0x10, 1\n│      │    0x080069cc      00621821       addu v1, v1, v0\n│      │    0x080069d0      2402fffc       addiu v0, zero, -4\n│      │    0x080069d4      8fb70064       lw s7, (var_64h)\n│      │    0x080069d8      70a23002       mul a2, a1, v0\n│      │    0x080069dc      02648021       addu s0, s3, a0             ; arg1\n│      │    0x080069e0      24840088       addiu a0, a0, 0x88          ; arg1\n│      │    0x080069e4      02643821       addu a3, s3, a0             ; arg4\n│      │    0x080069e8      8fa400b0       lw a0, (arg_b0h)\n│      │    0x080069ec      00c31021       addu v0, a2, v1             ; arg3\n│      │    0x080069f0      8e030090       lw v1, 0x90(s0)\n│      │┌─< 0x080069f4      1460002a       bnez v1, 0x8006aa0\n│      ││   0x080069f8      00448823       subu s1, v0, a0             ; arg1\n│      ││   0x080069fc      8ec2000c       lw v0, (var_ch)\n│      ││   0x08006a00      7c420440       ext v0, v0, 0x11, 1\n│     ┌───< 0x08006a04      1040001f       beqz v0, 0x8006a84\n│     │││   0x08006a08      8fa40064       lw a0, (var_64h)\n│     │││   0x08006a0c      24020001       addiu v0, zero, 1\n│     │││   0x08006a10      02f7100b       movn v0, s7, s7\n│     │││   0x08006a14      ae020090       sw v0, 0x90(s0)\n│     │││   0x08006a18      ae11008c       sw s1, 0x8c(s0)\n│     │││   0x08006a1c      ae110088       sw s1, 0x88(s0)\n│     │││   0x08006a20      8fa500b0       lw a1, (arg_b0h)\n│     │││   0x08006a24      8fa400ac       lw a0, (arg_ach)\n│     │││   0x08006a28      3c020000       lui v.text, 0               ; RELOC 32 .text @ 0x08000070\n│     │││   0x08006a2c      24425f48       addiu v0, v0, 0x5f48        ; RELOC 32 .text @ 0x08000070\n│     │││   0x08006a30      0040f809       jalr v0\n│     │││   0x08006a34      02c03021       move a2, s6\n│     │││   0x08006a38      92020099       lbu v0, 0x99(s0)\n│     │││   0x08006a3c      30420001       andi v0, v0, 1\n│    ┌────< 0x08006a40      10400006       beqz v0, 0x8006a5c\n│    ││││   0x08006a44      24020014       addiu v0, zero, 0x14\n│    ││││   0x08006a48      92a20011       lbu v0, 0x11(s5)\n│    ││││   0x08006a4c      30420001       andi v0, v0, 1\n│   ┌─────< 0x08006a50      54400007       bnel v0, zero, 0x8006a70\n│   │││││   0x08006a54      8ec2000c       lw v0, (var_ch)\n│   │││││   0x08006a58      24020014       addiu v0, zero, 0x14\n│   │││││   ; CODE XREF from sym.tcp_packet @ 0x8006a40(x)\n│   │└────> 0x08006a5c      72821802       mul v1, s4, v0\n│   │ │││   0x08006a60      a2a00010       sb zero, 0x10(s5)\n│   │ │││   0x08006a64      00731021       addu v0, v1, s3\n│   │ │││   0x08006a68      a0400098       sb zero, 0x98(v0)\n│   │ │││   0x08006a6c      8ec2000c       lw v0, (var_ch)\n│   │ │││   ; CODE XREF from sym.tcp_packet @ 0x8006a50(x)\n│   └─────> 0x08006a70      7c420500       ext v0, v0, 0x14, 1\n│    ┌────< 0x08006a74      5440002a       bnel v0, zero, 0x8006b20\n│    ││││   0x08006a78      8ec7000c       lw a3, (var_ch)\n│ ────────< 0x08006a7c      08001b9a       j .text                     ; RELOC 32 .text @ 0x08000070\n│    ││││   0x08006a80      8fa60070       lw a2, (var_70h)\n│    ││││   ; CODE XREF from sym.tcp_packet @ 0x8006a04(x)\n│    │└───> 0x08006a84      24020001       addiu v0, zero, 1\n│    │ ││   0x08006a88      ae110088       sw s1, 0x88(s0)\n│    │ ││   0x08006a8c      0084100b       movn v0, a0, a0\n│    │ ││   0x08006a90      00511821       addu v1, v0, s1\n│    │ ││   0x08006a94      ae03008c       sw v1, 0x8c(s0)\n│ ────────< 0x08006a98      08001aab       j .text                     ; RELOC 32 .text @ 0x08000070\n│    │ ││   0x08006a9c      ae020090       sw v0, 0x90(s0)\n│    │ ││   ; CODE XREF from sym.tcp_packet @ 0x80069f4(x)\n│    │ │└─> 0x08006aa0      926300b0       lbu v1, 0xb0(s3)\n│    │ │    0x08006aa4      24040001       addiu a0, zero, 1           ; arg1\n│    │ │┌─< 0x08006aa8      14640005       bne v1, a0, str.Tb          ; 0x8006ac0 ; \"Tb\"\n│    │ ││   0x08006aac      24020002       addiu v0, zero, 2\n│    │┌───< 0x08006ab0      12800008       beqz s4, 0x8006ad4\n│    ││││   0x08006ab4      24020014       addiu v0, zero, 0x14\n│ ────────< 0x08006ab8      08001aac       j .text                     ; RELOC 32 .text @ 0x08000070\n│    ││││   0x08006abc      8ec7000c       lw a3, (var_ch)\n│    ││││   ;-- str.Tb:\n│    ││││   ; DATA XREF from sym.tcp_packet @ 0x8006aa8(r)\n│    │││└─> 0x08006ac0     .string \"Tb\" ; len=2\n│    │││    0x08006ac2      0017           unaligned\n│    │││    0x08006ac4      8ec7000c       lw a3, (var_ch)\n│    │││┌─< 0x08006ac8      56840015       bnel s4, a0, 0x8006b20\n│    ││││   0x08006acc      8ec7000c       lw a3, (var_ch)\n│    ││││   0x08006ad0      24020014       addiu v0, zero, 0x14\n│    ││││   ; CODE XREF from sym.tcp_packet @ 0x8006ab0(x)\n│    │└───> 0x08006ad4      72822002       mul a0, s4, v0\n│    │ ││   0x08006ad8      00931821       addu v1, a0, s3             ; arg1\n│    │ ││   0x08006adc      8c620088       lw v0, 0x88(v1)\n│    │ ││   0x08006ae0      00511023       subu v0, v0, s1\n│    │┌───< 0x08006ae4      0443000e       bgezl v0, 0x8006b20\n│    ││││   0x08006ae8      8ec7000c       lw a3, (var_ch)\n│    ││││   0x08006aec      8fa50064       lw a1, (var_64h)\n│    ││││   0x08006af0      24020001       addiu v0, zero, 1\n│    ││││   0x08006af4      ac71008c       sw s1, 0x8c(v1)\n│    ││││   0x08006af8      00a5100b       movn v0, a1, a1\n│    ││││   0x08006afc      ac620090       sw v0, 0x90(v1)\n│    ││││   0x08006b00      ac710088       sw s1, 0x88(v1)\n│    ││││   0x08006b04      8fa500b0       lw a1, (arg_b0h)\n│    ││││   0x08006b08      8fa400ac       lw a0, (arg_ach)\n│    ││││   0x08006b0c      3c020000       lui v.text, 0               ; RELOC 32 .text @ 0x08000070\n│    ││││   0x08006b10      24425f48       addiu v0, v0, 0x5f48        ; RELOC 32 .text @ 0x08000070\n│    ││││   0x08006b14      0040f809       jalr v0\n│    ││││   0x08006b18      02c03021       move a2, s6\n│    ││││   0x08006b1c      8ec7000c       lw a3, (var_ch)\n│    ││││   ; CODE XREFS from sym.tcp_packet @ 0x8006a74(x), 0x8006ac0(x), 0x8006ac8(x), 0x8006ae4(x)\n│    └└─└─> 0x08006b20      7ce20500       ext v0, a3, 0x14, 1\n│      │┌─< 0x08006b24      50400008       beql v0, zero, 0x8006b48\n│      ││   0x08006b28      8eb20000       lw s2, (s5)\n│      ││   0x08006b2c      3c030014       lui v1, 0x14\n│      ││   0x08006b30      00e31024       and v0, a3, v1              ; arg4\n│     ┌───< 0x08006b34      14430006       bne v0, v1, 0x8006b50\n│     │││   0x08006b38      8fa60060       lw a2, (var_60h)\n│    ┌────< 0x08006b3c      17c00004       bnez fp, 0x8006b50\n│    ││││   0x08006b40      00000000       nop\n│    ││││   0x08006b44      8eb20000       lw s2, (s5)\n│    ││││   ; CODE XREF from sym.tcp_packet @ 0x8006b24(x)\n│    │││└─> 0x08006b48      0240f021       move fp, s2\n│    │││    0x08006b4c      8fa60060       lw a2, (var_60h)\n│    │││    ; CODE XREFS from sym.tcp_packet @ 0x8006b34(x), 0x8006b3c(x)\n│    └└─┌─< 0x08006b50      14d10010       bne a2, s1, 0x8006b94\n│      ││   0x08006b54      24020014       addiu v0, zero, 0x14\n│      ││   0x08006b58      7ce20480       ext v0, a3, 0x12, 1\n│     ┌───< 0x08006b5c      10400007       beqz v0, 0x8006b7c\n│     │││   0x08006b60      24020014       addiu v0, zero, 0x14\n│    ┌────< 0x08006b64      14c0000b       bnez a2, 0x8006b94\n│    ││││   0x08006b68      8fb10060       lw s1, (var_60h)\n│    ││││   0x08006b6c      926300b0       lbu v1, 0xb0(s3)\n│    ││││   0x08006b70      24020001       addiu v0, zero, 1\n│   ┌─────< 0x08006b74      14620007       bne v1, v0, 0x8006b94\n│   │││││   0x08006b78      24020014       addiu v0, zero, 0x14\n│   │││││   ; CODE XREF from sym.tcp_packet @ 0x8006b5c(x)\n│   ││└───> 0x08006b7c      72821802       mul v1, s4, v0\n│   ││ ││   0x08006b80      00731021       addu v0, v1, s3\n│   ││ ││   0x08006b84      8c420088       lw v0, 0x88(v0)\n│   ││ ││   0x08006b88      afa20060       sw v0, (var_60h)\n│   ││ ││   0x08006b8c      00408821       move s1, v0\n│   ││ ││   0x08006b90      24020014       addiu v0, zero, 0x14\n│   ││ ││   ; CODE XREFS from sym.tcp_packet @ 0x8006b50(x), 0x8006b64(x), 0x8006b74(x)\n│   └└──└─> 0x08006b94      72821802       mul v1, s4, v0\n│      │    0x08006b98      8fa40060       lw a0, (var_60h)\n│      │    0x08006b9c      00732821       addu a1, v1, s3             ; arg2\n│      │    0x08006ba0      8ca2008c       lw v0, 0x8c(a1)             ; arg2\n│      │    0x08006ba4      00021027       nor v0, zero, v0\n│      │    0x08006ba8      00441021       addu v0, v0, a0             ; arg1\n│      │┌─< 0x08006bac      0441007b       bgez v0, 0x8006d9c\n│      ││   0x08006bb0      24020014       addiu v0, zero, 0x14\n│      ││   0x08006bb4      8ca20088       lw v0, 0x88(a1)             ; arg2\n│      ││   0x08006bb8      8ea30008       lw v1, 8(s5)\n│      ││   0x08006bbc      2442ffff       addiu v0, v0, -1\n│      ││   0x08006bc0      00431023       subu v0, v0, v1\n│      ││   0x08006bc4      00511023       subu v0, v0, s1\n│     ┌───< 0x08006bc8      04410074       bgez v0, 0x8006d9c\n│     │││   0x08006bcc      24020014       addiu v0, zero, 0x14\n│     │││   0x08006bd0      8ea60000       lw a2, (s5)\n│     │││   0x08006bd4      00061027       nor v0, zero, a2\n│     │││   0x08006bd8      00521021       addu v0, v0, s2\n│    ┌────< 0x08006bdc      0441006f       bgez v0, 0x8006d9c\n│    ││││   0x08006be0      24020014       addiu v0, zero, 0x14\n│    ││││   0x08006be4      8ca40090       lw a0, 0x90(a1)             ; arg2\n│    ││││   0x08006be8      3c020001       lui v0, 1\n│    ││││   0x08006bec      344201d0       ori v0, v0, 0x1d0\n│    ││││   0x08006bf0      0082182b       sltu v1, a0, v0\n│    ││││   0x08006bf4      0083100a       movz v0, a0, v1\n│    ││││   0x08006bf8      24c3ffff       addiu v1, a2, -1            ; arg3\n│    ││││   0x08006bfc      00621823       subu v1, v1, v0\n│    ││││   0x08006c00      00721823       subu v1, v1, s2\n│   ┌─────< 0x08006c04      04610065       bgez v1, 0x8006d9c\n│   │││││   0x08006c08      24020014       addiu v0, zero, 0x14\n│   │││││   0x08006c0c      7ce20440       ext v0, a3, 0x11, 1\n│  ┌──────< 0x08006c10      14400005       bnez v0, 0x8006c28\n│  ││││││   0x08006c14      025e1023       subu v0, s2, fp\n│  ││││││   0x08006c18      90a20098       lbu v0, 0x98(a1)            ; arg2\n│  ││││││   0x08006c1c      8fa50064       lw a1, (var_64h)\n│  ││││││   0x08006c20      0045b804       sllv s7, a1, v0             ; arg2\n│  ││││││   0x08006c24      025e1023       subu v0, s2, fp\n│  ││││││   ; CODE XREF from sym.tcp_packet @ 0x8006c10(x)\n│  └──────> 0x08006c28      00571821       addu v1, v0, s7\n│   │││││   0x08006c2c      0083102b       sltu v0, a0, v1\n│  ┌──────< 0x08006c30      10400005       beqz v0, 0x8006c48\n│  ││││││   0x08006c34      24020014       addiu v0, zero, 0x14\n│  ││││││   0x08006c38      72822002       mul a0, s4, v0\n│  ││││││   0x08006c3c      00931021       addu v0, a0, s3             ; arg1\n│  ││││││   0x08006c40      ac430090       sw v1, 0x90(v0)\n│  ││││││   0x08006c44      24020014       addiu v0, zero, 0x14\n│  ││││││   ; CODE XREF from sym.tcp_packet @ 0x8006c30(x)\n│  └──────> 0x08006c48      72822002       mul a0, s4, v0\n│   │││││   0x08006c4c      00931821       addu v1, a0, s3             ; arg1\n│   │││││   0x08006c50      8c620088       lw v0, 0x88(v1)\n│   │││││   0x08006c54      00511023       subu v0, v0, s1\n│  ┌──────< 0x08006c58      04430006       bgezl v0, 0x8006c74\n│  ││││││   0x08006c5c      8ec2000c       lw v0, (var_ch)\n│  ││││││   0x08006c60      90620099       lbu v0, 0x99(v1)\n│  ││││││   0x08006c64      ac710088       sw s1, 0x88(v1)\n│  ││││││   0x08006c68      34420010       ori v0, v0, 0x10\n│  ││││││   0x08006c6c      a0620099       sb v0, 0x99(v1)\n│  ││││││   0x08006c70      8ec2000c       lw v0, (var_ch)\n│  ││││││   ; CODE XREF from sym.tcp_packet @ 0x8006c58(x)\n│  └──────> 0x08006c74      7c420500       ext v0, v0, 0x14, 1\n│  ┌──────< 0x08006c78      1040000f       beqz v0, 0x8006cb8\n│  ││││││   0x08006c7c      24020014       addiu v0, zero, 0x14\n│  ││││││   0x08006c80      72822002       mul a0, s4, v0\n│  ││││││   0x08006c84      00931821       addu v1, a0, s3             ; arg1\n│  ││││││   0x08006c88      90640099       lbu a0, 0x99(v1)\n│  ││││││   0x08006c8c      30820020       andi v0, a0, 0x20           ; arg1\n│ ┌───────< 0x08006c90      54400004       bnel v0, zero, 0x8006ca4\n│ │││││││   0x08006c94      8c620094       lw v0, 0x94(v1)\n│ │││││││   0x08006c98      34820020       ori v0, a0, 0x20            ; arg1\n│ ────────< 0x08006c9c      08001b10       j .text                     ; RELOC 32 .text @ 0x08000070\n│ │││││││   0x08006ca0      a0620099       sb v0, 0x99(v1)\n│ │││││││   ; CODE XREF from sym.tcp_packet @ 0x8006c90(x)\n│ └───────> 0x08006ca4      005e1023       subu v0, v0, fp\n│ ┌───────< 0x08006ca8      04410003       bgez v0, 0x8006cb8\n│ │││││││   0x08006cac      24020014       addiu v0, zero, 0x14\n│ │││││││   0x08006cb0      ac7e0094       sw fp, 0x94(v1)\n│ │││││││   0x08006cb4      24020014       addiu v0, zero, 0x14\n│ │││││││   ; CODE XREFS from sym.tcp_packet @ 0x8006c78(x), 0x8006ca8(x)\n│ └└──────> 0x08006cb8      72821802       mul v1, s4, v0\n│   │││││   0x08006cbc      00731021       addu v0, v1, s3\n│   │││││   0x08006cc0      8c43008c       lw v1, 0x8c(v0)\n│   │││││   0x08006cc4      00711023       subu v0, v1, s1\n│  ┌──────< 0x08006cc8      04430006       bgezl v0, 0x8006ce4\n│  ││││││   0x08006ccc      8ea20004       lw v0, 4(s5)\n│  ││││││   0x08006cd0      8ea20008       lw v0, 8(s5)\n│  ││││││   0x08006cd4      00431023       subu v0, v0, v1\n│  ││││││   0x08006cd8      00511021       addu v0, v0, s1\n│  ││││││   0x08006cdc      aea20008       sw v0, 8(s5)\n│  ││││││   0x08006ce0      8ea20004       lw v0, 4(s5)\n│  ││││││   ; CODE XREF from sym.tcp_packet @ 0x8006cc8(x)\n│  └──────> 0x08006ce4      02f21821       addu v1, s7, s2\n│   │││││   0x08006ce8      2442ffff       addiu v0, v0, -1\n│   │││││   0x08006cec      00431023       subu v0, v0, v1\n│  ┌──────< 0x08006cf0      04430006       bgezl v0, 0x8006d0c\n│  ││││││   0x08006cf4      8ea20000       lw v0, (s5)\n│ ┌───────< 0x08006cf8      16e00003       bnez s7, 0x8006d08\n│ │││││││   0x08006cfc      aea30004       sw v1, 4(s5)\n│ │││││││   0x08006d00      24620001       addiu v0, v1, 1\n│ │││││││   0x08006d04      aea20004       sw v0, 4(s5)\n│ │││││││   ; CODE XREF from sym.tcp_packet @ 0x8006cf8(x)\n│ └───────> 0x08006d08      8ea20000       lw v0, (s5)\n│  ││││││   ; CODE XREF from sym.tcp_packet @ 0x8006cf0(x)\n│ ┌└──────> 0x08006d0c      17c20005       bne fp, v0, 0x8006d24\n│ │ │││││   0x08006d10      8fa40070       lw a0, (var_70h)\n│ │ │││││   0x08006d14      92a20011       lbu v0, 0x11(s5)\n│ │ │││││   0x08006d18      304200ef       andi v0, v0, 0xef\n│ │ │││││   0x08006d1c      a2a20011       sb v0, 0x11(s5)\n│ │ │││││   0x08006d20      8fa40070       lw a0, (var_70h)\n│ │ │││││   ; CODE XREF from sym.tcp_packet @ 0x8006d0c(x)\n│ └───────> 0x08006d24      24020003       addiu v0, zero, 3\n│  ┌──────< 0x08006d28      1482006b       bne a0, v0, 0x8006ed8\n│  ││││││   0x08006d2c      8fa60070       lw a2, (var_70h)\n│  ││││││   0x08006d30      926200b1       lbu v0, 0xb1(s3)\n│ ┌───────< 0x08006d34      14540012       bne v0, s4, 0x8006d80\n│ │││││││   0x08006d38      8fa60060       lw a2, (var_60h)\n│ │││││││   0x08006d3c      8e6200b4       lw v0, 0xb4(s3)\n│ │││││││   0x08006d40      8fa50060       lw a1, (var_60h)\n│ ────────< 0x08006d44      5445000f       bnel v0, a1, 0x8006d84\n│ │││││││   0x08006d48      ae7e00b8       sw fp, 0xb8(s3)\n│ │││││││   0x08006d4c      8e6200b8       lw v0, 0xb8(s3)\n│ ────────< 0x08006d50      545e000c       bnel v0, fp, 0x8006d84\n│ │││││││   0x08006d54      ae7e00b8       sw fp, 0xb8(s3)\n│ │││││││   0x08006d58      8e6200bc       lw v0, 0xbc(s3)\n│ ────────< 0x08006d5c      54510009       bnel v0, s1, 0x8006d84\n│ │││││││   0x08006d60      ae7e00b8       sw fp, 0xb8(s3)\n│ │││││││   0x08006d64      966200c0       lhu v0, 0xc0(s3)\n│ ────────< 0x08006d68      54570006       bnel v0, s7, 0x8006d84\n│ │││││││   0x08006d6c      ae7e00b8       sw fp, 0xb8(s3)\n│ │││││││   0x08006d70      926200b2       lbu v0, 0xb2(s3)\n│ │││││││   0x08006d74      24420001       addiu v0, v0, 1\n│ ────────< 0x08006d78      08001b99       j .text                     ; RELOC 32 .text @ 0x08000070\n│ │││││││   0x08006d7c      a26200b2       sb v0, 0xb2(s3)\n│ │││││││   ; CODE XREF from sym.tcp_packet @ 0x8006d34(x)\n│ └───────> 0x08006d80      ae7e00b8       sw fp, 0xb8(s3)\n│  ││││││   ; CODE XREFS from sym.tcp_packet @ 0x8006d44(x), 0x8006d50(x), 0x8006d5c(x), 0x8006d68(x)\n│ ────────> 0x08006d84      ae7100bc       sw s1, 0xbc(s3)\n│  ││││││   0x08006d88      ae6600b4       sw a2, 0xb4(s3)\n│  ││││││   0x08006d8c      a67700c0       sh s7, 0xc0(s3)\n│  ││││││   0x08006d90      a27400b1       sb s4, 0xb1(s3)\n│ ────────< 0x08006d94      08001b99       j .text                     ; RELOC 32 .text @ 0x08000070\n│  ││││││   0x08006d98      a26000b2       sb zero, 0xb2(s3)\n│  ││││││   ; CODE XREFS from sym.tcp_packet @ 0x8006bac(x), 0x8006bc8(x), 0x8006bdc(x), 0x8006c04(x)\n│  │└└└─└─> 0x08006d9c      72821802       mul v1, s4, v0\n│  │   │    0x08006da0      00731021       addu v0, v1, s3\n│  │   │    0x08006da4      90420099       lbu v0, 0x99(v0)\n│  │   │    0x08006da8      30420008       andi v0, v0, 8\n│  │   │┌─< 0x08006dac      1440004a       bnez v0, 0x8006ed8\n│  │   ││   0x08006db0      8fa60070       lw a2, (var_70h)\n│  │   ││   0x08006db4      3c020000       lui v.bss, 0                ; RELOC 32 .bss @ 0x08009f60\n│  │   ││   0x08006db8      8c420270       lw v0, 0x270(v0)            ; RELOC 32 .bss @ 0x08009f60\n│  │  ┌───< 0x08006dbc      54400047       bnel v0, zero, 0x8006edc\n│  │  │││   0x08006dc0      a27400b1       sb s4, 0xb1(s3)\n│  │  │││   0x08006dc4      3c020000       lui vinit_net, 0            ; RELOC 32 init_net\n│  │  │││   ;-- reloc.init_net:\n│  │  │││   0x08006dc8      8c4301e4       lw v1, 0x1e4(v0)            ; RELOC 32 init_net\n│  │  │││   0x08006dcc      24020006       addiu v0, zero, 6\n│  │ ┌────< 0x08006dd0      10620003       beq v1, v0, net_ratelimit\n│  │ ││││   0x08006dd4      240200ff       addiu v0, zero, 0xff\n│  │┌─────< 0x08006dd8      146200b5       bne v1, v0, reloc.local_bh_enable ; 0x80070b0 ; \"$B\"\n│  ││││││   0x08006ddc      3c020000       lui vlocal_bh_enable, 0     ; RELOC 32 local_bh_enable\n│  ││││││   ; CODE XREF from sym.tcp_packet @ 0x8006dd0(x)\n│  ││└────> 0x08006de0      3c020000       lui vnet_ratelimit, 0       ; RELOC 32 net_ratelimit\n│  ││ │││   0x08006de4      24420000       addiu v0, v0, 0             ; RELOC 32 net_ratelimit\n│  ││ │││   0x08006de8      0040f809       jalr v0\n│  ││ │││   0x08006dec      00000000       nop\n│  ││┌────< 0x08006df0      104000af       beqz v0, reloc.local_bh_enable ; 0x80070b0 ; \"$B\"\n│  ││││││   0x08006df4      3c020000       lui vlocal_bh_enable, 0     ; RELOC 32 local_bh_enable\n│  ││││││   0x08006df8      24020014       addiu v0, zero, 0x14\n│  ││││││   0x08006dfc      72821802       mul v1, s4, v0\n│  ││││││   0x08006e00      8fa50060       lw a1, (var_60h)\n│  ││││││   0x08006e04      00732021       addu a0, v1, s3             ; arg1\n│  ││││││   0x08006e08      8c82008c       lw v0, 0x8c(a0)             ; arg1\n│  ││││││   0x08006e0c      00021027       nor v0, zero, v0\n│  ││││││   0x08006e10      00451021       addu v0, v0, a1             ; arg2\n│ ┌───────< 0x08006e14      04400003       bltz v0, 0x8006e24\n│ │││││││   0x08006e18      3c020000       lui v$LC10, 0               ; RELOC 32 $LC10 @ 0x08008370\n│ ────────< 0x08006e1c      08001b8a       j .text                     ; RELOC 32 .text @ 0x08000070\n│ │││││││   ;-- reloc._LC10:\n│ │││││││   0x08006e20      24430000       addiu v1, v0, 0             ; RELOC 32 $LC10 @ 0x08008370\n│ │││││││   ; CODE XREF from sym.tcp_packet @ 0x8006e14(x)\n│ └───────> 0x08006e24      8c820088       lw v0, 0x88(a0)             ; arg1\n│  ││││││   0x08006e28      8ea30008       lw v1, 8(s5)\n│  ││││││   0x08006e2c      2442ffff       addiu v0, v0, -1\n│  ││││││   0x08006e30      00431023       subu v0, v0, v1\n│  ││││││   0x08006e34      00511023       subu v0, v0, s1\n│ ┌───────< 0x08006e38      04400003       bltz v0, 0x8006e48\n│ │││││││   0x08006e3c      3c020000       lui v$LC11, 0               ; RELOC 32 $LC11 @ 0x080083b0\n│ ────────< 0x08006e40      08001b8a       j .text                     ; RELOC 32 .text @ 0x08000070\n│ │││││││   ;-- reloc._LC11:\n│ │││││││   0x08006e44      24430000       addiu v1, v0, 0             ; RELOC 32 $LC11 @ 0x080083b0\n│ │││││││   ; CODE XREF from sym.tcp_packet @ 0x8006e38(x)\n│ └───────> 0x08006e48      8ea50000       lw a1, (s5)\n│  ││││││   0x08006e4c      00051027       nor v0, zero, a1\n│  ││││││   0x08006e50      00521021       addu v0, v0, s2\n│ ┌───────< 0x08006e54      04400003       bltz v0, 0x8006e64\n│ │││││││   0x08006e58      3c020000       lui v$LC12, 0               ; RELOC 32 $LC12 @ 0x080083f0\n│ ────────< 0x08006e5c      08001b8a       j .text                     ; RELOC 32 .text @ 0x08000070\n│ │││││││   ;-- reloc._LC12:\n│ │││││││   0x08006e60      24430000       addiu v1, v0, 0             ; RELOC 32 $LC12 @ 0x080083f0\n│ │││││││   ; CODE XREF from sym.tcp_packet @ 0x8006e54(x)\n│ └───────> 0x08006e64      8c820090       lw v0, 0x9(arg_ach)         ; arg1\n│  ││││││   0x08006e68      3c030001       lui v1, 1\n│  ││││││   0x08006e6c      346301d0       ori v1, v1, 0x1d0\n│  ││││││   0x08006e70      0043202b       sltu a0, v0, v1\n│  ││││││   0x08006e74      0044180a       movz v1, v0, a0\n│  ││││││   0x08006e78      00a31823       subu v1, a1, v1             ; arg2\n│  ││││││   0x08006e7c      007e1823       subu v1, v1, fp\n│ ┌───────< 0x08006e80      04620004       bltzl v1, reloc._LC14\n│ │││││││   0x08006e84      3c020000       lui v$LC14, 0               ; RELOC 32 $LC14 @ 0x08008464\n│ │││││││   0x08006e88      3c020000       lui v$LC13, 0               ; RELOC 32 $LC13 @ 0x08008428\n│ ────────< 0x08006e8c      08001b8a       j .text                     ; RELOC 32 .text @ 0x08000070\n│ │││││││   ;-- reloc._LC13:\n│ │││││││   0x08006e90      24430000       addiu v1, v0, 0             ; RELOC 32 $LC13 @ 0x08008428\n│ │││││││   ;-- reloc._LC14:\n│ │││││││   ; CODE XREF from sym.tcp_packet @ 0x8006e80(x)\n│ └───────> 0x08006e94      24430000       addiu v1, v0, 0             ; RELOC 32 $LC14 @ 0x08008464\n│  ││││││   0x08006e98      3c020000       lui v$LC15, 0               ; RELOC 32 $LC15 @ 0x08008468\n│  ││││││   ;-- reloc._LC15:\n│  ││││││   0x08006e9c      24420000       addiu v0, v0, 0             ; RELOC 32 $LC15 @ 0x08008468\n│  ││││││   0x08006ea0      8fa4007c       lw a0, (var_7ch)\n│  ││││││   0x08006ea4      8fa600ac       lw a2, (arg_ach)\n│  ││││││   0x08006ea8      afa20018       sw v0, (var_18h)\n│  ││││││   0x08006eac      3c020000       lui vnf_log_packet, 0       ; RELOC 32 nf_log_packet\n│  ││││││   0x08006eb0      00002821       move a1, zero\n│  ││││││   0x08006eb4      00003821       move a3, zero\n│  ││││││   0x08006eb8      afa3001c       sw v1, (var_1ch)\n│  ││││││   0x08006ebc      afa00010       sw zero, (var_10h)\n│  ││││││   0x08006ec0      24420000       addiu v0, v0, 0             ; RELOC 32 nf_log_packet\n│  ││││││   0x08006ec4      0040f809       jalr v0\n│  ││││││   0x08006ec8      afa00014       sw zero, (var_14h)\n│ ────────< 0x08006ecc      08001c10       j .text                     ; RELOC 32 .text @ 0x08000070\n│  ││││││   0x08006ed0      3c020000       lui vlocal_bh_enable, 0     ; RELOC 32 local_bh_enable\n│  ││││││   ; CODE XREF from sym.tcp_packet @ 0x800680c(x)\n│ ────────> 0x08006ed4      8fa60070       lw a2, (var_70h)\n│  ││││││   ; CODE XREFS from sym.tcp_packet @ 0x8006d28(x), 0x8006dac(x)\n│  └────└─> 0x08006ed8      a27400b1       sb s4, 0xb1(s3)\n│   ││││    ; CODE XREF from sym.tcp_packet @ 0x8006dbc(x)\n│   ││└───> 0x08006edc      a26600b3       sb a2, 0xb3(s3)\n│   ││ │    0x08006ee0      8fa20078       lw v0, (var_78h)\n│   ││ │    0x08006ee4      a26200b0       sb v0, 0xb0(s3)\n│   ││ │    0x08006ee8      8fa30074       lw v1, (var_74h)\n│   ││ │┌─< 0x08006eec      1062000a       beq v1, v0, .data\n│   ││ ││   0x08006ef0      8fa40078       lw a0, (var_78h)\n│   ││ ││   0x08006ef4      24020004       addiu v0, zero, 4\n│   ││┌───< 0x08006ef8      14820008       bne a0, v0, .data\n│   │││││   0x08006efc      3c020000       lui v.data, 0               ; RELOC 32 .data @ 0x080092d0\n│   │││││   0x08006f00      24030014       addiu v1, zero, 0x14\n│   │││││   0x08006f04      72831002       mul v0, s4, v1\n│   │││││   0x08006f08      00531821       addu v1, v0, s3\n│   │││││   0x08006f0c      90620099       lbu v0, 0x99(v1)\n│   │││││   0x08006f10      34420004       ori v0, v0, 4\n│   │││││   0x08006f14      a0620099       sb v0, 0x99(v1)\n│   │││││   ; CODE XREF from sym.tcp_packet @ 0x8006eec(x)\n│   ││││└─> 0x08006f18      3c020000       lui v.data, 0               ; RELOC 32 .data @ 0x080092d0\n│   ││││    ; CODE XREF from sym.tcp_packet @ 0x8006ef8(x)\n│   ││└───> 0x08006f1c      8c430434       lw v1, 0x434(v0)            ; RELOC 32 .data @ 0x080092d0\n│   ││ │    0x08006f20      926200b2       lbu v0, 0xb2(s3)\n│   ││ │    0x08006f24      0043102a       slt v0, v0, v1\n│   ││ │┌─< 0x08006f28      5440000d       bnel v0, zero, 0x8006f60\n│   ││ ││   0x08006f2c      926200ad       lbu v0, 0xad(s3)\n│   ││ ││   0x08006f30      8fa40078       lw a0, (var_78h)\n│   ││ ││   0x08006f34      3c020000       lui v.data, 0               ; RELOC 32 .data @ 0x080092d0\n│   ││ ││   0x08006f38      24420400       addiu v0, v0, 0x400         ; RELOC 32 .data @ 0x080092d0\n│   ││ ││   0x08006f3c      00041880       sll v1, a0, 2               ; arg1\n│   ││ ││   0x08006f40      00621821       addu v1, v1, v0\n│   ││ ││   0x08006f44      3c020000       lui v.data, 0               ; RELOC 32 .data @ 0x080092d0\n│   ││ ││   0x08006f48      8c500428       lw s0, 0x428(v0)            ; RELOC 32 .data @ 0x080092d0\n│   ││ ││   0x08006f4c      8c620000       lw v0, (v1)\n│   ││ ││   0x08006f50      0202102b       sltu v0, s0, v0\n│   ││┌───< 0x08006f54      14400019       bnez v0, local_bh_enable\n│   │││││   0x08006f58      3c020000       lui vlocal_bh_enable, 0     ; RELOC 32 local_bh_enable\n│   │││││   0x08006f5c      926200ad       lbu v0, 0xad(s3)\n│   │││││   ; CODE XREF from sym.tcp_packet @ 0x8006f28(x)\n│   ││││└─> 0x08006f60      92630099       lbu v1, 0x99(s3)\n│   ││││    0x08006f64      00431025       or v0, v0, v1\n│   ││││    0x08006f68      30420010       andi v0, v0, 0x10\n│   ││││┌─< 0x08006f6c      1040000d       beqz v0, .data\n│   │││││   0x08006f70      8fa60078       lw a2, (var_78h)\n│   │││││   0x08006f74      8fa50078       lw a1, (var_78h)\n│   │││││   0x08006f78      3c020000       lui v.data, 0               ; RELOC 32 .data @ 0x080092d0\n│   │││││   0x08006f7c      24420400       addiu v0, v0, 0x400         ; RELOC 32 .data @ 0x080092d0\n│   │││││   0x08006f80      00051880       sll v1, a1, 2               ; arg2\n│   │││││   0x08006f84      00621821       addu v1, v1, v0\n│   │││││   0x08006f88      3c020000       lui v.data, 0               ; RELOC 32 .data @ 0x080092d0\n│   │││││   0x08006f8c      8c50042c       lw s0, 0x42c(v0)            ; RELOC 32 .data @ 0x080092d0\n│   │││││   0x08006f90      8c620000       lw v0, (v1)\n│   │││││   0x08006f94      0202102b       sltu v0, s0, v0\n│  ┌──────< 0x08006f98      14400008       bnez v0, local_bh_enable\n│  ││││││   0x08006f9c      3c020000       lui vlocal_bh_enable, 0     ; RELOC 32 local_bh_enable\n│  ││││││   0x08006fa0      8fa60078       lw a2, (var_78h)\n│  ││││││   ; CODE XREF from sym.tcp_packet @ 0x8006f6c(x)\n│  │││││└─> 0x08006fa4      3c020000       lui v.data, 0               ; RELOC 32 .data @ 0x080092d0\n│  │││││    0x08006fa8      24420400       addiu v0, v0, 0x400         ; RELOC 32 .data @ 0x080092d0\n│  │││││    0x08006fac      00061880       sll v1, a2, 2               ; arg3\n│  │││││    0x08006fb0      00621821       addu v1, v1, v0\n│  │││││    0x08006fb4      8c700000       lw s0, (v1)\n│  │││││    0x08006fb8      3c020000       lui vlocal_bh_enable, 0     ; RELOC 32 local_bh_enable\n│  │││││    ; CODE XREFS from sym.tcp_packet @ 0x8006f54(x), 0x8006f98(x)\n│  └──└───> 0x08006fbc      24420000       addiu v0, v0, 0             ; RELOC 32 local_bh_enable\n│   ││ │    0x08006fc0      0040f809       jalr v0\n│   ││ │    0x08006fc4      00000000       nop\n│   ││ │    0x08006fc8      8e620064       lw v0, 0x64(s3)\n│   ││ │    0x08006fcc      30420002       andi v0, v0, 2\n│   ││ │┌─< 0x08006fd0      1440000e       bnez v0, 0x800700c\n│   ││ ││   0x08006fd4      26630064       addiu v1, s3, 0x64\n│   ││ ││   0x08006fd8      8ec2000c       lw v0, (var_ch)\n│   ││ ││   0x08006fdc      7c420480       ext v0, v0, 0x12, 1\n│   ││┌───< 0x08006fe0      5040001e       beql v0, zero, 0x800705c\n│   │││││   0x08006fe4      24020001       addiu v0, zero, 1\n│   │││││   0x08006fe8      8fa500b4       lw a1, (arg_b4h)\n│   │││││   0x08006fec      8fa600ac       lw a2, (arg_ach)\n│   │││││   0x08006ff0      3c020000       lui v__nf_ct_kill_acct, 0   ; RELOC 32 __nf_ct_kill_acct @ 0x08000f3c\n│   │││││   0x08006ff4      02602021       move a0, s3\n│   │││││   ;-- reloc.__nf_ct_kill_acct:\n│   │││││   0x08006ff8      24420000       addiu v0, v0, 0             ; RELOC 32 __nf_ct_kill_acct @ 0x08000f3c\n│   │││││   0x08006ffc      0040f809       jalr v0\n│   │││││   0x08007000      24070001       addiu a3, zero, 1           ; arg4\n│ ────────< 0x08007004      08001c04       j .text                     ; RELOC 32 .text @ 0x08000070\n│   │││││   0x08007008      24020001       addiu v0, zero, 1\n│   │││││   ; CODE XREF from sym.tcp_packet @ 0x8006fd0(x)\n│   ││││└─> 0x0800700c      8e620064       lw v0, 0x64(s3)\n│   ││││    0x08007010      30420004       andi v0, v0, 4\n│   ││││┌─< 0x08007014      14400011       bnez v0, 0x800705c\n│   │││││   0x08007018      24020001       addiu v0, zero, 1\n│   │││││   0x0800701c      8fa40074       lw a0, (var_74h)\n│   │││││   0x08007020      2482fffe       addiu v0, a0, -2            ; arg1\n│   │││││   0x08007024      2c420002       sltiu v0, v0, 2\n│  ┌──────< 0x08007028      1040000c       beqz v0, 0x800705c\n│  ││││││   0x0800702c      24020001       addiu v0, zero, 1\n│  ││││││   0x08007030      8fa50078       lw a1, (var_78h)\n│  ││││││   0x08007034      24020003       addiu v0, zero, 3\n│ ┌───────< 0x08007038      54a20008       bnel a1, v0, 0x800705c\n│ │││││││   0x0800703c      24020001       addiu v0, zero, 1\n│ │││││││   0x08007040      2402ffff       addiu v0, zero, -1\n│ │││││││   ; CODE XREF from sym.tcp_packet @ 0x80070c4(x)\n│ ────────> 0x08007044      c0640000       ll a0, (v1)\n│ │││││││   0x08007048      7c441084       ins a0, v0, 2, 1\n│ │││││││   0x0800704c      e0640000       sc a0, (v1)\n│ ────────< 0x08007050      1080001c       beqz a0, 0x80070c4\n│ │││││││   0x08007054      00000000       nop\n│ │││││││   0x08007058      24020001       addiu v0, zero, 1\n│ │││││││   ; CODE XREFS from sym.tcp_packet @ 0x8006fe0(x), 0x8007014(x), 0x8007028(x), 0x8007038(x)\n│ └└──└─└─> 0x0800705c      8fa500b4       lw a1, (arg_b4h)\n│   ││ │    0x08007060      8fa600ac       lw a2, (arg_ach)\n│   ││ │    0x08007064      afa20010       sw v0, (var_10h)\n│   ││ │    0x08007068      3c020000       lui v__nf_ct_refresh_acct, 0; RELOC 32 __nf_ct_refresh_acct @ 0x08001044\n│   ││ │    0x0800706c      02602021       move a0, s3\n│   ││ │    0x08007070      24420000       addiu v0, v0, 0             ; RELOC 32 __nf_ct_refresh_acct @ 0x08001044\n│   ││ │    0x08007074      0040f809       jalr v0\n│   ││ │    0x08007078      02003821       move a3, s0\n│   ││ │    0x0800707c      24020001       addiu v0, zero, 1\n│   ││ │    ; XREFS: CODE 0x08006658  CODE 0x08006670  CODE 0x080066d4  \n│   ││ │    ; XREFS: CODE 0x080066ec  CODE 0x08006770  CODE 0x08006788  \n│ ─────└──> 0x08007080      8fbf00a4       lw ra, (var_a4h)\n│   ││      0x08007084      8fbe00a0       lw fp, (var_a0h)\n│   ││      0x08007088      8fb7009c       lw s7, (var_9ch)\n│   ││      0x0800708c      8fb60098       lw s6, (var_98h)\n│   ││      0x08007090      8fb50094       lw s5, (var_94h)\n│   ││      0x08007094      8fb40090       lw s4, (var_90h)\n│   ││      0x08007098      8fb3008c       lw s3, (var_8ch)\n│   ││      0x0800709c      8fb20088       lw s2, (var_88h)\n│   ││      0x080070a0      8fb10084       lw s1, (var_84h)\n│   ││      0x080070a4      8fb00080       lw s0, (var_80h)\n│   ││      0x080070a8      03e00008       jr ra\n│   ││      0x080070ac      27bd00a8       addiu sp, sp, 0xa8\n│   ││      ;-- reloc.local_bh_enable:\n│   ││      ; DATA XREFS from sym.tcp_packet @ 0x8006dd8(r), 0x8006df0(r)\n│   └└────> 0x080070b0     .string \"_B\" ; len=2                        ; RELOC 32 local_bh_enable\n│           0x080070b2      0000           unaligned\n│           0x080070b4      0040f809       jalr v0\n│           0x080070b8      00000000       nop\n│ ────────< 0x080070bc      08001c04       j .text                     ; RELOC 32 .text @ 0x08000070\n│           0x080070c0      2402ffff       addiu v0, zero, -1\n│           ; CODE XREF from sym.tcp_packet @ 0x8007050(x)\n│ ────────< 0x080070c4      1000ffdf       b 0x8007044\n└           0x080070c8      00000000       nop", "type": "tool_result"}
{"role": "assistant", "content": "{\n  \"thought\": \"Based on my analysis of the sym.tcp_packet function in nf_conntrack.ko, I have verified the security alert. The key finding is that the calculation for the copy size (iVar2/s1) always results in a very large value (between 4294967276 and 4294967336 bytes) due to the constant 0x3ffffffb in the formula. This size far exceeds any practical skb data length, so the skb_copy_bits operation will always fail, and no stack buffer overflow occurs. The destination buffer at sp+0x34 has 116 bytes available, but the copy never succeeds due to the large size. Therefore, the vulnerability is not exploitable. The alert accurately describes the code structure but overstates the exploitability.\",\n  \"action\": \"finish\",\n  \"action_input\": {\n    \"final_response\": {\n      \"accuracy\": \"inaccurate\",\n      \"vulnerability\": false,\n      \"risk_level\": \"Low\",\n      \"reason\": \"The alert describes a stack buffer overflow in sym.tcp_packet where a crafted TCP options length field leads to a large copy size. However, analysis of the disassembly shows that the copy size calculation iVar2 = ((*(puVar6 + 0xc) >> 0x1c) + 0x3ffffffb) * 4 always produces a value between 4294967276 and 4294967336 bytes (due to the constant 0x3ffffffb and the 4-bit shift result). This size is impossible for any real network packet, as skb data lengths are much smaller. The skb_copy_bits call at address 0x080068b8 will always fail due to insufficient skb data, resulting in no actual copy operation (as checked by the return value at 0x080068c8). Thus, the stack buffer at sp+0x34 (with 116 bytes available) is never overflowed. The vulnerability is not exploitable because the attack chain requires a feasible copy size, which never occurs in practice.\"\n    }\n  },\n  \"status\": \"complete\"\n}"}
